<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/04/12/Golang%20%E8%B8%A9%E5%9D%91/"/>
      <url>/2018/04/12/Golang%20%E8%B8%A9%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">foo1()</span><br><span class="line">foo2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s S)</span> <span class="title">foo1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s S)</span> <span class="title">foo2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">foo1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">foo2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r R)</span> <span class="title">foo1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *R)</span> <span class="title">foo2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s S</span><br><span class="line"><span class="keyword">var</span> si I = s</span><br><span class="line">si.foo1()</span><br><span class="line"></span><br><span class="line">si = &amp;s</span><br><span class="line">si.foo2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t T</span><br><span class="line"><span class="keyword">var</span> ti I = &amp;t</span><br><span class="line">ti.foo1()</span><br><span class="line"><span class="comment">//ti = t 编译报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r R</span><br><span class="line"><span class="keyword">var</span> ri I = &amp;r</span><br><span class="line">ri.foo1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若 T 是一个具体类型，并且想在 T 上实现 接口 I：</p><ul><li>如果将接口的方法绑定到 T 上，那么可以将 T 或者 *T 类型的变量赋值给 I 类型的变量。</li><li>如果将接口的方法绑定到 <em>T 上，那么只能将 </em>T 类型的变量赋值给 I 类型的变量。</li><li>如果将接口的一部分方法绑定到 T 上，一部分绑定到 <em>T 上，那么只能将 </em>T 类型的变量赋值给 I 类型的变量。</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Python 基础编程</title>
      <link href="/2018/03/23/%E3%80%8APython%20%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E3%80%8B/"/>
      <url>/2018/03/23/%E3%80%8APython%20%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><a id="more"></a><ol><li><p>双斜线整除（适用于浮点数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5.2</span> // <span class="number">2.0</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> // <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>乘方运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p><code>str</code>：把值转换为字符串；<code>repr</code>：把值变为合法的 Python 表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">10000L</span>)</span><br><span class="line"><span class="string">'10000'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> str(<span class="number">10000L</span>)</span><br><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(<span class="number">10000L</span>)</span><br><span class="line"><span class="string">'10000L'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> repr(<span class="number">10000L</span>)</span><br><span class="line"><span class="number">10000L</span></span><br></pre></td></tr></table></figure></li><li><p><code>input</code> 和 <code>raw_input</code>：<code>input</code> 假设用户输入的是合法的 Python 表达式（例如字符串需要用引号括起来），而 <code>raw_input</code> 把所有的输入当做字符串处理。</p></li><li><p>长字符串：使用 <code>&#39;&#39;&#39;</code> 三引号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'''hello</span></span><br><span class="line"><span class="string"><span class="meta">... </span>world'''</span></span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></li><li><p>原始字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">r'C:\nowhere'</span></span><br><span class="line">C:\nowhere</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">r"Let's go \n\n"</span></span><br><span class="line">Let<span class="string">'s go \n\n</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-列表和元组"><a href="#2-列表和元组" class="headerlink" title="2. 列表和元组"></a>2. 列表和元组</h2><ol><li><p>分片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = range(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">2</span>:<span class="number">7</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[:]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">5</span>:]</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">-5</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[:<span class="number">6</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">-3</span>:]</span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">-3</span>:<span class="number">2</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[::<span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">9</span>:<span class="number">2</span>:<span class="number">-2</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[::<span class="number">-3</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">5</span>::<span class="number">-3</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[:<span class="number">5</span>:<span class="number">-3</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums[<span class="number">1</span>:<span class="number">5</span>:<span class="number">-1</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>序列相加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] + [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>序列相乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>] * <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>, <span class="number">3</span>] * <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="keyword">None</span>] * <span class="number">10</span></span><br><span class="line">[<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>list</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="string">'hello'</span>)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(list(<span class="string">'hello'</span>))</span><br><span class="line"><span class="string">'hello'</span></span><br></pre></td></tr></table></figure></li><li><p>分片赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = list(<span class="string">'Gil'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">3</span>:] = list(<span class="string">'gamesh'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">[<span class="string">'G'</span>, <span class="string">'i'</span>, <span class="string">'l'</span>, <span class="string">'g'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'h'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">5</span>:<span class="number">5</span>] = [<span class="string">'XYZ'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>NAME</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'NAME'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">[<span class="string">'G'</span>, <span class="string">'i'</span>, <span class="string">'l'</span>, <span class="string">'g'</span>, <span class="string">'a'</span>, <span class="string">'XYZ'</span>, <span class="string">'m'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'h'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[:] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p><code>append</code>：追加元素</p></li><li><p><code>count</code>：统计某个元素出现次数</p></li><li><p><code>extend</code>：在列表末尾一次性追加另一个序列中的多个值。</p></li><li><p><code>index</code>：查找某个值第一个匹配项的索引位置。</p></li><li><p><code>insert</code>：将对象插入到列表指定位置。</p></li><li><p><code>pop</code>：移除元素（默认是最后一个）并返回该元素值。</p></li><li><p><code>remove</code>：移除某个值的第一个匹配项。方法无返回值。</p></li><li><p><code>reverse</code>：反向存放。</p></li><li><p><code>sort</code>：原地排序。方法无返回值。可以传入排序函数参数，以及 <code>key</code> 和 <code>reverse</code> 两个关键字参数。参数 <code>key</code> 指定一个排序过程中使用的函数，用该函数为每个列表元素创建一个键，然后所有元素根据键来排序。<code>reverse</code> 提供一个布尔值，用来指明列表是否需要反向排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.extend(y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.count(<span class="number">7</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.index(<span class="number">6</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.insert(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.pop()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.pop(<span class="number">1</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.remove(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = sorted(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mycmp</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> -cmp(a, b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.sort(mycmp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="string">'abc'</span>, <span class="string">'d'</span>, <span class="string">'ef'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.sort(key=len)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">'d'</span>, <span class="string">'ef'</span>, <span class="string">'abc'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">'abc'</span>, <span class="string">'ef'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure></li><li><p>创建元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[:]</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure></li><li><p>元组的分片还是元组，就像列表的分片还是列表。</p></li><li><p><code>tuple</code> 函数以一个序列作为参数并把它转换为元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(x)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>元组的存在意义：</p><ul><li>在映射中作为键存在（不可变对象）</li><li>作为很多内建函数和方法的返回值</li></ul></li></ol><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3. 字符串"></a>3. 字符串</h2><ol><li><p>字符串常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.digits</span><br><span class="line"><span class="number">0123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.letters</span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.lowercase</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.uppercase</span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.printable</span><br><span class="line"><span class="number">0123456789</span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!<span class="string">"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print string.punctuation</span></span><br><span class="line"><span class="string">&gt;&gt; !"</span><span class="comment">#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`&#123;|&#125;~</span></span><br></pre></td></tr></table></figure></li><li><p><code>find</code> ：查找子串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"My name is Gil"</span>.find(<span class="string">'Gil'</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p><code>replace</code>：替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"My name is Gil"</span>.replace(<span class="string">'Gil'</span>, <span class="string">'Yamato'</span>)</span><br><span class="line"><span class="string">'My name is Yamato'</span></span><br></pre></td></tr></table></figure></li><li><p><code>join</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;+&apos;.join([&apos;1&apos;, &apos;2&apos;, &apos;3&apos;])</span><br><span class="line">&apos;1+2+3&apos;</span><br></pre></td></tr></table></figure></li><li><p><code>split</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1+2+3'</span>.split(<span class="string">'+'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>split</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1+2+3'</span>.split(<span class="string">'+'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>strip</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'      wait for stripping    '</span>.strip()</span><br><span class="line"><span class="string">'wait for stripping'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'      !!!!another case !!!!    '</span>.strip(<span class="string">' !'</span>)</span><br><span class="line"><span class="string">'another case'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-字典"><a href="#4-字典" class="headerlink" title="4. 字典"></a>4. 字典</h2><ol><li><p><code>dict</code> 函数通过其他映射或者键值对的序列建立字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [(<span class="string">'k1'</span>, <span class="string">'k2'</span>), (<span class="string">'v1'</span>, <span class="string">'v2'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(items)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'v1'</span>: <span class="string">'v2'</span>, <span class="string">'k1'</span>: <span class="string">'k2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [(<span class="string">'k1'</span>, <span class="string">'v1'</span>), (<span class="string">'k2'</span>, <span class="string">'v2'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(items)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'k2'</span>: <span class="string">'v2'</span>, <span class="string">'k1'</span>: <span class="string">'v1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'Gil'</span>, age = <span class="number">17</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">17</span>, <span class="string">'name'</span>: <span class="string">'Gil'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的格式化字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%(name)s is %(age)d years old"</span> % d</span><br><span class="line"><span class="string">'Gil is 17 years old'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(d)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear</code> 方法清除字典中所有的项。</p></li><li><p><code>copy</code> 方法返回一个具有相同键值对的新字典（浅复制，深复制需要使用内置的 <code>deepcopy</code> 函数）。</p></li><li><p><code>fromkeys</code> 使用给定的键建立新的字典，每个键都对应一个默认的值 <code>None</code>。</p></li><li><p><code>get</code> 方法按键取值。如果键不存在，则得到 <code>None</code>。可以在方法中传入默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'none'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'none'</span>, <span class="string">'N/A'</span>)</span><br><span class="line"><span class="string">'N/A'</span></span><br></pre></td></tr></table></figure></li><li><p><code>items</code> 方法将字典的所有的项以列表方式返回，列表中的每一项都表示为（键，值）对的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</span><br><span class="line">[(<span class="string">'age'</span>, <span class="number">17</span>), (<span class="string">'name'</span>, <span class="string">'Gil'</span>)]</span><br></pre></td></tr></table></figure></li><li><p><code>iteritems</code> 类似于 <code>items</code>，但是会返回一个迭代器对象而不是列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.iteritems()</span><br><span class="line">&lt;dictionary-itemiterator object at <span class="number">0x10f3ce838</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>keys</code> 方法将字典中的键以列表形式返回，而 <code>iterkeys</code> 则返回针对键的迭代器。</p></li><li><p><code>values</code> 方法以列表的形式返回字典中的值，而 <code>itervalues</code> 返回值的迭代器。与 <code>keys</code> 方法不同的是，<code>values</code> 方法返回的值的列表中可以包含重复的元素。</p></li><li><p><code>pop</code> 方法用来获得对应于给定键的值，然后将这个键值对从字典中移除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'name'</span>)</span><br><span class="line"><span class="string">'Gil'</span></span><br></pre></td></tr></table></figure></li><li><p><code>popitem</code> 弹出一个键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="string">'age'</span>, <span class="number">17</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>setdefault</code> 某种程度上类似于 <code>get</code>，能够获得与给定键相关联的值。除此之外，<code>setdefault</code> 还能在字典中不含有给定键的情况下设定相应的键值。当键不存在时，<code>setdefault</code> 返回默认值并且响应地更新字典。如果键存在，那么就返回与其相应的值，但不更新字典。默认值是可选的，如果不设定，则默认使用 <code>None</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'nobody'</span>, <span class="string">'Adam'</span>)</span><br><span class="line"><span class="string">'Adam'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'nobody'</span>, <span class="string">'Berserker'</span>)</span><br><span class="line"><span class="string">'Adam'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'burning'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>update</code> 方法可以利用一个字典项更新另一个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = &#123;<span class="string">'another'</span>: <span class="string">'zzz'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.update(e)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'nobody'</span>: <span class="string">'Adam'</span>, <span class="string">'another'</span>: <span class="string">'zzz'</span>, <span class="string">'burning'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> k, v</span><br><span class="line">...</span><br><span class="line">nobody Adam</span><br><span class="line">another zzz</span><br><span class="line">burning <span class="keyword">None</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-条件、循环和其他语句"><a href="#5-条件、循环和其他语句" class="headerlink" title="5. 条件、循环和其他语句"></a>5. 条件、循环和其他语句</h2><ol><li><p>序列解包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = y, x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>解包序列中的元素数量必须和放置在赋值符号左边的变量数量完全一致。</p></li><li><p>链式赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = y = somefunc()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">y = somefunc()</span><br><span class="line">x = y</span><br></pre></td></tr></table></figure></li><li><p>下列值在作为布尔表达式的时候，会被解释器看做假：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span>, <span class="keyword">None</span>, <span class="number">0</span>, <span class="string">""</span>, (), [], &#123;&#125;s</span><br></pre></td></tr></table></figure></li><li><p><code>bool</code> 函数可以用来转换其他值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">"I am Gil"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>相等和同一运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == y</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == z</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> y</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> z</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>序列的比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"alpha"</span> &lt; <span class="string">"beta"</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>] &lt; [<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]] &lt; [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>断言：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> <span class="number">0</span> &lt;= age &lt;= <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> age &gt; <span class="number">100</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AssertionError</span><br></pre></td></tr></table></figure></li><li><p><code>zip</code> 函数：并行迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">'anne'</span>, <span class="string">'beth'</span>, <span class="string">'claire'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ages = [<span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(names, ages)</span><br><span class="line">[(<span class="string">'anne'</span>, <span class="number">17</span>), (<span class="string">'beth'</span>, <span class="number">18</span>), (<span class="string">'claire'</span>, <span class="number">19</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(range(<span class="number">5</span>), range(<span class="number">10</span>), xrange(<span class="number">100000</span>))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p><code>zip</code> 可以处理不等长的序列，当最短的序列用完时就会停止。</p></li><li><p><code>enumerage</code> 函数：按索引迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerage(a_list):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span>(item == <span class="string">'xxx'</span>):</span><br><span class="line"><span class="meta">... </span>            a_list[i] = <span class="string">'yyy'</span></span><br></pre></td></tr></table></figure></li><li><p><code>sorted</code> 和 <code>reversed</code>：排序和翻转可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(<span class="string">'Hello, world!'</span>)</span><br><span class="line">[<span class="string">' '</span>, <span class="string">'!'</span>, <span class="string">','</span>, <span class="string">'H'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'w'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(reversed(<span class="string">'Hello, world!'</span>))</span><br><span class="line">[<span class="string">'!'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'w'</span>, <span class="string">' '</span>, <span class="string">','</span>, <span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'H'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(reversed(<span class="string">'Hello, world!'</span>))</span><br><span class="line"><span class="string">'!dlrow ,olleH'</span></span><br></pre></td></tr></table></figure></li><li><p>循环中的 <code>else</code> 字句：仅当循环没有被 <code>break</code> 时执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span>(i == <span class="number">1</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'did not find 1'</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表推导式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x ** x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">27</span>, <span class="number">256</span>, <span class="number">3125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x ** x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>) <span class="keyword">if</span> x &gt; <span class="number">3</span>]</span><br><span class="line">[<span class="number">256</span>, <span class="number">3125</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>del</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = y = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><code>del</code> 只删除引用，而不删除对象本身（由垃圾回收清理）。</p></li><li><p><code>exec</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">exec</span> <span class="string">"print 'Hello, world!'"</span></span><br><span class="line">Hello, world!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">exec</span> <span class="string">'sqrt = 1'</span> <span class="keyword">in</span> scope</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqrt(<span class="number">4</span>)</span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope[<span class="string">'sqrt'</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><code>eval</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope[<span class="string">'x'</span>] = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">exec</span> <span class="string">'y = 3'</span> <span class="keyword">in</span> scope</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'x * y'</span>, scope)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-抽象"><a href="#6-抽象" class="headerlink" title="6. 抽象"></a>6. 抽象</h2><ol><li><p>判断函数是否可调用：<code>callable</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(math.sqrt)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>如果在函数的开头写下字符串，它就会作为函数的一部分进行存储，这称为文档字符串，通过 <code>__doc__</code> 属性访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.sqrt.__doc__</span><br><span class="line"><span class="string">'sqrt(x)\n\nReturn the square root of x.'</span></span><br></pre></td></tr></table></figure></li><li><p>通过 <code>help</code> 函数获取对象的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;help(math.sqrt)</span><br><span class="line">Help on built-<span class="keyword">in</span> function sqrt <span class="keyword">in</span> module math:</span><br><span class="line"></span><br><span class="line">sqrt(...)</span><br><span class="line">    sqrt(x)</span><br><span class="line"></span><br><span class="line">    Return the square root of x.</span><br></pre></td></tr></table></figure></li><li><p>Python 形式上不支持函数重载。</p></li><li><p>位置参数与默认参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name=<span class="string">"Gil"</span>, age=<span class="number">17</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'%s is %d years old.'</span> % (name, age)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo()</span><br><span class="line">Gil <span class="keyword">is</span> <span class="number">17</span> years old.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="string">"Lyn"</span>)</span><br><span class="line">Lyn <span class="keyword">is</span> <span class="number">17</span> years old.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="string">"Allen"</span>, <span class="number">20</span>)</span><br><span class="line">Allen <span class="keyword">is</span> <span class="number">20</span> years old.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(age=<span class="number">25</span>)</span><br><span class="line">Gil <span class="keyword">is</span> <span class="number">25</span> years old.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">20</span>, <span class="string">"Allen"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> foo</span><br><span class="line">TypeError: %d format: a number <span class="keyword">is</span> required, <span class="keyword">not</span> str</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(age=<span class="number">20</span>, name=<span class="string">"Allen"</span>)</span><br><span class="line">Allen <span class="keyword">is</span> <span class="number">20</span> years old.</span><br></pre></td></tr></table></figure></li><li><p>不定参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(argv, *params, **kw)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> argv, params, kw</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, k=<span class="string">'v'</span>, p=<span class="string">'q'</span>)</span><br><span class="line"><span class="number">0</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">'p'</span>: <span class="string">'q'</span>, <span class="string">'k'</span>: <span class="string">'v'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">0</span>, *(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), **&#123;<span class="string">'k'</span>:<span class="string">'v'</span>, <span class="string">'p'</span>:<span class="string">'q'</span>&#125;)</span><br><span class="line"><span class="number">0</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">'p'</span>: <span class="string">'q'</span>, <span class="string">'k'</span>: <span class="string">'v'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), **&#123;<span class="string">'k'</span>:<span class="string">'v'</span>, <span class="string">'p'</span>:<span class="string">'q'</span>&#125;, argv=<span class="number">0</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    foo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), **&#123;<span class="string">'k'</span>:<span class="string">'v'</span>, <span class="string">'p'</span>:<span class="string">'q'</span>&#125;, argv=<span class="number">0</span>)</span><br><span class="line">                                        ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>在和位置参数配合时可能会出问题。</p></li><li><p><code>vars</code> 函数：查看局部作用域字典。</p></li><li><p><code>globals</code> 函数：查看全局作用域字典。</p></li><li><p>函数内部使用 <code>global</code> 声明一个变量为全局变量。</p></li><li><p>闭包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">outermulti</span><span class="params">(factor)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">innermulti</span><span class="params">(number)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> number * factor</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> innermulti</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = outermulti(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">2.33</span>)</span><br><span class="line"><span class="number">23.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outermulti(<span class="number">5</span>)(<span class="number">4</span>)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>函数式编程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(str, range(<span class="number">10</span>))</span><br><span class="line">[<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="string">"foo"</span>, <span class="string">"x41"</span>, <span class="string">"?!"</span>, <span class="string">"***"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">lambda</span> x : x.isalnum(), seq)</span><br><span class="line">[<span class="string">'foo'</span>, <span class="string">'x41'</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-更加抽象"><a href="#7-更加抽象" class="headerlink" title="7. 更加抽象"></a>7. 更加抽象</h2><ol><li><p><code>self</code> 参数事实上正是方法和函数的区别。方法（更专业一点可以称为绑定方法）将他们的第一个参数绑定到所属的实例上。</p></li><li><p>为了让方法或者特性变为私有，只要在它的名字前面加上双下划线。类的内部定义中，所有以双下划线开始的名字都被”翻译“成前面加上单下划线的类名的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__inaccessible</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">print</span> <span class="string">'inaccessible'</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">accessible</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">print</span> <span class="string">'accessible'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.accessible()</span><br><span class="line">accessible</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__inaccessible()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: A instance has no attribute <span class="string">'__inaccessible'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a._A__inaccessible()</span><br><span class="line">inaccessible</span><br></pre></td></tr></table></figure></li><li><p>类的命名空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Incre</span>:</span></span><br><span class="line"><span class="meta">... </span>    n = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            Incre.n += <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = Incre()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.n</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Incre()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.n</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.n = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.n</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>检查继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SubA</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(SubA, A)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubA.__bases__</span><br><span class="line">(&lt;class __main__.A at 0x10f3b5a78&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = SubA()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(x, SubA)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(x, A)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> <span class="title">__main__</span>.<span class="title">SubA</span> <span class="title">at</span> 0<span class="title">x10f3b5b48</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果一个方法从多个超类继承（多个具有相同名字的不同方法），那么先继承的类中的方法会重写后继承的类中的方法。</p></li><li><p>查看对象内所有存储的值，可以使用 <code>__dict__</code> 属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.__dict__</span><br><span class="line">&#123;<span class="string">'accessible'</span>: &lt;function accessible at <span class="number">0x10f3cf578</span>&gt;, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'_A__inaccessible'</span>: &lt;function __inaccessible at <span class="number">0x10f3cfc80</span>&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-异常"><a href="#8-异常" class="headerlink" title="8. 异常"></a>8. 异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    doSomething()</span><br><span class="line"><span class="keyword">except</span> ExceptionA, ea:</span><br><span class="line">    handlerA(ea)</span><br><span class="line"><span class="keyword">except</span> (ExceptionB1, ExceptionB2), eb:</span><br><span class="line">    handleB(eb)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    handleOthers()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    handleNoException()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    doDefaultLogic()</span><br></pre></td></tr></table></figure><h2 id="9-魔法方法、属性和迭代器"><a href="#9-魔法方法、属性和迭代器" class="headerlink" title="9. 魔法方法、属性和迭代器"></a>9. 魔法方法、属性和迭代器</h2><ol><li><p>静态方法和类方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    class_var = <span class="string">"class var"</span></span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">smeth</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>             <span class="keyword">print</span> <span class="string">"This is a static method"</span></span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">cmeth</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>             <span class="keyword">print</span> <span class="string">"This is a class method"</span>, cls, cls.class_var</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyClass.smeth()</span><br><span class="line">This <span class="keyword">is</span> a static method</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyClass.cmeth()</span><br><span class="line">This <span class="keyword">is</span> a <span class="class"><span class="keyword">class</span> <span class="title">method</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">MyClass</span>'&gt; <span class="title">class</span> <span class="title">var</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>__getattribute__(self, name)</code>：当特性 <code>name</code> 被访问时自动调用。<code>__getattribute__(self, name)</code> 拦截所有特性的访问，也拦截对 <code>__dict__</code> 的访问。访问 <code>__getattribute__</code> 中与 <code>self</code> 有关的特性时，使用超类的 <code>__getattribute__</code> 方法（使用 <code>super</code> 函数）是唯一安全的途径。</p></li><li><p><code>__getattr__(self, name)__</code>：当特性 <code>name</code> 被访问且对象没有相应的特性时被自动调用。</p></li><li><p><code>__setattr__(self, name, value)</code>：当试图给特性 <code>name</code> 赋值时会被自动调用。</p></li><li><p><code>__delattr__(self, name)</code>：当试图删除特性 <code>name</code> 时被自动调用。</p></li><li><p>一个实现了 <code>__iter__</code> 方法的对象是可迭代的，一个实现了 <code>next</code> 方法的对象则是迭代器。<code>__iter__</code> 方法会返回一个迭代器（即自身）。</p></li><li><p>生成器是一个包含 <code>yield</code> 关键字的函数。当它被调用时，在函数体中的代码不会被执行，而会返回一个迭代器。每次请求一个值，就会执行生成器中的代码，直到遇到一个 <code>yield</code> 或者 <code>return</code> 语句。<code>yield</code> 意味着应该生成一个值，而 <code>return</code> 语句意味着生成器要停止执行。</p></li></ol><h2 id="10-自带电池"><a href="#10-自带电池" class="headerlink" title="10. 自带电池"></a>10. 自带电池</h2><ol><li><p>模块在第一次导入到程序中时被执行。</p></li><li><p>在主程序中，变量 <code>__name__</code> 的值是 <code>__main__</code>，而在导入的模块中，这个值就被设定为模块的名字。</p></li><li><p>序列和映射是对象的集合。为了实现它们基本的行为，如果对象是不可变的，那么就需要使用两个魔法方法，如果是可变的则需要 4 个：</p><ul><li><code>__len__(self)</code>：这个方法返回集合中所含项目的数量。对于序列来说，这就是元素的个数；对于映射来说，则是键值对的数量。如果返回 0（并且没有实现重写该行为的 <code>__nonzero__</code>），对象会被当做一个布尔变量中的假值进行处理。</li><li><code>__getitem__(self.key)</code>：这个方法返回与所给键对应的值。对于一个序列，键应该是一个 0～n-1的整数，n 是序列的长度；对于映射来说，可以使用任何种类的键。</li><li><code>__setitem__(self, key, value)</code> ：这个方法应该按一定的方式存储和 <code>key</code> 相关的 <code>value</code>，该值随后可使用 <code>__getitem__</code> 来获取。当然，只能为可以修改的对象定义这个方法。</li><li><code>__delitem__(self, key)</code>：这个方法在对一部分对象使用 <code>del</code> 语句时被调用，同时必须删除和元素相关的键。这个方法也是为可修改的对象定义的（并不是删除全部的对象，而只删除一些需要移除的元素）。</li></ul><p>对这些方法的附加要求如下：</p><ul><li>对于一个序列来说，如果键是负整数，那么要从末尾开始计数。换句话说，<code>x[-n]</code> 和 <code>[x[len(x) - n]]</code> 是一样的。</li><li>如果键是不合适的类型，会引发一个 <code>TypeError</code> 异常。</li><li>如果序列的索引是正确的类型，但超出了范围，应该引发一个 <code>IndexError</code> 异常。</li></ul></li><li><p>当模块存储在文件中时（扩展名 <code>.py</code>），包就是模块所在的目录。它必须包含一个命名为 <code>__init__.py</code> 的文件。假设要建立一个名为 drawing 的包，其中包括名为 shapes 和 colors 的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> drawing</span><br><span class="line"><span class="keyword">import</span> drawing.colors</span><br><span class="line"><span class="keyword">from</span> drawing <span class="keyword">import</span> shapes</span><br></pre></td></tr></table></figure><p>第一条语句中， <code>__init__</code> 模块的内容是可用的，但 shapes 和 <code>colors</code> 模块则不可用。执行第二条语句后，<code>colors</code> 模块可用了，但只能通过全名 <code>drawing.colors</code> 来使用。在执行第三条语句之后，<code>shapes</code> 模块可用，可以通过短名调用。</p></li><li><p><code>dir()</code> 函数可以打印对象的所有特性（以及模块的所有函数、类、变量等）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(math)</span><br><span class="line">[<span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan'</span>, <span class="string">'atan2'</span>, <span class="string">'atanh'</span>, <span class="string">'ceil'</span>, <span class="string">'copysign'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'degrees'</span>, <span class="string">'e'</span>, <span class="string">'erf'</span>, <span class="string">'erfc'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'fabs'</span>, <span class="string">'factorial'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'frexp'</span>, <span class="string">'fsum'</span>, <span class="string">'gamma'</span>, <span class="string">'hypot'</span>, <span class="string">'isinf'</span>, <span class="string">'isnan'</span>, <span class="string">'ldexp'</span>, <span class="string">'lgamma'</span>, <span class="string">'log'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'modf'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'radians'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>, <span class="string">'trunc'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>__all__</code> 变量定义了模块的公有接口。准确地说，它告诉解释器：从模块导入所有名字代表什么含义。如果没有设定 <code>__all__</code>，用 <code>import *</code> 语句默认将会导入模块中所有不以下划线开头的全局名称。</p></li></ol><h2 id="11-文件和流"><a href="#11-文件和流" class="headerlink" title="11. 文件和流"></a>11. 文件和流</h2><ol><li><p><code>open</code> 函数用来打开文件：</p><p><code>open(name[, mode[, buffering]])</code></p></li><li><p>模式参数</p></li></ol><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><ol start="3"><li><p>如果缓冲参数是 0（或者 <code>False</code>），I/O 就是无缓冲的；如果是 1 或者 <code>True</code>，I/O 就是有缓冲的。大于 1 的数字代表缓冲区的大小（单位是字节），-1 （或者其他负数）代表使用默认的缓冲区大小。</p></li><li><p>下表列出了 file 对象常用的函数：</p></li></ol><table><thead><tr><th>序号</th><th>方法及描述</th></tr></thead><tbody><tr><td>1</td><td><code>file.close()</code> 关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td>2</td><td><code>file.flush()</code> 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件，而不是被动的等待输出缓冲区写入。</td></tr><tr><td>3</td><td><code>file.fileno()</code> 返回一个整型的文件描述符（file descriptor FD 整型），可以用在如 os 模块的 <code>read</code> 方法等一些底层操作上。</td></tr><tr><td>4</td><td><code>file.isatty()</code> 如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td>5</td><td><code>file.next()</code> 返回文件下一行。</td></tr><tr><td>6</td><td><code>file.read([size])</code> 从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td>7</td><td><code>file.readline([size])</code> 读取整行，包括 “\n” 字符。</td></tr><tr><td>8</td><td><code>file.readlines([sizehint])</code> 读取所有行并返回列表，若给定 sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力。</td></tr><tr><td>9</td><td><code>[file.seek(offset[, whence])</code> 设置文件当前位置。</td></tr><tr><td>10</td><td><code>file.tell()</code> 返回文件当前位置。</td></tr><tr><td>11</td><td><code>[file.truncate([size])</code> 截取文件，截取的字节通过 size 指定，默认为当前文件位置。</td></tr><tr><td>12</td><td><code>file.write(str)</code> 将字符串写入文件，没有返回值。</td></tr><tr><td>13</td><td><code>file.writelines(sequence)</code> 向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table><h2 id="14-网络编程"><a href="#14-网络编程" class="headerlink" title="14. 网络编程"></a>14. 网络编程</h2><ol><li><p>用 <code>socket()</code> 函数来创建套接字，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.socket([family[, type[, proto]]])</span><br></pre></td></tr></table></figure><ul><li>family：套接字家族可以使 <code>AF_UNIX</code> 或者 <code>AF_INET</code></li><li>type：套接字类型可以根据是面向连接的还是非连接分为 <code>SOCK_STREAM</code> 或 <code>SOCK_DGRAM</code></li><li>protocol：一般不填默认为0</li></ul></li><li><p>API：</p></li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>服务器端套接字</td><td></td></tr><tr><td>s.bind()</td><td>绑定地址 (host, port) 到套接字， 在 <code>AF_INET</code> 下，以元组  (host, port) 的形式表示地址。</td></tr><tr><td>s.listen()</td><td>开始 TCP 监听。backlog 指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为 1，大部分应用程序设为 5 就可以了。</td></tr><tr><td>s.accept()</td><td>被动接受 TCP 客户端连接，（阻塞式）等待连接的到来</td></tr><tr><td>客户端套接字</td><td></td></tr><tr><td>s.connect()</td><td>主动初始化 TCP 服务器连接。一般 address 的格式为元组 (hostname, port)，如果连接出错，返回 <code>socket.error</code> 错误。</td></tr><tr><td>s.connect_ex()</td><td><code>connect()</code> 函数的扩展版本，出错时返回出错码，而不是抛出异常</td></tr><tr><td>公共用途的套接字函数</td><td></td></tr><tr><td>s.recv()</td><td>接收 TCP 数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag 提供有关消息的其他信息，通常可以忽略。</td></tr><tr><td>s.send()</td><td>发送 TCP 数据，将 string 中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于 string 的字节大小。</td></tr><tr><td>s.sendall()</td><td>完整发送 TCP 数据，完整发送 TCP 数据。将 string 中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回 None，失败则抛出异常。</td></tr><tr><td>s.recvfrom()</td><td>接收 UDP 数据，与 <code>recv()</code> 类似，但返回值是 (data, address)。其中 data 是包含接收数据的字符串，address 是发送数据的套接字地址。</td></tr><tr><td>s.sendto()</td><td>发送 UDP 数据，将数据发送到套接字，address 是形式为 (ipaddr, port) 的元组，指定远程地址。返回值是发送的字节数。</td></tr><tr><td>s.close()</td><td>关闭套接字</td></tr><tr><td>s.getpeername()</td><td>返回连接套接字的远程地址。返回值通常是元组 (ipaddr, port)。</td></tr><tr><td>s.getsockname()</td><td>返回套接字自己的地址。通常是一个元组 (ipaddr, port)。</td></tr><tr><td>s.setsockopt(level,optname,value)</td><td>设置给定套接字选项的值。</td></tr><tr><td>s.getsockopt(level,optname[.buflen])</td><td>返回套接字选项的值。</td></tr><tr><td>s.settimeout(timeout)</td><td>设置套接字操作的超时期，timeout 是一个浮点数，单位是秒。值为 None 表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 <code>connect()</code>）</td></tr><tr><td>s.gettimeout()</td><td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td></tr><tr><td>s.fileno()</td><td>返回套接字的文件描述符。</td></tr><tr><td>s.setblocking(flag)</td><td>如果 flag 为 0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用 <code>recv()</code> 没有发现任何数据，或 <code>send()</code> 调用无法立即发送数据，那么将引起 <code>socket.error</code> 异常。</td></tr><tr><td>s.makefile()</td><td>创建一个与该套接字相关连的文件</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>想读的书</title>
      <link href="/2018/02/04/%E6%83%B3%E8%AF%BB%E7%9A%84%E4%B9%A6/"/>
      <url>/2018/02/04/%E6%83%B3%E8%AF%BB%E7%9A%84%E4%B9%A6/</url>
      <content type="html"><![CDATA[<ol><li>古今数学思想</li><li>什么是数学</li><li>全球通史</li><li>推理的迷宫</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>大数据算法问题</title>
      <link href="/2018/01/10/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/"/>
      <url>/2018/01/10/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot + Dubbo 试用</title>
      <link href="/2018/01/02/Spring%20Boot%20+%20Dubbo%20%E8%AF%95%E7%94%A8/"/>
      <url>/2018/01/02/Spring%20Boot%20+%20Dubbo%20%E8%AF%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-启动-ZooKeeper"><a href="#1-启动-ZooKeeper" class="headerlink" title="1. 启动 ZooKeeper"></a>1. 启动 ZooKeeper</h2><p>Mac 下启动单机版 ZooKeeper：</p><p><code>zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties</code></p><a id="more"></a><h2 id="2-dubbo-api"><a href="#2-dubbo-api" class="headerlink" title="2. dubbo-api"></a>2. dubbo-api</h2><p>创建服务接口定义项目。该项目中只定义了一个服务接口 <code>iservice.IUserService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下应该将这个项目发布成 jar 包供提供方和消费者调用，不过这里为了简便起见，会在 Intellij 中直接让服务提供方和消费者依赖 dubbo-api 项目。</p><h2 id="2-dubbo-provider"><a href="#2-dubbo-provider" class="headerlink" title="2. dubbo-provider"></a>2. dubbo-provider</h2><p>创建服务提供方项目 dubbo-provider，基于 Spring Boot，并设置依赖 dubbo-api。</p><ol><li><p>服务提供方启动类 <code>DubboProviderApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:dubbo-provider.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DubboProviderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 import 了 dubbo 项目的配置 xml。</p></li><li><p>定义服务实现 <code>serviceimpl.UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + s + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>application-properties</code> 里设置服务的 HTTP 端口 <code>server.port=8888</code>。</p></li><li><p>在 classpath 下创建配置文件 <code>dubbo-provider.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-provider"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://localhost:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">cluster</span>=<span class="string">"failfast"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"12345"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"xyq.serviceimpl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"iservice.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 xml 中定义了：</p><ul><li>服务提供方的名称：dubbo-provider</li><li>注册中心的协议及地址：运行在本地 2181 端口上的 ZooKeeper</li><li>dubbo 服务运行的端口：12345</li><li>暴露的服务接口及其实现：<code>IUserService</code> 和 <code>UserServiceImpl</code></li></ul></li><li><p>启动项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">2017-12-28 21:39:54.739  INFO 13377 --- [           main] xyq.DubboProviderApplication             : Starting DubboProviderApplication on bogon with PID 13377 (/Users/xyq/workspace/myproject/dubbo-provider/target/classes started by xyq in /Users/xyq/workspace)</span><br><span class="line">2017-12-28 21:39:54.743  INFO 13377 --- [           main] xyq.DubboProviderApplication             : No active profile set, falling back to default profiles: default</span><br><span class="line">2017-12-28 21:39:54.854  INFO 13377 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2d127a61: startup date [Thu Dec 28 21:39:54 CST 2017]; root of context hierarchy</span><br><span class="line">2017-12-28 21:39:55.323  INFO 13377 --- [           main] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from class path resource [dubbo-provider.xml]</span><br><span class="line">2017-12-28 21:39:55.530  INFO 13377 --- [           main] c.a.dubbo.common.logger.LoggerFactory    : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter</span><br><span class="line">2017-12-28 21:39:56.281  INFO 13377 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8888 (http)</span><br><span class="line">2017-12-28 21:39:56.295  INFO 13377 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2017-12-28 21:39:56.296  INFO 13377 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.23</span><br><span class="line">2017-12-28 21:39:56.402  INFO 13377 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2017-12-28 21:39:56.402  INFO 13377 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1553 ms</span><br><span class="line">2017-12-28 21:39:56.549  INFO 13377 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &apos;dispatcherServlet&apos; to [/]</span><br><span class="line">2017-12-28 21:39:56.553  INFO 13377 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;characterEncodingFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:39:56.554  INFO 13377 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;hiddenHttpMethodFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:39:56.554  INFO 13377 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;httpPutFormContentFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:39:56.554  INFO 13377 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;requestContextFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:39:57.045  INFO 13377 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2d127a61: startup date [Thu Dec 28 21:39:54 CST 2017]; root of context hierarchy</span><br><span class="line">2017-12-28 21:39:57.114  INFO 13377 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span><br><span class="line">2017-12-28 21:39:57.115  INFO 13377 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span><br><span class="line">2017-12-28 21:39:57.159  INFO 13377 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-28 21:39:57.159  INFO 13377 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-28 21:39:57.189  INFO 13377 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-28 21:39:57.318  INFO 13377 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2017-12-28 21:39:57.330  INFO 13377 --- [           main] com.alibaba.dubbo.config.AbstractConfig  :  [DUBBO] The service ready on spring started. service: iservice.IUserService, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.417  INFO 13377 --- [           main] com.alibaba.dubbo.config.AbstractConfig  :  [DUBBO] Export dubbo service iservice.IUserService to local registry, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.417  INFO 13377 --- [           main] com.alibaba.dubbo.config.AbstractConfig  :  [DUBBO] Export dubbo service iservice.IUserService to url dubbo://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;bind.ip=10.236.19.51&amp;bind.port=12345&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.417  INFO 13377 --- [           main] com.alibaba.dubbo.config.AbstractConfig  :  [DUBBO] Register dubbo service iservice.IUserService url dubbo://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;bind.ip=10.236.19.51&amp;bind.port=12345&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-provider&amp;dubbo=2.5.8&amp;pid=13377&amp;registry=zookeeper&amp;timestamp=1514468397338, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.535  INFO 13377 --- [           main] c.a.d.remoting.transport.AbstractServer  :  [DUBBO] Start NettyServer bind /0.0.0.0:12345, export /10.236.19.51:12345, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.555  INFO 13377 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Load registry store file /Users/xyq/.dubbo/dubbo-registry-dubbo-provider-localhost:2181.cache, data: &#123;xyq.service.UserService=empty://10.236.19.51:12345/xyq.service.UserService?anyhost=true&amp;application=dubbo-provider&amp;category=configurators&amp;check=false&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=xyq.service.UserService&amp;methods=hello&amp;pid=12958&amp;side=provider&amp;timestamp=1514467127634&#125;, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.562  INFO 13377 --- [           main] c.a.d.common.concurrent.ExecutionList    :  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.571  INFO 13377 --- [-localhost:2181] org.I0Itec.zkclient.ZkEventThread        : Starting ZkClient event thread.</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:zookeeper.version=3.3.3-1073969, built on 02/23/2011 22:27 GMT</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:host.name=bogon</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.version=1.8.0_91</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.vendor=Oracle Corporation</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.class.path=/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/tools.jar:/Users/xyq/workspace/myproject/dubbo-provider/target/classes:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.9.RELEASE/spring-boot-starter-web-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter/1.5.9.RELEASE/spring-boot-starter-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot/1.5.9.RELEASE/spring-boot-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/1.5.9.RELEASE/spring-boot-autoconfigure-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter-logging/1.5.9.RELEASE/spring-boot-starter-logging-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar:/Users/xyq/.m2/repository/ch/qos/logback/logback-core/1.1.11/logback-core-1.1.11.jar:/Users/xyq/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25/jcl-over-slf4j-1.7.25.jar:/Users/xyq/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/xyq/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.25/log4j-over-slf4j-1.7.25.jar:/Users/xyq/.m2/repository/org/yaml/snakeyaml/1.17/snakeyaml-1.17.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/1.5.9.RELEASE/spring-boot-starter-tomcat-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.23/tomcat-embed-core-8.5.23.jar:/Users/xyq/.m2/repository/org/apache/tomcat/tomcat-annotations-api/8.5.23/tomcat-annotations-api-8.5.23.jar:/Users/xyq/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.23/tomcat-embed-el-8.5.23.jar:/Users/xyq/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.23/tomcat-embed-websocket-8.5.23.jar:/Users/xyq/.m2/repository/org/hibernate/hibernate-validator/5.3.6.Final/hibernate-validator-5.3.6.Final.jar:/Users/xyq/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar:/Users/xyq/.m2/repository/org/jboss/logging/jboss-logging/3.3.1.Final/jboss-logging-3.3.1.Final.jar:/Users/xyq/.m2/repository/com/fasterxml/classmate/1.3.4/classmate-1.3.4.jar:/Users/xyq/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.10/jackson-databind-2.8.10.jar:/Users/xyq/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar:/Users/xyq/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.10/jackson-core-2.8.10.jar:/Users/xyq/.m2/repository/org/springframework/spring-web/4.3.13.RELEASE/spring-web-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-aop/4.3.13.RELEASE/spring-aop-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-webmvc/4.3.13.RELEASE/spring-webmvc-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-expression/4.3.13.RELEASE/spring-expression-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/xyq/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/xyq/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/xyq/.m2/repository/org/springframework/spring-core/4.3.13.RELEASE/spring-core-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/com/alibaba/dubbo/2.5.8/dubbo-2.5.8.jar:/Users/xyq/.m2/repository/org/springframework/spring-context/4.3.13.RELEASE/spring-context-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-beans/4.3.13.RELEASE/spring-beans-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/javassist/javassist/3.21.0-GA/javassist-3.21.0-GA.jar:/Users/xyq/.m2/repository/org/jboss/netty/netty/3.2.5.Final/netty-3.2.5.Final.jar:/Users/xyq/.m2/repository/com/github/sgroschupf/zkclient/0.1/zkclient-0.1.jar:/Users/xyq/.m2/repository/org/apache/zookeeper/zookeeper/3.3.3/zookeeper-3.3.3.jar:/Users/xyq/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar:/Users/xyq/.m2/repository/log4j/log4j/1.2.14/log4j-1.2.14.jar:/Users/xyq/workspace/myproject/dubbo-api/target/classes:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.library.path=/Users/xyq/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class="line">2017-12-28 21:39:57.577  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.io.tmpdir=/var/folders/yq/d0v9dm456zd_xzc1lhllw19m0000gn/T/</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:os.name=Mac OS X</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:os.arch=x86_64</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:os.version=10.13.1</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:user.name=xyq</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:user.home=/Users/xyq</span><br><span class="line">2017-12-28 21:39:57.578  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:user.dir=/Users/xyq/workspace</span><br><span class="line">2017-12-28 21:39:57.579  INFO 13377 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@247f74ac</span><br><span class="line">2017-12-28 21:39:57.589  INFO 13377 --- [or-SendThread()] org.apache.zookeeper.ClientCnxn          : Opening socket connection to server localhost/127.0.0.1:2181</span><br><span class="line">2017-12-28 21:39:57.600  INFO 13377 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn          : Socket connection established to localhost/127.0.0.1:2181, initiating session</span><br><span class="line">2017-12-28 21:39:57.613  INFO 13377 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn          : Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1609d33be850005, negotiated timeout = 30000</span><br><span class="line">2017-12-28 21:39:57.615  INFO 13377 --- [tor-EventThread] org.I0Itec.zkclient.ZkClient             : zookeeper state changed (SyncConnected)</span><br><span class="line">2017-12-28 21:39:57.618  INFO 13377 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Register: dubbo://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.639  INFO 13377 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Subscribe: provider://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;category=configurators&amp;check=false&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346, dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.647  INFO 13377 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Notify urls for subscribe url provider://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;category=configurators&amp;check=false&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346, urls: [empty://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;category=configurators&amp;check=false&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346], dubbo version: 2.5.8, current host: 127.0.0.1</span><br><span class="line">2017-12-28 21:39:57.707  INFO 13377 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8888 (http)</span><br><span class="line">2017-12-28 21:39:57.712  INFO 13377 --- [           main] xyq.DubboProviderApplication             : Started DubboProviderApplication in 3.544 seconds (JVM running for 4.34)</span><br></pre></td></tr></table></figure><p>可以看到服务提供方在 ZooKeeper 上注册成功了。</p></li></ol><h2 id="3-dubbo-consumer"><a href="#3-dubbo-consumer" class="headerlink" title="3. dubbo-consumer"></a>3. dubbo-consumer</h2><p>创建服务提供方项目 dubbo-consumer，基于 Spring Boot，并设置依赖 dubbo-api。</p><ol><li><p>服务消费者启动类 <code>DubboConsumerApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:dubbo-consumer.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DubboConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建控制器 <code>UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        String welcome = userService.hello(name);</span><br><span class="line">        <span class="keyword">return</span> welcome;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>application-properties</code> 里设置服务的 HTTP 端口 <code>server.port=8889</code>。</p></li><li><p>在 classpath 下创建配置文件 <code>dubbo-consumer.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-consumer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://localhost:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">cluster</span>=<span class="string">"failfast"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"12346"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引用服务配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"iservice.IUserService"</span> <span class="attr">cluster</span>=<span class="string">"failfast"</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 xml 中定义了：</p><ul><li>服务消费者的名称：dubbo-consumer</li><li>注册中心的协议及地址：运行在本地 2181 端口上的 ZooKeeper</li><li>dubbo 服务运行的端口：12346</li><li>需要注册的 spring bean：<code>userService</code>，并指定它对应了 dubbo 上发布的 <code>IUserService</code> 这个服务接口。</li></ul></li><li><p>启动项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">2017-12-28 21:42:43.113  INFO 13482 --- [           main] xyq.DubboConsumerApplication             : Starting DubboConsumerApplication on bogon with PID 13482 (/Users/xyq/workspace/myproject/dubbo-consumer/target/classes started by xyq in /Users/xyq/workspace)</span><br><span class="line">2017-12-28 21:42:43.115  INFO 13482 --- [           main] xyq.DubboConsumerApplication             : No active profile set, falling back to default profiles: default</span><br><span class="line">2017-12-28 21:42:43.177  INFO 13482 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2d127a61: startup date [Thu Dec 28 21:42:43 CST 2017]; root of context hierarchy</span><br><span class="line">2017-12-28 21:42:43.860  INFO 13482 --- [           main] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from class path resource [dubbo-consumer.xml]</span><br><span class="line">2017-12-28 21:42:44.114  INFO 13482 --- [           main] c.a.dubbo.common.logger.LoggerFactory    : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter</span><br><span class="line">2017-12-28 21:42:44.920  INFO 13482 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean &apos;dubbo-consumer&apos; of type [com.alibaba.dubbo.config.ApplicationConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2017-12-28 21:42:44.930  INFO 13482 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean &apos;com.alibaba.dubbo.config.RegistryConfig&apos; of type [com.alibaba.dubbo.config.RegistryConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2017-12-28 21:42:44.931  INFO 13482 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean &apos;userService&apos; of type [com.alibaba.dubbo.config.spring.ReferenceBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2017-12-28 21:42:45.432  INFO 13482 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8889 (http)</span><br><span class="line">2017-12-28 21:42:45.444  INFO 13482 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2017-12-28 21:42:45.446  INFO 13482 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.23</span><br><span class="line">2017-12-28 21:42:45.541  INFO 13482 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2017-12-28 21:42:45.541  INFO 13482 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2368 ms</span><br><span class="line">2017-12-28 21:42:45.658  INFO 13482 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &apos;dispatcherServlet&apos; to [/]</span><br><span class="line">2017-12-28 21:42:45.661  INFO 13482 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;characterEncodingFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:42:45.662  INFO 13482 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;hiddenHttpMethodFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:42:45.662  INFO 13482 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;httpPutFormContentFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:42:45.662  INFO 13482 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;requestContextFilter&apos; to: [/*]</span><br><span class="line">2017-12-28 21:42:45.774  INFO 13482 --- [           main] c.a.d.common.concurrent.ExecutionList    :  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:45.780  INFO 13482 --- [-localhost:2181] org.I0Itec.zkclient.ZkEventThread        : Starting ZkClient event thread.</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:zookeeper.version=3.3.3-1073969, built on 02/23/2011 22:27 GMT</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:host.name=bogon</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.version=1.8.0_91</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.vendor=Oracle Corporation</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.class.path=/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/tools.jar:/Users/xyq/workspace/myproject/dubbo-consumer/target/classes:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.9.RELEASE/spring-boot-starter-web-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter/1.5.9.RELEASE/spring-boot-starter-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot/1.5.9.RELEASE/spring-boot-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/1.5.9.RELEASE/spring-boot-autoconfigure-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter-logging/1.5.9.RELEASE/spring-boot-starter-logging-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar:/Users/xyq/.m2/repository/ch/qos/logback/logback-core/1.1.11/logback-core-1.1.11.jar:/Users/xyq/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25/jcl-over-slf4j-1.7.25.jar:/Users/xyq/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/xyq/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.25/log4j-over-slf4j-1.7.25.jar:/Users/xyq/.m2/repository/org/yaml/snakeyaml/1.17/snakeyaml-1.17.jar:/Users/xyq/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/1.5.9.RELEASE/spring-boot-starter-tomcat-1.5.9.RELEASE.jar:/Users/xyq/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.23/tomcat-embed-core-8.5.23.jar:/Users/xyq/.m2/repository/org/apache/tomcat/tomcat-annotations-api/8.5.23/tomcat-annotations-api-8.5.23.jar:/Users/xyq/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.23/tomcat-embed-el-8.5.23.jar:/Users/xyq/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.23/tomcat-embed-websocket-8.5.23.jar:/Users/xyq/.m2/repository/org/hibernate/hibernate-validator/5.3.6.Final/hibernate-validator-5.3.6.Final.jar:/Users/xyq/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar:/Users/xyq/.m2/repository/org/jboss/logging/jboss-logging/3.3.1.Final/jboss-logging-3.3.1.Final.jar:/Users/xyq/.m2/repository/com/fasterxml/classmate/1.3.4/classmate-1.3.4.jar:/Users/xyq/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.10/jackson-databind-2.8.10.jar:/Users/xyq/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar:/Users/xyq/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.10/jackson-core-2.8.10.jar:/Users/xyq/.m2/repository/org/springframework/spring-web/4.3.13.RELEASE/spring-web-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-aop/4.3.13.RELEASE/spring-aop-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-webmvc/4.3.13.RELEASE/spring-webmvc-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-expression/4.3.13.RELEASE/spring-expression-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/xyq/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/xyq/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/xyq/.m2/repository/org/springframework/spring-core/4.3.13.RELEASE/spring-core-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/com/alibaba/dubbo/2.5.8/dubbo-2.5.8.jar:/Users/xyq/.m2/repository/org/springframework/spring-context/4.3.13.RELEASE/spring-context-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/springframework/spring-beans/4.3.13.RELEASE/spring-beans-4.3.13.RELEASE.jar:/Users/xyq/.m2/repository/org/javassist/javassist/3.21.0-GA/javassist-3.21.0-GA.jar:/Users/xyq/.m2/repository/org/jboss/netty/netty/3.2.5.Final/netty-3.2.5.Final.jar:/Users/xyq/.m2/repository/com/github/sgroschupf/zkclient/0.1/zkclient-0.1.jar:/Users/xyq/.m2/repository/org/apache/zookeeper/zookeeper/3.3.3/zookeeper-3.3.3.jar:/Users/xyq/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar:/Users/xyq/.m2/repository/log4j/log4j/1.2.14/log4j-1.2.14.jar:/Users/xyq/workspace/myproject/dubbo-api/target/classes:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.library.path=/Users/xyq/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class="line">2017-12-28 21:42:45.785  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.io.tmpdir=/var/folders/yq/d0v9dm456zd_xzc1lhllw19m0000gn/T/</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:os.name=Mac OS X</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:os.arch=x86_64</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:os.version=10.13.1</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:user.name=xyq</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:user.home=/Users/xyq</span><br><span class="line">2017-12-28 21:42:45.787  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Client environment:user.dir=/Users/xyq/workspace</span><br><span class="line">2017-12-28 21:42:45.788  INFO 13482 --- [clientConnector] org.apache.zookeeper.ZooKeeper           : Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@5cee7de6</span><br><span class="line">2017-12-28 21:42:45.798  INFO 13482 --- [or-SendThread()] org.apache.zookeeper.ClientCnxn          : Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181</span><br><span class="line">2017-12-28 21:42:45.818  INFO 13482 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn          : Socket connection established to localhost/0:0:0:0:0:0:0:1:2181, initiating session</span><br><span class="line">2017-12-28 21:42:45.825  INFO 13482 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn          : Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x1609d33be850006, negotiated timeout = 30000</span><br><span class="line">2017-12-28 21:42:45.826  INFO 13482 --- [tor-EventThread] org.I0Itec.zkclient.ZkClient             : zookeeper state changed (SyncConnected)</span><br><span class="line">2017-12-28 21:42:45.846  INFO 13482 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Register: consumer://10.236.19.51/iservice.IUserService?application=dubbo-consumer&amp;category=consumers&amp;check=false&amp;cluster=failfast&amp;dubbo=2.5.8&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13482&amp;side=consumer&amp;timestamp=1514468565714, dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:45.859  INFO 13482 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Subscribe: consumer://10.236.19.51/iservice.IUserService?application=dubbo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;cluster=failfast&amp;dubbo=2.5.8&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13482&amp;side=consumer&amp;timestamp=1514468565714, dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:45.871  INFO 13482 --- [           main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Notify urls for subscribe url consumer://10.236.19.51/iservice.IUserService?application=dubbo-consumer&amp;category=providers,configurators,routers&amp;check=false&amp;cluster=failfast&amp;dubbo=2.5.8&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13482&amp;side=consumer&amp;timestamp=1514468565714, urls: [dubbo://10.236.19.51:12345/iservice.IUserService?anyhost=true&amp;application=dubbo-provider&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13377&amp;side=provider&amp;timestamp=1514468397346, empty://10.236.19.51/iservice.IUserService?application=dubbo-consumer&amp;category=configurators&amp;check=false&amp;cluster=failfast&amp;dubbo=2.5.8&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13482&amp;side=consumer&amp;timestamp=1514468565714, empty://10.236.19.51/iservice.IUserService?application=dubbo-consumer&amp;category=routers&amp;check=false&amp;cluster=failfast&amp;dubbo=2.5.8&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13482&amp;side=consumer&amp;timestamp=1514468565714], dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:45.966  INFO 13482 --- [           main] c.a.d.remoting.transport.AbstractClient  :  [DUBBO] Successed connect to server /10.236.19.51:12345 from NettyClient 10.236.19.51 using dubbo version 2.5.8, channel is NettyChannel [channel=[id: 0x3f3c966c, /10.236.19.51:61111 =&gt; /10.236.19.51:12345]], dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:45.966  INFO 13482 --- [           main] c.a.d.remoting.transport.AbstractClient  :  [DUBBO] Start NettyClient bogon/10.236.19.51 connect to the server /10.236.19.51:12345, dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:45.998  INFO 13482 --- [           main] com.alibaba.dubbo.config.AbstractConfig  :  [DUBBO] Refer dubbo service iservice.IUserService from url zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&amp;application=dubbo-consumer&amp;check=false&amp;cluster=failfast&amp;default.cluster=failfast&amp;dubbo=2.5.8&amp;generic=false&amp;interface=iservice.IUserService&amp;methods=hello&amp;pid=13482&amp;register.ip=10.236.19.51&amp;remote.timestamp=1514468397346&amp;side=consumer&amp;timestamp=1514468565714, dubbo version: 2.5.8, current host: 10.236.19.51</span><br><span class="line">2017-12-28 21:42:46.218  INFO 13482 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2d127a61: startup date [Thu Dec 28 21:42:43 CST 2017]; root of context hierarchy</span><br><span class="line">2017-12-28 21:42:46.268  INFO 13482 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/hello]&#125;&quot; onto public java.lang.String xyq.UserController.sayHello(java.lang.String)</span><br><span class="line">2017-12-28 21:42:46.270  INFO 13482 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span><br><span class="line">2017-12-28 21:42:46.270  INFO 13482 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span><br><span class="line">2017-12-28 21:42:46.294  INFO 13482 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-28 21:42:46.294  INFO 13482 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-28 21:42:46.323  INFO 13482 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-28 21:42:46.430  INFO 13482 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2017-12-28 21:42:46.472  INFO 13482 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8889 (http)</span><br><span class="line">2017-12-28 21:42:46.476  INFO 13482 --- [           main] xyq.DubboConsumerApplication             : Started DubboConsumerApplication in 3.634 seconds (JVM running for 3.99)</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p>浏览器中打开 <a href="http://localhost:8889/hello?name=gilgamesh" target="_blank" rel="noopener">http://localhost:8889/hello?name=gilgamesh</a> ，可以看见回复：hello gilgamesh!</p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><p>项目中需要添加 ZkClient 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：集群启动与选举</title>
      <link href="/2017/12/29/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E9%9B%86%E7%BE%A4%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%80%89%E4%B8%BE/"/>
      <url>/2017/12/29/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E9%9B%86%E7%BE%A4%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%80%89%E4%B8%BE/</url>
      <content type="html"><![CDATA[<h2 id="1-QuorumPeerMain"><a href="#1-QuorumPeerMain" class="headerlink" title="1. QuorumPeerMain"></a>1. QuorumPeerMain</h2><p><code>QuorumPeerMain</code> 类的 <code>Main</code> 函数较为简单，直接调用了 <code>initializeAndRun</code> 方法，参数就是 <code>zkServer.sh</code> 转入的参数，这里是 “start”。在 <code>initializeAndRun</code> 方法内部，首先启动的是定时清除镜像任务 <code>DatadirCleanupManager</code>，默认设置为保留 3 份。由于 <code>purgeInterval</code> 这个参数默认设置为 0，所以不会启动镜像定时清除机制。</p><p><code>org.apache.zookeeper.server.DatadirCleanupManager#start</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PurgeTaskStatus.STARTED == purgeTaskStatus) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Purge task is already running."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Don't schedule the purge task with zero or negative purge interval.</span></span><br><span class="line">    <span class="keyword">if</span> (purgeInterval &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        LOG.info(<span class="string">"Purge task is not scheduled."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = <span class="keyword">new</span> Timer(<span class="string">"PurgeTask"</span>, <span class="keyword">true</span>);</span><br><span class="line">    TimerTask task = <span class="keyword">new</span> PurgeTask(dataLogDir, snapDir, snapRetainCount);</span><br><span class="line">    timer.scheduleAtFixedRate(task, <span class="number">0</span>, TimeUnit.HOURS.toMillis(purgeInterval));</span><br><span class="line"></span><br><span class="line">    purgeTaskStatus = PurgeTaskStatus.STARTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>接下来，如果配置的 ZooKeeper 服务器大于 1 台，调用 <code>runFromConfig</code> 方法进行集群信息配置，并启动 <code>QuorumPeer</code> 线程。</p><p><code>org.apache.zookeeper.server.quorum.QuorumPeerMain#runFromConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns());</span><br><span class="line"></span><br><span class="line">quorumPeer = getQuorumPeer();</span><br><span class="line"></span><br><span class="line">quorumPeer.setQuorumPeers(config.getServers());</span><br><span class="line">quorumPeer.setTxnFactory(<span class="keyword">new</span> FileTxnSnapLog(</span><br><span class="line">        <span class="keyword">new</span> File(config.getDataDir()),</span><br><span class="line">        <span class="keyword">new</span> File(config.getDataLogDir())));</span><br><span class="line">quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class="line">quorumPeer.setMyid(config.getServerId());</span><br><span class="line">quorumPeer.setTickTime(config.getTickTime());</span><br><span class="line">quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class="line">quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class="line">quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class="line">quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class="line">quorumPeer.setQuorumVerifier(config.getQuorumVerifier());</span><br><span class="line">quorumPeer.setClientPortAddress(config.getClientPortAddress());</span><br><span class="line">quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class="line">quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class="line">quorumPeer.setZKDatabase(<span class="keyword">new</span> ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class="line">quorumPeer.setLearnerType(config.getPeerType());</span><br><span class="line">quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class="line"></span><br><span class="line"><span class="comment">// sets quorum sasl authentication configurations</span></span><br><span class="line">quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class="line"><span class="keyword">if</span>(quorumPeer.isQuorumSaslAuthEnabled())&#123;</span><br><span class="line">    quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class="line">    quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class="line">    quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class="line">    quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class="line">    quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class="line">quorumPeer.initialize();</span><br><span class="line"></span><br><span class="line">quorumPeer.start();</span><br><span class="line">quorumPeer.join();</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h2 id="2-ServerCnxnFactory"><a href="#2-ServerCnxnFactory" class="headerlink" title="2. ServerCnxnFactory"></a>2. ServerCnxnFactory</h2><p>每个 <code>QuorumPeer</code> 线程启动之前都会先启动一个 <code>cnxnFactory</code> 线程，首先初始化 <code>ServerCnxnFactory</code>，这个是用来接收来自客户端的连接的，也就是这里启动的是一个 TCP 服务器。在 ZooKeeper 里提供两种 TCP 服务器的实现，一个是使用 Java 原生 NIO 的方式，另外一个是使用 NETTY。默认是 NIO 的方式，一个典型的 Reactor 模型。</p><p><code>org.apache.zookeeper.server.ServerCnxnFactory#createFactory()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> ServerCnxnFactory <span class="title">createFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String serverCnxnFactoryName = System.getProperty(ZOOKEEPER_SERVER_CNXN_FACTORY);</span><br><span class="line">    <span class="keyword">if</span> (serverCnxnFactoryName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        serverCnxnFactoryName = NIOServerCnxnFactory.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ServerCnxnFactory serverCnxnFactory = (ServerCnxnFactory) Class.forName(serverCnxnFactoryName).newInstance();</span><br><span class="line">        LOG.info(<span class="string">"Using &#123;&#125; as server connection factory"</span>, serverCnxnFactoryName);</span><br><span class="line">        <span class="keyword">return</span> serverCnxnFactory;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        IOException ioe = <span class="keyword">new</span> IOException(<span class="string">"Couldn't instantiate "</span> + serverCnxnFactoryName);</span><br><span class="line">        ioe.initCause(e);</span><br><span class="line">        <span class="keyword">throw</span> ioe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-QuorumPeer"><a href="#3-QuorumPeer" class="headerlink" title="3. QuorumPeer"></a>3. QuorumPeer</h2><p>接下来会开始针对 <code>QuorumPeer</code> 实例进行参数配置，<code>QuorumPeer</code> 类代表了 ZooKeeper 集群内的一个节点，参数较多，比较关键的是 <code>setQuorumPeers</code>、<code>setMyid</code>（每一个 ZooKeeper 节点对应有一个 <code>MyId</code>）、<code>setCnxnFactory</code>（TCP 服务）、<code>setZKDatabase</code>（ZooKeeper 自带的内存数据库）、<code>setTickTime</code>（ZooKeeper 服务端和客户端的会话控制）等等。注意到 <code>QuorumPeer</code> 在初始化时 <code>ServerState</code> 被设置为 LOOKING。</p><p>接下来调用同步方法 <code>start</code>，正式进入 <code>QuorumPeer 类</code>。<code>start</code> 方法主要包括四个方法，即读取内存数据库、启动 TCP 服务、选举 ZooKeeper 的 Leader 角色、启动自己线程。</p><p><code>org.apache.zookeeper.server.quorum.QuorumPeer#start</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    loadDataBase();</span><br><span class="line">    cnxnFactory.start();        </span><br><span class="line">    startLeaderElection();</span><br><span class="line">    <span class="keyword">super</span>.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-读取内存数据库"><a href="#3-1-读取内存数据库" class="headerlink" title="3.1 读取内存数据库"></a>3.1 读取内存数据库</h3><p><code>org.apache.zookeeper.server.quorum.QuorumPeer#loadDataBase</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadDataBase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    File updating = <span class="keyword">new</span> File(getTxnFactory().getSnapDir(), UPDATING_EPOCH_FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        zkDb.loadDataBase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// load the epochs</span></span><br><span class="line">        <span class="keyword">long</span> lastProcessedZxid = zkDb.getDataTree().lastProcessedZxid;</span><br><span class="line">    <span class="keyword">long</span> epochOfZxid = ZxidUtils.getEpochFromZxid(lastProcessedZxid);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            currentEpoch = readLongFromFile(CURRENT_EPOCH_FILENAME);</span><br><span class="line">            <span class="keyword">if</span> (epochOfZxid &gt; currentEpoch &amp;&amp; updating.exists()) &#123;</span><br><span class="line">                setCurrentEpoch(epochOfZxid);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadDataBase</code> 方法用于恢复数据，即从磁盘读取数据到内存，调用了 <code>ZKDatabase</code> 实例的 <code>addCommittedProposal</code> 方法，该方法维护了一个提交日志的队列，用于快速同步 follower 角色的节点信息，日志信息默认保存 500 条，所以选用了 <code>LinkedList</code> 队列用于快速删除数据溢出时的第一条信息。</p><p><code>org.apache.zookeeper.server.ZKDatabase#addCommittedProposal</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCommittedProposal</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    WriteLock wl = logLock.writeLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        wl.lock();</span><br><span class="line">        <span class="keyword">if</span> (committedLog.size() &gt; commitLogCount) &#123;</span><br><span class="line">            committedLog.removeFirst();</span><br><span class="line">            minCommittedLog = committedLog.getFirst().packet.getZxid();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (committedLog.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            minCommittedLog = request.zxid;</span><br><span class="line">            maxCommittedLog = request.zxid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request.hdr.serialize(boa, <span class="string">"hdr"</span>);</span><br><span class="line">            <span class="keyword">if</span> (request.txn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.txn.serialize(boa, <span class="string">"txn"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            baos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"This really should be impossible"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        QuorumPacket pp = <span class="keyword">new</span> QuorumPacket(Leader.PROPOSAL, request.zxid, baos.toByteArray(), <span class="keyword">null</span>);</span><br><span class="line">        Proposal p = <span class="keyword">new</span> Proposal();</span><br><span class="line">        p.packet = pp;</span><br><span class="line">        p.request = request;</span><br><span class="line">        committedLog.add(p);</span><br><span class="line">        maxCommittedLog = p.packet.getZxid();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        wl.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保证事务的顺序一致性，ZooKeeper 采用了递增的事务 id 号（ZXID）来标识事务。所有的提议（Proposal）都在被提出的时候加上了 ZXID。实现中 ZXID 是一个 64 位的数字，高 32 位是 EPOCH 用来标识 Leader 节点是否改变，每次一个 Leader 被选出来以后它都会有一个新的 EPOCH 值，标识当前属于哪个 Leader 的统治，低 32 位用于递增计数。</p><p>如果当前保存的 EPOCH 和最新获取的不一样，那就说明 Leader 重新选举过了，用最新的值替换。</p><h3 id="3-2-选举准备工作"><a href="#3-2-选举准备工作" class="headerlink" title="3.2 选举准备工作"></a>3.2 选举准备工作</h3><p><code>startLeaderElection</code> 方法调用了 <code>createElectionAlgorithm</code> 方法进行选举，目前仅用 <code>electionType</code> 为 3，即使用 FastLeaderElection 算法。</p><p><code>org.apache.zookeeper.server.quorum.QuorumPeer#createElectionAlgorithm</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    qcm = createCnxnManager();</span><br><span class="line">    QuorumCnxManager.Listener listener = qcm.listener;</span><br><span class="line">    <span class="keyword">if</span>(listener != <span class="keyword">null</span>)&#123;</span><br><span class="line">        listener.start();</span><br><span class="line">        le = <span class="keyword">new</span> FastLeaderElection(<span class="keyword">this</span>, qcm);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG.error(<span class="string">"Null listener when initializing cnx manager"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-监听选举端口"><a href="#3-2-1-监听选举端口" class="headerlink" title="3.2.1 监听选举端口"></a>3.2.1 监听选举端口</h4><p>在 <code>QuorumCnxManager.Listener</code> 中启动 I/O 线程，默认绑定 3888 端口，等待集群其他机器连接：</p><p><code>org.apache.zookeeper.server.quorum.QuorumCnxManager.Listener#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numRetries = <span class="number">0</span>;</span><br><span class="line">    InetSocketAddress addr;</span><br><span class="line">    <span class="keyword">while</span>((!shutdown) &amp;&amp; (numRetries &lt; <span class="number">3</span>))&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">            ss.setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (listenOnAllIPs) &#123;</span><br><span class="line">                <span class="keyword">int</span> port = view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid).electionAddr.getPort();</span><br><span class="line">                addr = <span class="keyword">new</span> InetSocketAddress(port);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addr = view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid).electionAddr;</span><br><span class="line">            &#125;</span><br><span class="line">            LOG.info(<span class="string">"My election bind port: "</span> + addr.toString());</span><br><span class="line">            setName(view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid).electionAddr.toString());</span><br><span class="line">            ss.bind(addr);</span><br><span class="line">            <span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line">                Socket client = ss.accept();</span><br><span class="line">                setSockOpts(client);</span><br><span class="line">                LOG.info(<span class="string">"Received connection request "</span> + client.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Receive and handle the connection request</span></span><br><span class="line">                <span class="comment">// asynchronously if the quorum sasl authentication is</span></span><br><span class="line">                <span class="comment">// enabled. This is required because sasl server</span></span><br><span class="line">                <span class="comment">// authentication process may take few seconds to finish,</span></span><br><span class="line">                <span class="comment">// this may delay next peer connection requests.</span></span><br><span class="line">                <span class="keyword">if</span> (quorumSaslAuthEnabled) &#123;</span><br><span class="line">                    receiveConnectionAsync(client);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    receiveConnection(client);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                numRetries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-接收连接请求"><a href="#3-2-2-接收连接请求" class="headerlink" title="3.2.2 接收连接请求"></a>3.2.2 接收连接请求</h4><p><code>receiveConnection</code> 会调用 <code>handleConnection</code> 方法，对 Socket 做一次读操作，接收对方发送过来的 sid。为了避免 peer 之间重复建立连接，这里仅允许高 sid 的实例向低 sid 的实例发起连接请求。</p><p>对于合法连接请求，<code>QuorumCnxManager</code> 根据 sid 分配独立的 <code>SendWorker</code> 和 <code>RecvWorker</code>，负责读写 Socket。<code>QuorumCnxManager</code> 中以 sid 为 key 保存了来自各个 peer 的连接对应的一些数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ConcurrentHashMap&lt;Long, SendWorker&gt; senderWorkerMap;</span><br><span class="line"><span class="keyword">final</span> ConcurrentHashMap&lt;Long, ArrayBlockingQueue&lt;ByteBuffer&gt;&gt; queueSendMap;</span><br><span class="line"><span class="keyword">final</span> ConcurrentHashMap&lt;Long, ByteBuffer&gt; lastMessageSent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ArrayBlockingQueue&lt;Message&gt; recvQueue;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.QuorumCnxManager#handleConnection</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleConnection</span><span class="params">(Socket sock, DataInputStream din)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Long sid = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Read server id</span></span><br><span class="line">            sid = din.readLong();</span><br><span class="line">            <span class="keyword">if</span> (sid &lt; <span class="number">0</span>) &#123; <span class="comment">// this is not a server id but a protocol version (see ZOOKEEPER-1633)</span></span><br><span class="line">                sid = din.readLong();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// next comes the #bytes in the remainder of the message</span></span><br><span class="line">                <span class="comment">// note that 0 bytes is fine (old servers)</span></span><br><span class="line">                <span class="keyword">int</span> num_remaining_bytes = din.readInt();</span><br><span class="line">                <span class="keyword">if</span> (num_remaining_bytes &lt; <span class="number">0</span> || num_remaining_bytes &gt; maxBuffer) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Unreasonable buffer length: &#123;&#125;"</span>, num_remaining_bytes);</span><br><span class="line">                    closeSocket(sock);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[num_remaining_bytes];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// remove the remainder of the message from din</span></span><br><span class="line">                <span class="keyword">int</span> num_read = din.read(b);</span><br><span class="line">                <span class="keyword">if</span> (num_read != num_remaining_bytes) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Read only "</span> + num_read + <span class="string">" bytes out of "</span> + num_remaining_bytes + <span class="string">" sent by server "</span> + sid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sid == QuorumPeer.OBSERVER_ID) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Choose identifier at random. We need a value to identify</span></span><br><span class="line"><span class="comment">                 * the connection.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                sid = observerCounter.getAndDecrement();</span><br><span class="line">                LOG.info(<span class="string">"Setting arbitrary identifier to observer: "</span> + sid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            closeSocket(sock);</span><br><span class="line">            LOG.warn(<span class="string">"Exception reading or writing challenge: "</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do authenticating learner</span></span><br><span class="line">        LOG.debug(<span class="string">"Authenticating learner server.id: &#123;&#125;"</span>, sid);</span><br><span class="line">        authServer.authenticate(sock, din);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//If wins the challenge, then close the new connection.</span></span><br><span class="line">        <span class="keyword">if</span> (sid &lt; <span class="keyword">this</span>.mySid) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This replica might still believe that the connection to sid is</span></span><br><span class="line"><span class="comment">             * up, so we have to shut down the workers before trying to open a</span></span><br><span class="line"><span class="comment">             * new connection.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SendWorker sw = senderWorkerMap.get(sid);</span><br><span class="line">            <span class="keyword">if</span> (sw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sw.finish();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Now we start a new connection</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            LOG.debug(<span class="string">"Create new connection to server: "</span> + sid);</span><br><span class="line">            closeSocket(sock);</span><br><span class="line">            connectOne(sid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Otherwise start worker threads to receive data.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SendWorker sw = <span class="keyword">new</span> SendWorker(sock, sid);</span><br><span class="line">            RecvWorker rw = <span class="keyword">new</span> RecvWorker(sock, din, sid, sw);</span><br><span class="line">            sw.setRecv(rw);</span><br><span class="line"></span><br><span class="line">            SendWorker vsw = senderWorkerMap.get(sid);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(vsw != <span class="keyword">null</span>)</span><br><span class="line">                vsw.finish();</span><br><span class="line">            </span><br><span class="line">            senderWorkerMap.put(sid, sw);</span><br><span class="line">            queueSendMap.putIfAbsent(sid, <span class="keyword">new</span> ArrayBlockingQueue&lt;ByteBuffer&gt;(SEND_CAPACITY));</span><br><span class="line">            </span><br><span class="line">            sw.start();</span><br><span class="line">            rw.start();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-主动发起连接请求"><a href="#3-2-3-主动发起连接请求" class="headerlink" title="3.2.3 主动发起连接请求"></a>3.2.3 主动发起连接请求</h4><p>若收到的连接请求的源服务器的 sid 更小，则关闭连接并调用 <code>connectOne</code>  方法主动向对方发起连接。这里的 <code>connectOne</code> 方法会根据是否已经与目标 peer 建立连接来判断是否需要建立连接。判断方法是检查 <code>senderWorkerMap</code> 里是否有 sid 对应的 <code>SendWorker</code>。若没有，则调用 <code>startConnection</code>  方法发起连接。</p><p>这里 <code>startConnection</code> 和前面的 <code>handleConnection</code> 的作用很相似，只不过一个用于主动发起连接请求，一个用于处理收到连接请求。相应地，这里仅允许向更低 sid 的 peer 发起连接。</p><p>对应地，在 <code>startConnection</code> 方法中，建立 TCP 连接后会将自己的 sid 发送给对方，供对方的 <code>handleConnection</code>  方法读取。</p><p><code>org.apache.zookeeper.server.quorum.QuorumCnxManager#startConnection</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">startConnection</span><span class="params">(Socket sock, Long sid)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DataOutputStream dout = <span class="keyword">null</span>;</span><br><span class="line">    DataInputStream din = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Sending id and challenge</span></span><br><span class="line">        dout = <span class="keyword">new</span> DataOutputStream(sock.getOutputStream());</span><br><span class="line">        dout.writeLong(<span class="keyword">this</span>.mySid);</span><br><span class="line">        dout.flush();</span><br><span class="line"></span><br><span class="line">        din = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(sock.getInputStream()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Ignoring exception reading or writing challenge: "</span>, e);</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// authenticate learner</span></span><br><span class="line">    authLearner.authenticate(sock, view.get(sid).hostname);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If lost the challenge, then drop the new connection</span></span><br><span class="line">    <span class="keyword">if</span> (sid &gt; <span class="keyword">this</span>.mySid) &#123;</span><br><span class="line">        LOG.info(<span class="string">"Have smaller server identifier, so dropping the "</span> +</span><br><span class="line">                 <span class="string">"connection: ("</span> + sid + <span class="string">", "</span> + <span class="keyword">this</span>.mySid + <span class="string">")"</span>);</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">        <span class="comment">// Otherwise proceed with the connection</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SendWorker sw = <span class="keyword">new</span> SendWorker(sock, sid);</span><br><span class="line">        RecvWorker rw = <span class="keyword">new</span> RecvWorker(sock, din, sid, sw);</span><br><span class="line">        sw.setRecv(rw);</span><br><span class="line"></span><br><span class="line">        SendWorker vsw = senderWorkerMap.get(sid);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(vsw != <span class="keyword">null</span>)</span><br><span class="line">            vsw.finish();</span><br><span class="line">        </span><br><span class="line">        senderWorkerMap.put(sid, sw);</span><br><span class="line">        queueSendMap.putIfAbsent(sid, <span class="keyword">new</span> ArrayBlockingQueue&lt;ByteBuffer&gt;(SEND_CAPACITY));</span><br><span class="line">        </span><br><span class="line">        sw.start();</span><br><span class="line">        rw.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在刚启动时，还没有向其他实例发起连接。</p><ul><li><code>RecvWorker</code> 负责从 Socket 中读出数据封装成 <code>Message</code> 放入 <code>recvQueue</code> 中。</li><li><code>SendWorker</code> 负责从 <code>queueSendMap</code> 中取出数据写入 Socket 并放入 <code>lastMessageSent</code>。这里有个细节：一旦 ZK 发现针对当前远程服务器的发送队列为空，会从 <code>lastMessageSent</code> 中取出一个最近发送过的消息再次发送。</li></ul><p><strong>总结一下：<code>Listener</code> 启动后，会监听选举端口上的连接请求，对每个连接请求，从其 Socket 中读取对方的 sid，并与自己的 sid 比较，判断连接发起流程是否合法。若不合法，则断开连接，由自己主动向对方的选举端口发起连接，并发送自己的 sid。对于每个合法连接请求，双方都会为其分配单独的 <code>SendWorker</code> 和 <code>RecvWorker</code>。那么这里有一个问题，最初的连接请求是如何发起的？后文可以看到，在 <code>QuorumPeer</code> 主线程启动后，每个 peer 都会根据集群的配置，向所有选举的 PARTICIPANT（非 OBSERVER）发起连接请求，并发送选票。</strong></p><h4 id="3-2-2-准备选举算法"><a href="#3-2-2-准备选举算法" class="headerlink" title="3.2.2 准备选举算法"></a>3.2.2 准备选举算法</h4><p>然后调用基于 TCP 的选举算法 FastLeaderElection。这里已经通过 FastLeaderElection 的构造函数初始化了一个 <code>Messenger</code> 实例，启动了 <code>WorkerSender</code> 和 <code>WorkerReceiver</code> 线程。</p><p><code>org.apache.zookeeper.server.quorum.FastLeaderElection</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FastLeaderElection</span><span class="params">(QuorumPeer self, QuorumCnxManager manager)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.manager = manager;</span><br><span class="line">    starter(self, manager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkedBlockingQueue&lt;ToSend&gt; sendqueue;</span><br><span class="line">LinkedBlockingQueue&lt;Notification&gt; recvqueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">starter</span><span class="params">(QuorumPeer self, QuorumCnxManager manager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.self = self;</span><br><span class="line">    proposedLeader = -<span class="number">1</span>;</span><br><span class="line">    proposedZxid = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    sendqueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;ToSend&gt;();</span><br><span class="line">    recvqueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;Notification&gt;();</span><br><span class="line">    <span class="keyword">this</span>.messenger = <span class="keyword">new</span> Messenger(manager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Messenger</span> </span>&#123;</span><br><span class="line">    Messenger(QuorumCnxManager manager) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ws = <span class="keyword">new</span> WorkerSender(manager);</span><br><span class="line"></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>.ws, <span class="string">"WorkerSender[myid="</span> + self.getId() + <span class="string">"]"</span>);</span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.wr = <span class="keyword">new</span> WorkerReceiver(manager);</span><br><span class="line"></span><br><span class="line">        t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>.wr, <span class="string">"WorkerReceiver[myid="</span> + self.getId() + <span class="string">"]"</span>);</span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>WorkerSender</code>：不断从 <code>sendqueue</code> 中获取待发送的选票，并将其传递给 <code>QuorumCnxManager</code> 的 <code>queueSendMap</code>。若还未与选票的目标服务器建立连接，则发起连接请求。</p><p> <code>org.apache.zookeeper.server.quorum.FastLeaderElection.Messenger.WorkerSender#run</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ToSend m = sendqueue.poll(<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span>(m == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            process(m);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.info(<span class="string">"WorkerSender is down"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(ToSend m)</span> </span>&#123;</span><br><span class="line">    ByteBuffer requestBuffer = buildMsg(m.state.ordinal(), m.leader, m.zxid, m.electionEpoch, m.peerEpoch);</span><br><span class="line">    manager.toSend(m.sid, requestBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>org.apache.zookeeper.server.quorum.QuorumCnxManager#toSend</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processes invoke this message to queue a message to send. Currently, </span></span><br><span class="line"><span class="comment"> * only leader election uses it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toSend</span><span class="params">(Long sid, ByteBuffer b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If sending message to myself, then simply enqueue it (loopback).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mySid == sid) &#123;</span><br><span class="line">         b.position(<span class="number">0</span>);</span><br><span class="line">         addToRecvQueue(<span class="keyword">new</span> Message(b.duplicate(), sid));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Otherwise send to the corresponding thread to send.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * Start a new connection if doesn't have one already.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         ArrayBlockingQueue&lt;ByteBuffer&gt; bq = <span class="keyword">new</span> ArrayBlockingQueue&lt;ByteBuffer&gt;(SEND_CAPACITY);</span><br><span class="line">         ArrayBlockingQueue&lt;ByteBuffer&gt; bqExisting = queueSendMap.putIfAbsent(sid, bq);</span><br><span class="line">         <span class="keyword">if</span> (bqExisting != <span class="keyword">null</span>) &#123;</span><br><span class="line">             addToSendQueue(bqExisting, b);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             addToSendQueue(bq, b);</span><br><span class="line">         &#125;</span><br><span class="line">         connectOne(sid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WorkerReceiver</code>：不断从 <code>QuorumCnxManager</code> 的 <code>recvQueue</code> 中拉取收到的选票。</p><p> 在该过程中如果当前服务器是 LOOKING 状态，将选票保存到 <code>recvQueue</code> 队列中。如果发现外部选票的选举轮次（逻辑时钟）小于自己的，则忽略该选票并立即发出自己的内部选票。</p><p> 如果当前服务器不是 LOOKING 状态，则忽略选票并将 Leader 信息以选票的形式发送出去。</p><p> <code>org.apache.zookeeper.server.quorum.FastLeaderElection.Messenger.WorkerReceiver#run</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Message response;</span><br><span class="line">    <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">        <span class="comment">// Sleeps on receive</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            response = manager.pollRecvQueue(<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span>(response == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!self.getVotingView().containsKey(response.sid))&#123;</span><br><span class="line">                Vote current = self.getCurrentVote();</span><br><span class="line">                ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification, current.getId(), current.getZxid(), logicalclock.get(), self.getPeerState(), response.sid, current.getPeerEpoch());</span><br><span class="line"></span><br><span class="line">                sendqueue.offer(notmsg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Instantiate Notification and set its attributes</span></span><br><span class="line">                Notification n = <span class="keyword">new</span> Notification();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// State of peer that sent this message</span></span><br><span class="line">                QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class="line">                <span class="keyword">switch</span> (response.buffer.getInt()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        ackstate = QuorumPeer.ServerState.FOLLOWING;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        ackstate = QuorumPeer.ServerState.LEADING;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        ackstate = QuorumPeer.ServerState.OBSERVING;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                n.leader = response.buffer.getLong();</span><br><span class="line">                n.zxid = response.buffer.getLong();</span><br><span class="line">                n.electionEpoch = response.buffer.getLong();</span><br><span class="line">                n.state = ackstate;</span><br><span class="line">                n.sid = response.sid;</span><br><span class="line">                <span class="keyword">if</span>(!backCompatibility)&#123;</span><br><span class="line">                    n.peerEpoch = response.buffer.getLong();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    n.peerEpoch = ZxidUtils.getEpochFromZxid(n.zxid);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                n.version = (response.buffer.remaining() &gt;= <span class="number">4</span>) ? response.buffer.getInt() : <span class="number">0x0</span>;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">if</span>(self.getPeerState() == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class="line">                    recvqueue.offer(n);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>((ackstate == QuorumPeer.ServerState.LOOKING) &amp;&amp; (n.electionEpoch &lt; logicalclock.get()))&#123;</span><br><span class="line">                        Vote v = getVote();</span><br><span class="line">                        ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification, v.getId(), v.getZxid(), logicalclock.get(), self.getPeerState(), response.sid, v.getPeerEpoch());</span><br><span class="line">                        sendqueue.offer(notmsg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Vote current = self.getCurrentVote();</span><br><span class="line">                    <span class="keyword">if</span>(ackstate == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class="line">                        ToSend notmsg;</span><br><span class="line">                        <span class="keyword">if</span>(n.version &gt; <span class="number">0x0</span>) &#123;</span><br><span class="line">                            notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification, current.getId(), current.getZxid(), current.getElectionEpoch(), self.getPeerState(), response.sid, current.getPeerEpoch());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Vote bcVote = self.getBCVote();</span><br><span class="line">                            notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification, bcVote.getId(), bcVote.getZxid(), bcVote.getElectionEpoch(), self.getPeerState(), response.sid, bcVote.getPeerEpoch());</span><br><span class="line">                       &#125;</span><br><span class="line">                    sendqueue.offer(notmsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Interrupted Exception while waiting for new message"</span> + e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-启动自己线程"><a href="#3-3-启动自己线程" class="headerlink" title="3.3 启动自己线程"></a>3.3 启动自己线程</h3><p>在等待其他节点提交自己申请的过程中，进入了 <code>QuorumPeer</code> 的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (getPeerState()) &#123;</span><br><span class="line">            <span class="keyword">case</span> LOOKING:</span><br><span class="line">                LOG.info(<span class="string">"LOOKING"</span>);</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                     setBCVote(<span class="keyword">null</span>);</span><br><span class="line">                     setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                     LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                     setPeerState(ServerState.LOOKING);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> OBSERVING:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOG.info(<span class="string">"OBSERVING"</span>);</span><br><span class="line">                    setObserver(makeObserver(logFactory));</span><br><span class="line">                    observer.observeLeader();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FOLLOWING:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOG.info(<span class="string">"FOLLOWING"</span>);</span><br><span class="line">                    setFollower(makeFollower(logFactory));</span><br><span class="line">                    follower.followLeader();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LEADING:</span><br><span class="line">                LOG.info(<span class="string">"LEADING"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    setLeader(makeLeader(logFactory));</span><br><span class="line">                    leader.lead();</span><br><span class="line">                    setLeader(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Leader-选举"><a href="#4-Leader-选举" class="headerlink" title="4. Leader 选举"></a>4. Leader 选举</h2><p><code>QuorumPeer</code> 是 ZooKeeper 服务器实例的托管者，在运行期间，<code>QuorumPeer</code> 的核心工作就是不断地检测当前服务器的状态，并做出相应的处理。在正常情况下，ZooKeeper 服务器的状态在 LOOKING、LEADING 和 FOLLOWING / OBSERVING 之间进行切换。而在启动阶段，<code>QuorumPeer</code> 的初始状态是 LOOKING，因此开始进行 Leader 选举。</p><p>在 LOOKING 状态下，会调用 <code>org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader</code> 方法进行 Leader 选举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;Long, Vote&gt; recvset = <span class="keyword">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class="line">HashMap&lt;Long, Vote&gt; outofelection = <span class="keyword">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class="line"><span class="keyword">int</span> notTimeout = finalizeWait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    logicalclock.incrementAndGet();</span><br><span class="line">    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">&#125;</span><br><span class="line">sendNotifications();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Loop in which we exchange notifications until we find a leader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> ((self.getPeerState() == ServerState.LOOKING) &amp;&amp; (!stop))&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Remove next notification from queue, times out after 2 times</span></span><br><span class="line"><span class="comment">     * the termination time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Sends more notifications if haven't received enough.</span></span><br><span class="line"><span class="comment">     * Otherwise processes new notification.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(manager.haveDelivered())&#123;</span><br><span class="line">            sendNotifications();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manager.connectAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Exponential backoff</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> tmpTimeOut = notTimeout*<span class="number">2</span>;</span><br><span class="line">        notTimeout = (tmpTimeOut &lt; maxNotificationInterval?tmpTimeOut:maxNotificationInterval);</span><br><span class="line">        LOG.info(<span class="string">"Notification time out: "</span> + notTimeout);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(self.getVotingView().containsKey(n.sid)) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Only proceed if the vote comes from a replica in the</span></span><br><span class="line"><span class="comment">         * voting view.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">switch</span> (n.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> LOOKING:</span><br><span class="line">                <span class="comment">// If notification &gt; current, replace and send messages out</span></span><br><span class="line">                <span class="keyword">if</span> (n.electionEpoch &gt; logicalclock.get()) &#123;</span><br><span class="line">                    logicalclock.set(n.electionEpoch);</span><br><span class="line">                    recvset.clear();</span><br><span class="line">                    <span class="keyword">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class="line">                        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">                    &#125;</span><br><span class="line">                    sendNotifications();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n.electionEpoch &lt; logicalclock.get()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">                    updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                    sendNotifications();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (termPredicate(recvset, <span class="keyword">new</span> Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch))) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Verify if there is any change in the proposed leader</span></span><br><span class="line">                    <span class="keyword">while</span>((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch))&#123;</span><br><span class="line">                            recvqueue.put(n);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * This predicate is true once we don't read any new</span></span><br><span class="line"><span class="comment">                     * relevant message from the reception queue</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING: learningState());</span><br><span class="line"></span><br><span class="line">                        Vote endVote = <span class="keyword">new</span> Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);</span><br><span class="line">                        leaveInstance(endVote);</span><br><span class="line">                        <span class="keyword">return</span> endVote;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OBSERVING:</span><br><span class="line">                     LOG.debug(<span class="string">"Notification from observer: "</span> + n.sid);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FOLLOWING:</span><br><span class="line">                <span class="keyword">case</span> LEADING:</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * Consider all notifications from the same epoch</span></span><br><span class="line"><span class="comment">                     * together.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span>(n.electionEpoch == logicalclock.get())&#123;</span><br><span class="line">                        recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line">                           </span><br><span class="line">                        <span class="keyword">if</span>(ooePredicate(recvset, outofelection, n)) &#123;</span><br><span class="line">                            self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING: learningState());</span><br><span class="line"></span><br><span class="line">                            Vote endVote = <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class="line">                            leaveInstance(endVote);</span><br><span class="line">                            <span class="keyword">return</span> endVote;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * Before joining an established ensemble, verify</span></span><br><span class="line"><span class="comment">                     * a majority is following the same leader.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    outofelection.put(n.sid, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line">           </span><br><span class="line">                    <span class="keyword">if</span>(ooePredicate(outofelection, outofelection, n)) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">                            logicalclock.set(n.electionEpoch);</span><br><span class="line">                            self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING: learningState());</span><br><span class="line">                        &#125;</span><br><span class="line">                        Vote endVote = <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class="line">                        leaveInstance(endVote);</span><br><span class="line">                        <span class="keyword">return</span> endVote;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    LOG.warn(<span class="string">"Notification state unrecognized: &#123;&#125; (n.state), &#123;&#125; (n.sid)"</span>, n.state, n.sid);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Ignoring notification from non-cluster member "</span> + n.sid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-自增选举轮次"><a href="#4-1-自增选举轮次" class="headerlink" title="4.1 自增选举轮次"></a>4.1 自增选举轮次</h3><p>ZK 在进行新一轮的投票时，会首先对 <code>logicalClock</code> 进行自增操作。</p><h3 id="4-2-初始化投票"><a href="#4-2-初始化投票" class="headerlink" title="4.2 初始化投票"></a>4.2 初始化投票</h3><p>在 <code>updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch())</code> 语句中，会设置初始化选票。这里要注意，对于 PARTICIPANT，选票中的 Leader SID 为服务器自己的 SID；而对于 OBSERVER，选票中的 Leader SID 为 <code>Long.MIN_VALUE</code>。类似地，选票中的 ZXID 和 peerEpoch 也为 <code>Long.MIN_VALUE</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getInitId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(self.getLearnerType() == LearnerType.PARTICIPANT)</span><br><span class="line">        <span class="keyword">return</span> self.getId();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Long.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getInitLastLoggedZxid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(self.getLearnerType() == LearnerType.PARTICIPANT)</span><br><span class="line">        <span class="keyword">return</span> self.getLastLoggedZxid();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Long.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getPeerEpoch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(self.getLearnerType() == LearnerType.PARTICIPANT)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> self.getCurrentEpoch();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    RuntimeException re = <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">    re.setStackTrace(e.getStackTrace());</span><br><span class="line">    <span class="keyword">throw</span> re;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Long.MIN_VALUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据结构 <code>Vote</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vote</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> version;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id; <span class="comment">// 当前服务器自身的 SID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> zxid; <span class="comment">// 当前服务器的最新 ZXID 值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> electionEpoch; <span class="comment">// 当前服务器的逻辑时钟</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> peerEpoch; <span class="comment">// 被推举的服务器的选举轮次</span></span><br><span class="line">    <span class="keyword">private</span> ServerState state; <span class="comment">// LOOKING</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-发送初始化投票"><a href="#4-3-发送初始化投票" class="headerlink" title="4.3 发送初始化投票"></a>4.3 发送初始化投票</h3><p>在 <code>sendNotifications</code> 方法中，会根据配置信息，向所有其他参与投票的 PARTICIPANT （即非 OBSERVER）发送 LOOKING 状态的投票。</p><p><code>org.apache.zookeeper.server.quorum.FastLeaderElection#sendNotifications</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Send notifications to all peers upon a change in our vote</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotifications</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (QuorumServer server : self.getVotingView().values()) &#123;</span><br><span class="line">        <span class="keyword">long</span> sid = server.id;</span><br><span class="line"></span><br><span class="line">        ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification,</span><br><span class="line">                proposedLeader,</span><br><span class="line">                proposedZxid,</span><br><span class="line">                logicalclock.get(),</span><br><span class="line">                QuorumPeer.ServerState.LOOKING,</span><br><span class="line">                sid,</span><br><span class="line">                proposedEpoch);</span><br><span class="line">        &#125;</span><br><span class="line">        sendqueue.offer(notmsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回忆前述 <code>WorkerSender</code> 的作用，这里也即是向配置文件中的其他 PARTICIPANT 发起连接的时机（但可能因为 sid 的规则限制被拒绝并由对方再次发起连接，或者该 PARTICIPANT 对应的实例尚未启动）。连接请求是发往其他所有 PARTICIPANT 的，因此服务器的启动顺序不影响整个流程。最终 PARTICIPANT 两两之间会建立连接，Observer 会与所有 PARTICIPANT 建立连接。</p><h3 id="4-4-接受外部投票"><a href="#4-4-接受外部投票" class="headerlink" title="4.4 接受外部投票"></a>4.4 接受外部投票</h3><p>如果发出选票的服务器 sid 不在集群配置的 PARTICIPANT 范围内，则 <code>WorkerReceiver</code> 立即用服务器当前选票作回应，该选票不会被添加到 <code>recvQueue</code> 中。这也就是说，虽然 Observer 也在 LOOKING 状态下向其他 PARTICIPANT 发出了自己的选票，但是会被其他 PARTICIPANT 忽略。</p><p>每台服务器会通过 <code>lookForLeader</code> 方法不断从 <code>recvQueue</code> 队列中获取外部投票。如果服务器发现无法获取到任何投票，那么就会立即确认自己是否和集群中其他服务器保持着有效连接。如果发现没有建立连接，那么就会马上建立连接。如果已经建立了连接，那么就再次发送自己当前的内部投票。</p><h3 id="4-5-判断选票状态"><a href="#4-5-判断选票状态" class="headerlink" title="4.5 判断选票状态"></a>4.5 判断选票状态</h3><ul><li>如果发送选票的服务器状态是 OBSERVING，则忽略该选票。</li><li>如果发送选票的服务器状态是 FOLLOWING 或者 LEADING（回忆前面说的 <code>WorkerReceiver</code> 的逻辑，服务器在非 LOOKING 状态下收到了来自 LOOKING 状态服务器的选票，则以内部投票进行响应），说明当前集群中已经完成了选举，则根据选票中的 LEADER 和 EPOCH  等信息更新自身状态。</li><li>如果发送选票的服务器状态是 LOOKING，进入下面的流程。</li></ul><h3 id="4-6-LOOKING-时选票处理流程"><a href="#4-6-LOOKING-时选票处理流程" class="headerlink" title="4.6 LOOKING 时选票处理流程"></a>4.6 LOOKING 时选票处理流程</h3><h4 id="4-6-1-比较逻辑时钟"><a href="#4-6-1-比较逻辑时钟" class="headerlink" title="4.6.1 比较逻辑时钟"></a>4.6.1 比较逻辑时钟</h4><p>在处理外部投票的时候，会根据逻辑时钟来进行不同的处理。</p><ul><li>外部投票的逻辑时钟大于内部投票。此时立即更新自己的逻辑时钟，并且清空所有已经收到的投票，然后使用初始化的投票来进行 PK 已确定是否变更内部投票。</li><li>外部投票的逻辑时钟小于内部投票。此时忽略该外部投票。</li><li>外部投票的逻辑时钟和内部投票一致。此时进行选票 PK。</li></ul><h4 id="4-6-2-选票-PK"><a href="#4-6-2-选票-PK" class="headerlink" title="4.6.2 选票 PK"></a>4.6.2 选票 PK</h4><ul><li>如果外部投票中被推举的 Leader 服务器的选举轮次（epoch）大于内部投票，那么就需要进行投票变更。</li><li>如果选举轮次一致，那么就对比两者的 ZXID，如果外部投票的 ZXID 大于内部投票，那么就需要进行投票变更。</li><li>如果两者的 ZXID 一致，那么就对比两者的 SID。如果外部投票的 SID 大于内部投票，那么就需要进行投票变更。</li></ul><p><code>org.apache.zookeeper.server.quorum.FastLeaderElection#totalOrderPredicate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">totalOrderPredicate</span><span class="params">(<span class="keyword">long</span> newId, <span class="keyword">long</span> newZxid, <span class="keyword">long</span> newEpoch, <span class="keyword">long</span> curId, <span class="keyword">long</span> curZxid, <span class="keyword">long</span> curEpoch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(self.getQuorumVerifier().getWeight(newId) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We return true if one of the following three cases hold:</span></span><br><span class="line"><span class="comment">     * 1- New epoch is higher</span></span><br><span class="line"><span class="comment">     * 2- New epoch is the same as current epoch, but new zxid is higher</span></span><br><span class="line"><span class="comment">     * 3- New epoch is the same as current epoch, new zxid is the same</span></span><br><span class="line"><span class="comment">     *  as current zxid, but server id is higher.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ((newEpoch &gt; curEpoch) || </span><br><span class="line">            ((newEpoch == curEpoch) &amp;&amp;</span><br><span class="line">            ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-3-变更投票"><a href="#4-6-3-变更投票" class="headerlink" title="4.6.3 变更投票"></a>4.6.3 变更投票</h4><p>使用外部投票的选票信息来覆盖内部投票，变更完成后，再次将这个变更后的内部投票发送出去。</p><p>注意到 OBSERVER 同样会做选票 PK、选票变更等操作，只不过其后续选票也会被忽略。</p><h4 id="4-6-4-选票归档"><a href="#4-6-4-选票归档" class="headerlink" title="4.6.4 选票归档"></a>4.6.4 选票归档</h4><p>无论是否进行了投票变更，都会将刚刚收到的那份外部投票放入 <code>recvset</code> 中进行归档。<code>recvset</code> 用于记录当前服务器再本轮次的 Leader 选举中收到的所有外部投票，并按 SID 分组。</p><h4 id="4-6-5-统计投票"><a href="#4-6-5-统计投票" class="headerlink" title="4.6.5 统计投票"></a>4.6.5 统计投票</h4><p>统计集群中是否有过半的服务器认可了当前的内部投票。如果确定已经有过半的服务器认可了该内部投票，则终止投票。</p><p><code>org.apache.zookeeper.server.quorum.FastLeaderElection#termPredicate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Termination predicate. Given a set of votes, determines if</span></span><br><span class="line"><span class="comment">     * have sufficient to declare the end of the election round.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> votes    Set of votes</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> l        Identifier of the vote received last</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> zxid     zxid of the the vote received last</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">termPredicate</span><span class="params">(HashMap&lt;Long, Vote&gt; votes, Vote vote)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Long&gt; set = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * First make the views consistent. Sometimes peers will have</span></span><br><span class="line"><span class="comment">         * different zxids for a server depending on timing.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Long,Vote&gt; entry : votes.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vote.equals(entry.getValue()))&#123;</span><br><span class="line">                set.add(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.getQuorumVerifier().containsQuorum(set);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-6-更新服务器状态"><a href="#4-6-6-更新服务器状态" class="headerlink" title="4.6.6 更新服务器状态"></a>4.6.6 更新服务器状态</h4><p>服务器会首先判断当前被过半服务器认可的投票所对应的 Leader 服务器是否是自己，如果是自己的话，那么就会将自己的服务器状态更新为 LEADING，否则根据具体情况来确定自己是 FOLLOWING（自己是 PARTICIPANT） 或是 OBSERVING（自己不是 PARTICIPANT）。</p><h2 id="5-选举时序图"><a href="#5-选举时序图" class="headerlink" title="5. 选举时序图"></a>5. 选举时序图</h2><p><img src="https://user-images.githubusercontent.com/12514722/34102275-74faa05e-e423-11e7-8984-e2ec3023d32b.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/12514722/34352667-e375ad4e-ea5e-11e7-91d3-db13db78fca2.png" alt="image"></p><h2 id="6-Follower-启动"><a href="#6-Follower-启动" class="headerlink" title="6. Follower 启动"></a>6. Follower 启动</h2><p>回到 <code>QuorumPeer</code> 的主线程，当服务器状态变为非 LOOKING 时，会根据自己的角色创建相应的服务器实例，并开始进入各自角色的主流程。</p><p><code>org.apache.zookeeper.server.quorum.Follower#followLeader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * the main method called by the follower to follow the leader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">followLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    self.end_fle = Time.currentElapsedTime();</span><br><span class="line">    <span class="keyword">long</span> electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">    self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">    LOG.info(<span class="string">"FOLLOWING - LEADER ELECTION TOOK - &#123;&#125;"</span>, electionTimeTaken);</span><br><span class="line">    self.start_fle = <span class="number">0</span>;</span><br><span class="line">    self.end_fle = <span class="number">0</span>;</span><br><span class="line">    fzk.registerJMX(<span class="keyword">new</span> FollowerBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QuorumServer leaderServer = findLeader();            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectToLeader(leaderServer.addr, leaderServer.hostname);</span><br><span class="line">            <span class="keyword">long</span> newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//check to see if the leader zxid is lower than ours</span></span><br><span class="line">            <span class="comment">//this should never happen but is just a safety check</span></span><br><span class="line">            <span class="keyword">long</span> newEpoch = ZxidUtils.getEpochFromZxid(newEpochZxid);</span><br><span class="line">            <span class="keyword">if</span> (newEpoch &lt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">                LOG.error(<span class="string">"Proposed leader epoch "</span> + ZxidUtils.zxidToString(newEpochZxid)</span><br><span class="line">                        + <span class="string">" is less than our accepted epoch "</span> + ZxidUtils.zxidToString(self.getAcceptedEpoch()));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Error: Epoch of leader is lower"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            syncWithLeader(newEpochZxid);                </span><br><span class="line">            QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">this</span>.isRunning()) &#123;</span><br><span class="line">                readPacket(qp);</span><br><span class="line">                processPacket(qp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Exception when following the leader"</span>, e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// clear pending revalidations</span></span><br><span class="line">            pendingRevalidations.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        zk.unregisterJMX((Learner)<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-创建服务器实例"><a href="#6-1-创建服务器实例" class="headerlink" title="6.1 创建服务器实例"></a>6.1 创建服务器实例</h3><p>创建 <code>Follower</code> 和 <code>FollowerZooKeeperServer</code> 实例。</p><h3 id="6-2-和-Leader-建立连接"><a href="#6-2-和-Leader-建立连接" class="headerlink" title="6.2 和 Leader 建立连接"></a>6.2 和 Leader 建立连接</h3><p>所有的 Learner 服务器在启动完毕后，会从 Leader 选举的投票结果中找到当前集群中的 Leader 服务器，然后与其建立连接。</p><h3 id="6-3-向-Leader-注册"><a href="#6-3-向-Leader-注册" class="headerlink" title="6.3 向 Leader 注册"></a>6.3 向 Leader 注册</h3><p>将 Learner 服务器自己的基本信息发送给 Leader 服务器，即 <code>LearnerInfo</code>，包括 SID 和最新的 ZXID。</p><h3 id="6-4-发送-ACK-信息"><a href="#6-4-发送-ACK-信息" class="headerlink" title="6.4 发送 ACK 信息"></a>6.4 发送 ACK 信息</h3><p>Learner 在收到来自 Leader 的 <code>LEADERINFO</code> 消息后，解析出 epoch 和 ZXID，然后向 Leader 反馈一个 <code>ACKEPOCH</code> 响应。</p><p><code>org.apache.zookeeper.server.quorum.Learner#registerWithLeader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Once connected to the leader, perform the handshake protocol to</span></span><br><span class="line"><span class="comment"> * establish a following / observing connection. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pktType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the zxid the Leader sends for synchronization purposes.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">registerWithLeader</span><span class="params">(<span class="keyword">int</span> pktType)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Send follower info, including last zxid and sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">long</span> lastLoggedZxid = self.getLastLoggedZxid();</span><br><span class="line">    QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();                </span><br><span class="line">    qp.setType(pktType);</span><br><span class="line">    qp.setZxid(ZxidUtils.makeZxid(self.getAcceptedEpoch(), <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Add sid to payload</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LearnerInfo li = <span class="keyword">new</span> LearnerInfo(self.getId(), <span class="number">0x10000</span>);</span><br><span class="line">    ByteArrayOutputStream bsid = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(bsid);</span><br><span class="line">    boa.writeRecord(li, <span class="string">"LearnerInfo"</span>);</span><br><span class="line">    qp.setData(bsid.toByteArray());</span><br><span class="line">    </span><br><span class="line">    writePacket(qp, <span class="keyword">true</span>);</span><br><span class="line">    readPacket(qp);        </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> newEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());</span><br><span class="line">    <span class="keyword">if</span> (qp.getType() == Leader.LEADERINFO) &#123;</span><br><span class="line">        <span class="comment">// we are connected to a 1.0 server so accept the new epoch and read the next packet</span></span><br><span class="line">        leaderProtocolVersion = ByteBuffer.wrap(qp.getData()).getInt();</span><br><span class="line">        <span class="keyword">byte</span> epochBytes[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);</span><br><span class="line">        <span class="keyword">if</span> (newEpoch &gt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">            wrappedEpochBytes.putInt((<span class="keyword">int</span>)self.getCurrentEpoch());</span><br><span class="line">            self.setAcceptedEpoch(newEpoch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newEpoch == self.getAcceptedEpoch()) &#123;</span><br><span class="line">            <span class="comment">// since we have already acked an epoch equal to the leaders, we cannot ack</span></span><br><span class="line">            <span class="comment">// again, but we still need to send our lastZxid to the leader so that we can</span></span><br><span class="line">            <span class="comment">// sync with it if it does assume leadership of the epoch.</span></span><br><span class="line">            <span class="comment">// the -1 indicates that this reply should not count as an ack for the new epoch</span></span><br><span class="line">            wrappedEpochBytes.putInt(-<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Leaders epoch, "</span> + newEpoch + <span class="string">" is less than accepted epoch, "</span> + self.getAcceptedEpoch());</span><br><span class="line">    &#125;</span><br><span class="line">        QuorumPacket ackNewEpoch = <span class="keyword">new</span> QuorumPacket(Leader.ACKEPOCH, lastLoggedZxid, epochBytes, <span class="keyword">null</span>);</span><br><span class="line">        writePacket(ackNewEpoch, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ZxidUtils.makeZxid(newEpoch, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newEpoch &gt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">            self.setAcceptedEpoch(newEpoch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qp.getType() != Leader.NEWLEADER) &#123;</span><br><span class="line">            LOG.error(<span class="string">"First packet should have been NEWLEADER"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"First packet should have been NEWLEADER"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> qp.getZxid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-数据同步"><a href="#6-5-数据同步" class="headerlink" title="6.5 数据同步"></a>6.5 数据同步</h3><p>参见 <a href="https://xyq000.github.io/2017/12/25/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：数据与存储</a>。</p><p>这里会将自己持有的 <code>SessionTracker</code> 设置为 <code>LearnerSessionTracker</code>。</p><h3 id="6-6-启动-FollowerZooKeeperServer"><a href="#6-6-启动-FollowerZooKeeperServer" class="headerlink" title="6.6 启动 FollowerZooKeeperServer"></a>6.6 启动 FollowerZooKeeperServer</h3><h3 id="6-7-处理与-Leader-的后续交互"><a href="#6-7-处理与-Leader-的后续交互" class="headerlink" title="6.7 处理与 Leader 的后续交互"></a>6.7 处理与 Leader 的后续交互</h3><h2 id="7-Leader-启动"><a href="#7-Leader-启动" class="headerlink" title="7. Leader 启动"></a>7. Leader 启动</h2><p><code>org.apache.zookeeper.server.quorum.Leader#lead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method is main function that is called to lead</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lead</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    self.end_fle = Time.currentElapsedTime();</span><br><span class="line">    <span class="keyword">long</span> electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">    self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">    LOG.info(<span class="string">"LEADING - LEADER ELECTION TOOK - &#123;&#125;"</span>, electionTimeTaken);</span><br><span class="line">    self.start_fle = <span class="number">0</span>;</span><br><span class="line">    self.end_fle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    zk.registerJMX(<span class="keyword">new</span> LeaderBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        self.tick.set(<span class="number">0</span>);</span><br><span class="line">        zk.loadData();</span><br><span class="line">        </span><br><span class="line">        leaderStateSummary = <span class="keyword">new</span> StateSummary(self.getCurrentEpoch(), zk.getLastProcessedZxid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start thread that waits for connection requests from </span></span><br><span class="line">        <span class="comment">// new followers.</span></span><br><span class="line">        cnxAcceptor = <span class="keyword">new</span> LearnerCnxAcceptor();</span><br><span class="line">        cnxAcceptor.start();</span><br><span class="line">        </span><br><span class="line">        readyToStart = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">long</span> epoch = getEpochToPropose(self.getId(), self.getAcceptedEpoch());</span><br><span class="line">        </span><br><span class="line">        zk.setZxid(ZxidUtils.makeZxid(epoch, <span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            lastProposed = zk.getZxid();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newLeaderProposal.packet = <span class="keyword">new</span> QuorumPacket(NEWLEADER, zk.getZxid(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((newLeaderProposal.packet.getZxid() &amp; <span class="number">0xffffffffL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            LOG.info(<span class="string">"NEWLEADER proposal has Zxid of "</span> + Long.toHexString(newLeaderProposal.packet.getZxid()));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        waitForEpochAck(self.getId(), leaderStateSummary);</span><br><span class="line">        self.setCurrentEpoch(epoch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We have to get at least a majority of servers in sync with</span></span><br><span class="line">        <span class="comment">// us. We do this by waiting for the NEWLEADER packet to get</span></span><br><span class="line">        <span class="comment">// acknowledged</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            waitForNewLeaderAck(self.getId(), zk.getZxid(), LearnerType.PARTICIPANT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            shutdown(<span class="string">"Waiting for a quorum of followers, only synced with sids: [ "</span> + getSidSetString(newLeaderProposal.ackSet) + <span class="string">" ]"</span>);</span><br><span class="line">            HashSet&lt;Long&gt; followerSet = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line">            <span class="keyword">for</span> (LearnerHandler f : learners)</span><br><span class="line">                followerSet.add(f.getSid());</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> (self.getQuorumVerifier().containsQuorum(followerSet)) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Enough followers present. "</span></span><br><span class="line">                        + <span class="string">"Perhaps the initTicks need to be increased."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(self.tickTime);</span><br><span class="line">            self.tick.incrementAndGet();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        startZkServer();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * WARNING: do not use this for anything other than QA testing</span></span><br><span class="line"><span class="comment">         * on a real cluster. Specifically to enable verification that quorum</span></span><br><span class="line"><span class="comment">         * can handle the lower 32bit roll-over issue identified in</span></span><br><span class="line"><span class="comment">         * ZOOKEEPER-1277. Without this option it would take a very long</span></span><br><span class="line"><span class="comment">         * time (on order of a month say) to see the 4 billion writes</span></span><br><span class="line"><span class="comment">         * necessary to cause the roll-over to occur.</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * This field allows you to override the zxid of the server. Typically</span></span><br><span class="line"><span class="comment">         * you'll want to set it to something like 0xfffffff0 and then</span></span><br><span class="line"><span class="comment">         * start the quorum, run some operations and see the re-election.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String initialZxid = System.getProperty(<span class="string">"zookeeper.testingonly.initialZxid"</span>);</span><br><span class="line">        <span class="keyword">if</span> (initialZxid != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> zxid = Long.parseLong(initialZxid);</span><br><span class="line">            zk.setZxid((zk.getZxid() &amp; <span class="number">0xffffffff00000000L</span>) | zxid);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!System.getProperty(<span class="string">"zookeeper.leaderServes"</span>, <span class="string">"yes"</span>).equals(<span class="string">"no"</span>)) &#123;</span><br><span class="line">            self.cnxnFactory.setZooKeeperServer(zk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Everything is a go, simply start counting the ticks</span></span><br><span class="line">        <span class="comment">// WARNING: I couldn't find any wait statement on a synchronized</span></span><br><span class="line">        <span class="comment">// block that would be notified by this notifyAll() call, so</span></span><br><span class="line">        <span class="comment">// I commented it out</span></span><br><span class="line">        <span class="comment">//synchronized (this) &#123;</span></span><br><span class="line">        <span class="comment">//    notifyAll();</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">// We ping twice a tick, so we only update the tick every other</span></span><br><span class="line">        <span class="comment">// iteration</span></span><br><span class="line">        <span class="keyword">boolean</span> tickSkip = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(self.tickTime / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (!tickSkip) &#123;</span><br><span class="line">                self.tick.incrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">            HashSet&lt;Long&gt; syncedSet = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// lock on the followers when we use it.</span></span><br><span class="line">            syncedSet.add(self.getId());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (LearnerHandler f : getLearners()) &#123;</span><br><span class="line">                <span class="comment">// Synced set is used to check we have a supporting quorum, so only</span></span><br><span class="line">                <span class="comment">// PARTICIPANT, not OBSERVER, learners should be used</span></span><br><span class="line">                <span class="keyword">if</span> (f.synced() &amp;&amp; f.getLearnerType() == LearnerType.PARTICIPANT) &#123;</span><br><span class="line">                    syncedSet.add(f.getSid());</span><br><span class="line">                &#125;</span><br><span class="line">                f.ping();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// check leader running status</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.isRunning()) &#123;</span><br><span class="line">                shutdown(<span class="string">"Unexpected internal error"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!tickSkip &amp;&amp; !self.getQuorumVerifier().containsQuorum(syncedSet)) &#123;</span><br><span class="line">            <span class="comment">//if (!tickSkip &amp;&amp; syncedCount &lt; self.quorumPeers.size() / 2) &#123;</span></span><br><span class="line">                <span class="comment">// Lost quorum, shutdown</span></span><br><span class="line">                shutdown(<span class="string">"Not sufficient followers synced, only synced with sids: [ "</span></span><br><span class="line">                        + getSidSetString(syncedSet) + <span class="string">" ]"</span>);</span><br><span class="line">                <span class="comment">// make sure the order is the same!</span></span><br><span class="line">                <span class="comment">// the leader goes to looking</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">          &#125; </span><br><span class="line">          tickSkip = !tickSkip;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        zk.unregisterJMX(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-创建服务器实例"><a href="#7-1-创建服务器实例" class="headerlink" title="7.1 创建服务器实例"></a>7.1 创建服务器实例</h3><p>创建 <code>Leader</code> 和 <code>LeaderZooKeeperServer</code> 实例。</p><h3 id="7-2-启动-LearnerCnxAcceptor"><a href="#7-2-启动-LearnerCnxAcceptor" class="headerlink" title="7.2 启动 LearnerCnxAcceptor"></a>7.2 启动 LearnerCnxAcceptor</h3><p>创建并启动 Learner 接收器 <code>LearnerCnxAcceptor</code>，负责接收所有非 Leader 服务器的连接请求，创建并启动对应的 <code>LearnerHandler</code>。</p><p><code>org.apache.zookeeper.server.quorum.Leader.LearnerCnxAcceptor#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line">        <span class="comment">// start with the initLimit, once the ack is processed</span></span><br><span class="line">        <span class="comment">// in LearnerHandler switch to the syncLimit</span></span><br><span class="line">        s.setSoTimeout(self.tickTime * self.initLimit);</span><br><span class="line">        s.setTcpNoDelay(nodelay);</span><br><span class="line"></span><br><span class="line">        BufferedInputStream is = <span class="keyword">new</span> BufferedInputStream(s.getInputStream());</span><br><span class="line">        LearnerHandler fh = <span class="keyword">new</span> LearnerHandler(s, is, Leader.<span class="keyword">this</span>);</span><br><span class="line">        fh.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">            stop = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SaslException e)&#123;</span><br><span class="line">        LOG.error(<span class="string">"Exception while connecting to quorum learner"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-创建-LearnerHandler"><a href="#7-3-创建-LearnerHandler" class="headerlink" title="7.3 创建 LearnerHandler"></a>7.3 创建 LearnerHandler</h3><p>Leader 接收到来自其他机器的连接创建请求后，会为每一个 Learner 创建一个 <code>LearnerHandler</code> 实例，以 TCP 长连接的形式负责 Leader 和 Learner 之间几乎所有的消息通信和数据同步。</p><h3 id="7-4-解析-Learner-信息，计算新的-epoch"><a href="#7-4-解析-Learner-信息，计算新的-epoch" class="headerlink" title="7.4 解析 Learner 信息，计算新的 epoch"></a>7.4 解析 Learner 信息，计算新的 epoch</h3><p><code>org.apache.zookeeper.server.quorum.Leader#getEpochToPropose</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> HashSet&lt;Long&gt; connectingFollowers = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getEpochToPropose</span><span class="params">(<span class="keyword">long</span> sid, <span class="keyword">long</span> lastAcceptedEpoch)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(connectingFollowers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!waitingForNewEpoch) &#123;</span><br><span class="line">            <span class="keyword">return</span> epoch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lastAcceptedEpoch &gt;= epoch) &#123;</span><br><span class="line">            epoch = lastAcceptedEpoch+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        connectingFollowers.add(sid);</span><br><span class="line">        QuorumVerifier verifier = self.getQuorumVerifier();</span><br><span class="line">        <span class="keyword">if</span> (connectingFollowers.contains(self.getId()) &amp;&amp; </span><br><span class="line">                                        verifier.containsQuorum(connectingFollowers)) &#123;</span><br><span class="line">            waitingForNewEpoch = <span class="keyword">false</span>;</span><br><span class="line">            self.setAcceptedEpoch(epoch);</span><br><span class="line">            connectingFollowers.notifyAll();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = Time.currentElapsedTime();</span><br><span class="line">            <span class="keyword">long</span> cur = start;</span><br><span class="line">            <span class="keyword">long</span> end = start + self.getInitLimit()*self.getTickTime();</span><br><span class="line">            <span class="keyword">while</span>(waitingForNewEpoch &amp;&amp; cur &lt; end) &#123;</span><br><span class="line">                connectingFollowers.wait(end - cur);</span><br><span class="line">                cur = Time.currentElapsedTime();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (waitingForNewEpoch) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(<span class="string">"Timeout while waiting for epoch from quorum"</span>);        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> epoch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Leader 服务器在接收到 Learner 的基本信息后，会解析出该 Learner 的 SID 和 ZXID，然后根据该 Learner 的 ZXID 解析出其对应的 epoch_of_learner，和当前 Leader 的 epoch_of_leader 进行比较，如果 epoch_of_learner 更大，则更新 epoch_of_learner：</p><p>$$<br>epoch_of_learner = epoch_of_learner + 1<br>$$<br>Leader 的 <code>lead</code> 方法和各个 <code>LearnerHandler</code> 线程会阻塞在 <code>getEpochToPropose</code> 方法处，直到过半的 Quorum 已经向 Leader 进行了注册，Leader 就可以确定当前集群的 epoch 了，并将 <code>waitingForEpoch</code> 标记设置为 false。</p><h3 id="7-5-发送-Leader-状态"><a href="#7-5-发送-Leader-状态" class="headerlink" title="7.5 发送 Leader 状态"></a>7.5 发送 Leader 状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> HashSet&lt;Long&gt; electingFollowers = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> electionFinished = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitForEpochAck</span><span class="params">(<span class="keyword">long</span> id, StateSummary ss)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(electingFollowers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (electionFinished) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ss.getCurrentEpoch() != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ss.isMoreRecentThan(leaderStateSummary)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Follower is ahead of the leader, leader summary: "</span> + leaderStateSummary.getCurrentEpoch() + <span class="string">" (current epoch), "</span> + leaderStateSummary.getLastZxid() + <span class="string">" (last zxid)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            electingFollowers.add(id);</span><br><span class="line">        &#125;</span><br><span class="line">        QuorumVerifier verifier = self.getQuorumVerifier();</span><br><span class="line">        <span class="keyword">if</span> (electingFollowers.contains(self.getId()) &amp;&amp; verifier.containsQuorum(electingFollowers)) &#123;</span><br><span class="line">            electionFinished = <span class="keyword">true</span>;</span><br><span class="line">            electingFollowers.notifyAll();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">            <span class="keyword">long</span> start = Time.currentElapsedTime();</span><br><span class="line">            <span class="keyword">long</span> cur = start;</span><br><span class="line">            <span class="keyword">long</span> end = start + self.getInitLimit()*self.getTickTime();</span><br><span class="line">            <span class="keyword">while</span>(!electionFinished &amp;&amp; cur &lt; end) &#123;</span><br><span class="line">                electingFollowers.wait(end - cur);</span><br><span class="line">                cur = Time.currentElapsedTime();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!electionFinished) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(<span class="string">"Timeout while waiting for epoch to be acked by quorum"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算出新的 epoch 之后，各个 <code>LearnerHandler</code> 会将该信息以一个 <code>LEADERINFO</code> 消息的形式发送给 Learner，同时等待 Learner 以 <code>ACKEPOCH</code>  消息进行响应。此时，Leader 的 <code>lead</code> 方法和各个 <code>LearnerHandler</code> 线程会阻塞在 <code>waitForEpochAck</code> 方法处，直到有过半的 Learner 确认了新的 epoch，然后将 <code>electionFinished</code> 标记设置为 true。</p><p>这里存在和计算 epoch 时一样的问题。</p><h3 id="7-8-数据同步"><a href="#7-8-数据同步" class="headerlink" title="7.8 数据同步"></a>7.8 数据同步</h3><p>Leader 服务器收到 Learner 的 <code>ACKEPOCH</code> 消息后，就可以开始与 Learner 进行数据同步了。同步完成后根据 Learn 的类型将 <code>LearnerHandler</code> 添加到 <code>forwardingFollowers</code> 或 <code>observingLearners</code> 集合中。</p><p>参见 <a href="https://xyq000.github.io/2017/12/25/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：数据与存储</a></p><h3 id="7-9-启动-LeaderZooKeeperServer"><a href="#7-9-启动-LeaderZooKeeperServer" class="headerlink" title="7.9 启动 LeaderZooKeeperServer"></a>7.9 启动 LeaderZooKeeperServer</h3><h3 id="7-10-处理与-Learner-的后续交互"><a href="#7-10-处理与-Learner-的后续交互" class="headerlink" title="7.10 处理与 Learner 的后续交互"></a>7.10 处理与 Learner 的后续交互</h3><h2 id="8-Observer-启动"><a href="#8-Observer-启动" class="headerlink" title="8. Observer 启动"></a>8. Observer 启动</h2><p>当服务器状态变为 OBSERVING 时，服务器创建 <code>Observer</code> 和 <code>ObserverZooKeeperServer</code> 实例，并调用 <code>org.apache.zookeeper.server.quorum.Observer#observeLeader</code> 方法处理与 Leader 的后续流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * the main method called by the observer to observe the leader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">observeLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    zk.registerJMX(<span class="keyword">new</span> ObserverBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QuorumServer leaderServer = findLeader();</span><br><span class="line">        LOG.info(<span class="string">"Observing "</span> + leaderServer.addr);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectToLeader(leaderServer.addr, leaderServer.hostname);</span><br><span class="line">            <span class="keyword">long</span> newLeaderZxid = registerWithLeader(Leader.OBSERVERINFO);</span><br><span class="line"></span><br><span class="line">            syncWithLeader(newLeaderZxid);</span><br><span class="line">            QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">this</span>.isRunning()) &#123;</span><br><span class="line">                readPacket(qp);</span><br><span class="line">                processPacket(qp);                   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Exception when observing the leader"</span>, e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// clear pending revalidations</span></span><br><span class="line">            pendingRevalidations.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        zk.unregisterJMX(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-ZooKeeperServer-的启动与请求链初始化"><a href="#9-ZooKeeperServer-的启动与请求链初始化" class="headerlink" title="9. ZooKeeperServer 的启动与请求链初始化"></a>9. ZooKeeperServer 的启动与请求链初始化</h2><p><img src="https://user-images.githubusercontent.com/12514722/34108731-2851130a-e43c-11e7-8f19-e2b8cb1dab52.jpg" alt="diagram"></p><p><code>org.apache.zookeeper.server.ZooKeeperServer#startup</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">        createSessionTracker();</span><br><span class="line">    &#125;</span><br><span class="line">    startSessionTracker();</span><br><span class="line">    setupRequestProcessors();</span><br><span class="line"></span><br><span class="line">    registerJMX();</span><br><span class="line"></span><br><span class="line">    setState(State.RUNNING);</span><br><span class="line">    notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建并启动会话管理器。</p></li><li><p>初始化 ZooKeeper 的请求处理链。</p><p><code>org.apache.zookeeper.server.quorum.LeaderZooKeeperServer#setupRequestProcessors</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupRequestProcessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RequestProcessor finalProcessor = <span class="keyword">new</span> FinalRequestProcessor(<span class="keyword">this</span>);</span><br><span class="line">    RequestProcessor toBeAppliedProcessor = <span class="keyword">new</span> Leader.ToBeAppliedRequestProcessor(</span><br><span class="line">            finalProcessor, getLeader().toBeApplied);</span><br><span class="line">    commitProcessor = <span class="keyword">new</span> CommitProcessor(toBeAppliedProcessor,</span><br><span class="line">            Long.toString(getServerId()), <span class="keyword">false</span>,</span><br><span class="line">            getZooKeeperServerListener());</span><br><span class="line">    commitProcessor.start();</span><br><span class="line">    ProposalRequestProcessor proposalProcessor = <span class="keyword">new</span> ProposalRequestProcessor(<span class="keyword">this</span>,</span><br><span class="line">            commitProcessor);</span><br><span class="line">    proposalProcessor.initialize();</span><br><span class="line">    firstProcessor = <span class="keyword">new</span> PrepRequestProcessor(<span class="keyword">this</span>, proposalProcessor);</span><br><span class="line">    ((PrepRequestProcessor)firstProcessor).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.FollowerZooKeeperServer#setupRequestProcessors</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupRequestProcessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RequestProcessor finalProcessor = <span class="keyword">new</span> FinalRequestProcessor(<span class="keyword">this</span>);</span><br><span class="line">    commitProcessor = <span class="keyword">new</span> CommitProcessor(finalProcessor,</span><br><span class="line">            Long.toString(getServerId()), <span class="keyword">true</span>,</span><br><span class="line">            getZooKeeperServerListener());</span><br><span class="line">    commitProcessor.start();</span><br><span class="line">    firstProcessor = <span class="keyword">new</span> FollowerRequestProcessor(<span class="keyword">this</span>, commitProcessor);</span><br><span class="line">    ((FollowerRequestProcessor) firstProcessor).start();</span><br><span class="line">    syncProcessor = <span class="keyword">new</span> SyncRequestProcessor(<span class="keyword">this</span>,</span><br><span class="line">            <span class="keyword">new</span> SendAckRequestProcessor((Learner)getFollower()));</span><br><span class="line">    syncProcessor.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.ObserverZooKeeperServer#setupRequestProcessors</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupRequestProcessors</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">    <span class="comment">// We might consider changing the processor behaviour of </span></span><br><span class="line">    <span class="comment">// Observers to, for example, remove the disk sync requirements.</span></span><br><span class="line">    <span class="comment">// Currently, they behave almost exactly the same as followers.</span></span><br><span class="line">    RequestProcessor finalProcessor = <span class="keyword">new</span> FinalRequestProcessor(<span class="keyword">this</span>);</span><br><span class="line">    commitProcessor = <span class="keyword">new</span> CommitProcessor(finalProcessor,</span><br><span class="line">            Long.toString(getServerId()), <span class="keyword">true</span>,</span><br><span class="line">            getZooKeeperServerListener());</span><br><span class="line">    commitProcessor.start();</span><br><span class="line">    firstProcessor = <span class="keyword">new</span> ObserverRequestProcessor(<span class="keyword">this</span>, commitProcessor);</span><br><span class="line">    ((ObserverRequestProcessor) firstProcessor).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Observer should write to disk, so that the it won't request</span></span><br><span class="line"><span class="comment">     * too old txn from the leader which may lead to getting an entire</span></span><br><span class="line"><span class="comment">     * snapshot.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * However, this may degrade performance as it has to write to disk</span></span><br><span class="line"><span class="comment">     * and do periodic snapshot which may double the memory requirements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (syncRequestProcessorEnabled) &#123;</span><br><span class="line">        syncProcessor = <span class="keyword">new</span> SyncRequestProcessor(<span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">        syncProcessor.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册 JMX 服务。</p></li></ol><h2 id="10-自问自答"><a href="#10-自问自答" class="headerlink" title="10. 自问自答"></a>10. 自问自答</h2><h3 id="10-1-Observer-如何获知选举结果？"><a href="#10-1-Observer-如何获知选举结果？" class="headerlink" title="10.1 Observer 如何获知选举结果？"></a>10.1 Observer 如何获知选举结果？</h3><p>Observer 在启动时向 PARTICIPANT 发送的初始选票会被 PARTICIPANT 忽略，且 PARTICIPANT 不会在选举过程中向 Observer 发送选票。此时，根据 <code>org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader</code>，Observer 将不断向 PARTICIPANT 发送初始选票，直到集群选举完毕，某一个变更为 LEADING 或 FOLLOWING 状态的服务器收到了它的选票并且向它回复了选举结果。</p><h3 id="10-2-QuorumVerifier-如何检查一个集合是否包含-Quorum？"><a href="#10-2-QuorumVerifier-如何检查一个集合是否包含-Quorum？" class="headerlink" title="10.2 QuorumVerifier 如何检查一个集合是否包含 Quorum？"></a>10.2 QuorumVerifier 如何检查一个集合是否包含 Quorum？</h3><p><code>QuorumPeerConfig</code> 在读取配置文件时，会将各服务器以 SID 为 key，对应的 <code>QuorumPeer</code> 实例为 value 放入对应的哈希表中。其中，PARTICIPANT 放入 <code>servers</code>，Observer 放入 <code>observers</code>。然后以 <code>servers</code> 的大小初始化 <code>QuorumVerifier</code>，其默认实现是 <code>QuorumMaj</code>。</p><p><code>org.apache.zookeeper.server.quorum.flexible.QuorumMaj#containsQuorum</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Verifies if a set is a majority.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsQuorum</span><span class="params">(HashSet&lt;Long&gt; set)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (set.size() &gt; half);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法会将入参集合的大小与 PARTICIPANT 数量的一半做比较，但不会检查入参集合中的元素是否属于某一个 PARTICIPANT。</p><p>最后，<code>observers</code> 中的元素会被移入 <code>servers</code>。</p><h3 id="10-3-选举完成后的新-epoch-计算过程存在什么问题？"><a href="#10-3-选举完成后的新-epoch-计算过程存在什么问题？" class="headerlink" title="10.3 选举完成后的新 epoch 计算过程存在什么问题？"></a>10.3 选举完成后的新 epoch 计算过程存在什么问题？</h3><p>这里存在两个问题：</p><ol><li><p><code>connectingFollowers</code> 名称与作用不符。它至少应包含 Leader 的 SID，除 Follower 以外，还可能包含 Observer 的 SID。</p></li><li><p>在这里，由于 <code>connectingFollowers</code> 集合可能包含了 Observer 的 SID，以它为参数作 Quorum 检查是不合适的（没有 PARTIPANT 检查）。</p><p>假定集群当前由一个 Leader、两个 Follower 和一个 Observer 组成。这里，PARTICIPANT 总数为 3，则 Quorum 的一半是 2。即使只有 Leader 和 Observer 提交了 epoch 并且 SID 被添加到 <code>connectingFollowers</code> 中，条件也被满足了。</p><p>在这个地方，要么应该忽略来自 Observer 提交的 epoch，要么应当要求已提交 epoch 的成员总数（Leader + Learner）超过集群所有成员数的一半（而不是 PARTICIPANT 的一半），逻辑才是一致的。</p></li></ol><p>新 epoch 发送给集群后，Leader 对 ACK 消息的确认逻辑存在类似的问题。</p>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：会话</title>
      <link href="/2017/12/26/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E4%BC%9A%E8%AF%9D/"/>
      <url>/2017/12/26/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E4%BC%9A%E8%AF%9D/</url>
      <content type="html"><![CDATA[<h2 id="1-会话状态"><a href="#1-会话状态" class="headerlink" title="1. 会话状态"></a>1. 会话状态</h2><p>在 ZooKeeper 客户端与服务端成功完成连接创建后，就创建了一个会话。ZooKeeper 会话在整个运行期间的生命周期中，会在不同的会话状态之间进行切换，这些状态可以一般可以分为 <code>CONNECTING</code>、<code>CONNECTED</code>、<code>RECONNECTING</code>、<code>RECONNECTED</code>、<code>CLOSE</code> 等。</p><p>一旦客户端开始创建 ZooKeeper 对象，那么客户端状态就会变成 <code>CONNECTING</code>，同时客户端开始从服务器地址列表中逐个选取 IP 地址来尝试进行网络连接，直到成功连接上服务器，然后将客户端状态变更为 <code>CONNECTED</code>。</p><p>通常情况下，伴随着网络闪断或是其他原因，客户端与服务端之间的连接会出现断开情况，一旦碰到这种情况，ZooKeeper 客户端会自动进行重连操作，同时客户端的状态再次变为 <code>CONNCTING</code>，直到重新连接上服务器后，客户端状态又会再次转变成 <code>CONNECTED</code>。因此，通常情况下，在 ZooKeeper 运行期间，客户端的状态总是介于 <code>CONNECTING</code> 和 <code>CONNECTED</code> 两者之一。</p><p>另外，如果出现诸如会话超时、权限检查失败或是客户端主动退出程序等情况，那么客户端的状态就会直接变更为 <code>CLOSE</code>。</p><a id="more"></a><h2 id="2-会话创建"><a href="#2-会话创建" class="headerlink" title="2. 会话创建"></a>2. 会话创建</h2><h3 id="2-1-Session"><a href="#2-1-Session" class="headerlink" title="2.1 Session"></a>2.1 Session</h3><p><code>Session</code> 是ZooKeeper 中会话的实体，代表了一个客户端会话。其包含以下 4 个基本属性：</p><ul><li><code>sessionlD</code>：会话 ID，用来唯一标识一个会话，每次客户端创建新会话的时候，ZooKeeper 都会为其分配一个全局唯一的 <code>sessionID</code>。</li><li><code>TimeOut</code>：会话超时时间。客户端在构造 ZooKeeper 实例的时候，会配置一个 <code>sessionTimeout</code> 参数用于指定会话的超时时间。ZooKeeper 客户端向服务器发送这个超时时间后，服务器会根据自己的超时时间限制最终确定会话的超时时间。</li><li><code>TickTime</code>：下次会话超时时间点。为了便于 ZooKeeper 对会话实行 “分桶策略” 管理，同时也是为了高效低耗地实现会话的超时检测与清理，ZooKeeper 会为每个会话标记一个下次会话超时时间点。<code>TickTime</code> 是一个 13 位的 <code>long</code> 型数据，其值接近于当前时间加上 <code>TimeOut</code>，但不完全相等。</li><li><code>isClosing</code>：该属性用于标记一个会话是否已经被关闭。通常当服务端检测到一个会话巳经超时失效的时候，会将该会话的 <code>isClosing</code> 属性标记为 “已关闭”，这样就能确保不再处理来自该会话的新请求了。</li></ul><h3 id="2-2-生成-sessionId"><a href="#2-2-生成-sessionId" class="headerlink" title="2.2 生成 sessionId"></a>2.2 生成 sessionId</h3><p><code>org.apache.zookeeper.server.SessionTrackerImpl#initializeNextSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">initializeNextSession</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">long</span> nextSid;  </span><br><span class="line">    nextSid = (Time.currentElapsedTime() &lt;&lt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">8</span>;  </span><br><span class="line">    nextSid =  nextSid | (id &lt;&lt;<span class="number">56</span>);  </span><br><span class="line">    <span class="keyword">return</span> nextSid;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-SessionTracker"><a href="#2-3-SessionTracker" class="headerlink" title="2.3 SessionTracker"></a>2.3 SessionTracker</h3><p><code>SessionTracker</code> 是 ZooKeeper 服务端的会话管理器。Leader 的 <code>SessionTracker</code> 会保存整个集群中的所有会话信息，负责会话的创建、管理和清理工作，其实现是 <code>SessionTrackerImpl</code>。Learner 的  <code>SessionTracker</code> 的实现是 <code>LearnerSessionTracker</code>，仅做记录客户端会话激活信息用。</p><p>每一个会话在 <code>SessionTrackerImpl</code> 内部都保留了三份：</p><ul><li><code>sessionById</code>：这是一个 <code>HashMap&lt;Long, SessionImpl&gt;</code> 类型的数据结构，用于根据 <code>sessionid</code> 来管理 <code>Session</code> 实体。</li><li><code>sessionWithTimeout</code>：这是一个 <code>ConcurrentHashMap&lt;Long, Integer&gt;</code> 类型的数据结构，用于根据 <code>sessionId</code> 来管理会话的超时时间。该数据结构和 ZooKeeper 内存数据库相连通，会被定期持久化到快照文件中去。</li><li><code>sessionSets</code>：这是一个 <code>HashMap&lt;Long, SessionSet&gt;</code> 类型的数据结构，用于根据下次会话超时时间点来归档会话，便于进行会话管理和超时检查。</li></ul><h2 id="3-会话管理"><a href="#3-会话管理" class="headerlink" title="3. 会话管理"></a>3. 会话管理</h2><p>ZooKeeper 集群的会话管理由 Leader 统一处理。</p><h3 id="3-1-分桶策略"><a href="#3-1-分桶策略" class="headerlink" title="3.1 分桶策略"></a>3.1 分桶策略</h3><p>ZooKeeper 采用了一种特殊的会话管理方式，我们称之为 “分桶策略”。所谓分桶策略，是指将类似的会话放在同一区块中进行管理，以便于 ZooKeeper 对会话进行不同区块的隔离处理以及同一区块的统一处理。</p><p>ZooKeeper 将所有的会话都分配在了不同的区块之中，分配的原则是每个会话的 “下次超时时间点”（ExpirationTime)。ExpirationTime 是指该会话最近一次可能超时的时间点，对于一个新创建的会话而言，其会话创建完毕后， ZooKeeper 就会为其计算 ExpirationTime，计算方式如下：<br>$$<br>ExpirationTime = CurrentTime + SessionTimeout<br>$$<br>在 ZooKeeper 的实际实现中，还做了一个处理。ZooKeeper 的 Leader 服务器在运行期间会定时地进行会话超时检査，其时间间隔是 ExpirationInterval，单位是毫秒，默认值是 <code>tickTime</code> 的值，即默认情况下，每隔 2000 毫秒进行一次会话超时检查。为了方便对多个会话同时进行超时检査，完整的 ExpirationTime 的计算方式如下：<br>$$<br>\begin{equation}<br>ExpirationTime_  =  CurrentTime + SessionTimeout \<br>ExpirationTime  = (ExpirationTime_ /Expirationlnterval +1)*Expirationlnterval<br>\end{equation}<br>$$<br>最终计算出的 ExpirationTime 即为客户端会话下次超时时间所对应的 ”桶“（即，大于会话下次超时时间的最小 ExpirationInterval 整数倍）。同时，会话的 <code>tickTime</code> 属性被设置为 ExpirationTime，<code>SessionTracker</code> 以这个 ExpirationTime 为 key 将会话保存到 <code>sessionSets</code> 中。</p><p><code>org.apache.zookeeper.server.SessionTrackerImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">touchSession</span><span class="params">(<span class="keyword">long</span> sessionId, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">    SessionImpl s = sessionsById.get(sessionId);</span><br><span class="line">    <span class="comment">// Return false, if the session doesn't exists or marked as closing</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isClosing()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> expireTime = roundToInterval(Time.currentElapsedTime() + timeout);</span><br><span class="line">    <span class="keyword">if</span> (s.tickTime &gt;= expireTime) &#123;</span><br><span class="line">        <span class="comment">// Nothing needs to be done</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SessionSet set = sessionSets.get(s.tickTime);</span><br><span class="line">    <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line">        set.sessions.remove(s);</span><br><span class="line">    &#125;</span><br><span class="line">    s.tickTime = expireTime;</span><br><span class="line">    set = sessionSets.get(s.tickTime);</span><br><span class="line">    <span class="keyword">if</span> (set == <span class="keyword">null</span>) &#123;</span><br><span class="line">        set = <span class="keyword">new</span> SessionSet();</span><br><span class="line">        sessionSets.put(expireTime, set);</span><br><span class="line">    &#125;</span><br><span class="line">    set.sessions.add(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">roundToInterval</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// We give a one interval grace period</span></span><br><span class="line">    <span class="keyword">return</span> (time / expirationInterval + <span class="number">1</span>) * expirationInterval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            currentTime = Time.currentElapsedTime();</span><br><span class="line">            <span class="keyword">if</span> (nextExpirationTime &gt; currentTime) &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait(nextExpirationTime - currentTime);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SessionSet set;</span><br><span class="line">            set = sessionSets.remove(nextExpirationTime);</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (SessionImpl s : set.sessions) &#123;</span><br><span class="line">                    setSessionClosing(s.sessionId);</span><br><span class="line">                    expirer.expire(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nextExpirationTime += expirationInterval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        handleException(<span class="keyword">this</span>.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.info(<span class="string">"SessionTrackerImpl exited loop!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-会话激活"><a href="#3-2-会话激活" class="headerlink" title="3.2 会话激活"></a>3.2 会话激活</h3><p>在 ZooKeeper 的实际设计中，只要客户端有请求发送到服务端，那么就会触发一次会话激活。会话激活大体分为以下两种情况：</p><ol><li><p>客户端向服务端发送请求，包括读写请求，就么就会触发一次会话激活。</p><p>这是通过在 <code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest(org.apache.zookeeper.server.Request)</code>  中调用 <code>touchSession</code> 来实现的。</p></li><li><p>客户端发现在 sessionTimeout/3 时间内尚未和服务端进行过任何通信，那么就会主动发起一个 <code>PING</code> 请求，服务端收到该请求后，就会触发第一种情况下的会话激活，俗称 “心跳检测”。</p></li></ol><p>会话激活的过程，不仅能够使服务端检测到对应客户端的存活性，同时也能让客户端自己保持连接状态。</p><ul><li><p>如果客户端连接的是 Leader，那么由 Leader 的 <code>SessionTrackerImpl</code> 直接处理会话激活操作。</p></li><li><p>如果客户端连接的是 Learner，那么 Learner 将客户端的激活信息保存在 <code>touchTable</code> 中：</p><p><code>org.apache.zookeeper.server.quorum.LearnerSessionTracker#touchSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Long, Integer&gt; touchTable = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">touchSession</span><span class="params">(<span class="keyword">long</span> sessionId, <span class="keyword">int</span> sessionTimeout)</span> </span>&#123;</span><br><span class="line">    touchTable.put(sessionId, sessionTimeout);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Leader 会定时通过 <code>PING</code> 消息从 Learner 那儿获取客户端激活信息，这个时候，Learner 会将 <code>touchTable</code> 的内容发送给 Leader，同时清空 <code>touchTable</code>。</p><p><code>org.apache.zookeeper.server.quorum.Learner#ping</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ping</span><span class="params">(QuorumPacket qp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Send back the ping with our session data</span></span><br><span class="line">    ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(bos);</span><br><span class="line">    HashMap&lt;Long, Integer&gt; touchTable = zk</span><br><span class="line">            .getTouchSnapshot();</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;Long, Integer&gt; entry : touchTable.entrySet()) &#123;</span><br><span class="line">        dos.writeLong(entry.getKey());</span><br><span class="line">        dos.writeInt(entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    qp.setData(bos.toByteArray());</span><br><span class="line">    writePacket(qp, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.LearnerZooKeeperServer#getTouchSnapshot</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HashMap&lt;Long, Integer&gt; <span class="title">getTouchSnapshot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionTracker != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((LearnerSessionTracker) sessionTracker).snapshot();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.LearnerSessionTracker#snapshot</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> HashMap&lt;Long, Integer&gt; <span class="title">snapshot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Long, Integer&gt; oldTouchTable = touchTable;</span><br><span class="line">    touchTable = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">    <span class="keyword">return</span> oldTouchTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Leader 会从 <code>PING</code> 消息的回复中，逐个取出 <code>sessionId</code> 及其 <code>sessionTimeout</code> 时间，做激活操作。</p><p><code>org.apache.zookeeper.server.quorum.LearnerHandler#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (qp.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> Leader.PING:</span><br><span class="line">                <span class="comment">// Process the touches</span></span><br><span class="line">                ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(qp.getData());</span><br><span class="line">                DataInputStream dis = <span class="keyword">new</span> DataInputStream(bis);</span><br><span class="line">                <span class="keyword">while</span> (dis.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> sess = dis.readLong();</span><br><span class="line">                    <span class="keyword">int</span> to = dis.readInt();</span><br><span class="line">                    leader.zk.touch(sess, to);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>Leader 的会话激活操作分为以下几个步骤：</p><ol><li>检验该会话是否已经被关闭。</li><li>计算该会话新的超时时间 ExpirationTime_New。</li><li>获取该会话上次超时时间 ExpirationTime_Old。</li><li>迁移会话。将该会话从老的区块中取出，放入 ExpirationTime_New 对应的新区块中。</li></ol><h3 id="3-3-会话超时检查"><a href="#3-3-会话超时检查" class="headerlink" title="3.3 会话超时检查"></a>3.3 会话超时检查</h3><p>在 ZooKeeper 中，会话超时检査由 Leader 的  <code>SessionTrackerImpl</code> 负责。<code>SessionTrackerImpl</code> 中有一个单独的线程专门进行会话超时检査，其工作机制的核心思路非常简单：逐个依次地对会话桶中剩下的会话进行清理。</p><p><code>ZooKeeperServer</code> 实现了 <code>SessionExpirer</code> 接口：</p><p><code>org.apache.zookeeper.server.ZooKeeperServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sessionId = session.getSessionId();</span><br><span class="line">    LOG.info(<span class="string">"Expiring session 0x"</span> + Long.toHexString(sessionId)</span><br><span class="line">            + <span class="string">", timeout of "</span> + session.getTimeout() + <span class="string">"ms exceeded"</span>);</span><br><span class="line">    close(sessionId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">long</span> sessionId)</span> </span>&#123;</span><br><span class="line">    submitRequest(<span class="keyword">null</span>, sessionId, OpCode.closeSession, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，会话超时是通过提交一条 <code>closeSession</code>  的情求来实现的。</p><h2 id="4-会话清理"><a href="#4-会话清理" class="headerlink" title="4. 会话清理"></a>4. 会话清理</h2><p>当 <code>SessionTrackerImpl</code> 的会话超时检查线程整理出一些已经过期的会话后，就要开始进行会话清理了。会话清理的步骤大致可以分为以下 7 步。</p><h3 id="4-1-标记会话状态为已关闭"><a href="#4-1-标记会话状态为已关闭" class="headerlink" title="4.1 标记会话状态为已关闭"></a>4.1 标记会话状态为已关闭</h3><p>由于整个会话清理过程需要一段时间，为了保证在此期间不再处理来自该客户端的新请求，<code>SessionTrackerImpl</code> 会首先将该会话的 <code>isClosing</code> 属性标记为 true，这样，即使在会话清理期间接收到该客户端的新请求（虽然目前只是在 Leader 上标记了，但客户端的事务请求会被提交到 Leader），也无法继续处理了。</p><h3 id="4-2-发起会话关闭请求"><a href="#4-2-发起会话关闭请求" class="headerlink" title="4.2 发起会话关闭请求"></a>4.2 发起会话关闭请求</h3><p>为了使对该会话的清理和关闭操作在整个服务端集群中都生效，ZooKeeper 使用了提交会话关闭请求的方式，将其作为一个事务处理。事务被提交到 Leader 的 <code>PreRequestProcessor</code>。</p><h3 id="4-3-收集需要清理的临时节点"><a href="#4-3-收集需要清理的临时节点" class="headerlink" title="4.3 收集需要清理的临时节点"></a>4.3 收集需要清理的临时节点</h3><p>一旦某个会话失效后，那么和该会话相关的临时节点都需要被一并清除掉。因此，在清理临时节点之前，首先需要将服务器上所有和该会话相关的临时节点都整理出来。</p><p>在 ZooKeeper 的内存数据库中，为每个会话都单独保存了一份由该会话维护的所有临时节点集合，因此在会话清理阶段，只需要根据当前即将关闭的会话的 <code>sessionId</code> 从内存数据库中获取到这份临时节点列表即可。</p><p>在 Leader 处理会话关闭请求之前，可能正好有以下两类请求到达了服务端并正在处理中。</p><ul><li>节点删除请求，删除的目标节点正好是上述临时节点中的一个。</li><li>临时节点创建请求，创建的目标节点正好是上述临时节点中的一个。</li></ul><p>假定当前获取到的临时节点列表是 <code>ephemerals</code>。对于第一类请求，需要将所有这些请求对应的数据节点路径从 <code>ephemerals</code> 中移除，以避免重复删除。对于第二类请求，需要将所有这些请求对应的数据节点路径添加到 <code>ephemerals</code> 中去，以删除这些即将被创建但是尚未保存到内存数据库中去的临时节点。</p><p><code>org.apache.zookeeper.server.PrepRequestProcessor#pRequest2Txn</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... </span></span><br><span class="line">request.hdr = <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid, Time.currentWallTime(), type);        </span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> OpCode.closeSession:</span><br><span class="line">        <span class="comment">// We don't want to do this check since the session expiration thread</span></span><br><span class="line">        <span class="comment">// queues up this operation without being the session owner.</span></span><br><span class="line">        <span class="comment">// this request is the last of the session so it should be ok</span></span><br><span class="line">        <span class="comment">// zks.sessionTracker.checkSession(request.sessionId, request.getOwner());</span></span><br><span class="line">        HashSet&lt;String&gt; es = zks.getZKDatabase().getEphemerals(request.sessionId);</span><br><span class="line">        <span class="keyword">synchronized</span> (zks.outstandingChanges) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ChangeRecord c : zks.outstandingChanges) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.stat == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Doing a delete</span></span><br><span class="line">                    es.remove(c.path);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c.stat.getEphemeralOwner() == request.sessionId) &#123;</span><br><span class="line">                    es.add(c.path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String path2Delete : es) &#123;</span><br><span class="line">                addChangeRecord(<span class="keyword">new</span> ChangeRecord(request.hdr.getZxid(), path2Delete, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            zks.sessionTracker.setSessionClosing(request.sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">"Processed session termination for sessionid: 0x"</span></span><br><span class="line">                + Long.toHexString(request.sessionId));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="4-4-添加节点删除事务变更"><a href="#4-4-添加节点删除事务变更" class="headerlink" title="4.4 添加节点删除事务变更"></a>4.4 添加节点删除事务变更</h3><p>完成该会话相关的临时节点收集后，Leader 会逐个将对这些临时节点创建变更记录，并放入事务变更队列 <code>outstandingChanges</code> 中。</p><h3 id="4-5-删除临时节点"><a href="#4-5-删除临时节点" class="headerlink" title="4.5 删除临时节点"></a>4.5 删除临时节点</h3><p>节点删除事务被提交到整个集群后，各服务器的 <code>FinalRequestProcessor</code> 会触发内存数据库，删除该会话对应的所有临时节点。</p><h3 id="4-6-移除会话"><a href="#4-6-移除会话" class="headerlink" title="4.6 移除会话"></a>4.6 移除会话</h3><p>各服务器的 <code>FinalRequestProcessor</code> 在处理会话关闭事务请求时，会将会话从 <code>SessionTracker</code> 中移除。</p><h3 id="4-7-关闭-NIOServerCnxn"><a href="#4-7-关闭-NIOServerCnxn" class="headerlink" title="4.7 关闭 NIOServerCnxn"></a>4.7 关闭 NIOServerCnxn</h3><p>最后，客户端所连接的那个服务器会向 <code>ServerCnxnFactory</code> 发送一个关闭连接的请求数据，从 <code>NIOServerCnxnFactory</code> 找到该会话对应的 <code>NIOServerCnxn</code>，将其关闭。</p><h2 id="5-重连"><a href="#5-重连" class="headerlink" title="5. 重连"></a>5. 重连</h2><p>当客户端与服务端之间的网络连接断开时，ZooKeeper 客户端会自动进行反复的重连，直到最终成功连接上 ZooKeeper 集群中的一台机器。在这种情况下，再次连接上服务端的客户端有可能处于以下两种状态之一。</p><ol><li>CONNECTED。如果在会话超时时间内重新连接上了集群中任意一台机器，那么被视为重连成功。</li><li>EXPIRED。如果在会话超时时间以外重新连接上，那么服务端其实已经对该会话进行了会话清理操作，因此再次连接上的会话将被视为非法会话。</li></ol><p>在客户端与服务端之间维持的是一个长连接，在 sessionTimeout 时间内，服务端会不断地检测该客户端是否还处于正常连接——服务端会将客户端的每次操作视为一次有效的心跳检测来反复地进行会话激活。因此，在正常情况下，客户端会话是一直有效的。然而，当客户端与服务端之间的连接断开后，用户在客户端可能主要会看到两类异常：CONNECTION_LOSS（连接断开）和 SESSION_EXPIRED（会话过期）。</p><h3 id="5-1-连接断开-CONNECTION-LOSS"><a href="#5-1-连接断开-CONNECTION-LOSS" class="headerlink" title="5.1 连接断开 CONNECTION_LOSS"></a>5.1 连接断开 CONNECTION_LOSS</h3><p>有时会因为网络闪断导致客户端与服务器断开连接，或是因为客户端当前连接的服务器出现问题导致连接断开，我们统称这类问题为 “客户端与服务器连接断开” 现象，即 CONNECTION_LOSS。在这种情况下，ZooKeeper 客户端会自动从地址列表中重新逐个选取新的地址并尝试进行重新连接，直到最终成功连接上服务器。 </p><p>举个例子，假设某应用在使用 ZooKeeper 客户端进行 <code>setData</code> 操作的时候，正好出现了 CONNECTION_LOSS 现象，那么客户端会立即接收到事件 None-Disconnected 通知，同时会抛出异常：<code>org.apache.zookeeper.KeeperException.Code#CONNECTIONLOSS</code>。在这种情况下，应用需要做的事情就是捕获住 ConnectionLossException，然后等待 ZooKeeper 的客户端自动完成重连。一旦客户端成功连接上一台 ZooKeeper 机器后，那么客户端就会收到事件 None-SyncConnected 通知，之后就可以重试刚刚出错的 <code>setData</code> 操作。</p><h3 id="5-2-会话失效-SESSION-EXPIRED"><a href="#5-2-会话失效-SESSION-EXPIRED" class="headerlink" title="5.2 会话失效 SESSION_EXPIRED"></a>5.2 会话失效 SESSION_EXPIRED</h3><p>客户端与服务端断开连接后，如果重连期间耗时过长，超过了会话超时时间限制后还没有成功连接上服务器，那么服务器认为这个会话已经结束了，就会开始进行会话清理。但是另一方面，该客户端本身不知道会话已经失效，并且其客户端状态还是 DISCONNECTED。之后，如果客户端重新连上了服务器，服务器会告诉客户端该会话已经失效（SESSION_EXPIRED）。在这种情况下，用户就需要重新实例化一个 ZooKeeper 对象，并且看应用的复杂情况，重新恢复临时数据。</p><h3 id="5-3-会话转移-SESSION-MOVED"><a href="#5-3-会话转移-SESSION-MOVED" class="headerlink" title="5.3 会话转移 SESSION_MOVED"></a>5.3 会话转移 SESSION_MOVED</h3><p>ZooKeeper 明确提出了会话转移的概念，同时封装了 <code>SessionMovedException</code> 异常。之后，在处理客户端请求的时候，会首先检查会话的所有者（Owner)：如果客户端请求的会话 Owner 不是当前服务器的话，那么就会直接抛出 <code>SessionMovedException</code> 异常。当然，由于客户端已经和这个服务器断开了连接，因此无法收到这个异常的响应。只有多个客户端使用相同的 sessionld/sessionPasswd 创建会话时，才会收到这样的异常。因为一旦有一个客户端会话创建成功，那么 ZooKeeper 服务器就会认为该 <code>sessionld</code> 对应的那个会话已经发生了转移，于是，等到第二个客户端连接上服务器后，就被认为是 “会话转移” 的情况了。</p><h2 id="6-自问自答"><a href="#6-自问自答" class="headerlink" title="6. 自问自答"></a>6. 自问自答</h2><h3 id="6-1-会话重连如何实现？"><a href="#6-1-会话重连如何实现？" class="headerlink" title="6.1 会话重连如何实现？"></a>6.1 会话重连如何实现？</h3><ol><li><p>客户端的会话创建请求作为一个事务，会被同步到整个 ZooKeeper 集群中，各个服务器的 <code>SessionTracker</code> 中记录了整个集群中的会话信息。</p></li><li><p>客户端会与所连接的服务器保持会话存活（通过读写请求或 <code>PING</code> 请求）。</p></li><li><p>Leader 会定时地向 Learner 服务器发送 <code>PING</code> 消息，Learner 服务器在接收到 <code>PING</code> 消息后，会将这段时间内保持心跳检测的客户端列表，同样以 <code>PING</code> 消息的形式反馈给 Leader 服务器，由 Leader 服务器来负责逐个对这些客户端进行会话激活。</p></li><li><p>当客户端重连到另一台服务器上时，<code>org.apache.zookeeper.server.NIOServerCnxn#readConnectRequest</code> 调用 <code>org.apache.zookeeper.server.ZooKeeperServer#processConnectRequest</code>。这里会做一个判断，如果请求中附带了 <code>sessionId</code>，就不执行创建会话操作，而是重新打开会话。</p></li><li><p>服务器首先执行密码校验工作，如果校验通过，则调用 <code>org.apache.zookeeper.server.ZooKeeperServer#revalidateSession</code> 验证会话有效性。</p></li><li><p>如果客户端重连上的是 Leader，会话的有效性验证在本地即可操作。</p></li><li><p>如果客户端重连上的是 Learner，<code>LearnerZooKeeperServer</code> 中重写了 <code>revalidateSession</code> 方法：</p><p><code>org.apache.zookeeper.server.quorum.LearnerZooKeeperServer#revalidateSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">revalidateSession</span><span class="params">(ServerCnxn cnxn, <span class="keyword">long</span> sessionId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> sessionTimeout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    getLearner().validateSession(cnxn, sessionId, sessionTimeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.Learner#validateSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validateSession</span><span class="params">(ServerCnxn cnxn, <span class="keyword">long</span> clientId, <span class="keyword">int</span> timeout)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"Revalidating client: 0x"</span> + Long.toHexString(clientId));</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">    dos.writeLong(clientId);</span><br><span class="line">    dos.writeInt(timeout);</span><br><span class="line">    dos.close();</span><br><span class="line">    QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.REVALIDATE, -<span class="number">1</span>, baos.toByteArray(), <span class="keyword">null</span>);</span><br><span class="line">    pendingRevalidations.put(clientId, cnxn);</span><br><span class="line">    writePacket(qp, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Learner 会向 Leader 发送 <code>REVALIDATE</code> 消息，由 Leader 来完成客户端会话有效性的验证工作，并向 Learner 返回验证结果。</p></li><li><p>注意到 <code>SessionTracker</code> 的 <code>sessionWithTimeout</code> 是和 ZooKeeper 的内存数据库相连通的。这样，即使在 ZooKeeper 集群运行过程中发生了重新选举，新的 Leader 也可以在从快照文件和事务日志中恢复出内存数据库后，执行会话有效性验证工作。</p></li><li><p>Learner 在接收到 Leader 的会话验证结果后，即使会话有效，也不会做一次 <code>addSession</code> 或 <code>touchSession</code> 操作。这是因为如果 Leader 判定该会话有效，那么该会话一定存在于重连上的 Learner 的 <code>LearnerSessionTracker</code> 中，不需要重新添加。同时，这样的会话验证过程会在 Leader 上对该会话进行一次激活。</p></li></ol>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：角色与消息</title>
      <link href="/2017/12/25/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E8%A7%92%E8%89%B2%E4%B8%8E%E6%B6%88%E6%81%AF/"/>
      <url>/2017/12/25/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E8%A7%92%E8%89%B2%E4%B8%8E%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/12514722/34335956-073d451a-e98e-11e7-8626-df89e4efd676.png" alt="image"></p><a id="more"></a><h2 id="1-Leader"><a href="#1-Leader" class="headerlink" title="1. Leader"></a>1. Leader</h2><p>Leader服务器是 ZooKeeper 集群工作的核心，其主要工作如下：</p><ul><li>事务请求的唯一调度和处理者，保证集群事务处理的顺序性。</li><li>集群内部各服务器的调度者。</li></ul><p>ZooKeeper 使用责任链模式来处理每一个客户端的请求。</p><h3 id="1-1-PrepRequestProcessor"><a href="#1-1-PrepRequestProcessor" class="headerlink" title="1.1 PrepRequestProcessor"></a>1.1 PrepRequestProcessor</h3><p>Leader 服务器的请求预处理器。在 ZooKeeper 中，那些会改变服务器状态的请求被称为事务请求（创建节点、更新数据、删除节点、创建会话等）。<code>PrepRequestProcessor</code> 能够识别出当前客户端请求是否是事务请求。对于事务请求，<code>PrepRequestProcessor</code> 处理器会对其进行一系列预处理，如创建请求事务头、事务体、会话检查、ACL 检查和版本检查等。</p><h3 id="1-2-ProposalRequestProcessor"><a href="#1-2-ProposalRequestProcessor" class="headerlink" title="1.2 ProposalRequestProcessor"></a>1.2 ProposalRequestProcessor</h3><p>Leader 服务器的事务投票处理器。Leader 服务器事务处理流程的发起者，对于非事务请求，<code>ProposalRequestProcessor</code> 会直接将请求转发到 <code>CommitProcessor</code> 处理器，不再做其他处理；而对于事务请求，除了将请求转发到 <code>CommitProcessor</code> 外，还会根据请求类型创建对应的 Proposal 提议，并发送给所有的 Follower 服务器来发起一次集群内的事务投票。同时，<code>ProposalRequestProcessor</code> 还会将事务请求交付给 <code>SyncRequestProcessor</code> 进行事务日志的记录。</p><h3 id="1-3-SyncRequestProcessor"><a href="#1-3-SyncRequestProcessor" class="headerlink" title="1.3 SyncRequestProcessor"></a>1.3 SyncRequestProcessor</h3><p>事务日志记录处理器，用来将事务请求记录到事务日志文件中，同时还会触发 ZooKeeper 进行数据快照。</p><h3 id="1-4-AckRequestProcessor"><a href="#1-4-AckRequestProcessor" class="headerlink" title="1.4 AckRequestProcessor"></a>1.4 AckRequestProcessor</h3><p>Leader 特有的处理器，负责在 <code>SyncRequestProcessor</code> 完成事务日志记录后，向 Proposal 的投票收集器发送 ACK 反馈，以通知投票收集器当前服务器已经完成了对该 Proposal 的事务日志记录。</p><h3 id="1-5-CommitProcessor"><a href="#1-5-CommitProcessor" class="headerlink" title="1.5 CommitProcessor"></a>1.5 CommitProcessor</h3><p>事务提交处理器。对于非事务请求，该处理器会直接将其交付给下一级处理器处理；对于事务请求，其会等待集群内针对 Proposal 的投票直到该 Proposal 可被提交。利用 <code>CommitProcessor</code>，每个服务器都可以很好地控制对事务请求的顺序处理。</p><h3 id="1-6-ToBeAppliedRequestProcessor"><a href="#1-6-ToBeAppliedRequestProcessor" class="headerlink" title="1.6 ToBeAppliedRequestProcessor"></a>1.6 ToBeAppliedRequestProcessor</h3><p>该处理器中有一个 <code>toBeApplied</code> 队列，用来存储那些已经被 <code>CommitProcessor</code> 处理过的可被提交的 Proposal。<code>ToBeAppliedRequestProcessor</code> 处理器将这些请求逐个交付给 <code>FinalRequestProcessor</code> 处理器进行处理 —— 等到 <code>FinalRequestProcessor</code> 处理器处理完之后，再将其从 <code>toBeApplied队列</code> 中移除。</p><h3 id="1-7-FinalRequestProcessor"><a href="#1-7-FinalRequestProcessor" class="headerlink" title="1.7 FinalRequestProcessor"></a>1.7 FinalRequestProcessor</h3><p>用来进行客户端请求返回之前的收尾工作，包括创建客户端请求的响应；针对事务请求，该处理还会负责将事务应用到内存数据库中去。</p><h2 id="2-Follower"><a href="#2-Follower" class="headerlink" title="2. Follower"></a>2. Follower</h2><p>Follower 是 ZooKeeper 集群的跟随者，其主要工作如下：</p><ul><li>处理客户端非事务请求，转发事务请求给 Leader 服务器。</li><li>参与事务请求 Proposal 的投票。</li><li>参与 Leader 选举投票。</li></ul><p>Follower 也采用了责任链模式组装的请求处理链来处理每一个客户端请求。</p><h3 id="2-1-FollowerRequestProcessor"><a href="#2-1-FollowerRequestProcessor" class="headerlink" title="2.1 FollowerRequestProcessor"></a>2.1 FollowerRequestProcessor</h3><p>Follower 服务器的第一个请求处理器，其主要工作就是识别出当前请求是否是事务请求。如果是事务请求，那么 Follower 就会将该请求转发给 Leader 服务器，Leader 服务器在接收到这个事务请求后，就会将其提交到请求处理链，按照正常事务请求进行处理。</p><h3 id="2-2-SendAckRequestProcessor"><a href="#2-2-SendAckRequestProcessor" class="headerlink" title="2.2 SendAckRequestProcessor"></a>2.2 SendAckRequestProcessor</h3><p>该处理器承担了事务日志记录反馈的角色，在完成事务日志记录后，会向 Leader 服务器发送 ACK 消息以表明自身完成了事务日志的记录工作。它与 <code>AckRequestProcessor</code> 的区别在于，<code>AckRequestProcessor</code> 处理器和 Leader 在同一个服务器上，因此它的 ACK 仅仅是一个本地的方法调用；而 <code>SendAckRequestProcessor</code> 处理器由于在 Follower 服务器上，因此需要通过以 ACK 消息的形式来向 Leader 服务器进行反馈。</p><h2 id="3-Observer"><a href="#3-Observer" class="headerlink" title="3. Observer"></a>3. Observer</h2><p>Observer 充当观察者角色，观察 ZooKeeper 集群的最新状态变化并将这些状态同步过来。Observer 服务器再工作原理上和 Follower 是基本一致的，对于非事务请求，都可以进行独立的处理，而对于事务请求，则会转发给 Leader 服务器进行处理。区别在于，Observer 不参与任何形式的投票，包括事务请求 Proposal 的投票和 Leader 选举投票。简单地讲，Observer 服务器只提供非事务服务，通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。</p><p>需要注意的一点是，Observer 服务器再初始化阶段会将 <code>SyncRequestProcessor</code> 处理器也组装上去，但是在实际运行过程中，Leader 服务器不会将事务请求的投票发送给 Observer 服务器。</p><h2 id="4-集群间消息通信"><a href="#4-集群间消息通信" class="headerlink" title="4. 集群间消息通信"></a>4. 集群间消息通信</h2><p>ZooKeeper 的消息类型大体分为数据同步型、服务器初始化型、请求处理型和会话管理型。</p><h3 id="4-1-数据同步型"><a href="#4-1-数据同步型" class="headerlink" title="4.1 数据同步型"></a>4.1 数据同步型</h3><p>数据同步型消息是指在 Learner 和 Leader 服务器进行数据同步时，网络通信所用到的消息，通常有DIFF、TRUNC、SNAP 和 UPTODATE 四种。</p><table><thead><tr><th>消息类型</th><th>发送方 → 接收方</th><th>说 明</th></tr></thead><tbody><tr><td>DIFF，13</td><td>Leader→Learner</td><td>用于通知 Learner 服务器，Leader 即将与其进行 DIFF 方式的数据同步</td></tr><tr><td>TRUNC，14</td><td>Leader→Learner</td><td>用于触发 Learner 服务器进行内存数据库的回滚操作</td></tr><tr><td>SNAP，15</td><td>Leader→Learner</td><td>用于通知 Learner 服务器，Leader 即将与其进行 “全量”  方式的数据同步</td></tr><tr><td>UPTODATE，12</td><td>Leader→Learner</td><td>用来告诉 Learner 服务器，已经完成了数据同步，可以开始对外提供服务了</td></tr></tbody></table><h3 id="4-2-服务器初始化型"><a href="#4-2-服务器初始化型" class="headerlink" title="4.2 服务器初始化型"></a>4.2 服务器初始化型</h3><p>服务器初始化型消息是指在整个集群或是某些新机器初始化的时候，Leader 和 Learner 之间相互通信所使用的消息类型，常见的有 OBSERVERINFO、FOLLOWERINFO、 LEADERINFO、ACKEPOCH 和 NEWLEADER 五种。</p><table><thead><tr><th>消悤类型</th><th>发送方一接收方</th><th>说 明</th></tr></thead><tbody><tr><td>OBSERVERINFO，16</td><td>Observer→Leader</td><td>该信息通常是由 Observer 服务器在启动的时候发送给 Leader 的，用于向 Leader 服务器注册自己，同时向 Leader 服务器表明当前 Learner 服务器的角色是 Observer。消息中包含了当前 Observer 服务器的 SID 和已经处理的最新 ZXID</td></tr><tr><td>FOLLOWERINFO，11</td><td>Follower→Leader</td><td>该信息通常是由 Follower 服务器在启动的时候发送 给 Leader 的，用于向 Leader 服务器注册自己，同时向 Leader 服务器表明当前 Learner 服务器的角色是 Follower。消息中包含了当前 Follower 服务器的 SID 和已经处理的最新 ZXID</td></tr><tr><td>LEADERINFO，17</td><td>Leader→Learner</td><td>在上面已经提到，在 Learner 连接上 Leader 后， 会向 Leader 发送 LearnerInfo 消息（包含了 OBSERVERINFO 和 FOLLOWERINFO 两类消息），Leader 服务器在接收到该消息后，也会将 Leader 服务器的基本信息发送给这些 Learner，这个消息就是 LEADERINFO， 通常包含了当前 Leader 服务器的最新 EPOCH 值</td></tr><tr><td>ACKEPOCH，18</td><td>Learner→Leader</td><td>Learner 在接收到 Leader 发来的 LEADERINFO 消息后，会将自已更新后的 ZXID 和 EPOCH 以 ACKEPOCH 消息的形式发送给 Leader</td></tr><tr><td>NEWLEADER，10</td><td>Leader→Learner</td><td>该消息通常用于 Leader 服务器向 Learner 发送一个阶段性的标识消息 —— Leader 会在和 Learner 完成一个交互流程后，向 Learner 发送 NEWLEADER 消息， 同时带上当前 Leader 服务器处理的最新 ZXID。这一系列交互流程包括：足够多的 Follower 服务器连接上 Leader 或是完成数据同步</td></tr></tbody></table><h3 id="4-3-请求处理型"><a href="#4-3-请求处理型" class="headerlink" title="4.3 请求处理型"></a>4.3 请求处理型</h3><p>请求处理型消息是指在进行请求处理的过程中，Leader 和 Learner 服务器之间互相通信所使用的消息，常见的有 REQUEST、PROPOSAL、ACK、COMMIT、INFORM 和 SYNC 六种。</p><table><thead><tr><th>消息类型</th><th>发送方—接收方</th><th>说 明</th></tr></thead><tbody><tr><td>REQUEST，1</td><td>Learner→Leader</td><td>该消息是 ZooKeeper 的请求转发消息。在 ZooKeeper 中，所有的事务请求必由 Leader 服务器来处理。当 Learner 服务器接收到客户端的事务请求后，就会将请求以 REQUEST 消息的形式转发给 Leader 服务器来处理</td></tr><tr><td>PROPOSAL，2</td><td>Leader→Follower</td><td>该消息是 ZooKeeper 实现 ZAB 算法的核心所在，即 ZAB  协议中的提议。在处理事务请求的时候，Leader 服务器会将事务请求以 PROPOSAL 消息的形式创建投票发送给集群中所有的 Follower 服务器来进行事务日志的记录</td></tr><tr><td>ACK,3</td><td>Follower→Leader</td><td>Follower 服务器在接收到来自 Leader 的 PROPOSAL 消息后，会进行事务日志的记录。如果完成了事务日志的记录，那么就会以 ACK 消息的形式反馈给 Leader</td></tr><tr><td>COMMITS</td><td>Leader→Follower</td><td>该消息用于通知集群中所有的 Follower 服务器，可以进行事务请求的提交了。Leader 服务器在接收到过半的 Follower 服务器发来的 ACK 消息后，就进入事务请求的最终提交流程 —— 生成 COMMIT 消息，告知所有的 Follower 服务器进行事务请求的提交</td></tr><tr><td>INFORM，8</td><td>Leade→Observer</td><td>在事务请求提交阶段，针对 Follower 服务器，Leader 仅仅只需要发送一个 COMMIT 消息，Follower 服务器就可以完成事务请求的提交了，因为在这之前的事务请求投票阶段，Follower 已经接收过 PROPOSAL 消息，该消息中包含了事务请求的内容，因此 Follower 可以从之前的 Proposal 缓存中再次获取到事务请求。而对于 Observer 来说，由于之前没有参与事务请求的投票，因此没有该事务请求的上下文，显然， 如果 Leader 同样对其发送一个简单的 COMMIT 消息， Observer 服务器是无法完成事务请求的提交的。为了解决这个问題，ZooKeeper 特别设计了 INFORM 消息，该消息不仅能够通知 Observer 已经可以提交事务请求，同时还会在消息中携带事务请求的内容</td></tr><tr><td>SYNC，7</td><td>Leader→Learner</td><td>该消息用于通知 Learner 服务器已经完成了 Sync 操作</td></tr></tbody></table><h3 id="4-4-会话管理型"><a href="#4-4-会话管理型" class="headerlink" title="4.4 会话管理型"></a>4.4 会话管理型</h3><p>会话管理型消息是指 ZooKeeper 在进行会话管理的过程中，和 Learner 服务器之间互相通信所使用的消息，常见的有 PING 和 REVALIDATE 两种。</p><table><thead><tr><th>消息类型</th><th>发送方一接收方</th><th>说 明</th></tr></thead><tbody><tr><td>PING，5</td><td>Leader→Learner</td><td>该消息用于 Leader 同步 Learner 服务器上的客户端心跳检测，用以激活存活的客户端。ZooKeeper 的客户端往往会随机地和任意一个 ZooKeeper 服务器保持连接，因此Leader 服务器无法直接接收到所有客户端的心跳检测，需要委托给 Learner 来保存这些客户端的心跳检测记录。Leader 会定时地向 Learner 服务器发送 PING 消息，Learner 服务器在接收到 PING 消息后，会将这段时间内保持心跳检测的客户端列表，同样以 PING 消息的形式反馈给 Leader 服务器，由 Leader 服务器来负责逐个对这些客户端进行会话激活。</td></tr><tr><td>REVALIDATE，6</td><td>Learner→Leader</td><td>该消息用于 Learner 校验会话是否有效，同时也会激活会话，这通常发生在客户端重连的过程中，新的服务器需要向 Leader 发送 REVALIDATE 消息以确定该会话是否已经超时。</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：数据与存储</title>
      <link href="/2017/12/25/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%AD%98%E5%82%A8/"/>
      <url>/2017/12/25/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-内存数据"><a href="#1-内存数据" class="headerlink" title="1. 内存数据"></a>1. 内存数据</h2><p>ZooKeeper 的数据模型是一棵树，而从使用角度看， Zookeeper 就像一个内存数据库一样。在这个内存数据库中，存储了整棵树的内容，包括所有的节点路径、节点数据及其 ACL 信息等，Zookeeper 会定时将这个数据存储到磁盘上。</p><a id="more"></a><h3 id="1-1-DataTree"><a href="#1-1-DataTree" class="headerlink" title="1.1 DataTree"></a>1.1 DataTree</h3><p><code>DataTree</code> 是内存数据存储的核心，是一个树结构，代表了内存中一份完整的数据。<code>DataTree</code> 不包含任何与网络、客户端连接及请求处理相关的业务逻辑，是一个独立的组件。</p><p><img src="https://user-images.githubusercontent.com/12514722/34336360-6306a5b4-e991-11e7-89ff-6d2e3e7e993e.jpg" alt="diagram"></p><h3 id="1-2-DataNode"><a href="#1-2-DataNode" class="headerlink" title="1.2 DataNode"></a>1.2 DataNode</h3><p><code>DataNode</code> 是数据存储的最小单元，其内部除了保存了节点的数据内容、ACL 列表、节点状态之外，还记录了父节点的引用和子节点列表两个属性。同时，<code>DataNode</code> 也提供了对子节点列表进行操作的接口。</p><h3 id="1-3-nodes"><a href="#1-3-nodes" class="headerlink" title="1.3 nodes"></a>1.3 nodes</h3><p><code>DataTree</code> 用于存储所有 ZooKeeper 节点的路径、数据内容及其 ACL 信息等，底层的数据结构其实是一个典型的 <code>ConcurrentHashMap</code> 键值对结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, DataNode&gt; nodes = <span class="keyword">new</span> ConcurrentHashMap&lt;String, DataNode&gt;();</span><br></pre></td></tr></table></figure><p>在 <code>nodes</code> 这个 Map 中，存放了 ZooKeeper 服务器上所有的数据节点，可以说，对于 ZooKeeper 数据的所有操作，底层都是对这个 Map 结构的操作。<code>nodes</code> 以数据节点的路径（path）为 key，value 则是节点的数据内容：<code>DataNode</code>。</p><p>另外，对于所有的临时节点，为了便于实时访问和及时清理，<code>DataTree</code> 中还单独将临时节点保存起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Long, HashSet&lt;String&gt;&gt; ephemerals = <span class="keyword">new</span> ConcurrentHashMap&lt;Long, HashSet&lt;String&gt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="1-4-ZKDatabase"><a href="#1-4-ZKDatabase" class="headerlink" title="1.4 ZKDatabase"></a>1.4 ZKDatabase</h3><p>ZooKeeper 的内存数据库，负责管理 ZooKeeper 的所有会话、<code>DataTree</code> 存储和事务日志。<code>ZKDatabase</code> 会定时向磁盘 dump 快照数据，同时在 ZooKeeper 启动时，会通过磁盘的事务日志和快照文件恢复成一个完整的内存数据库。</p><h2 id="2-事务日志"><a href="#2-事务日志" class="headerlink" title="2. 事务日志"></a>2. 事务日志</h2><h3 id="2-1-日志格式"><a href="#2-1-日志格式" class="headerlink" title="2.1 日志格式"></a>2.1 日志格式</h3><p>可以使用 <code>org.apache.zookeeper.server.LogFormatter</code> 将事务日志文件转换成可视化的事务操作日志。在转换结果中，每个事务日志第一行为文件头信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper Transactional Log File with dbid 0 txnlog format version 2</span><br></pre></td></tr></table></figure><p>之后每一行记录一次事务操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16-11-19 下午01时12分48秒 session 0x15554779e59002c cxid 0x0 zxid 0x600000075 createSession 40000</span><br></pre></td></tr></table></figure><p>这一行就是一次客户端会话创建的事务操作日志，其中我们不难看出，从左向右分别记录事物操作时间、客户端会话 ID、CXID (客户端的操作序列号）、ZXID、操作类型和会话超时时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16-11-19 下午12时04分00秒 session 0x15554779e59000f cxid 0x1 zxid 0x600000027 create &apos;/zookeeper/test,#2f7a6f6f6b65657065722f74657374,v&#123;s&#123;31,s&#123;&apos;digest,&apos;foo:Jfg7TYUBs/6KEtdDWd5OB6bdD2Q=&#125;&#125;&#125;,F,2</span><br></pre></td></tr></table></figure><p>这一行是节点创建操作的事务操作日志，从左向右分別记录了事物操作时间、客户端会话 ID、CXID、ZXID、操作类型、节点路径、节点数据内容（#2f7a6f6f6b65657065722f74657374，在 <code>LogFormatter</code> 中使用如下格式输出节点内容：#+内容的 ASCII 码值）、节点的 ACL 信息、是否是临时节点（F 代表持久节点，T 代表临时节点）和父节点的子节点版本号。</p><p>注意，转换结果中没有显示每条事务操作记录的 Checksum 信息。</p><h3 id="2-2-日志写入"><a href="#2-2-日志写入" class="headerlink" title="2.2 日志写入"></a>2.2 日志写入</h3><p><code>FileTxnLog</code> 负责维护事务日志对外的接口，包括事务日志的写入和读取等。将事务操作写入事务日志的工作主要由 <code>append</code> 方法来负责：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * append an entry to the transaction log</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hdr the header of the transaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> txn the transaction part of the entry</span></span><br><span class="line"><span class="comment"> * returns true iff something appended, otw false </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">append</span><span class="params">(TxnHeader hdr, Record txn)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hdr == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hdr.getZxid() &lt;= lastZxidSeen) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Current zxid "</span> + hdr.getZxid() + <span class="string">" is &lt;= "</span> + lastZxidSeen + <span class="string">" for "</span> + hdr.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lastZxidSeen = hdr.getZxid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logStream==<span class="keyword">null</span>) &#123;</span><br><span class="line">        logFileWrite = <span class="keyword">new</span> File(logDir, (<span class="string">"log."</span> + Long.toHexString(hdr.getZxid())));</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(logFileWrite);</span><br><span class="line">        logStream=<span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        oa = BinaryOutputArchive.getArchive(logStream);</span><br><span class="line">        FileHeader fhdr = <span class="keyword">new</span> FileHeader(TXNLOG_MAGIC,VERSION, dbId);</span><br><span class="line">        fhdr.serialize(oa, <span class="string">"fileheader"</span>);</span><br><span class="line">        <span class="comment">// Make sure that the magic number is written before padding.</span></span><br><span class="line">        logStream.flush();</span><br><span class="line">        currentSize = fos.getChannel().position();</span><br><span class="line">        streamsToFlush.add(fos);</span><br><span class="line">    &#125;</span><br><span class="line">    padFile(fos);</span><br><span class="line">    <span class="keyword">byte</span>[] buf = Util.marshallTxnEntry(hdr, txn);</span><br><span class="line">    <span class="keyword">if</span> (buf == <span class="keyword">null</span> || buf.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Faulty serialization for header and txn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Checksum crc = makeChecksumAlgorithm();</span><br><span class="line">    crc.update(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">    oa.writeLong(crc.getValue(), <span class="string">"txnEntryCRC"</span>);</span><br><span class="line">    Util.writeTxnBytes(oa, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从方法定义中可以看到，ZooKeeper 在进行事务日志写入的过程中，会将事务头和事务体传给该方法。事务日志的写入过程大体可以分为如下 6 个步骤。</p><h4 id="2-2-1-确定是否有事务日志可写"><a href="#2-2-1-确定是否有事务日志可写" class="headerlink" title="2.2.1 确定是否有事务日志可写"></a>2.2.1 确定是否有事务日志可写</h4><p>当 ZooKeeper 服务器启动完成需要进行第一次事务日志的写入，或是上一个事务日志文件写满时，都会处于与事务日志文件断开的状态，即 ZooKeeper 服务器没有和任意一个日志文件相关联。因此在进行事务日志写入前，ZooKeeper 首先会判断 <code>FileTxnLog</code> 组件是否已经关联上一个可写的事务日志文件。若没有，则会使用该事务操作关联的 ZXID 作为后缀创建一个事务日志文件，同时构建事务日志的文件头信息，并立即写入这个事务日志文件中去。同时，将该文件的文件流放入 <code>streamToFlush</code> 集合，该集合用来记录当前需要强制进行数据落盘（将数据强制刷入磁盘上）的文件流。</p><h4 id="2-2-2-确定事务日志文件是否需要扩容（预分配）"><a href="#2-2-2-确定事务日志文件是否需要扩容（预分配）" class="headerlink" title="2.2.2 确定事务日志文件是否需要扩容（预分配）"></a>2.2.2 确定事务日志文件是否需要扩容（预分配）</h4><p>当检测到当前务日志文件剩余空间不足 4096 字节（4KB）时，就会开始进行文件空间扩容，即，在现有文件大小的基础上，将文件大小增加 65536KB （64MB），然后使用 “0”（\0）填充这些被扩容的文件空间。</p><p>那么 ZooKeeper 为什么要进行事务日志文件的磁盘空间预分配呢？对客户端的每一次事务操作，ZooKeeper 都会将其写入事务日志文件中。因此，事物日志的写入性能直接决定了 ZooKeeper 服务器对事务请求的响应，也就是说，事务写入近似可以被看作是一个磁盘 I/O 的过程。严格地讲，文件的不断追加写入操作会触发底层磁盘 I/O 为文件开辟新的磁盘块，即磁盘 Seek。因此，为了避免磁盘 Seek 的频率，提高磁盘 I/O 的效率，ZooKeeper 在创建事物日志的时候就会进行文件空间 “预分配” —— 在文件创建之初就向操作系统预分配一个很大的磁盘块，默认是 64MB，而一旦已分配的文件空间不足 4KB 时，将会再次 “预分配”，以避免随着每次事务的写入过程中文件大小增长带来的 Seek 开销，直至创建新的事务日志。事务日志预分配的大小可以通过系统属性 <code>zookeeper.preAllocSize</code> 来进行设置。</p><h4 id="2-2-3-事务序列化"><a href="#2-2-3-事务序列化" class="headerlink" title="2.2.3 事务序列化"></a>2.2.3 事务序列化</h4><p>事务序列化包括对事务头和事务体的序列化，分别是对 <code>TxnHeader</code> （事务头）和 <code>Record</code> （事务体）的序列化。其中事务体又可分为会话创建事务（<code>CreateSessionTxn</code>）、节点创建事务（<code>CreateTxn</code>）、节点删除事务（<code>DeleteTxn</code>）和节点数据更新事务 （<code>SetDataTxn</code>）等。</p><h4 id="2-2-4-生成-Checksum"><a href="#2-2-4-生成-Checksum" class="headerlink" title="2.2.4 生成 Checksum"></a>2.2.4 生成 Checksum</h4><p>为了保证事务日志文件的完整性和数据的准确性，ZooKeeper 在将事务日志写入文件前，会根据事务序列化产生的字节数组来计算 Checksum。ZooKeeper 默认使用 Adler32 算法来计算 Checksum 值。</p><h4 id="2-2-5-写入事务日志文件流"><a href="#2-2-5-写入事务日志文件流" class="headerlink" title="2.2.5 写入事务日志文件流"></a>2.2.5 写入事务日志文件流</h4><p>将序列化后的事务头、事务体及 Checksum 值写入到文件流中去。此时由于 ZooKeeper 使用的是 <code>BufferedOutputStream</code>，因此写入的数据并非真正被写入到磁盘文件上。</p><h4 id="2-2-6-事务日志刷入磁盘"><a href="#2-2-6-事务日志刷入磁盘" class="headerlink" title="2.2.6 事务日志刷入磁盘"></a>2.2.6 事务日志刷入磁盘</h4><p>到此，已经将事务操作写入文件流中，但是由于缓存的原因，无法实时地写入磁盘文件中，因此我们需要将缓存数据强制刷入磁盘中。这里会从 <code>streamsToFlush</code> 中提取出文件流，并调用 <code>FileChannel.force(boolean metaData)</code> 接口来强制将数据刷入磁盘文件中去。<code>force</code> 接口对应的其实是底层的 <code>fsync</code> 接口，是一个比较耗费磁盘 I/O 资源的接口，因此 ZooKeeper 允许用户控制是否需要主动调用该接口，可以通过系统属性 <code>zookeeper.forceSync</code> 来设置。</p><h3 id="2-3-日志截断"><a href="#2-3-日志截断" class="headerlink" title="2.3 日志截断"></a>2.3 日志截断</h3><p>在 ZooKeeper 运行过程中，可能出现非 Leader 机器上记录的事务 ID（<code>peerLastZxid</code>） 比 Leader 服务器大的情况，这是一个非法的运行时状态。</p><p>一旦某台机器碰到这样的情况，Leader 会发送 <code>TRUNC</code> 命令给这个机器，要求进行日志截断。Learner 服务器在接收到该命令后，就会删除所有包含或大于 <code>peerLastZxid</code> 的事务日志文件。</p><h2 id="3-snapshot——数据快照"><a href="#3-snapshot——数据快照" class="headerlink" title="3. snapshot——数据快照"></a>3. snapshot——数据快照</h2><p>数据快照用来记录 ZooKeeper 服务器上某一时刻的全量内存数据内容，并将其写入指定的磁盘文件中。快照文件也是使用 ZXID 的十六进制表示来作为文件名后缀，该后缀标识了本次数据快照开始时刻的服务器最新 ZXID。</p><p>可以使用 <code>org.apache.zookeeper.server.SnapshotFormatter</code> 将快照数据文件转换成可视化的数据内容。</p><h3 id="3-1-数据快照"><a href="#3-1-数据快照" class="headerlink" title="3.1 数据快照"></a>3.1 数据快照</h3><p><code>FileSnap</code> 负责维护快照数据对外的接口，包括快照数据的写入和读取等。针对客户端的每一次事务操作，ZooKeeper 都会将它们记录到事务日志中，同时也会将数据变更应用到内存数据库中。ZooKeeper 在进行若干次事务日志记录之后，将内存数据库的全量数据 Dump 到本地文件中，这个过程就是数据快照。</p><h4 id="3-1-1-确定是否需要进行数据快照"><a href="#3-1-1-确定是否需要进行数据快照" class="headerlink" title="3.1.1 确定是否需要进行数据快照"></a>3.1.1 确定是否需要进行数据快照</h4><p>每进行一次事务日志记录之后，ZooKeeper 都会检测当前是否需要进行数据快照。理论上进行 snapCount 次事务操作后就会开始数据快照，但是考虑到数据快照对 ZooKeeper 所在机器的整体性能的影响，需要尽量避免 ZooKeeper 集群中的所有机器在同一时刻进行数据快照。因此 ZooKeeper 在具体的实现中，并不是严格地按照这个策略执行的，而是采取 “过半随机” 策略，即符合如下条件就进行数据快照：<br>$$<br>logCount&gt; (snapCount / 2 + randRoll)<br>$$<br>其中 logCount 代表了当前已经记录的事务日志数量，randRoll 为 1~snapCount/2 之间的随机数，因此上面的条件就相当于：如果我们配置的 snapCount 值为默认的 100000，那么 ZooKeeper 会在 50000~100000 次事务日志记录后进行一次数据快照。</p><h4 id="3-1-2-切换事务日志文件"><a href="#3-1-2-切换事务日志文件" class="headerlink" title="3.1.2 切换事务日志文件"></a>3.1.2 切换事务日志文件</h4><p>满足上述条件之后，ZooKeeper 就要开始进行数据快照了。首先是进行事务日志文件的切换。所谓的事务日志文件切换是指当前的事务日志已经 “写满”（已经写入了 snapCount 个事务日志），需要重新创建一个新的事务日志。</p><h4 id="3-1-3-创建数据快照异步线程"><a href="#3-1-3-创建数据快照异步线程" class="headerlink" title="3.1.3 创建数据快照异步线程"></a>3.1.3 创建数据快照异步线程</h4><p>为了保证数据快照过程不影响 ZooKeeper 的主流程，这里需要创建一个单独的异步线程来进行数据快照。</p><h4 id="3-1-4-获取全最数据和会话信息"><a href="#3-1-4-获取全最数据和会话信息" class="headerlink" title="3.1.4 获取全最数据和会话信息"></a>3.1.4 获取全最数据和会话信息</h4><p>数据快照本质上就是将内存中的所有数据节点信息（<code>DataTree</code>）和会话信息保存到本地磁盘中去。因此这里会先从 <code>ZKDatabase</code> 中获取到 <code>DataTree</code> 和会话信息。</p><h4 id="3-1-5-生成快照数据文件名"><a href="#3-1-5-生成快照数据文件名" class="headerlink" title="3.1.5 生成快照数据文件名"></a>3.1.5 生成快照数据文件名</h4><p>在这一步中， ZooKeeper 会根据当前已提交的最大 ZXID 来生成数据快照文件名。</p><h4 id="3-1-6-数椐序列化"><a href="#3-1-6-数椐序列化" class="headerlink" title="3.1.6 数椐序列化"></a>3.1.6 数椐序列化</h4><p>接下来就开始真正的数据序列化了。在序列化时，首先会序列化文件头信息，这里的文件头和事务日志中的一致，同样也包含了魔数、版本号和 dbid 信息。然后再对会话信息和 <code>DataTree</code> 分別进行序列化，同时生成一个 Checksum，—并写入快照数据文件中去。</p><h2 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4. 初始化"></a>4. 初始化</h2><h3 id="4-1-初始化流程"><a href="#4-1-初始化流程" class="headerlink" title="4.1 初始化流程"></a>4.1 初始化流程</h3><h4 id="4-1-1-初始化FileTxnSnapLog"><a href="#4-1-1-初始化FileTxnSnapLog" class="headerlink" title="4.1.1 初始化FileTxnSnapLog"></a>4.1.1 初始化FileTxnSnapLog</h4><p><code>FileTxnSnapLog</code> 是 ZooKeeper 事务日志和快照数据访问层，用于衔接上层业务与底层数据存储。底层数据包含了事务日志和快照数据两部分，因此 <code>FileTxnSnapLog</code> 内部又分为 <code>FileTxnLog</code> 和 <code>FileSnap</code> 的初始化，分别代表事务日志管理器和快找数据管理器的初始化。</p><h4 id="4-1-2-初始化-ZKDatabase"><a href="#4-1-2-初始化-ZKDatabase" class="headerlink" title="4.1.2 初始化 ZKDatabase"></a>4.1.2 初始化 ZKDatabase</h4><p>在初始化过程中，首先会构建一个初始化的 <code>DataTree</code>，同时将 <code>FileTxnSnapLog</code> 交付 <code>ZKDatabase</code>，以便内存数据库能够对事务日志和快照数据进行访问。在 <code>ZKDatabase</code> 初始化的时候，<code>DataTree</code> 也会进行相应的初始化工作，如创建一些 ZooKeeper 的默认节点，包括 <code>/</code>、<code>/zookeeper</code>、<code>/zookeeper/quota</code> 三个节点的创建。</p><p>除了 ZooKeeper 的数据节点，在 <code>ZKDatabase</code> 的初始化阶段还会创建一个用于保存所有客户端会话超时时间的记录器：<code>sessionWithTimeouts</code>。</p><h4 id="4-1-3-创建-PlayBackListener"><a href="#4-1-3-创建-PlayBackListener" class="headerlink" title="4.1.3 创建 PlayBackListener"></a>4.1.3 创建 PlayBackListener</h4><p><code>PlayBackListener</code> 监听器主要用来接收事务应用过程中的回调。在 ZooKeeper 数据恢复后期，会有一个事务订正的过程，在这个过程中，会回调 <code>PlayBackListener</code> 来进行对应的数据订正。</p><h4 id="4-1-4-处理快照文件"><a href="#4-1-4-处理快照文件" class="headerlink" title="4.1.4 处理快照文件"></a>4.1.4 处理快照文件</h4><p>此时，ZooKeeper 可以开始从磁盘中恢复数据了，首先从快照文件开始加载。</p><h4 id="4-1-5-获取最新的-100-个快照文件"><a href="#4-1-5-获取最新的-100-个快照文件" class="headerlink" title="4.1.5 获取最新的 100 个快照文件"></a>4.1.5 获取最新的 100 个快照文件</h4><p>获取最新的至多 100 个快照文件。</p><h4 id="4-1-6-解析快照文件"><a href="#4-1-6-解析快照文件" class="headerlink" title="4.1.6 解析快照文件"></a>4.1.6 解析快照文件</h4><p>ZooKeeper 逐个对快照文件进行解析，此时需要对其进行反序列化，生成 <code>DataTree</code> 和 <code>sessionsWithTimeouts</code>，同时还会进行文件的 <code>checksum</code> 校验以确定快照文件的正确性。</p><p>虽然获取到的是至多 100 个快照文件，但其实在这里的逐个解析过程中，如果正确性校验通过的话，那么通常只会解析最新的那个快照文件。换句话说，只有当最新的快照文件不可用的时候，才会逐个进行解析，直到将这 100 个文件全部解析完。如果将获取到的所有快照文件都解析完后还是无法成功恢复一个完整的 <code>DataTree</code> 和 <code>sessionWithTimeouts</code>，则认为无法从磁盘中加载数据，服务器启动失败。</p><h4 id="4-1-7-获取最新的-ZXID"><a href="#4-1-7-获取最新的-ZXID" class="headerlink" title="4.1.7 获取最新的 ZXID"></a>4.1.7 获取最新的 ZXID</h4><p>此时根据快照文件的文件名就可以解析出一个最新的 ZXID：zxid_for_snap，该 ZXID 代表了 ZooKeeper 开始进行数据快照的时刻。</p><h4 id="4-1-8-处理事务日志"><a href="#4-1-8-处理事务日志" class="headerlink" title="4.1.8 处理事务日志"></a>4.1.8 处理事务日志</h4><p>此时 ZooKeeper 服务器内存中已经有了一份近似全量的数据，现在开始通过事务日志来更新增量数据。</p><h4 id="4-1-9-获取所有-zxid-for-snap-之后提交的事务"><a href="#4-1-9-获取所有-zxid-for-snap-之后提交的事务" class="headerlink" title="4.1.9 获取所有 zxid_for_snap 之后提交的事务"></a>4.1.9 获取所有 zxid_for_snap 之后提交的事务</h4><p>从事务日志中获取所有 ZXID 比 zxid_for_snap 大的事务操作。</p><h4 id="4-1-10-事务应用"><a href="#4-1-10-事务应用" class="headerlink" title="4.1.10 事务应用"></a>4.1.10 事务应用</h4><p>获取到所有 ZXID 大于 zxid_for_snap 的事务后，将其逐个应用到之前基于快照数据文件恢复出来的 <code>DataTree</code> 和 <code>sessionsWithTimeouts</code> 中去。每当有一个事务被应用到内存数据库中去后，ZooKeeper 同时会回调 <code>PlayBackListener</code>，将这一事务操作记录转换成 Proposal，并保存到 <code>ZKDatabase</code> 的 <code>committedLog</code> 中，以便 Follower 进行快速同步。</p><h4 id="4-1-11-再次获取最新的-ZXID"><a href="#4-1-11-再次获取最新的-ZXID" class="headerlink" title="4.1.11 再次获取最新的 ZXID"></a>4.1.11 再次获取最新的 ZXID</h4><p>待所有的事务都被完整地应用到内存数据库中之后，基本上也就完成了数据的初始化过程，此时再次获取一个 ZXID，用来标识上次服务器正常运行时提交的最大事务 ID。</p><h4 id="4-1-12-校验-epoch"><a href="#4-1-12-校验-epoch" class="headerlink" title="4.1.12 校验 epoch"></a>4.1.12 校验 epoch</h4><p>完成数据加载后，ZooKeeper 会从最新 ZXID 中解析出事务处理的 Leader 周期：epochOfZxid。同时也会从磁盘的 <code>currentEpoch</code> 和 <code>acceptedEpoch</code> 文件中读取上次记录的最新的 epoch 值，进行校验。</p><h3 id="4-2-PlayBackListener"><a href="#4-2-PlayBackListener" class="headerlink" title="4.2 PlayBackListener"></a>4.2 PlayBackListener</h3><p><code>PlayBackListener</code> 是一个事务应用监听器，用于在事务应用过程中的回调：每当成功将一条事务日志应用到内存数据库中后，就会调用这个监听器。其接口定义非常简单，只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlayBackListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onTxnLoaded</span><span class="params">(TxnHeader hdr, Record rec)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于对单条事务进行处理。在完成 <code>ZKDatabase</code> 的初始化后，ZooKeeper 会立即创建一个 <code>PlayBackListener</code> 监听器，并将其置于 <code>FileTxnSnapLog</code> 。</p><h2 id="5-数据同步"><a href="#5-数据同步" class="headerlink" title="5. 数据同步"></a>5. 数据同步</h2><h3 id="5-1-获取-Learner-状态"><a href="#5-1-获取-Learner-状态" class="headerlink" title="5.1 获取 Learner 状态"></a>5.1 获取 Learner 状态</h3><p>在注册 Learner 的最后阶段，Learner 服务器会发送给 Leader 服务器一个 <code>ACKEPOCH</code> 数据包，Leader 会从这个数据包中解析出该 Learner 的 <code>currentEpoch</code> 和 <code>lastZxid</code>。然后 Learner 调用 <code>org.apache.zookeeper.server.quorum.Learner#syncWithLeader</code> 等待同步开始。</p><h3 id="5-2-数据同步初始化"><a href="#5-2-数据同步初始化" class="headerlink" title="5.2 数据同步初始化"></a>5.2 数据同步初始化</h3><p>在开始数据同步之前，Leader 服务器会进行数据同步初始化，首先会从 ZooKeeper 的内存数据库中提取出事务请求对应的提议缓存队列，同时完成对以下三个 ZXID 值的初始化。</p><ul><li><code>peerLastZxid</code>：该 Learner 服务器最后处理的 ZXID。</li><li><code>minCommittedLog</code>：Leader 服务器提议缓存队列 <code>commitedLog</code> 中的最小 ZXID。</li><li><code>maxCommittedLog</code>：Leader 服务器提议缓存队列 <code>commitedLog</code> 中的最大 ZXID。</li></ul><p>ZooKeeper 集群数据同步通常分为四类，分别是直接差异化同步（DIFF 同步）、先回滚再差异化同步（TRUNC + DIFF 同步）、仅回滚同步（TRUNC 同步）、全量同步（SNAP 同步）。在初始化阶段，Leader 服务器会优先以全量同步方式来同步数据。同时，会根据 Leader 和 Learner 之间的数据差异情况来决定最终的数据同步方式。</p><h3 id="5-3-同步模式"><a href="#5-3-同步模式" class="headerlink" title="5.3 同步模式"></a>5.3 同步模式</h3><h4 id="5-3-1-直接差异化同步（DIFF-同步）"><a href="#5-3-1-直接差异化同步（DIFF-同步）" class="headerlink" title="5.3.1 直接差异化同步（DIFF 同步）"></a>5.3.1 直接差异化同步（DIFF 同步）</h4><p>场景：<code>peerLastZxid</code> 介于 <code>minCommittedLog</code> 和 <code>maxCommittedLog</code> 之间。</p><p>Leader 服务器会首先向这个 Learner 发送一个 <code>DIFF</code> 指令，用于通知 Learner “进入差异化数据同步阶段，Leader 服务器即将把一些 Proposal 同步给自己”。在实际 Proposal 同步过程中，针对每个 Proposal，Leader 服务器都会通过发送两个数据包来完成，分别是 PROPOSAL 内容数据包和 COMMIT 指令数据包——这和 ZooKeeper 运行时 Leader 和 Follower 之间的事务提交过程是一致的。Leader 会将 PROPOSAL 数据包和 COMMIT 指令包暂时先放入 <code>queuedPackets</code> 队列中。</p><h4 id="5-3-2-先回滚再差异化同步（TRUNC-DIFF-同步）"><a href="#5-3-2-先回滚再差异化同步（TRUNC-DIFF-同步）" class="headerlink" title="5.3.2 先回滚再差异化同步（TRUNC + DIFF 同步）"></a>5.3.2 先回滚再差异化同步（TRUNC + DIFF 同步）</h4><p>场景：<code>peerLastZxid</code> 介于 <code>minCommittedLog</code> 和 <code>maxCommittedLog</code> 之间，但 Leader 发现某个 Learner 包含了一条自己没有的事务记录。</p><p>对于这个特殊场景，就使用先回滚再差异化同步（TRUNC + DIFF 同步）的方式。Leader 通过 <code>TRUNC</code> 指令让该 Learner 进行事务回滚，回滚到 Leader 服务器上存在的，同时也是最接近于 <code>peerLastzxid</code> 的 ZXID ，随后发送余下的差异数据。</p><h4 id="5-3-3-仅回滚同步（TRUNC-同步）"><a href="#5-3-3-仅回滚同步（TRUNC-同步）" class="headerlink" title="5.3.3 仅回滚同步（TRUNC 同步）"></a>5.3.3 仅回滚同步（TRUNC 同步）</h4><p>场景：<code>peerLastzxid</code> 大于 <code>maxCommittedLog</code>。</p><p>这种场景其实就是上述先回滚再差异化同步的简化模式，Leader 会要求 Learner 回滚到 ZXID 值为 <code>maxCommittedLog</code> 对应的事务操作。</p><h4 id="5-3-4-全量同步（SNAP-同步）"><a href="#5-3-4-全量同步（SNAP-同步）" class="headerlink" title="5.3.4 全量同步（SNAP 同步）"></a>5.3.4 全量同步（SNAP 同步）</h4><ul><li>场景1：<code>peerLastZxid</code> 小于 <code>minCommittedLog</code>。</li><li>场景2：Leader 服务器上没有提议缓存队列，<code>peerLastZxid</code> 不等于 <code>lastProcessedZxid</code>（Leader 服务器数据恢复后得到的最大 ZXID）</li></ul><p>上述这两个场景非常类似，在这两种场景下, Leader服务器都无法直接使用提议缓存队列和 Learner进行数据同步，因此只能进行全量同步（SNAP 同步）。</p><p>所谓全量同步就是 Leader 服务器将本机上的全量内存数据都同步给 Learner。Leader 服务器将会向 Learner发送一个 SNAP 指令，通知 Learner 即将进行全量数据同步。随后， Leader 会从内存数据库中获取到全量的数据节点和会话超时时间记录器，将它们序列化后传输给 Learner 。Learner 服务器接收到该全最数据后，会对其反序列化后载入到内存数据库中。</p><h3 id="5-4-后续处理"><a href="#5-4-后续处理" class="headerlink" title="5.4 后续处理"></a>5.4 后续处理</h3><p>在上面的步骤之后，Leader 已经完成了同步模式的选择。接下来：</p><ol><li>Leader 将 Learner 加入到 <code>forwardingFollowers</code> 或 <code>observingLearners</code> 队列中。</li><li>Leader 将 <code>NEWLEADER</code> 指令添加到 <code>queuedPackets</code> 队列中。</li><li>Leader 将选出的同步模式发送给 Learner，其中包含了一个标志 ZXID：<ul><li>对于 DIFF 同步，该 ZXID 为 <code>maxCommittedLog</code>。</li><li>对于 TRUNC 同步，该 ZXID 为 Learner 需要回滚到的那个 ZXID。</li><li>对于 SNAP 同步，该 ZXID 为 <code>DataTree</code> 的最新事务 ZXID（这里不能设置为  <code>maxCommittedLog</code>，因为 <code>commitedLog</code> 队列可能为空）。此时，Leader 还会马上将全量数据序列化后发送给 Learner。</li></ul></li><li>然后，在一个新线程中，发送 <code>queuedPackets</code> 队列中的数据，包括 DIFF 和 DIFF + TRUNC 模式下要用到的差异化数据，以及最后的 <code>NEWLEADER</code> 指令。</li><li>Leader 和各个 LearnerHandler 在 <code>org.apache.zookeeper.server.quorum.Leader#waitForNewLeaderAck</code> 方法处同步等待半数以上 PARTICIPANT 对 <code>NEWLEADER</code> 指令做出响应。</li><li>对于 Learner 而言，在同步数据之后，还会接收到来自 Leader 的 <code>NEWLEADER</code> 指令，此时 Learner 就会反馈给 Leader —个 <code>ACK</code> 消息，表明自己确实完成了对提议缓存队列中 Proposal 的同步。</li><li>Leader 在接收到来 Learner 的这个 <code>ACK</code> 消息以后，就认为当前 Learner 已经完成数据同步，同时进入 “过半策略” 等待阶段 —— Leader 会和其他 Learner 服务器进行上述同样的数据同步流程，直到集群中有过半的 PARTICIPANT 机器响应了 Leader 这个 <code>NEWLEADER</code> 消息。注意这里不考虑 Observer。</li><li>一但满足 “过半策略” 后，Leader 服务器就会向所有已经完成数据同步的 Learner 发送一个 <code>UPTODATE</code> 指令，用来通知 Learner 已经完成了数据同步，同时集群中已经有过半机器完成了数据同步，集群已经具备了对外服务的能力了。</li><li>Learner 在接收到这个来自 Leader 的 <code>UPTODATE</code> 指令后，会终止数据同步流程，然后向 Leader 再次反馈一个 <code>ACK</code> 消息。</li></ol><p><code>org.apache.zookeeper.server.quorum.Leader#waitForNewLeaderAck</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process NEWLEADER ack of a given sid and wait until the leader receives</span></span><br><span class="line"><span class="comment"> * sufficient acks.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> learnerType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitForNewLeaderAck</span><span class="params">(<span class="keyword">long</span> sid, <span class="keyword">long</span> zxid, LearnerType learnerType)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (newLeaderProposal.ackSet) &#123;</span><br><span class="line">        <span class="keyword">if</span> (quorumFormed) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> currentZxid = newLeaderProposal.packet.getZxid();</span><br><span class="line">        <span class="keyword">if</span> (zxid != currentZxid) &#123;</span><br><span class="line">            LOG.error(<span class="string">"NEWLEADER ACK from sid: "</span> + sid</span><br><span class="line">                    + <span class="string">" is from a different epoch - current 0x"</span></span><br><span class="line">                    + Long.toHexString(currentZxid) + <span class="string">" receieved 0x"</span></span><br><span class="line">                    + Long.toHexString(zxid));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (learnerType == LearnerType.PARTICIPANT) &#123;</span><br><span class="line">            newLeaderProposal.ackSet.add(sid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (self.getQuorumVerifier().containsQuorum(</span><br><span class="line">                newLeaderProposal.ackSet)) &#123;</span><br><span class="line">            quorumFormed = <span class="keyword">true</span>;</span><br><span class="line">            newLeaderProposal.ackSet.notifyAll();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = Time.currentElapsedTime();</span><br><span class="line">            <span class="keyword">long</span> cur = start;</span><br><span class="line">            <span class="keyword">long</span> end = start + self.getInitLimit() * self.getTickTime();</span><br><span class="line">            <span class="keyword">while</span> (!quorumFormed &amp;&amp; cur &lt; end) &#123;</span><br><span class="line">                newLeaderProposal.ackSet.wait(end - cur);</span><br><span class="line">                cur = Time.currentElapsedTime();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!quorumFormed) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(<span class="string">"Timeout while waiting for NEWLEADER to be acked by quorum"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-自问自答"><a href="#6-自问自答" class="headerlink" title="6. 自问自答"></a>6. 自问自答</h2><h3 id="6-1-Observer-是否不接收-PROPOSAL-和-COMMIT-消息？"><a href="#6-1-Observer-是否不接收-PROPOSAL-和-COMMIT-消息？" class="headerlink" title="6.1 Observer 是否不接收 PROPOSAL 和 COMMIT 消息？"></a>6.1 Observer 是否不接收 PROPOSAL 和 COMMIT 消息？</h3><p>在同步阶段，如果 Learner 适用于 DIFF 同步，则 Leader 会把差量数据以 <code>PROPOSAL</code> 和 <code>COMMIT</code> 消息对的形式发送给 Learner，无论该 Learner 是 Follower 还是 Observer。</p><h3 id="6-2-每个事务日志文件一定是-64M-大吗？"><a href="#6-2-每个事务日志文件一定是-64M-大吗？" class="headerlink" title="6.2 每个事务日志文件一定是 64M 大吗？"></a>6.2 每个事务日志文件一定是 64M 大吗？</h3><p>不一定。ZooKeeper 只会在需要进行数据快照时切换事务日志文件。假定 snapCount 为默认的 100000，且 randRoll 为50000，平均每条事务记录大小为 1KB。那么，在新的一次数据快照之前，事务日志文件已经记录了 $1KB * (100000 / 2 + 50000)=100MB$ 的数据，当前事务日志文件扩展到了 128MB。那么当执行数据快照、创建新的事务日志文件后，上一个事务日志文件大小就为 128MB。可见，事务日志文件的大小，归根结底取决于平均事务记录的大小与 randRoll 的值。</p>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：请求处理</title>
      <link href="/2017/12/19/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/"/>
      <url>/2017/12/19/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="1-会话创建请求"><a href="#1-会话创建请求" class="headerlink" title="1. 会话创建请求"></a>1. 会话创建请求</h2><p>ZooKeeper 服务端对于会话创建的处理，大体可以分为请求接收、会话创建、预处理、事务处理、事务应用和会话响应 6 大环节，其大体流程如图。</p><p><img src="https://user-images.githubusercontent.com/12514722/34207103-ffdb7a80-e5c3-11e7-85e4-f5bb3b99bc40.png" alt=""></p><a id="more"></a><h3 id="1-1-请求接收"><a href="#1-1-请求接收" class="headerlink" title="1.1     请求接收"></a>1.1     请求接收</h3><h4 id="1-1-1-I-O-层接收来自客户端的请求"><a href="#1-1-1-I-O-层接收来自客户端的请求" class="headerlink" title="1.1.1 I/O 层接收来自客户端的请求"></a>1.1.1 I/O 层接收来自客户端的请求</h4><p>在 ZooKeeper 中，<code>NIOServerCnxnFactory</code> 会在运行过程中为客户端连接创建对应的  <code>NIOServerCnxn</code> 实例，客户端与服务端的所有通信都是由<code>NIOServerCnxn</code> 负责的 —— 其负责统一接收来自客户端的所有请求，并将请求内容从底层网络 I/O 中完整地读取出来，一个客户端连接就对应了一个 <code>NIOServerCnxn</code> 的实例。注意刚创建时 <code>NIOServerCnxn</code> 实例的 <code>initialized</code> 字段为 false。</p><p><code>org.apache.zookeeper.server.NIOServerCnxnFactory#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!ss.socket().isClosed()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            selector.select(<span class="number">1000</span>);</span><br><span class="line">            Set&lt;SelectionKey&gt; selected;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                selected = selector.selectedKeys();</span><br><span class="line">            &#125;</span><br><span class="line">            ArrayList&lt;SelectionKey&gt; selectedList = <span class="keyword">new</span> ArrayList&lt;SelectionKey&gt;(</span><br><span class="line">                    selected);</span><br><span class="line">            Collections.shuffle(selectedList);</span><br><span class="line">            <span class="keyword">for</span> (SelectionKey k : selectedList) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((k.readyOps() &amp; SelectionKey.OP_ACCEPT) != <span class="number">0</span>) &#123;</span><br><span class="line">                    SocketChannel sc = ((ServerSocketChannel) k</span><br><span class="line">                            .channel()).accept();</span><br><span class="line">                    InetAddress ia = sc.socket().getInetAddress();</span><br><span class="line">                    <span class="keyword">int</span> cnxncount = getClientCnxnCount(ia);</span><br><span class="line">                    <span class="keyword">if</span> (maxClientCnxns &gt; <span class="number">0</span> &amp;&amp; cnxncount &gt;= maxClientCnxns)&#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Too many connections from "</span> + ia</span><br><span class="line">                                 + <span class="string">" - max is "</span> + maxClientCnxns );</span><br><span class="line">                        sc.close();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        LOG.info(<span class="string">"Accepted socket connection from "</span></span><br><span class="line">                                 + sc.socket().getRemoteSocketAddress());</span><br><span class="line">                        sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                        SelectionKey sk = sc.register(selector,</span><br><span class="line">                                SelectionKey.OP_READ);</span><br><span class="line">                        NIOServerCnxn cnxn = createConnection(sc, sk);</span><br><span class="line">                        sk.attach(cnxn);</span><br><span class="line">                        addCnxn(cnxn);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((k.readyOps() &amp; (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    NIOServerCnxn c = (NIOServerCnxn) k.attachment();</span><br><span class="line">                    c.doIO(k);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                        LOG.debug(<span class="string">"Unexpected ops in select "</span></span><br><span class="line">                                  + k.readyOps());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            selected.clear();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Ignoring unexpected runtime exception"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Ignoring exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closeAll();</span><br><span class="line">    LOG.info(<span class="string">"NIOServerCnxn factory exited run method"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-判断是否是客户端会话创建请求"><a href="#1-1-2-判断是否是客户端会话创建请求" class="headerlink" title="1.1.2 判断是否是客户端会话创建请求"></a>1.1.2 判断是否是客户端会话创建请求</h4><p>当底层 I/O 有数据可读时，<code>NIOServerCnxnFactory</code> 找到绑定的 <code>NIOServerCnxn</code> 实例，调用其 <code>doIO</code> 方法。这里会做一个判断，若 <code>initialized</code> 字段为 false，则这一定是客户端的第一个请求会话创建请求。</p><p><code>org.apache.zookeeper.server.NIOServerCnxn#readPayload</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Read the request payload (everything following the length prefix) */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readPayload</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (incomingBuffer.remaining() != <span class="number">0</span>) &#123; <span class="comment">// have we read length bytes?</span></span><br><span class="line">        <span class="keyword">int</span> rc = sock.read(incomingBuffer); <span class="comment">// sock is non-blocking, so ok</span></span><br><span class="line">        <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EndOfStreamException(</span><br><span class="line">                    <span class="string">"Unable to read additional data from client sessionid 0x"</span></span><br><span class="line">                    + Long.toHexString(sessionId)</span><br><span class="line">                    + <span class="string">", likely client has closed socket"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (incomingBuffer.remaining() == <span class="number">0</span>) &#123; <span class="comment">// have we read length bytes?</span></span><br><span class="line">        packetReceived();</span><br><span class="line">        incomingBuffer.flip();</span><br><span class="line">        <span class="keyword">if</span> (!initialized) &#123;</span><br><span class="line">            readConnectRequest();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            readRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        lenBuffer.clear();</span><br><span class="line">        incomingBuffer = lenBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-3-反序列化-ConnectRequest-请求"><a href="#1-1-3-反序列化-ConnectRequest-请求" class="headerlink" title="1.1.3 反序列化 ConnectRequest 请求"></a>1.1.3 反序列化 ConnectRequest 请求</h4><p>一旦确定客户端请求是会话创建请求，那么服务端就可以对其进行反序列化，并生成一个 <code>ConnectRequest</code> 请求实体。</p><p><code>org.apache.zookeeper.server.NIOServerCnxn#readConnectRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readConnectRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isZKServerRunning()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"ZooKeeperServer not running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    zkServer.processConnectRequest(<span class="keyword">this</span>, incomingBuffer);</span><br><span class="line">    initialized = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.ZooKeeperServer#processConnectRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConnectRequest</span><span class="params">(ServerCnxn cnxn, ByteBuffer incomingBuffer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BinaryInputArchive bia = BinaryInputArchive.getArchive(<span class="keyword">new</span> ByteBufferInputStream(incomingBuffer));</span><br><span class="line">    ConnectRequest connReq = <span class="keyword">new</span> ConnectRequest();</span><br><span class="line">    connReq.deserialize(bia, <span class="string">"connect"</span>);</span><br><span class="line">    <span class="keyword">boolean</span> readOnly = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        readOnly = bia.readBool(<span class="string">"readOnly"</span>);</span><br><span class="line">        cnxn.isOldClient = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// this is ok -- just a packet from an old client which</span></span><br><span class="line">        <span class="comment">// doesn't contain readOnly field</span></span><br><span class="line">        LOG.warn(<span class="string">"Connection request from old client "</span></span><br><span class="line">                + cnxn.getRemoteSocketAddress()</span><br><span class="line">                + <span class="string">"; will be dropped if server is in r-o mode"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (readOnly == <span class="keyword">false</span> &amp;&amp; <span class="keyword">this</span> <span class="keyword">instanceof</span> ReadOnlyZooKeeperServer) &#123;</span><br><span class="line">        String msg = <span class="string">"Refusing session request for not-read-only client "</span></span><br><span class="line">            + cnxn.getRemoteSocketAddress();</span><br><span class="line">        LOG.info(msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CloseRequestException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (connReq.getLastZxidSeen() &gt; zkDb.dataTree.lastProcessedZxid) &#123;</span><br><span class="line">        String msg = <span class="string">"Refusing session request for client "</span></span><br><span class="line">            + cnxn.getRemoteSocketAddress()</span><br><span class="line">            + <span class="string">" as it has seen zxid 0x"</span></span><br><span class="line">            + Long.toHexString(connReq.getLastZxidSeen())</span><br><span class="line">            + <span class="string">" our last zxid is 0x"</span></span><br><span class="line">            + Long.toHexString(getZKDatabase().getDataTreeLastProcessedZxid())</span><br><span class="line">            + <span class="string">" client must try another server"</span>;</span><br><span class="line"></span><br><span class="line">        LOG.info(msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CloseRequestException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sessionTimeout = connReq.getTimeOut();</span><br><span class="line">    <span class="keyword">byte</span> passwd[] = connReq.getPasswd();</span><br><span class="line">    <span class="keyword">int</span> minSessionTimeout = getMinSessionTimeout();</span><br><span class="line">    <span class="keyword">if</span> (sessionTimeout &lt; minSessionTimeout) &#123;</span><br><span class="line">        sessionTimeout = minSessionTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxSessionTimeout = getMaxSessionTimeout();</span><br><span class="line">    <span class="keyword">if</span> (sessionTimeout &gt; maxSessionTimeout) &#123;</span><br><span class="line">        sessionTimeout = maxSessionTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">    cnxn.setSessionTimeout(sessionTimeout);</span><br><span class="line">    <span class="comment">// We don't want to receive any packets until we are sure that the</span></span><br><span class="line">    <span class="comment">// session is setup</span></span><br><span class="line">    cnxn.disableRecv();</span><br><span class="line">    <span class="keyword">long</span> sessionId = connReq.getSessionId();</span><br><span class="line">    <span class="keyword">if</span> (sessionId != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> clientSessionId = connReq.getSessionId();</span><br><span class="line">        serverCnxnFactory.closeSession(sessionId);</span><br><span class="line">        cnxn.setSessionId(sessionId);</span><br><span class="line">        reopenSession(cnxn, sessionId, passwd, sessionTimeout);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createSession(cnxn, passwd, sessionTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-4-判断是否-ReadOnly-客户端"><a href="#1-1-4-判断是否-ReadOnly-客户端" class="headerlink" title="1.1.4 判断是否 ReadOnly 客户端"></a>1.1.4 判断是否 ReadOnly 客户端</h4><p>如果当前 ZooKeeper 客户端是以 ReadOnly 模式启动的，那么所有来自非 ReadOnly 客户端的请求将无法被处理。因此，服务端需要先检查其是否是 ReadOnly 客户端，并以此来决定是否接受该会话创建请求。</p><h4 id="1-1-5-检查客户端-ZXID"><a href="#1-1-5-检查客户端-ZXID" class="headerlink" title="1.1.5 检查客户端 ZXID"></a>1.1.5 检查客户端 ZXID</h4><p>在正常情况下，同一个 ZooKeeper 集群中，服务端的 ZXID 必定大于客户端的 ZXID，因此如果发现客户端的 ZXID 大于服务端的 ZXID，那么服务端不接受该客户端的会话创建请求。</p><h4 id="1-1-6-协商-sessionTimeout"><a href="#1-1-6-协商-sessionTimeout" class="headerlink" title="1.1.6 协商 sessionTimeout"></a>1.1.6 协商 sessionTimeout</h4><p>客户端在构造 ZooKeeper 实例时，会有一个 <code>sessionTimeout</code> 参数用于指定会话的超时时间。客户端向服务器发送这个超时时间后，服务器会根据自己的超时时间限制最终确定该会话的超时时间。</p><p>默认情况下，ZooKeeper 服务器对超时时间的限制介于 2 个 <code>tickTime</code> 到 20 个 <code>tickTime</code> 之间。</p><h4 id="1-1-7-判断是否需要重新创建会话"><a href="#1-1-7-判断是否需要重新创建会话" class="headerlink" title="1.1.7 判断是否需要重新创建会话"></a>1.1.7 判断是否需要重新创建会话</h4><p>服务端根据客户端请求中是否包含 <code>sessionID</code> 来判断该客户端是否需要重新创建会话。如果客户端请求中已经包含了 <code>sessionID</code>，那么就认为该客户端正在进行会话重连。这种情况下，服务端只需要重新打开这个会话，否则需要重新创建。</p><h3 id="1-2-会话创建"><a href="#1-2-会话创建" class="headerlink" title="1.2 会话创建"></a>1.2 会话创建</h3><p><code>org.apache.zookeeper.server.ZooKeeperServer#createSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">createSession</span><span class="params">(ServerCnxn cnxn, <span class="keyword">byte</span> passwd[], <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sessionId = sessionTracker.createSession(timeout);</span><br><span class="line">    Random r = <span class="keyword">new</span> Random(sessionId ^ superSecret);</span><br><span class="line">    r.nextBytes(passwd);</span><br><span class="line">    ByteBuffer to = ByteBuffer.allocate(<span class="number">4</span>);</span><br><span class="line">    to.putInt(timeout);</span><br><span class="line">    cnxn.setSessionId(sessionId);</span><br><span class="line">    submitRequest(cnxn, sessionId, OpCode.createSession, <span class="number">0</span>, to, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.SessionTrackerImpl#createSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">createSession</span><span class="params">(<span class="keyword">int</span> sessionTimeout)</span> </span>&#123;</span><br><span class="line">    addSession(nextSessionId, sessionTimeout);</span><br><span class="line">    <span class="keyword">return</span> nextSessionId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-1-为客户端生成-sessionId"><a href="#1-2-1-为客户端生成-sessionId" class="headerlink" title="1.2.1 为客户端生成 sessionId"></a>1.2.1 为客户端生成 sessionId</h4><p>在为客户端创建会话之前，服务端首先会为每个客户端都分配一个 <code>sessionId</code>。 分配方式是通过 <code>SessionTracker</code> 对基准 <code>sessionId</code> 做自增操作。无论客户端连的是哪台服务器，生成的 <code>sessionId</code> 都是全局唯一的。</p><h4 id="1-2-2-注册会话"><a href="#1-2-2-注册会话" class="headerlink" title="1.2.2 注册会话"></a>1.2.2 注册会话</h4><p>在会话创建初期，会将客户端会话的相关信息保存到 <code>SessionTracker</code> 的 <code>sessionWithTimeout</code> 和 <code>sessionById</code> 中。</p><p><code>org.apache.zookeeper.server.SessionTrackerImpl#addSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSession</span><span class="params">(<span class="keyword">long</span> id, <span class="keyword">int</span> sessionTimeout)</span> </span>&#123;</span><br><span class="line">    sessionsWithTimeout.put(id, sessionTimeout);</span><br><span class="line">    <span class="keyword">if</span> (sessionsById.get(id) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        SessionImpl s = <span class="keyword">new</span> SessionImpl(id, sessionTimeout, <span class="number">0</span>);</span><br><span class="line">        sessionsById.put(id, s);</span><br><span class="line">    &#125;</span><br><span class="line">    touchSession(id, sessionTimeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-激活会话"><a href="#1-2-3-激活会话" class="headerlink" title="1.2.3 激活会话"></a>1.2.3 激活会话</h4><p>为会话安排一个区块，方便会话清理程序能够快速高效地进行会话清理。</p><p><code>org.apache.zookeeper.server.SessionTrackerImpl#touchSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">touchSession</span><span class="params">(<span class="keyword">long</span> sessionId, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">    SessionImpl s = sessionsById.get(sessionId);</span><br><span class="line">    <span class="comment">// Return false, if the session doesn't exists or marked as closing</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isClosing()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> expireTime = roundToInterval(Time.currentElapsedTime() + timeout);</span><br><span class="line">    <span class="keyword">if</span> (s.tickTime &gt;= expireTime) &#123;</span><br><span class="line">        <span class="comment">// Nothing needs to be done</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SessionSet set = sessionSets.get(s.tickTime);</span><br><span class="line">    <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line">        set.sessions.remove(s);</span><br><span class="line">    &#125;</span><br><span class="line">    s.tickTime = expireTime;</span><br><span class="line">    set = sessionSets.get(s.tickTime);</span><br><span class="line">    <span class="keyword">if</span> (set == <span class="keyword">null</span>) &#123;</span><br><span class="line">        set = <span class="keyword">new</span> SessionSet();</span><br><span class="line">        sessionSets.put(expireTime, set);</span><br><span class="line">    &#125;</span><br><span class="line">    set.sessions.add(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-生成会话密钥"><a href="#1-2-4-生成会话密钥" class="headerlink" title="1.2.4 生成会话密钥"></a>1.2.4 生成会话密钥</h4><p>服务端在创建一个客户端会话时，会同时为客户端生成一个会话密码，连同 <code>sessionId</code> 一起发送给客户端，作为会话在集群中不同机器间转移的凭证。</p><h4 id="1-2-5-将请求交给-firstProcessor"><a href="#1-2-5-将请求交给-firstProcessor" class="headerlink" title="1.2.5 将请求交给 firstProcessor"></a>1.2.5 将请求交给 firstProcessor</h4><p><code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest(org.apache.zookeeper.server.ServerCnxn, long, int, int, java.nio.ByteBuffer, java.util.List&lt;org.apache.zookeeper.data.Id&gt;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitRequest</span><span class="params">(ServerCnxn cnxn, <span class="keyword">long</span> sessionId, <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> xid, ByteBuffer bb, List&lt;Id&gt; authInfo)</span> </span>&#123;</span><br><span class="line">    Request si = <span class="keyword">new</span> Request(cnxn, sessionId, xid, type, bb, authInfo);</span><br><span class="line">    submitRequest(si);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>type</code> 为 <code>createSession</code>。</p><p><code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest(org.apache.zookeeper.server.Request)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitRequest</span><span class="params">(Request si)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (firstProcessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Since all requests are passed to the request</span></span><br><span class="line">                <span class="comment">// processor it should wait for setting up the request</span></span><br><span class="line">                <span class="comment">// processor chain. The state will be updated to RUNNING</span></span><br><span class="line">                <span class="comment">// after the setup.</span></span><br><span class="line">                <span class="keyword">while</span> (state == State.INITIAL) &#123;</span><br><span class="line">                    wait(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected interruption"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (firstProcessor == <span class="keyword">null</span> || state != State.RUNNING) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not started"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        touch(si.cnxn);</span><br><span class="line">        <span class="keyword">boolean</span> validpacket = Request.isValid(si.type);</span><br><span class="line">        <span class="keyword">if</span> (validpacket) &#123;</span><br><span class="line">            firstProcessor.processRequest(si);</span><br><span class="line">            <span class="keyword">if</span> (si.cnxn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                incInProcess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Received packet at server of unknown type "</span> + si.type);</span><br><span class="line">            <span class="keyword">new</span> UnimplementedRequestProcessor().processRequest(si);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>firstProcessor</code> 是一个 <code>RequestProcessor</code> 类型的变量。在提交给 <code>firstProcessor</code> 处理器之前，Zookeeper 会根据该请求所属的会话，进行一次激活会话操作，以确保当前会话处于激活状态，完成会话激活后，则提交请求至 <code>firstProcessor</code> 处理器，放入待处理请求队列中。</p><p>到这里 <code>createSession</code> 方法结束，后续流程由 <code>firstProcessor</code> 线程异步处理。</p><p>在会话创建请求的处理中，无论客户端连接的是 Leader 还是 Learner，到目前为止的处理流程都是相同的。接下来的差别在于：</p><ul><li>对于 Leader 服务器，其 <code>firstProcessor</code> 的实现为 <code>PrepRequestProcessor</code>。</li><li>对于 Follower 服务器，其 <code>firstProcessor</code> 的实现为 <code>FollowerRequestProcessor</code>。</li><li>对于 Observer 服务器，其 <code>firstProcessor</code> 的实现为 <code>ObserverRequestProcessor</code>。</li></ul><p><code>FollowerRequestProcessor</code> 和 <code>ObserverRequestProcessor</code>会将事务请求以 REQUEST 消息的形式转发给 Leader 处理。Leader 的 <code>LearnerHandler</code> 在接收到这个消息后，会解析出客户端的原始请求，然后提交到自己的请求处理链中开始进行事务请求的处理。</p><h3 id="1-3-事务预处理"><a href="#1-3-事务预处理" class="headerlink" title="1.3 事务预处理"></a>1.3 事务预处理</h3><h4 id="1-3-1-异步处理请求"><a href="#1-3-1-异步处理请求" class="headerlink" title="1.3.1 异步处理请求"></a>1.3.1 异步处理请求</h4><p><code>org.apache.zookeeper.server.PrepRequestProcessor#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Request request = submittedRequests.take();</span><br><span class="line">            <span class="keyword">long</span> traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">            <span class="keyword">if</span> (request.type == OpCode.ping) &#123;</span><br><span class="line">                traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Request.requestOfDeath == request) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.PrepRequestProcessor#pRequest</code> 方法根据请求的类型，将事务类请求交由 <code>org.apache.zookeeper.server.PrepRequestProcessor#pRequest2Txn</code> 方法处理。对一些类型的事务请求，还要生成变更记录放入 <code>outstandingChanges</code> 队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... </span></span><br><span class="line">request.hdr = <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid, Time.currentWallTime(), type);        </span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> OpCode.createSession:</span><br><span class="line">        request.request.rewind();</span><br><span class="line">        <span class="keyword">int</span> to = request.request.getInt();</span><br><span class="line">        request.txn = <span class="keyword">new</span> CreateSessionTxn(to);</span><br><span class="line">        request.request.rewind();</span><br><span class="line">        zks.sessionTracker.addSession(request.sessionId, to);</span><br><span class="line">        zks.setOwner(request.sessionId, request.getOwner());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-创建请求事务头"><a href="#1-3-2-创建请求事务头" class="headerlink" title="1.3.2 创建请求事务头"></a>1.3.2 创建请求事务头</h4><p>对于事务请求，ZooKeeper 首先会为其创建请求事务头。请求事务头包含了一个事务请求最基本的一些信息，包括 <code>sessionId</code>、ZXID、CXID（客户端的操作序列号） 和请求类型等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxnHeader</span> <span class="keyword">implements</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> clientId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> cxid;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> zxid;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-创建请求事务体"><a href="#1-3-3-创建请求事务体" class="headerlink" title="1.3.3 创建请求事务体"></a>1.3.3 创建请求事务体</h4><p>对于事务请求，ZooKeeper 还会为其创建请求事务体。对应到会话创建请求，对应的事务体实现为 <code>CreateSessionTxn</code>。</p><h4 id="1-3-4-注册与激活会话"><a href="#1-3-4-注册与激活会话" class="headerlink" title="1.3.4 注册与激活会话"></a>1.3.4 注册与激活会话</h4><p>此处进行会话注册与激活的目的是处理由非 Leader 服务器转发过来的会话创建请求，在这种情况下，其尚未在 Leader 的 <code>SessionTracker</code> 中进行会话的注册，因此需要在此处进行一次注册与激活。</p><h3 id="1-4-事务处理"><a href="#1-4-事务处理" class="headerlink" title="1.4 事务处理"></a>1.4 事务处理</h3><p>在 <code>pRequest</code> 方法最后，会将请求提交给 <code>RequestProcessor</code> 类型变量 <code>nextProcessor</code> 处理。对于 Leader，这个变量的实现类为 <code>ProposalRequestProcessor</code>。</p><p><code>ProposalRequestProcessor</code> 顾名思义是一个与提案相关的处理器。所谓的提案，是 ZooKeeper 中针对事务请求所展开的一个投票流程中对事务操作的包装。从 <code>ProposalRequestProcessor</code> 处理器开始，请求的处理将会同时进入三个子处理流程，分别是 Sync 流程、Proposal 流程和 Commit 流程。</p><p><img src="https://user-images.githubusercontent.com/12514722/34207238-a43f0c04-e5c4-11e7-872c-34123aba3b83.png" alt="image"></p><p><code>org.apache.zookeeper.server.quorum.ProposalRequestProcessor#processRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">    <span class="comment">/* In the following IF-THEN-ELSE block, we process syncs on the leader. </span></span><br><span class="line"><span class="comment">     * If the sync is coming from a follower, then the follower</span></span><br><span class="line"><span class="comment">     * handler adds it to syncHandler. Otherwise, if it is a client of</span></span><br><span class="line"><span class="comment">     * the leader that issued the sync command, then syncHandler won't </span></span><br><span class="line"><span class="comment">     * contain the handler. In this case, we add it to syncHandler, and </span></span><br><span class="line"><span class="comment">     * call processRequest on the next processor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(request <span class="keyword">instanceof</span> LearnerSyncRequest)&#123;</span><br><span class="line">        zks.getLeader().processSync((LearnerSyncRequest)request);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nextProcessor.processRequest(request);</span><br><span class="line">            <span class="keyword">if</span> (request.hdr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We need to sync and get consensus on any transactions</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zks.getLeader().propose(request);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (XidRolloverException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RequestProcessorException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            syncProcessor.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 Leader 而言：</p><ul><li><code>ProposalRequestProcessor</code> 会首先将请求提交给 <code>nextProcessor</code>，其具体实现是 <code>CommitProcessor</code>。请求被放入 <code>CommitProcessor</code> 的 队列 <code>queuedRequests</code>，等待 <code>CommitProcessor</code> 的线程异步处理（即等待投票完成），此即 Commit 流程。</li><li>调用 Leader 的 <code>propose</code> 方法，生成 <code>Proposal</code> 并广播给 Follower，统计 Follower 返回的投票结果并通知各个 Learner 最终提交事务，此即 Proposal 流程。这个流程会在完成后唤醒 Commit 流程。</li><li>由 <code>SyncRequestProcessor</code> 进行事务日志的记录，并调用 <code>AckRequestProcessor</code> 处理 Leader 自己的投票，此即 Sync 流程。这个流程会流向 Proposal 流程。</li></ul><p>当 Leader 对非事务请求的处理流程到达此处时，由于不包含请求事务头，因此仅仅只是把请求提交给 <code>CommitProcessor</code>。</p><h4 id="1-4-1-Proposal-流程"><a href="#1-4-1-Proposal-流程" class="headerlink" title="1.4.1 Proposal 流程"></a>1.4.1 Proposal 流程</h4><p><code>org.apache.zookeeper.server.quorum.Leader#propose</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * create a proposal and send it out to all the members</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the proposal that is queued to send to all the members</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Proposal <span class="title">propose</span><span class="params">(Request request)</span> <span class="keyword">throws</span> XidRolloverException </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Address the rollover issue. All lower 32bits set indicate a new leader</span></span><br><span class="line"><span class="comment">     * election. Force a re-election instead. See ZOOKEEPER-1277</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((request.zxid &amp; <span class="number">0xffffffffL</span>) == <span class="number">0xffffffffL</span>) &#123;</span><br><span class="line">        String msg = <span class="string">"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start"</span>;</span><br><span class="line">        shutdown(msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> XidRolloverException(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        request.hdr.serialize(boa, <span class="string">"hdr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (request.txn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.txn.serialize(boa, <span class="string">"txn"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        baos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"This really should be impossible"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    QuorumPacket pp = <span class="keyword">new</span> QuorumPacket(Leader.PROPOSAL, request.zxid, baos.toByteArray(), <span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">    Proposal p = <span class="keyword">new</span> Proposal();</span><br><span class="line">    p.packet = pp;</span><br><span class="line">    p.request = request;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        lastProposed = p.packet.getZxid();</span><br><span class="line">        outstandingProposals.put(lastProposed, p);</span><br><span class="line">        sendPacket(pp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-1-1-发起投票"><a href="#1-4-1-1-发起投票" class="headerlink" title="1.4.1.1 发起投票"></a>1.4.1.1 发起投票</h5><p>如果当前请求是事务请求，那么 Leader 服务器就会发起一轮事务投票。在发起事务投票之前，会首先检查当前服务器的 ZXID 是否可用。</p><h5 id="1-4-1-2-生成提案-Proposal"><a href="#1-4-1-2-生成提案-Proposal" class="headerlink" title="1.4.1.2 生成提案 Proposal"></a>1.4.1.2 生成提案 Proposal</h5><p>若 ZXID 可用，ZooKeeper 会将之前创建的请求头和事务体，以及 ZXID 和请求本身序列化到 <code>Proposal</code> 对象中 —— 此 <code>Proposal</code> 对象就是一个提案，即针对 ZooKeeper 服务器状态的一次变更申请。</p><h5 id="1-4-1-3-广播提案"><a href="#1-4-1-3-广播提案" class="headerlink" title="1.4.1.3 广播提案"></a>1.4.1.3 广播提案</h5><p>更新 <code>lastProposed</code>，以 ZXID 作为 key 将该提案放入投票箱 <code>outstandingProposals</code> 中，同时将该提案广播给所有 Follower。</p><p><code>org.apache.zookeeper.server.quorum.Leader#sendPacket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendPacket</span><span class="params">(QuorumPacket qp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (forwardingFollowers) &#123;</span><br><span class="line">        <span class="keyword">for</span> (LearnerHandler f : forwardingFollowers) &#123;                </span><br><span class="line">            f.queuePacket(qp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-1-4-Follower-接收提案（Follower-Sync-流程）"><a href="#1-4-1-4-Follower-接收提案（Follower-Sync-流程）" class="headerlink" title="1.4.1.4 Follower 接收提案（Follower Sync 流程）"></a>1.4.1.4 Follower 接收提案（Follower Sync 流程）</h5><p>Follower 启动后，会通过 <code>followLeader</code> 方法不断从与 Leader 之间的连接中读取数据并作相应处理。</p><p><code>org.apache.zookeeper.server.quorum.Follower#processPacket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Examine the packet received in qp and dispatch based on its contents.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processPacket</span><span class="params">(QuorumPacket qp)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (qp.getType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> Leader.PING:            </span><br><span class="line">        ping(qp);            </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.PROPOSAL:            </span><br><span class="line">        TxnHeader hdr = <span class="keyword">new</span> TxnHeader();</span><br><span class="line">        Record txn = SerializeUtils.deserializeTxn(qp.getData(), hdr);</span><br><span class="line">        <span class="keyword">if</span> (hdr.getZxid() != lastQueued + <span class="number">1</span>) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Got zxid 0x"</span></span><br><span class="line">                    + Long.toHexString(hdr.getZxid())</span><br><span class="line">                    + <span class="string">" expected 0x"</span></span><br><span class="line">                    + Long.toHexString(lastQueued + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        lastQueued = hdr.getZxid();</span><br><span class="line">        fzk.logRequest(hdr, txn);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.COMMIT:</span><br><span class="line">        fzk.commit(qp.getZxid());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.UPTODATE:</span><br><span class="line">        LOG.error(<span class="string">"Received an UPTODATE message after Follower started"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.REVALIDATE:</span><br><span class="line">        revalidate(qp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.SYNC:</span><br><span class="line">        fzk.sync();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        LOG.error(<span class="string">"Invalid packet type: &#123;&#125; received by Observer"</span>, qp.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.server.quorum.FollowerZooKeeperServer#logRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logRequest</span><span class="params">(TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class="line">    Request request = <span class="keyword">new</span> Request(<span class="keyword">null</span>, hdr.getClientId(), hdr.getCxid(),</span><br><span class="line">            hdr.getType(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    request.hdr = hdr;</span><br><span class="line">    request.txn = txn;</span><br><span class="line">    request.zxid = hdr.getZxid();</span><br><span class="line">    <span class="keyword">if</span> ((request.zxid &amp; <span class="number">0xffffffffL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        pendingTxns.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">    syncProcessor.processRequest(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，Follower 将这个事务记录到 <code>pendingTxns</code> 中，并将事务请求提交给 <code>syncProcessor</code> 作异步处理，在 Follower 的 Sync 流程中对提案做响应并向 Leader 提交 ACK 信息。</p><h5 id="1-4-1-5-Leader-统计投票"><a href="#1-4-1-5-Leader-统计投票" class="headerlink" title="1.4.1.5 Leader 统计投票"></a>1.4.1.5 Leader 统计投票</h5><p>Leader 的 <code>LearnerHandler</code> 会接收来自各个 Follower 的 ACK 信息，并调用 Leader 的 <code>org.apache.zookeeper.server.quorum.Leader#processAck</code> 对投票做处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keep a count of acks that are received by the leader for a particular proposal</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zxid the zxid of the proposal sent out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> followerAddr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processAck</span><span class="params">(<span class="keyword">long</span> sid, <span class="keyword">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((zxid &amp; <span class="number">0xffffffffL</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (outstandingProposals.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastCommitted &gt;= zxid) &#123;</span><br><span class="line">        <span class="comment">// The proposal has already been committed</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Proposal p = outstandingProposals.get(zxid);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Trying to commit future proposal: zxid 0x&#123;&#125; from &#123;&#125;"</span>, Long.toHexString(zxid), followerAddr);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    p.ackSet.add(sid);</span><br><span class="line">    <span class="keyword">if</span> (self.getQuorumVerifier().containsQuorum(p.ackSet))&#123;             </span><br><span class="line">        <span class="keyword">if</span> (zxid != lastCommitted+<span class="number">1</span>) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Commiting zxid 0x&#123;&#125; from &#123;&#125; not first!"</span>, Long.toHexString(zxid), followerAddr);</span><br><span class="line">            LOG.warn(<span class="string">"First is 0x&#123;&#125;"</span>, Long.toHexString(lastCommitted + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        outstandingProposals.remove(zxid);</span><br><span class="line">        <span class="keyword">if</span> (p.request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            toBeApplied.add(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p.request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Going to commmit null request for proposal: &#123;&#125;"</span>, p);</span><br><span class="line">        &#125;</span><br><span class="line">        commit(zxid);</span><br><span class="line">        inform(p);</span><br><span class="line">        zk.commitProcessor.commit(p.request);</span><br><span class="line">        <span class="keyword">if</span>(pendingSyncs.containsKey(zxid))&#123;</span><br><span class="line">            <span class="keyword">for</span>(LearnerSyncRequest r: pendingSyncs.remove(zxid)) &#123;</span><br><span class="line">                sendSync(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当提案获得了集群中过半 PARTICIPANT 的投票，那么就认为该提案通过。</p><h5 id="1-4-1-6-处理通过的提案"><a href="#1-4-1-6-处理通过的提案" class="headerlink" title="1.4.1.6 处理通过的提案"></a>1.4.1.6 处理通过的提案</h5><ol><li>将提案的 ZXID 从 <code>outstandingProposals</code> 中移除。</li><li>将提案添加到 <code>toBeApplied</code> 队列。</li><li>向所有 Follower 发送 <code>COMMIT</code> 消息。由于 Follower 已经保存了所有关于该提案的信息，这里只需向其发送 ZXID 即可。</li><li>向所有 Observer 发送 <code>INFORM</code> 消息。由于 Observer 并未参与之前的投票阶段，因此 Observer 服务器并未保存任何关于该提案的信息。<code>INFORM</code> 消息中会包含当前提案的内容。</li><li>向 <code>CommitProcessor</code> 提交这个被通过的事务，进入 Leader 的 Commit 流程。</li></ol><h4 id="1-4-2-Sync-流程"><a href="#1-4-2-Sync-流程" class="headerlink" title="1.4.2 Sync 流程"></a>1.4.2 Sync 流程</h4><p>Leader 在生成事务提案和 Follower 接收到事务提案时，都会将提案放入 <code>SyncRequestProcessor</code> 的提案队列 <code>queuedRequests</code>，等待 <code>SyncRequestProcessor</code> 线程异步处理。 <code>SyncRequestProcessor</code> 处理器会记录事务日志，并提交给 <code>nextProcessor</code> 做后续处理。但是，Leader 和 Follower 的  <code>SyncRequestProcessor</code> 具有不同的 <code>nextProcessor</code> 实现。</p><h5 id="1-4-2-1-Leader-的-Sync-流程"><a href="#1-4-2-1-Leader-的-Sync-流程" class="headerlink" title="1.4.2.1 Leader 的 Sync 流程"></a>1.4.2.1 Leader 的 Sync 流程</h5><p>对于 Leader，其 <code>SyncRequestProcessor</code> 的 <code>nextProcessor</code> 是 <code>AckRequestProcessor</code>。由于 Leader 自己也需要对事务进行投票，<code>AckRequestProcessor</code> 会用事务请求本身作为 ACK，并调用 Leader 的方法处理该 ACK。因此，Leader 的 Sync 流程最终会流向 Proposal 流程。</p><p><code>org.apache.zookeeper.server.quorum.AckRequestProcessor#processRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Forward the request as an ACK to the leader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    QuorumPeer self = leader.self;</span><br><span class="line">    <span class="keyword">if</span>(self != <span class="keyword">null</span>)</span><br><span class="line">        leader.processAck(self.getId(), request.zxid, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        LOG.error(<span class="string">"Null QuorumPeer"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-2-2-Follower-的-Sync-流程"><a href="#1-4-2-2-Follower-的-Sync-流程" class="headerlink" title="1.4.2.2 Follower 的 Sync 流程"></a>1.4.2.2 Follower 的 Sync 流程</h5><p>对于 Follower，其 <code>SyncRequestProcessor</code> 的 <code>nextProcessor</code> 是 <code>SendAckRequestProcessor</code>。<code>syncProcessor</code> 进行事务日志的记录后，由 <code>SendAckRequestProcessor</code> 向 Leader 回复一个 ACK 消息。</p><p><code>org.apache.zookeeper.server.quorum.SendAckRequestProcessor#processRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request si)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(si.type != OpCode.sync)&#123;</span><br><span class="line">        QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.ACK, si.hdr.getZxid(), <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            learner.writePacket(qp, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Closing connection to leader, exception during packet send"</span>, e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!learner.sock.isClosed()) &#123;</span><br><span class="line">                    learner.sock.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                <span class="comment">// Nothing to do, we are shutting things down, so an exception here is irrelevant</span></span><br><span class="line">                LOG.debug(<span class="string">"Ignoring error closing the connection"</span>, e1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-2-3-Observer-的-Sync-流程"><a href="#1-4-2-3-Observer-的-Sync-流程" class="headerlink" title="1.4.2.3 Observer 的 Sync 流程"></a>1.4.2.3 Observer 的 Sync 流程</h5><p>虽然 Observer 会初始化 <code>SyncRequestProcessor</code>，但由于 Leader 不会向 Observer 转发事务提案，因此 Observer 不存在 Sync 流程。</p><h4 id="1-4-3-Commit-流程"><a href="#1-4-3-Commit-流程" class="headerlink" title="1.4.3 Commit 流程"></a>1.4.3 Commit 流程</h4><p><code>org.apache.zookeeper.server.quorum.CommitProcessor#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Request nextPending = <span class="keyword">null</span>;            </span><br><span class="line">        <span class="keyword">while</span> (!finished) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = toProcess.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                nextProcessor.processRequest(toProcess.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            toProcess.clear();</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((queuedRequests.size() == <span class="number">0</span> || nextPending != <span class="keyword">null</span>) &amp;&amp; committedRequests.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((queuedRequests.size() == <span class="number">0</span> || nextPending != <span class="keyword">null</span>) &amp;&amp; committedRequests.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Request r = committedRequests.remove();</span><br><span class="line">                    <span class="keyword">if</span> (nextPending != <span class="keyword">null</span> &amp;&amp; nextPending.sessionId == r.sessionId &amp;&amp; nextPending.cxid == r.cxid) &#123;</span><br><span class="line">                        nextPending.hdr = r.hdr;</span><br><span class="line">                        nextPending.txn = r.txn;</span><br><span class="line">                        nextPending.zxid = r.zxid;</span><br><span class="line">                        toProcess.add(nextPending);</span><br><span class="line">                        nextPending = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        toProcess.add(r);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nextPending != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (nextPending == <span class="keyword">null</span> &amp;&amp; queuedRequests.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Request request = queuedRequests.remove();</span><br><span class="line">                    <span class="keyword">switch</span> (request.type) &#123;</span><br><span class="line">                    <span class="keyword">case</span> OpCode.create:</span><br><span class="line">                    <span class="keyword">case</span> OpCode.delete:</span><br><span class="line">                    <span class="keyword">case</span> OpCode.setData:</span><br><span class="line">                    <span class="keyword">case</span> OpCode.multi:</span><br><span class="line">                    <span class="keyword">case</span> OpCode.setACL:</span><br><span class="line">                    <span class="keyword">case</span> OpCode.createSession:</span><br><span class="line">                    <span class="keyword">case</span> OpCode.closeSession:</span><br><span class="line">                        nextPending = request;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> OpCode.sync:</span><br><span class="line">                        <span class="keyword">if</span> (matchSyncs) &#123;</span><br><span class="line">                            nextPending = request;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            toProcess.add(request);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        toProcess.add(request);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Interrupted exception while waiting"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        LOG.error(<span class="string">"Unexpected exception causing CommitProcessor to exit"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.info(<span class="string">"CommitProcessor exited loop!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-3-1-Leader-的-Commit-流程"><a href="#1-4-3-1-Leader-的-Commit-流程" class="headerlink" title="1.4.3.1 Leader 的 Commit 流程"></a>1.4.3.1 Leader 的 Commit 流程</h5><ol><li><p>将请求交付给 <code>CommitProcessor</code> 处理器。</p><p>如前所述，Leader 在生成提案之前，会首先将生成的提案放到 <code>CommitProcessor</code> 的 <code>queuedRequests</code> 队列中。</p></li><li><p>处理 <code>queuedRequests</code> 队列请求。</p><p><code>CommitProcessor</code> 会有一个单独的线程来处理 <code>queuedRequests</code> 队列中的请求。</p></li><li><p>标记 <code>nextPending</code>。</p><p>若从 <code>queuedRequests</code> 中取出的请求是一个事务请求，则需要在集群中进行投票处理，同时将<code>nextPending</code> 标记为当前请求。</p></li><li><p>等待 Proposal 投票。</p><p>在进行 Commit 流程的同时，Leader 会生成 <code>Proposal</code> 并广播给所有 Follower 服务器，此时，Commit 流程等待，直到投票结束。</p></li><li><p>投票通过。</p><p>若提案获得过半 PARTICIPANT 认可，那么进入请求提交阶段。Leader 会将该请求放入 <code>commitedRequests</code> 队列中，同时唤醒 Commit 流程。</p></li><li><p>提交请求。</p><p>若 <code>commitedRequests</code> 队列中存在可以提交的请求，那么 Commit 流程将请求放入 <code>toProcess</code> 队列中。在这个过程中为了保证事务请求的顺序执行，Commit 流程还会对比之前标记的 <code>nextPending</code> 和 <code>commitedRequests</code> 队列中的第一个请求是否一致。在下一次循环中，<code>toProcess</code> 队列中的请求将被取出交付下一个请求处理器。对于 Leader 而言，下一个请求处理器是 <code>ToBeAppliedRequestProcessor</code>。</p></li></ol><h5 id="1-4-3-2-Follower-的-Commit-流程"><a href="#1-4-3-2-Follower-的-Commit-流程" class="headerlink" title="1.4.3.2 Follower 的 Commit 流程"></a>1.4.3.2 Follower 的 Commit 流程</h5><p><code>org.apache.zookeeper.server.quorum.FollowerZooKeeperServer#commit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pendingTxns.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Committing "</span> + Long.toHexString(zxid)</span><br><span class="line">                + <span class="string">" without seeing txn"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> firstElementZxid = pendingTxns.element().zxid;</span><br><span class="line">    <span class="keyword">if</span> (firstElementZxid != zxid) &#123;</span><br><span class="line">        LOG.error(<span class="string">"Committing zxid 0x"</span> + Long.toHexString(zxid) + <span class="string">" but next pending txn 0x"</span> + Long.toHexString(firstElementZxid));</span><br><span class="line">        System.exit(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Request request = pendingTxns.remove();</span><br><span class="line">    commitProcessor.commit(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Follower 在收到 <code>COMMIT</code> 消息时，会首先将该事务的 ZXID 与 <code>pendingTxns</code> 队列中缓存的事务对比，然后放入 <code>CommitProcessor</code> 的 <code>committedRequests</code> 队列。</p><p>Follower 的 <code>CommitProcessor</code> 将在两个队列中整理事务信息，在后续循环中提交给下一个请求处理器，即 <code>FinalRequestProcessor</code>。</p><h5 id="1-4-3-3-Observer-的-Commit-流程"><a href="#1-4-3-3-Observer-的-Commit-流程" class="headerlink" title="1.4.3.3 Observer 的 Commit 流程"></a>1.4.3.3 Observer 的 Commit 流程</h5><p><code>org.apache.zookeeper.server.quorum.Observer#processPacket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Controls the response of an observer to the receipt of a quorumpacket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processPacket</span><span class="params">(QuorumPacket qp)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (qp.getType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> Leader.PING:</span><br><span class="line">        ping(qp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.PROPOSAL:</span><br><span class="line">        LOG.warn(<span class="string">"Ignoring proposal"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.COMMIT:</span><br><span class="line">        LOG.warn(<span class="string">"Ignoring commit"</span>);            </span><br><span class="line">        <span class="keyword">break</span>;            </span><br><span class="line">    <span class="keyword">case</span> Leader.UPTODATE:</span><br><span class="line">        LOG.error(<span class="string">"Received an UPTODATE message after Observer started"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.REVALIDATE:</span><br><span class="line">        revalidate(qp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.SYNC:</span><br><span class="line">        ((ObserverZooKeeperServer)zk).sync();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Leader.INFORM:            </span><br><span class="line">        TxnHeader hdr = <span class="keyword">new</span> TxnHeader();</span><br><span class="line">        Record txn = SerializeUtils.deserializeTxn(qp.getData(), hdr);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request (<span class="keyword">null</span>, hdr.getClientId(), </span><br><span class="line">                                       hdr.getCxid(),</span><br><span class="line">                                       hdr.getType(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        request.txn = txn;</span><br><span class="line">        request.hdr = hdr;</span><br><span class="line">        ObserverZooKeeperServer obs = (ObserverZooKeeperServer)zk;</span><br><span class="line">        obs.commitRequest(request);            </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        LOG.error(<span class="string">"Invalid packet type: &#123;&#125; received by Observer"</span>, qp.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Observer 收到来自 Leader 的 <code>INFORM</code> 消息后的处理过程类似于 Follower。</p><h3 id="1-5-事务应用"><a href="#1-5-事务应用" class="headerlink" title="1.5 事务应用"></a>1.5 事务应用</h3><p>对于 Leader，事务由 <code>CommitProcessor</code> 提交给 <code>ToBeAppliedRequestProcessor</code>，再由 <code>ToBeAppliedRequestProcessor</code> 提交给 <code>FinalRequestProcessor</code>；对于 Follower 和 Observer，事务由 <code>CommitProcessor</code>  提交给 <code>FinalRequestProcessor</code>。</p><ol><li><p>有效性检查</p><p><code>FinalRequestProcessor</code> 处理器检查 <code>outstandingChanges</code> 队列中请求的有效性，如果发现这些请求已经落后于当前正在处理的请求，那么直接从 <code>outstandingChanges</code> 队列中移除。</p></li><li><p>事务应用</p><p>之前的请求处理仅仅是将事务请求记录到了事务日志中去，而内存数据库中的状态尚未变更。因此，在这个环节，需要将事务变更应用到内存数据库中。</p><p><code>org.apache.zookeeper.server.ZooKeeperServer#processTxn</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessTxnResult <span class="title">processTxn</span><span class="params">(TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class="line">    ProcessTxnResult rc;</span><br><span class="line">    <span class="keyword">int</span> opCode = hdr.getType();</span><br><span class="line">    <span class="keyword">long</span> sessionId = hdr.getClientId();</span><br><span class="line">    rc = getZKDatabase().processTxn(hdr, txn);</span><br><span class="line">    <span class="keyword">if</span> (opCode == OpCode.createSession) &#123;</span><br><span class="line">        <span class="keyword">if</span> (txn <span class="keyword">instanceof</span> CreateSessionTxn) &#123;</span><br><span class="line">            CreateSessionTxn cst = (CreateSessionTxn) txn;</span><br><span class="line">            sessionTracker.addSession(sessionId, cst.getTimeOut());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.warn(<span class="string">"*****&gt;&gt;&gt;&gt;&gt; Got "</span> + txn.getClass() + <span class="string">" "</span> + txn.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opCode == OpCode.closeSession) &#123;</span><br><span class="line">        sessionTracker.removeSession(sessionId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于会话创建这类事务请求，需要向 <code>SessionTracker</code> 进行会话注册。此时，一个客户端的会话被保存到了集群中的所有服务器上（但是注意，Leader 和 Learner 的 <code>SessionTracker</code> 具有不同实现）。</p></li><li><p>将事务放入 <code>commitProposal</code> 队列</p><p>一旦完成事务请求的内存数据库应用，就可以将该请求放入 <code>commitProposal</code> 队列中。 <code>commitProposal</code> 队列用来保存最近被提交的事务请求，以便集群间机器进行数据的快速同步。</p></li></ol><h3 id="1-6-会话响应"><a href="#1-6-会话响应" class="headerlink" title="1.6 会话响应"></a>1.6 会话响应</h3><p><code>FinalRequestProcessor</code> 继续处理对会话请求的响应。</p><ol><li><p>统计处理</p><p>ZooKeeper 计算请求在服务端处理所花费的时间，统计客户端连接的基本信息，如 <code>lastZxid</code>（最新的 ZXID）、<code>lastOp</code>（最后一次和服务端的操作）和 <code>lastLatency</code>（最后一次请求处理所花费的时间）等。</p></li><li><p>创建响应 <code>ConnectResponse</code></p><p><code>ConnectResponse</code> 就是一个会话创建成功后的响应，包含了当前客户端与服务端之间的通信协议版本号 <code>protocolVersion</code>、会话超时时间、<code>sessionId</code> 和会话密码。</p></li></ol><ol start="3"><li>序列化 <code>ConnectResponse</code></li><li>I/O 层发送响应给客户端</li></ol><h3 id="1-7-客户端处理请求响应"><a href="#1-7-客户端处理请求响应" class="headerlink" title="1.7 客户端处理请求响应"></a>1.7 客户端处理请求响应</h3><p>对于会话创建请求，客户端会调用 <code>org.apache.zookeeper.ClientCnxn.SendThread#onConnected</code> 方法，生成一个 <code>None-SyncConnected</code> 事件，交由 <code>EventThread</code> 处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onConnected</span><span class="params">(<span class="keyword">int</span> _negotiatedSessionTimeout, <span class="keyword">long</span> _sessionId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">byte</span>[] _sessionPasswd, <span class="keyword">boolean</span> isRO)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    negotiatedSessionTimeout = _negotiatedSessionTimeout;</span><br><span class="line">    <span class="keyword">if</span> (negotiatedSessionTimeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        state = States.CLOSED;</span><br><span class="line"></span><br><span class="line">        eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(</span><br><span class="line">                Watcher.Event.EventType.None,</span><br><span class="line">                Watcher.Event.KeeperState.Expired, <span class="keyword">null</span>));</span><br><span class="line">        eventThread.queueEventOfDeath();</span><br><span class="line"></span><br><span class="line">        String warnInfo;</span><br><span class="line">        warnInfo = <span class="string">"Unable to reconnect to ZooKeeper service, session 0x"</span></span><br><span class="line">            + Long.toHexString(sessionId) + <span class="string">" has expired"</span>;</span><br><span class="line">        LOG.warn(warnInfo);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SessionExpiredException(warnInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!readOnly &amp;&amp; isRO) &#123;</span><br><span class="line">        LOG.error(<span class="string">"Read/write client got connected to read-only server"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    readTimeout = negotiatedSessionTimeout * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    connectTimeout = negotiatedSessionTimeout / hostProvider.size();</span><br><span class="line">    hostProvider.onConnected();</span><br><span class="line">    sessionId = _sessionId;</span><br><span class="line">    sessionPasswd = _sessionPasswd;</span><br><span class="line">    state = (isRO) ? States.CONNECTEDREADONLY : States.CONNECTED;</span><br><span class="line">    seenRwServerBefore |= !isRO;</span><br><span class="line">    KeeperState eventState = (isRO) ?</span><br><span class="line">            KeeperState.ConnectedReadOnly : KeeperState.SyncConnected;</span><br><span class="line">    eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(</span><br><span class="line">            Watcher.Event.EventType.None,</span><br><span class="line">            eventState, <span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-SetData-请求"><a href="#2-SetData-请求" class="headerlink" title="2. SetData 请求"></a>2. SetData 请求</h2><p>服务端对于 SetData 请求的处理大致可以分为 4 步，分别是请求的预处理、事务处理、事务应用和请求响应。</p><h3 id="2-1-预处理"><a href="#2-1-预处理" class="headerlink" title="2.1 预处理"></a>2.1 预处理</h3><ol><li><p>I/O 层接收来自客户端的请求。</p></li><li><p>判断是否是客户端会话创建请求。对于 SetData 请求，由于已经完成了会话创建，因此按照正常事务请求进行处理。</p></li><li><p>将请求交给 <code>PrepRequestProcessor</code> 处理器进行处理。</p><p><code>org.apache.zookeeper.server.PrepRequestProcessor#pRequest2Txn</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... </span></span><br><span class="line">request.hdr = <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid, Time.currentWallTime(), type);        </span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> OpCode.setData:</span><br><span class="line">        zks.sessionTracker.checkSession(request.sessionId, request.getOwner());</span><br><span class="line">        SetDataRequest setDataRequest = (SetDataRequest)record;</span><br><span class="line">        <span class="keyword">if</span>(deserialize)</span><br><span class="line">            ByteBufferInputStream.byteBuffer2Record(request.request, setDataRequest);</span><br><span class="line">        path = setDataRequest.getPath();</span><br><span class="line">        validatePath(path, request.sessionId);</span><br><span class="line">        nodeRecord = getRecordForPath(path);</span><br><span class="line">        checkACL(zks, nodeRecord.acl, ZooDefs.Perms.WRITE,</span><br><span class="line">                request.authInfo);</span><br><span class="line">        version = setDataRequest.getVersion();</span><br><span class="line">        <span class="keyword">int</span> currentVersion = nodeRecord.stat.getVersion();</span><br><span class="line">        <span class="keyword">if</span> (version != -<span class="number">1</span> &amp;&amp; version != currentVersion) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.BadVersionException(path);</span><br><span class="line">        &#125;</span><br><span class="line">        version = currentVersion + <span class="number">1</span>;</span><br><span class="line">        request.txn = <span class="keyword">new</span> SetDataTxn(path, setDataRequest.getData(), version);</span><br><span class="line">        nodeRecord = nodeRecord.duplicate(request.hdr.getZxid());</span><br><span class="line">        nodeRecord.stat.setVersion(version);</span><br><span class="line">        addChangeRecord(nodeRecord);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li><p>创建请求事务头。</p></li><li><p>会话检查。</p><p>检查该会话是否有效，即是否已经超时。</p></li><li><p>反序列化请求，并创建 <code>ChangeRecord</code> 记录。</p><p>ZooKeeper 首先会对请求反序列化并生成特定的 <code>SetDataRequest</code> 请求，请求中包含了数据节点路径 path、更新的内容 data 和期望的数据节点版本 version。同时根据请求对应的 path，Zookeeper 会生成一个 <code>ChangeRecord</code> 记录。</p></li><li><p>ACL检查。检查客户端是否具有数据更新的权限。</p></li><li><p>数据版本检查。</p><p>ZooKeeper 通过 version 属性来实现乐观锁机制的写入校验。</p></li><li><p>创建请求事务体 <code>SetDataTxn</code>。</p></li><li><p>保存 <code>ChangeRecord</code> 记录到 <code>outstandingChanges</code> 队列中。</p></li></ol><h3 id="2-2-事务处理"><a href="#2-2-事务处理" class="headerlink" title="2.2 事务处理"></a>2.2 事务处理</h3><p>参见会话创建的事务处理阶段。</p><h3 id="2-3-事务应用"><a href="#2-3-事务应用" class="headerlink" title="2.3 事务应用"></a>2.3 事务应用</h3><ol><li><p>交付给 <code>FinalRequestProcessor</code> 处理器。</p></li><li><p>事务应用。</p><p>将请求事务头和事务体直接交给内存数据库 <code>ZKDatabase</code> 进行事务应用，同时返回 <code>ProcessTxnResult</code> 对象，包含了数据节点内容更新后的 stat。</p></li><li><p>将事务请求放入 <code>commitProposal</code> 队列。</p></li></ol><h3 id="2-4-请求响应"><a href="#2-4-请求响应" class="headerlink" title="2.4 请求响应"></a>2.4 请求响应</h3><ol><li><p>统计处理。</p></li><li><p>创建响应体 <code>SetDataResponse</code>。</p><p>其包含了当前数据节点的最新状态 stat。</p></li><li><p>创建响应头。</p><p>包含当前响应对应的事务 ZXID 和请求处理是否成功的标识。</p></li><li><p>序列化响应。</p></li><li><p>I/O层发送响应给客户端。</p></li></ol><h2 id="3-GetData-请求"><a href="#3-GetData-请求" class="headerlink" title="3. GetData 请求"></a>3. GetData 请求</h2><p>服务端对于 <code>GetData</code> 请求的处理，大致分为 3 步，分别是请求的预处理、非事务处理和请求响应。</p><h3 id="3-1-预处理"><a href="#3-1-预处理" class="headerlink" title="3.1 预处理"></a>3.1 预处理</h3><ol><li>I/O 层接收来自客户端的请求。</li><li>判断是否是客户端会话创建请求。</li><li>会话检查。</li><li>将请求提交给 <code>firstProcessor</code>。<ul><li>对于 Leader，<code>PreRequestProcessor</code> 再次检查会话，然后交给 <code>ProposalRequestProcessor</code>。由于这种情况下请求事务头为 null，Leader 将提交请求给 <code>CommitProcessor</code> 并忽略 Proposal 和 Sync 阶段。</li><li>对于 Learner，提交请求给 <code>CommitProcessor</code>。</li></ul></li></ol><h3 id="3-2-非事务处理"><a href="#3-2-非事务处理" class="headerlink" title="3.2 非事务处理"></a>3.2 非事务处理</h3><ol><li>反序列化 <code>GetDataRequest</code> 请求。</li><li>获取数据节点。</li><li>ACL检查。</li><li>获取数据内容和 stat，注册 <code>Watcher</code>。</li></ol><h3 id="3-3-请求响应"><a href="#3-3-请求响应" class="headerlink" title="3.3 请求响应"></a>3.3 请求响应</h3><ol><li>创建响应体 <code>GetDataResponse</code>。响应体包含当前数据节点的内容和状态 stat。</li><li>创建响应头。</li><li>统计处理。</li><li>序列化响应。</li><li>I/O层发送响应给客户端。</li></ol><h2 id="4-自问自答"><a href="#4-自问自答" class="headerlink" title="4. 自问自答"></a>4. 自问自答</h2><h3 id="4-1-Learner-如何处理事务请求？"><a href="#4-1-Learner-如何处理事务请求？" class="headerlink" title="4.1  Learner 如何处理事务请求？"></a>4.1  Learner 如何处理事务请求？</h3><p>当一个 Learner 收到客户端的事务请求时，会通过 REQUEST 消息转发给 Leader。Leader 的 <code>LearnerHandler</code> 收到消息后，会提交给 <code>PreRequestProcessor</code>，进入预处理阶段。由于该请求不是来自于与 Leader 相连的客户端的，因此相比于完整流程，跳过了前面的会话创建阶段。</p><h3 id="4-2-在事务处理的过程中，Follower-会收到哪些消息？"><a href="#4-2-在事务处理的过程中，Follower-会收到哪些消息？" class="headerlink" title="4.2 在事务处理的过程中，Follower 会收到哪些消息？"></a>4.2 在事务处理的过程中，Follower 会收到哪些消息？</h3><p>如何客户端连接的是一个 Follower，整个流程中该 Follower 会收到：</p><ul><li>来自客户端的事务请求。由 <code>FollowerRequestProcessor</code> 处理，发送 REQUEST 消息给 Leader，并添加到 <code>CommitProcessor</code> 的 <code>queuedRequests</code> 队列。</li></ul><p>不论客户端是向哪台服务器提交的事务请求，所有 Follower 都会收到：</p><ol><li>来自 Leader 的事务提案。由 <code>FollowerZooKeeperServer</code> 交给 <code>SyncRequestProcessor</code> 处理，提交到 <code>SendAckRequestProcessor</code>，向 Leader 回复 ACK。</li><li>来自 Leader 的 <code>COMMIT</code> 消息。由 <code>FollowerZooKeeperServer</code> 添加事务请求到 <code>CommitProcesser</code> 的 <code>committedRequests</code> 队列，并在接下来提交到 <code>FinalRequestProcessor</code>。</li></ol><h3 id="4-2-在事务处理的过程中，Observer-会收到哪些消息？"><a href="#4-2-在事务处理的过程中，Observer-会收到哪些消息？" class="headerlink" title="4.2 在事务处理的过程中，Observer 会收到哪些消息？"></a>4.2 在事务处理的过程中，Observer 会收到哪些消息？</h3><p>如何客户端连接的是一个 Observer，整个流程中该 Observer 会收到：</p><ul><li>来自客户端的事务请求。由 <code>ObserverRequestProcessor</code> 处理，发送 REQUEST 消息给 Leader，并记录到 <code>CommitProcessor</code> 的 <code>queuedRequests</code> 队列。</li></ul><p>不论客户端是向哪台服务器提交的事务请求，所有 Observer 都会收到：</p><ul><li>来自 Leader 的 <code>INFORM</code> 消息。由 <code>ObserverZooKeeperServer</code> 添加事务请求到 <code>CommitProcesser</code> 的 <code>committedRequests</code> 队列，并在接下来提交到 <code>FinalRequestProcessor</code>。</li></ul><h3 id="4-3-Leader-是否回复来自-Learner-的-REQUEST-消息？"><a href="#4-3-Leader-是否回复来自-Learner-的-REQUEST-消息？" class="headerlink" title="4.3 Leader 是否回复来自 Learner 的 REQUEST 消息？"></a>4.3 Leader 是否回复来自 Learner 的 REQUEST 消息？</h3><p>Leader 不会对 Learner 的 REQUEST 消息做回复。请求处理结果由 Leader 向所有 Learner 发送确认信息（<code>COMMIT</code> 或 <code>INFORM</code>）传达。</p><h3 id="4-4-如何保证只由接收客户端事务请求的那台服务器来对客户端发送响应？"><a href="#4-4-如何保证只由接收客户端事务请求的那台服务器来对客户端发送响应？" class="headerlink" title="4.4 如何保证只由接收客户端事务请求的那台服务器来对客户端发送响应？"></a>4.4 如何保证只由接收客户端事务请求的那台服务器来对客户端发送响应？</h3><ol><li><p>对于接收客户端事务请求的服务器，在流程中流转时，会创建一个 <code>Request</code> 对象，其 <code>cnxn</code> 属性被设置为处理该客户端请求的 <code>NIOServerCnxn</code> 实例。这个对象最终被添加到 <code>CommitProcessor</code> 的 <code>queuedRequests</code> 队列中，等待 Leader 确认事务处理结果。其他服务器不会执行这一个步骤。</p></li><li><p>对于 Leader：</p><ol><li><p>如果客户端请求是直接发送给 Leader 的，如前所述，Leader 会创建一个 <code>Request</code> 对象，其 <code>cnxn</code> 属性被设置为处理该客户端请求的 <code>NIOServerCnxn</code> 实例，然后调用 <code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest(org.apache.zookeeper.server.Request)</code>。</p></li><li><p>如果客户端请求不是直接发送给 Leader 的，那么 Leader 会收到来自某一个 Learner 的 REQUEST 请求。Leader 会创建一个 <code>Request</code> 对象，其 <code>cnxn</code> 属性为 null，然后调用 <code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest(org.apache.zookeeper.server.Request)</code>。</p><p><code>org.apache.zookeeper.server.quorum.LearnerHandler#run</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (qp.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> Leader.REQUEST:                    </span><br><span class="line">                bb = ByteBuffer.wrap(qp.getData());</span><br><span class="line">                sessionId = bb.getLong();</span><br><span class="line">                cxid = bb.getInt();</span><br><span class="line">                type = bb.getInt();</span><br><span class="line">                bb = bb.slice();</span><br><span class="line">                Request si;</span><br><span class="line">                <span class="keyword">if</span>(type == OpCode.sync)&#123;</span><br><span class="line">                    si = <span class="keyword">new</span> LearnerSyncRequest(<span class="keyword">this</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    si = <span class="keyword">new</span> Request(<span class="keyword">null</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class="line">                &#125;</span><br><span class="line">                si.setOwner(<span class="keyword">this</span>);</span><br><span class="line">                leader.zk.submitRequest(si);</span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>无论哪种情况，这个 <code>Request</code> 将在 Leader 的 Commit 流程中被 Leader 添加到 <code>CommitProcessor</code> 的 <code>queuedRequests</code> 队列中，等待集群投票结果。</p></li><li><p>无论哪种情况，这个 <code>Request</code> 将在 Leader 的 Proposal 流程中被 Leader 添加到 <code>CommitProcessor</code> 的 <code>committedRequests</code> 队列中，等待事务应用。</p></li></ol></li><li><p>对于 Follower：</p><ol><li>在 Leader 向 Follower 提交事务提案后，也会创建一个  <code>Request</code> 对象，但其 <code>cnxn</code> 属性被设置为 null，然后将其添加到 <code>FollowerZooKeeperServer</code> 的 <code>pendingTxn</code> 队列中。</li><li>在 Leader 向 Follower 正式提交事务（COMMIT）后，会从 <code>pendingTxn</code> 队列取出该 <code>Request</code> 对象，放入 <code>CommitProcesser</code> 的 <code>committedRequests</code> 队列中。</li></ol></li><li><p>对于 Observer：</p><ul><li>在 Leader 向 Follower 正式提交事务（INFORM）后，会创建一个  <code>Request</code> 对象，但其 <code>cnxn</code> 属性被设置为 null，放入 <code>CommitProcesser</code> 的 <code>committedRequests</code> 队列中。</li></ul></li><li><p>综上所述，对于服务器：</p><ul><li>如果自己是收到客户端请求的那个服务器，那么自己的 <code>CommitProcesser</code> 的 <code>queuedRequests</code> 队列中都会包含一个待提交的事务请求，其 <code>cnxn</code> 属性为客户端连接对应的 <code>NIOServerCnxn</code> 实例。</li><li>如果自己不是收到客户端请求的那个服务器，那么自己的 <code>CommitProcesser</code> 的 <code>committedRequests</code> 队列中都会包含一个待提交的事务请求，其 <code>cnxn</code> 属性为 null。</li></ul></li><li><p>在 <code>CommitProcesser</code> 整理请求信息的过程中，会优先考虑 <code>queuedRequests</code> 队列中的 <code>Request</code> 对象。因此，如果自己是收到客户端请求的那个服务器，那么提交给 <code>FinalRequestProcessor</code> 的 <code>Requet</code> 对象的 <code>cnxn</code> 属性不为 null；反之则为 null。</p></li><li><p>在 <code>FinalRequestProcessor</code> 的处理过程中，各服务器首先完成事务应用。这是将做一次判断，只有当传入的 <code>Request</code> 对象的 <code>cnxn</code> 参数不为 null 时，才会继续进行后续的会话响应操作。</p></li><li><p>最终，集群中的所有服务器都提交并应用了事务，但只有客户端所连接的那个服务器才会对客户端进行响应。</p></li></ol>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：客户端</title>
      <link href="/2017/12/13/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2017/12/13/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      <content type="html"><![CDATA[<p>ZooKeeper 客户端主要由以下几个核心组件组成：</p><ul><li><code>ZooKeeper</code> 实例：客户端的入口</li><li><code>ClientWatchManager</code>：客户端Watcher管理器</li><li><code>HostProvider</code>：客户端地址列表管理器</li><li><code>ClientCnxn</code>：客户端核心线程</li></ul><a id="more"></a><p>ZooKeeper 客户端的构造方法有以下几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">boolean</span> canBeReadOnly)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd, <span class="keyword">boolean</span> canBeReadOnly)</span></span></span><br></pre></td></tr></table></figure><p>这些构造方法的最终根据是否重用 session 有两种实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ZKWatchManager watchManager = <span class="keyword">new</span> ZKWatchManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不重用session</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> canBeReadOnly)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Initiating client connection, connectString="</span> + connectString</span><br><span class="line">                + <span class="string">" sessionTimeout="</span> + sessionTimeout + <span class="string">" watcher="</span> + watcher);</span><br><span class="line"></span><br><span class="line">        watchManager.defaultWatcher = watcher;</span><br><span class="line"></span><br><span class="line">        ConnectStringParser connectStringParser = <span class="keyword">new</span> ConnectStringParser(</span><br><span class="line">                connectString);</span><br><span class="line">        HostProvider hostProvider = <span class="keyword">new</span> StaticHostProvider(</span><br><span class="line">                connectStringParser.getServerAddresses());</span><br><span class="line">        cnxn = <span class="keyword">new</span> ClientCnxn(connectStringParser.getChrootPath(),</span><br><span class="line">                hostProvider, sessionTimeout, <span class="keyword">this</span>, watchManager,</span><br><span class="line">                getClientCnxnSocket(), canBeReadOnly);</span><br><span class="line">        cnxn.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重用session</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd, <span class="keyword">boolean</span> canBeReadOnly)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        watchManager.defaultWatcher = watcher;</span><br><span class="line"></span><br><span class="line">        ConnectStringParser connectStringParser = <span class="keyword">new</span> ConnectStringParser(</span><br><span class="line">                connectString);</span><br><span class="line">        HostProvider hostProvider = <span class="keyword">new</span> StaticHostProvider(</span><br><span class="line">                connectStringParser.getServerAddresses());</span><br><span class="line">        cnxn = <span class="keyword">new</span> ClientCnxn(connectStringParser.getChrootPath(),</span><br><span class="line">                hostProvider, sessionTimeout, <span class="keyword">this</span>, watchManager,</span><br><span class="line">                getClientCnxnSocket(), sessionId, sessionPasswd, canBeReadOnly);</span><br><span class="line">        cnxn.seenRwServerBefore = <span class="keyword">true</span>; <span class="comment">// since user has provided sessionId</span></span><br><span class="line">        cnxn.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ClientCnxnSocket 的默认实现是 ClientCnxnSocketNIO</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ClientCnxnSocket <span class="title">getClientCnxnSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String clientCnxnSocketName = System</span><br><span class="line">                .getProperty(ZOOKEEPER_CLIENT_CNXN_SOCKET);</span><br><span class="line">        <span class="keyword">if</span> (clientCnxnSocketName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clientCnxnSocketName = ClientCnxnSocketNIO.class.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (ClientCnxnSocket) Class.forName(clientCnxnSocketName).getDeclaredConstructor()</span><br><span class="line">                    .newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            IOException ioe = <span class="keyword">new</span> IOException(<span class="string">"Couldn't instantiate "</span></span><br><span class="line">                    + clientCnxnSocketName);</span><br><span class="line">            ioe.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> ioe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-一次会话的创建过程"><a href="#1-一次会话的创建过程" class="headerlink" title="1. 一次会话的创建过程"></a>1. 一次会话的创建过程</h2><h3 id="1-1-初始化阶段"><a href="#1-1-初始化阶段" class="headerlink" title="1.1 初始化阶段"></a>1.1 初始化阶段</h3><p>客户端的初始化过程分为以下几个步骤：</p><ol><li><p>初始化 ZooKeeper 对象。</p><p>通过调用 ZooKeeper 的构造方法来实例化一个 ZooKeeper 对象，在初始化过程中，会创建一个客户端的 Watcher 管理器：<code>ClientWatchManager</code>。</p></li><li><p>设置会话默认 Watcher。</p><p>如果在构造方法中传入了一个 Watcher 对象，那么客户端会将这个对象作为默认 Watcher 保存在 <code>ClientWatchManager</code> 中。</p></li><li><p>构造 ZooKeeper 服务器地址列表管理器：<code>HostProvider</code>。</p><p>对于构造方法中传入的服务器地址，客户端会将其存放在服务器地址列表管理器 <code>HostProvider</code> 中。</p></li><li><p>创建并初始化客户端网络连接器：<code>ClientCnxn</code>。</p><p>ZooKeeper 客户端首先会创建一个网络连接器 <code>ClientCnxn</code>，用来管理客户端与服务器的网络交互。另外，客户端在创建 <code>ClientCnxn</code> 的同时，还会初始化两个核心队列 <code>outgoingQueue</code> 和 <code>pendingQueue</code>，分别作为客户端请求的发送队列和服务端响应的等待队列。</p><p><code>ClientCnxn</code> 的构造和启动方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Packet&gt; pendingQueue = <span class="keyword">new</span> LinkedList&lt;Packet&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Packet&gt; outgoingQueue = <span class="keyword">new</span> LinkedList&lt;Packet&gt;();</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClientCnxn</span><span class="params">(String chrootPath, HostProvider hostProvider, <span class="keyword">int</span> sessionTimeout, ZooKeeper zooKeeper,</span></span></span><br><span class="line"><span class="function"><span class="params">        ClientWatchManager watcher, ClientCnxnSocket clientCnxnSocket,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd, <span class="keyword">boolean</span> canBeReadOnly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">    <span class="keyword">this</span>.watcher = watcher;</span><br><span class="line">    <span class="keyword">this</span>.sessionId = sessionId;</span><br><span class="line">    <span class="keyword">this</span>.sessionPasswd = sessionPasswd;</span><br><span class="line">    <span class="keyword">this</span>.sessionTimeout = sessionTimeout;</span><br><span class="line">    <span class="keyword">this</span>.hostProvider = hostProvider;</span><br><span class="line">    <span class="keyword">this</span>.chrootPath = chrootPath;</span><br><span class="line"></span><br><span class="line">    connectTimeout = sessionTimeout / hostProvider.size();</span><br><span class="line">    readTimeout = sessionTimeout * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    readOnly = canBeReadOnly;</span><br><span class="line"></span><br><span class="line">    sendThread = <span class="keyword">new</span> SendThread(clientCnxnSocket);</span><br><span class="line">    eventThread = <span class="keyword">new</span> EventThread();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动 SendThread 和 EventThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sendThread.start();</span><br><span class="line">    eventThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 <code>SendThread</code> 和 <code>EventThread</code>。</p><p><code>ClientCnxn</code> 还会创建两个核心网络线程 <code>SendThread</code> 和 <code>EventThread</code>，前者用于管理客户端和服务端之间的所有网络 I/O，后者则用于进行客户端的事件处理。同时，客户端还会将 <code>ClientCnxnSocket</code> 分配给 <code>SendThread</code> 作为底层网络 I/O 处理器，并初始化 <code>EventThread</code> 的待处理事件队列 <code>waitingEvents</code>，用于存放所有等待被客户端处理的事件。</p><p><code>SendThread</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SendThread(ClientCnxnSocket clientCnxnSocket) &#123;</span><br><span class="line">    <span class="keyword">super</span>(makeThreadName(<span class="string">"-SendThread()"</span>));</span><br><span class="line">    <span class="comment">//设置当前状态为 CONNECTING</span></span><br><span class="line">    state = States.CONNECTING;</span><br><span class="line">    <span class="keyword">this</span>.clientCnxnSocket = clientCnxnSocket;</span><br><span class="line">    setDaemon(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EventThread</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;Object&gt; waitingEvents = <span class="keyword">new</span> LinkedBlockingQueue&lt;Object&gt;();</span><br><span class="line">EventThread() &#123;</span><br><span class="line">    <span class="keyword">super</span>(makeThreadName(<span class="string">"-EventThread"</span>));</span><br><span class="line">    setDaemon(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://user-images.githubusercontent.com/12514722/34354083-da7d4c58-ea66-11e7-863a-d988843d43f8.png" alt="image"></p><h3 id="1-2-会话创建阶段"><a href="#1-2-会话创建阶段" class="headerlink" title="1.2 会话创建阶段"></a>1.2 会话创建阶段</h3><ol><li><p>启动 <code>SendThread</code> 和 <code>EventThread</code>。</p><p><code>SendThread</code> 首先会判断当前客户端的状态，进行一系列请理性工作。</p></li><li><p>获取一个服务器地址。</p><p>在开始创建 TCP之前，<code>SendThread</code> 首先需要获取一个 ZooKeeper 服务器的目标地址，这通常是从 <code>HostProvider</code> 中随机获取出一个地址，然后委托给 <code>ClientCnxnSocket</code> 去创建与 ZooKeeper 服务器之间的 TCP 连接。</p></li><li><p>创建TCP连接。</p><p>获取一个服务器地址后，<code>ClientCnxnSocket</code> 负责和服务器创建一个 TCP 长连接。</p></li><li><p>构造 <code>ConnectRequest</code> 请求。</p><p>以上步骤后，<code>ClientCnxnSocket</code> 和服务器之间创建了一个 TCP 长连接，但和 ZooKeeper 服务器之间的会话创建尚未完成。<code>ClientCnxnSocket</code> 会进一步调用 <code>SendThread</code> 的 <code>primeConnection()</code> 方法，构造一个 <code>ConnectRequest</code> 请求。该请求代表了客户端试图和服务端之间创建一个会话。同时，将该请求包装成 <code>Packet</code> 对象，放入请求发送队列 <code>outgoingQueue</code> 中去。</p></li><li><p>发送请求。</p><p><code>ClientCnxnSocket</code> 负责从 <code>outgoingQueue</code> 中取出一个待发送的 <code>Packet</code> 对象，将其序列化成 <code>ByteBuffer</code> 后，向服务端进行发送。</p></li></ol><h3 id="1-3-响应处理阶段"><a href="#1-3-响应处理阶段" class="headerlink" title="1.3 响应处理阶段"></a>1.3 响应处理阶段</h3><ol><li><p>接受服务器端响应。</p><p><code>ClientCnxnSocket</code> 接受到服务端响应后，会首先判断当前的客户端状态是否是 “已初始化”，如果尚未完成初始化，那么就认为该响应一定是会话创建请求的响应，直接交由 <code>readConnectResult</code> 方法来处理该响应。</p></li><li><p>处理 Response。</p><p><code>ClientCnxnSocket</code> 会对接受到的服务端响应进行反序列化，得到 <code>ConnectResponse</code> 对象，并从中获取到 ZooKeeper 服务端分配的会话 <code>sessionId</code>。</p></li><li><p>连接成功。</p><p>连接成功后，一方面需要通知 <code>SendThread</code> 线程，进一步对客户端进行会话参数的设置，包括 <code>readTimeout</code> 和 <code>connectTimeout</code> 等，并更新客户端状态，另一方面，需要通知地址管理器 <code>HostProvider</code> 当前成功连接的服务器地址。</p></li><li><p>生成事件：<code>SyncConnected-None</code>。</p><p>为了能够让上层应用感知到会话的成功创建，<code>SendThread</code> 会生成一个事件 <code>SyncConnected-None</code>，代表客户端与服务器会话创建成功，并将该事件传递给 <code>EventThread</code> 线程。</p></li><li><p>查询 <code>Watcher</code>。</p><p><code>EventThread</code> 线程收到事件后，会从 <code>ClientWatchManager</code> 管理器中查询出对应的 <code>Watcher</code>，针对 <code>SyncConnected-None</code> 事件，那么就直接找出存储的默认 <code>Watcher</code>，然后将其放到 <code>EventThread</code> 的 <code>watingEvents</code> 队列中去。</p></li><li><p>处理事件。</p><p><code>EventThread</code> 不断的从 <code>watingEvents</code> 队列中取出待处理的 <code>Watcher</code> 对象，然后直接调用该对象的 <code>process</code> 接口方法，以达到触发 <code>Watcher</code> 的目的。</p></li></ol><p><img src="https://user-images.githubusercontent.com/12514722/34354127-22dace76-ea67-11e7-80dc-e0649ae0c778.png" alt="image"></p><h2 id="2-服务器地址列表"><a href="#2-服务器地址列表" class="headerlink" title="2. 服务器地址列表"></a>2. 服务器地址列表</h2><h3 id="2-1-Chroot：客户端隔离命名空间"><a href="#2-1-Chroot：客户端隔离命名空间" class="headerlink" title="2.1 Chroot：客户端隔离命名空间"></a>2.1 Chroot：客户端隔离命名空间</h3><p>在 3.2.0 之后版本的 ZooKeeper 中，添加了 “Chroot” 特性，该特性允许每个客户端为自己设置一个命名空间。如果一个 ZooKeeper 客户端设置了 <code>Chroot</code>，那么该客户端对服务器的任何操作，都将会被限制在自己的命名空间下。</p><p>客户端可以通过在 <code>connectString</code> 中添加后缀的方式来设置 <code>Chroot</code>，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.1:2181,192.168.0.2:2181,192.168.0.3:2181/apps/X</span><br></pre></td></tr></table></figure><p>将这样一个 <code>connectString</code> 传入客户端的 <code>ConnectStringParser</code> 后就能够解析出 <code>Chroot</code> 并保存在 <code>chrootPath</code> 属性中。</p><h3 id="2-2-HostProvider：地址列表管理器"><a href="#2-2-HostProvider：地址列表管理器" class="headerlink" title="2.2 HostProvider：地址列表管理器"></a>2.2 HostProvider：地址列表管理器</h3><p><code>HostProvider</code> 的默认实现是 <code>StaticHostProvider</code>。通过调用 <code>staticHostProvider</code> 的 <code>next()</code> 方法，能够从 <code>StaticHostProvider</code> 中获取一个可用的服务器地址。这个 <code>next()</code> 方法并非简单地从 <code>serverAddresses</code> 中一次获取一个服务器地址，而是先将随机打散后的服务器地址列表拼装成一个环形的循环队列。注意这个随机过程是一次性的，也就是说，之后的使用过程中一直是按照这样的顺利来获取服务器地址的。</p><h2 id="3-ClientCnxn：网络-I-O"><a href="#3-ClientCnxn：网络-I-O" class="headerlink" title="3. ClientCnxn：网络 I/O"></a>3. ClientCnxn：网络 I/O</h2><h3 id="3-1-Packet"><a href="#3-1-Packet" class="headerlink" title="3.1 Packet"></a>3.1 Packet</h3><p><code>Packet</code> 是 <code>ClientCnxn</code> 内部定义的一个堆协议层的封装，用作 ZooKeeper 中请求和响应的载体。<code>Packet</code> 包含了请求头（<code>requestHeader</code>）、响应头（<code>replyHeader</code>）、请求体（<code>request</code>）、响应体（<code>response</code>）、节点路径（<code>clientPath/serverPath</code>）、注册的 <code>Watcher</code>（<code>watchRegistration</code>）等信息，然而，并非 <code>Packet</code> 中所有的属性都在客户端与服务端之间进行网络传输，只会将 <code>requestHeader</code>、<code>request</code>、<code>readOnly</code> 三个属性序列化，并生成可用于底层网络传输的 <code>ByteBuffer</code>，其他属性都保存在客户端的上下文中，不会进行与服务端之间的网络传输。</p><p><code>org.apache.zookeeper.ClientCnxn.Packet#createBB</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">        boa.writeInt(-<span class="number">1</span>, <span class="string">"len"</span>); <span class="comment">// We'll fill this in later</span></span><br><span class="line">        <span class="keyword">if</span> (requestHeader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestHeader.serialize(boa, <span class="string">"header"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ConnectRequest) &#123;</span><br><span class="line">            request.serialize(boa, <span class="string">"connect"</span>);</span><br><span class="line">            <span class="comment">// append "am-I-allowed-to-be-readonly" flag</span></span><br><span class="line">            boa.writeBool(readOnly, <span class="string">"readOnly"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.serialize(boa, <span class="string">"request"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        baos.close();</span><br><span class="line">        <span class="keyword">this</span>.bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class="line">        <span class="keyword">this</span>.bb.putInt(<span class="keyword">this</span>.bb.capacity() - <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">this</span>.bb.rewind();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Ignoring unexpected exception"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-outgoingQueue-和-pendingQueue"><a href="#3-2-outgoingQueue-和-pendingQueue" class="headerlink" title="3.2 outgoingQueue 和 pendingQueue"></a>3.2 outgoingQueue 和 pendingQueue</h3><p><code>ClientCnxn</code> 维护着 <code>outgoingQueue</code>（客户端的请求发送队列）和 <code>pendingQueue</code>（服务端响应的等待队列），<code>outgoingQueue</code> 专门用于存储那些需要发送到服务端的 <code>Packet</code> 集合，<code>pendingQueue</code> 用于存储那些已经从客户端发送到服务端的，但是需要等待服务端响应的 <code>Packet</code> 集合。</p><h3 id="3-3-ClientCnxnSocket：底层-Socket-通信层"><a href="#3-3-ClientCnxnSocket：底层-Socket-通信层" class="headerlink" title="3.3 ClientCnxnSocket：底层 Socket 通信层"></a>3.3 ClientCnxnSocket：底层 Socket 通信层</h3><p>在 ZooKeeper 中，<code>ClientCnxnSocket</code>  的默认实现是 <code>ClientCnxnSocketNIO</code>，该实现类使用 Java 原生的 NIO 接口，其核心是 <code>doIO</code> 逻辑，主要负责对请求的发送和响应接收过程。</p><p><code>SendThread</code> 线程中会循环调用 <code>org.apache.zookeeper.ClientCnxnSocketNIO#doTransport</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTransport</span><span class="params">(<span class="keyword">int</span> waitTimeOut, List&lt;Packet&gt; pendingQueue, LinkedList&lt;Packet&gt; outgoingQueue, ClientCnxn cnxn)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    selector.select(waitTimeOut);</span><br><span class="line">    Set&lt;SelectionKey&gt; selected;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        selected = selector.selectedKeys();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Everything below and until we get back to the select is</span></span><br><span class="line">    <span class="comment">// non blocking, so time is effectively a constant. That is</span></span><br><span class="line">    <span class="comment">// Why we just have to do this once, here</span></span><br><span class="line">    updateNow();</span><br><span class="line">    <span class="keyword">for</span> (SelectionKey k : selected) &#123;</span><br><span class="line">        SocketChannel sc = ((SocketChannel) k.channel());</span><br><span class="line">        <span class="keyword">if</span> ((k.readyOps() &amp; SelectionKey.OP_CONNECT) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sc.finishConnect()) &#123;</span><br><span class="line">                updateLastSendAndHeard();</span><br><span class="line">                sendThread.primeConnection();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((k.readyOps() &amp; (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != <span class="number">0</span>) &#123;</span><br><span class="line">            doIO(pendingQueue, outgoingQueue, cnxn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sendThread.getZkState().isConnected()) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(outgoingQueue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (findSendablePacket(outgoingQueue, cnxn.sendThread.clientTunneledAuthenticationInProgress()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                enableWrite();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    selected.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.ClientCnxnSocketNIO#doIO</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doIO</span><span class="params">(List&lt;Packet&gt; pendingQueue, LinkedList&lt;Packet&gt; outgoingQueue, ClientCnxn cnxn)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">    SocketChannel sock = (SocketChannel) sockKey.channel();</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Socket is null!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sockKey.isReadable()) &#123;</span><br><span class="line">        <span class="keyword">int</span> rc = sock.read(incomingBuffer);</span><br><span class="line">        <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EndOfStreamException(</span><br><span class="line">                    <span class="string">"Unable to read additional data from server sessionid 0x"</span></span><br><span class="line">                            + Long.toHexString(sessionId)</span><br><span class="line">                            + <span class="string">", likely server has closed socket"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!incomingBuffer.hasRemaining()) &#123;</span><br><span class="line">            incomingBuffer.flip();</span><br><span class="line">            <span class="keyword">if</span> (incomingBuffer == lenBuffer) &#123;</span><br><span class="line">                recvCount++;</span><br><span class="line">                readLength();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!initialized) &#123;</span><br><span class="line">                readConnectResult();</span><br><span class="line">                enableRead();</span><br><span class="line">                <span class="keyword">if</span> (findSendablePacket(outgoingQueue, cnxn.sendThread.clientTunneledAuthenticationInProgress()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Since SASL authentication has completed (if client is configured to do so),</span></span><br><span class="line">                    <span class="comment">// outgoing packets waiting in the outgoingQueue can now be sent.</span></span><br><span class="line">                    enableWrite();</span><br><span class="line">                &#125;</span><br><span class="line">                lenBuffer.clear();</span><br><span class="line">                incomingBuffer = lenBuffer;</span><br><span class="line">                updateLastHeard();</span><br><span class="line">                initialized = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sendThread.readResponse(incomingBuffer);</span><br><span class="line">                lenBuffer.clear();</span><br><span class="line">                incomingBuffer = lenBuffer;</span><br><span class="line">                updateLastHeard();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sockKey.isWritable()) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(outgoingQueue) &#123;</span><br><span class="line">            Packet p = findSendablePacket(outgoingQueue, cnxn.sendThread.clientTunneledAuthenticationInProgress());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                updateLastSend();</span><br><span class="line">                <span class="comment">// If we already started writing p, p.bb will already exist</span></span><br><span class="line">                <span class="keyword">if</span> (p.bb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((p.requestHeader != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                            (p.requestHeader.getType() != OpCode.ping) &amp;&amp;</span><br><span class="line">                            (p.requestHeader.getType() != OpCode.auth)) &#123;</span><br><span class="line">                        p.requestHeader.setXid(cnxn.getXid());</span><br><span class="line">                    &#125;</span><br><span class="line">                    p.createBB();</span><br><span class="line">                &#125;</span><br><span class="line">                sock.write(p.bb);</span><br><span class="line">                <span class="keyword">if</span> (!p.bb.hasRemaining()) &#123;</span><br><span class="line">                    sentCount++;</span><br><span class="line">                    outgoingQueue.removeFirstOccurrence(p);</span><br><span class="line">                    <span class="keyword">if</span> (p.requestHeader != <span class="keyword">null</span></span><br><span class="line">                            &amp;&amp; p.requestHeader.getType() != OpCode.ping</span><br><span class="line">                            &amp;&amp; p.requestHeader.getType() != OpCode.auth) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (pendingQueue) &#123;</span><br><span class="line">                            pendingQueue.add(p);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (outgoingQueue.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// No more packets to send: turn off write interest flag.</span></span><br><span class="line">                <span class="comment">// Will be turned on later by a later call to enableWrite(),</span></span><br><span class="line">                <span class="comment">// from within ZooKeeperSaslClient (if client is configured</span></span><br><span class="line">                <span class="comment">// to attempt SASL authentication), or in either doIO() or</span></span><br><span class="line">                <span class="comment">// in doTransport() if not.</span></span><br><span class="line">                disableWrite();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!initialized &amp;&amp; p != <span class="keyword">null</span> &amp;&amp; !p.bb.hasRemaining()) &#123;</span><br><span class="line">                <span class="comment">// On initial connection, write the complete connect request</span></span><br><span class="line">                <span class="comment">// packet, but then disable further writes until after</span></span><br><span class="line">                <span class="comment">// receiving a successful connection response.  If the</span></span><br><span class="line">                <span class="comment">// session is expired, then the server sends the expiration</span></span><br><span class="line">                <span class="comment">// response and immediately closes its end of the socket.  If</span></span><br><span class="line">                <span class="comment">// the client is simultaneously writing on its end, then the</span></span><br><span class="line">                <span class="comment">// TCP stack may choose to abort with RST, in which case the</span></span><br><span class="line">                <span class="comment">// client would never receive the session expired event.  See</span></span><br><span class="line">                <span class="comment">// http://docs.oracle.com/javase/6/docs/technotes/guides/net/articles/connection_release.html</span></span><br><span class="line">                disableWrite();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Just in case</span></span><br><span class="line">                enableWrite();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-请求发送"><a href="#3-3-1-请求发送" class="headerlink" title="3.3.1 请求发送"></a>3.3.1 请求发送</h4><p>客户端提交请求：</p><p><code>org.apache.zookeeper.ClientCnxn#submitRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ReplyHeader <span class="title">submitRequest</span><span class="params">(RequestHeader h, Record request,</span></span></span><br><span class="line"><span class="function"><span class="params">        Record response, WatchRegistration watchRegistration)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ReplyHeader r = <span class="keyword">new</span> ReplyHeader();</span><br><span class="line">    Packet packet = queuePacket(h, r, request, response, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">null</span>, watchRegistration);</span><br><span class="line">    <span class="keyword">synchronized</span> (packet) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!packet.finished) &#123;</span><br><span class="line">            packet.wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.ClientCnxn#queuePacket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Packet <span class="title">queuePacket</span><span class="params">(RequestHeader h, ReplyHeader r, Record request,</span></span></span><br><span class="line"><span class="function"><span class="params">        Record response, AsyncCallback cb, String clientPath,</span></span></span><br><span class="line"><span class="function"><span class="params">        String serverPath, Object ctx, WatchRegistration watchRegistration)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Packet packet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that we do not generate the Xid for the packet yet. It is</span></span><br><span class="line">    <span class="comment">// generated later at send-time, by an implementation of ClientCnxnSocket::doIO(),</span></span><br><span class="line">    <span class="comment">// where the packet is actually sent.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (outgoingQueue) &#123;</span><br><span class="line">        packet = <span class="keyword">new</span> Packet(h, r, request, response, watchRegistration);</span><br><span class="line">        packet.cb = cb;</span><br><span class="line">        packet.ctx = ctx;</span><br><span class="line">        packet.clientPath = clientPath;</span><br><span class="line">        packet.serverPath = serverPath;</span><br><span class="line">        <span class="keyword">if</span> (!state.isAlive() || closing) &#123;</span><br><span class="line">            conLossPacket(packet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the client is asking to close the session then</span></span><br><span class="line">            <span class="comment">// mark as closing</span></span><br><span class="line">            <span class="keyword">if</span> (h.getType() == OpCode.closeSession) &#123;</span><br><span class="line">                closing = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            outgoingQueue.add(packet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sendThread.getClientCnxnSocket().wakeupCnxn();</span><br><span class="line">    <span class="keyword">return</span> packet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在正常情况下，<code>ClientCnxnSocket</code> 会从 <code>outgoingQueue</code> 中取出一个可发送的 <code>Packet</code> 对象，同时生成一个客户端请求序号 XID 并将其设置到 <code>Packet</code> 请求头中去，然后将其序列化后进行发送。</p><p>请求发送完毕后，会立即将该 <code>Packet</code> 保存到 <code>pendingQueue</code> 中，以便等待服务端响应返回后进行相应的处理。</p><h4 id="3-3-2-响应接收"><a href="#3-3-2-响应接收" class="headerlink" title="3.3.2 响应接收"></a>3.3.2 响应接收</h4><p>客户端获取到来自服务端的完整响应数据后，根据不同的客户端请求类型，会进行不同的处理。</p><ul><li>如果检测到当前客户端尚未进行初始化，那么说明当前客户端与服务端之间正在进行会话创建，那么就直接将接收到的 <code>ByteBuffer</code>（<code>incomingBuffer</code>）序列化成 <code>ConnectResponse</code> 对象。</li><li>如果当前客户端已经处于正常的会话周期，并且接收到的服务端响应是一个事件，那么客户端将接收到的 <code>ByteBuffer</code> 序列化成 <code>WatcherEvent</code> 对象，并将该事件放入待处理队列中。</li><li>如果是一个常规的请求响应（<code>Create</code>、<code>GetData</code>、<code>Exist</code> 等），那么会从 <code>pendingQueue</code> 队列中取出一个 <code>Packet</code> 来进行相应的处理。客户端首先会通过检验服务端响应中的 XID 来确保请求处理的顺序性，然后再将接收到的 <code>ByteBuffer</code> 序列化成 <code>Response</code> 对象。</li><li>最后，会在 <code>finishPacket</code> 方法中处理 <code>Watcher</code> 注册等逻辑。</li></ul><h3 id="3-4-SendThread"><a href="#3-4-SendThread" class="headerlink" title="3.4 SendThread"></a>3.4 SendThread</h3><p><code>SendThread</code> 是客户端 <code>ClientCnxn</code> 内部一个核心的 I/O 调度线程，用于管理客户端和服务端之间的所有网络 I/O 操作。在 ZooKeeper 客户端的实际运行过程中，一方面，<code>SendThread</code> 维护了客户端与服务端之间的会话生命周期，其通过在—定的周期频率内向服务端发送一个 <code>PING</code> 包来实现心跳检测。同时，在会话周期内，如果客户端与服务端之间出现 TCP 连接断开的怙况，那么就会自动且透明化地完成重连操作。</p><p>另一方面，<code>SendThread</code> 管理了客户端所有的请求发送和响应接收操作，其将上层客户端 API 操作转换成相应的请求协议并发送到服务端，并完成对同步调用的返回和异步调用的回调。同时，<code>SendThread</code> 还负责将来自服务端的事件传递给 <code>EventThread</code> 去处理。</p><h3 id="3-5-EventThread"><a href="#3-5-EventThread" class="headerlink" title="3.5 EventThread"></a>3.5 EventThread</h3><p><code>EventThread</code> 是客户端 <code>ClientCnxn</code> 内部的另一个核心线程，负责客户端的事件处理，并触发客户端注册的 <code>Watcher</code> 监听。<code>EventThread</code> 中有一个 <code>waitingEvents</code> 队列，用于临时存放那些需要被触发的 Object，包括那些客户端注册的 <code>Watcher</code> 和异步接口中注册的回调器 <code>AsyncCallback</code>。同时，<code>EventThread</code> 会不断地从 <code>waitingEvents</code> 这个队列中取出 Object，识别出具体类型（<code>Watcher</code> 或者 <code>AsyncCallback</code>），并分别调用 <code>process</code> 和 <code>processResult</code> 接口方法来实现对事件的触发和回调。</p>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：四字命令</title>
      <link href="/2017/12/09/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%9B%9B%E5%AD%97%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/12/09/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%9B%9B%E5%AD%97%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>使用方式：</p><ul><li><p>telnet</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> telnet localhost 2181</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is '^]'.</span><br><span class="line">conf</span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/usr/local/var/lib/zookeeper/version-2</span><br><span class="line">dataLogDir=/usr/local/var/lib/zookeeper/version-2</span><br><span class="line">tickTime=3000</span><br><span class="line">maxClientCnxns=0</span><br><span class="line">minSessionTimeout=6000</span><br><span class="line">maxSessionTimeout=60000</span><br><span class="line">serverId=0</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></li><li><p>nc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> conf | nc localhost 2181</span></span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/usr/local/var/lib/zookeeper/version-2</span><br><span class="line">dataLogDir=/usr/local/var/lib/zookeeper/version-2</span><br><span class="line">tickTime=3000</span><br><span class="line">maxClientCnxns=0</span><br><span class="line">minSessionTimeout=6000</span><br><span class="line">maxSessionTimeout=60000</span><br><span class="line">serverId=0</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>以下示例基于在本地以默认配置起单实例ZooKeeper和Kafka，Kafka连接到ZooKeeper。Mac系统下ZooKeeper配置文件目录为<code>/usr/local/etc/zookeeper</code>。</p><h4 id="1-conf"><a href="#1-conf" class="headerlink" title="1. conf"></a>1. conf</h4><p>conf命令用于输出ZooKeeper服务器运行时使用的基本配置信息，包括clientPort，dataDir和tickTime等。</p><p>conf会根据当前的运行模式来决定打印输出的服务器配置信息，如果是单机模式(standalone)，不会输出 initLimit、syncLimit、electionAlg以及electionPort等集群配置信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> conf | nc localhost 2181</span></span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/usr/local/var/lib/zookeeper/version-2</span><br><span class="line">dataLogDir=/usr/local/var/lib/zookeeper/version-2</span><br><span class="line">tickTime=3000</span><br><span class="line">maxClientCnxns=0</span><br><span class="line">minSessionTimeout=6000</span><br><span class="line">maxSessionTimeout=60000</span><br><span class="line">serverId=0</span><br></pre></td></tr></table></figure><h4 id="2-cons"><a href="#2-cons" class="headerlink" title="2. cons"></a>2. cons</h4><p>cons命令用于输出当前这台服务器上所有客户端连接的详细信息，包括每个客户端的客户端IP、会话ID和最后一次与服务器交互的操作类型等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> cons | nc localhost 2181</span></span><br><span class="line"> /127.0.0.1:51436[1](queued=0,recved=493,sent=495,sid=0x15e983124a00000,lop=PING,est=1505792940222,to=6000,lcxid=0x17c,lzxid=0x478,lresp=1505793166428,llat=0,minlat=0,avglat=0,maxlat=129)</span><br><span class="line"> /0:0:0:0:0:0:0:1:51550[0](queued=0,recved=1,sent=0)</span><br></pre></td></tr></table></figure><h4 id="3-crst"><a href="#3-crst" class="headerlink" title="3. crst"></a>3. crst</h4><p>crst命令用于重置所有客户端的连接统计信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> crst | nc localhost 2181</span></span><br><span class="line">Connection stats reset.</span><br></pre></td></tr></table></figure><h4 id="4-dump"><a href="#4-dump" class="headerlink" title="4. dump"></a>4. dump</h4><p>dump命令用于输出当前集群的所有会话信息，包括这些会话的会话ID，以及每个会话创建的临时节点等信息。另外，如果在Leader服务器上执行该命令的话，还能够看到每个会话的超时时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> dump | nc localhost 2181</span></span><br><span class="line">SessionTracker dump:</span><br><span class="line">Session Sets (3):</span><br><span class="line">0 expire at Tue Sep 19 11:55:51 CST 2017:</span><br><span class="line">0 expire at Tue Sep 19 11:55:54 CST 2017:</span><br><span class="line">1 expire at Tue Sep 19 11:55:57 CST 2017:</span><br><span class="line">0x15e983124a00000</span><br><span class="line">ephemeral nodes dump:</span><br><span class="line">Sessions with Ephemerals (1):</span><br><span class="line">0x15e983124a00000:</span><br><span class="line">/controller</span><br><span class="line">/brokers/ids/0</span><br></pre></td></tr></table></figure><h4 id="5-envi"><a href="#5-envi" class="headerlink" title="5. envi"></a>5. envi</h4><p>envi命令用于输出ZooKeeper所在服务器运行时的环境信息，包括os.version，java.version和user.home等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> envi | nc localhost 2181</span></span><br><span class="line">Environment:</span><br><span class="line">zookeeper.version=3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT</span><br><span class="line">host.name=bogon</span><br><span class="line">java.version=1.8.0_91</span><br><span class="line">java.vendor=Oracle Corporation</span><br><span class="line">java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre</span><br><span class="line">java.class.path=</span><br><span class="line">java.library.path=/Users/xyq/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class="line">java.io.tmpdir=/var/folders/yq/d0v9dm456zd_xzc1lhllw19m0000gn/T/</span><br><span class="line">java.compiler=&lt;NA&gt;</span><br><span class="line">os.name=Mac OS X</span><br><span class="line">os.arch=x86_64</span><br><span class="line">os.version=10.12.6</span><br><span class="line">user.name=xyq</span><br><span class="line">user.home=/Users/xyq</span><br><span class="line">user.dir=/Users/xyq</span><br></pre></td></tr></table></figure><h4 id="6-ruok"><a href="#6-ruok" class="headerlink" title="6. ruok"></a>6. ruok</h4><p>ruok命令即“are you ok”，用于输出当前ZooKeeper服务器是否正在运行。执行该命令后，如果当前ZooKeeper服务器正在运行，那么返回“imok”，否则没有任何响应输出。</p><p>ruok命令的输出仅仅只能表明当前服务器是否正在运行，准确地讲，只能说明2181端口打开着，同时四字命令执行流程正常，但是不能代表ZooKeeper服务器是否运行正常。在很多时候，如果当前服务器无法正常处理客户端的读写请求，甚至已经无法和集群中的其他机器通信，ruok命令依然返回“imok”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> ruok | nc localhost 2181</span></span><br><span class="line">imok</span><br></pre></td></tr></table></figure><h4 id="7-stat"><a href="#7-stat" class="headerlink" title="7. stat"></a>7. stat</h4><p>stat命令用于获取ZooKeeper服务器的运行时状态信息，包括基本的ZooKeeper版本，打包信息，运行时角色，集群数据节点个数等信息，另外还会将当前服务器的客户端连接信息打印出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="built_in">stat</span> | nc localhost 2181</span></span><br><span class="line">Zookeeper version: 3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /0:0:0:0:0:0:0:1:51369[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/0</span><br><span class="line">Received: 4</span><br><span class="line">Sent: 3</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x43c</span><br><span class="line">Mode: standalone</span><br><span class="line">Node count: 140</span><br></pre></td></tr></table></figure><h4 id="8-srvr"><a href="#8-srvr" class="headerlink" title="8. srvr"></a>8. srvr</h4><p>srvr命令和stat命令的功能一致，唯一的区别是srvr不会将客户端的连接情况输出，仅仅输出服务器的自身信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> srvr | nc localhost 2181</span></span><br><span class="line">Zookeeper version: 3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT</span><br><span class="line">Latency min/avg/max: 0/0/129</span><br><span class="line">Received: 1979</span><br><span class="line">Sent: 1980</span><br><span class="line">Connections: 2</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x478</span><br><span class="line">Mode: standalone</span><br><span class="line">Node count: 142</span><br></pre></td></tr></table></figure><h4 id="9-wchs"><a href="#9-wchs" class="headerlink" title="9. wchs"></a>9. wchs</h4><p>wchs命令用于输出当前服务器上管理的Watchers的概要信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> wchs | nc localhost 2181</span></span><br><span class="line">1 connections watching 11 paths</span><br><span class="line">Total watches:11</span><br></pre></td></tr></table></figure><h4 id="10-wchc"><a href="#10-wchc" class="headerlink" title="10. wchc"></a>10. wchc</h4><p>wchc命令用于输出当前服务器上管理的Watchers的详细信息，以会话为单位进行归组，同时列出被该会话注册了Watcher的节点路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> wchc | nc localhost 2181</span></span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/controller</span><br><span class="line">/isr_change_notification</span><br><span class="line">/admin/preferred_replica_election</span><br><span class="line">/admin/reassign_partitions</span><br><span class="line">/brokers/ids</span><br><span class="line">/admin/delete_topics</span><br><span class="line">/brokers/topics/springCloudBus</span><br><span class="line">/config/changes</span><br><span class="line">/brokers/topics/sleuth</span><br><span class="line">/brokers/topics/__consumer_offsets</span><br><span class="line">/brokers/topics</span><br></pre></td></tr></table></figure><h4 id="10-wchp"><a href="#10-wchp" class="headerlink" title="10. wchp"></a>10. wchp</h4><p>wchp命令和wchc命令非常类似，也是用于输出当前服务器上管理的Watchers的详细信息，不同点在于wchp命令的输出信息以节点路径为单位进行归组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> wchp | nc localhost 2181</span></span><br><span class="line">/controller</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/isr_change_notification</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/admin/preferred_replica_election</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/admin/reassign_partitions</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/brokers/ids</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/admin/delete_topics</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/brokers/topics/springCloudBus</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/config/changes</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/brokers/topics/sleuth</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/brokers/topics/__consumer_offsets</span><br><span class="line">0x15e9aac69320000</span><br><span class="line">/brokers/topics</span><br><span class="line">0x15e9aac69320000</span><br></pre></td></tr></table></figure><h4 id="11-mntr"><a href="#11-mntr" class="headerlink" title="11. mntr"></a>11. mntr</h4><p>mntr命令用于输出比stat命令更为详尽的服务器统计信息，包括请求处理的延迟情况、服务器内存数据库大小和集群的数据同步情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> mntr | nc localhost 2181</span></span><br><span class="line">zk_version3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT</span><br><span class="line">zk_avg_latency0</span><br><span class="line">zk_max_latency129</span><br><span class="line">zk_min_latency0</span><br><span class="line">zk_packets_received2060</span><br><span class="line">zk_packets_sent2061</span><br><span class="line">zk_num_alive_connections2</span><br><span class="line">zk_outstanding_requests0</span><br><span class="line">zk_server_statestandalone</span><br><span class="line">zk_znode_count142</span><br><span class="line">zk_watch_count16</span><br><span class="line">zk_ephemerals_count2</span><br><span class="line">zk_approximate_data_size10973</span><br><span class="line">zk_open_file_descriptor_count97</span><br><span class="line">zk_max_file_descriptor_count10240</span><br></pre></td></tr></table></figure><h4 id="12-isro"><a href="#12-isro" class="headerlink" title="12. isro"></a>12. isro</h4><p>New in 3.4.0: Tests if server is running in read-only mode. The server will respond with “ro” if in read-only mode or “rw” if not in read-only mode.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> isro | nc localhost 2181</span></span><br><span class="line">rw</span><br></pre></td></tr></table></figure><h4 id="13-gtmk"><a href="#13-gtmk" class="headerlink" title="13. gtmk"></a>13. gtmk</h4><p>Gets the current trace mask as a 64-bit signed long value in decimal format.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> gtmk | nc localhost 2181</span></span><br><span class="line">306</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：Watcher</title>
      <link href="/2017/12/07/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9AWatcher/"/>
      <url>/2017/12/07/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9AWatcher/</url>
      <content type="html"><![CDATA[<p>ZooKeeper 允许客户端向服务端注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，那么就会向指定客户端发送一个事件通知来实现分布式的通知功能。</p><p>ZooKeeper 的 Watcher 机制主要包括客户端线程、客户端 WatchManager 和 ZooKeeper 服务器三部分。在具体工作流程上，简单地讲，客户端在向 ZooKeeper 服务器注册 Watcher 的同时，会将 Watcher 对象存储在客户端的 WatchManager 中。当 ZooKeeper 服务器端触发 Watcher 事件后，会向客户端发送通知，客户端线程从 WatchManager 中取出对应的 Watcher 对象来执行回调逻辑。</p><a id="more"></a><h2 id="1-Watcher-接口"><a href="#1-Watcher-接口" class="headerlink" title="1. Watcher 接口"></a>1. Watcher 接口</h2><p>在 ZooKeeper 中，接口类 <code>Watcher</code> 用于表示一个标准的事件处理器，其定义了事件通知相关的逻辑，包含 <code>KeeperState</code> 和 <code>EventType</code> 两个枚举类，分别代表了通知状态和事件类型，同时定义了事件的回调方法：<code>process(WatchedEvent event)</code>。</p><h3 id="1-1-Watcher-事件"><a href="#1-1-Watcher-事件" class="headerlink" title="1.1 Watcher 事件"></a>1.1 Watcher 事件</h3><table><thead><tr><th>KeeperState</th><th>EventType</th><th>触发条件</th><th>说明</th></tr></thead><tbody><tr><td></td><td>None（-1）</td><td>客户端与服务端成功建立连接</td><td></td></tr><tr><td></td><td>NodeCreated（1）</td><td>Watcher 监听的对应数据节点被创建</td><td></td></tr><tr><td>SyncConnected（0）</td><td>NodeDeleted（2）</td><td>Watcher 监听的对应数据节点被删除</td><td>此时客户端和服务器处于连接状态</td></tr><tr><td></td><td>NodeDataChanged（3）</td><td>Watcher 监听的对应数据节点的数据内容发生变更</td><td></td></tr><tr><td></td><td>NodeChildChanged（4）</td><td>Wather 监听的对应数据节点的子节点列表发生变更</td><td></td></tr><tr><td>Disconnected（0）</td><td>None（-1）</td><td>客户端与 ZooKeeper 服务器断开连接</td><td>此时客户端和服务器处于断开连接状态</td></tr><tr><td>Expired（-112）</td><td>Node（-1）</td><td>会话超时</td><td>此时客户端会话失效，通常同时也会受到 SessionExpiredException 异常</td></tr><tr><td>AuthFailed（4）</td><td>None（-1）</td><td>通常有两种情况。（1）使用错误的 schema 进行权限检查 （2）SASL 权限检查失败</td><td>通常同时也会收到 AuthFailedException 异常</td></tr></tbody></table><h3 id="1-2-回调方法-process"><a href="#1-2-回调方法-process" class="headerlink" title="1.2 回调方法 process()"></a>1.2 回调方法 process()</h3><p><code>process</code> 方法是 <code>Watcher</code> 接口中的一个回调方法，当 ZooKeeper 向客户端发送一个 <code>Watcher</code> 事件通知时，客户端就会对相应的 <code>process</code> 方法进行回调，从而实现对事件的处理。</p><p><code>org.apache.zookeeper.Watcher#process</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span></span>;</span><br></pre></td></tr></table></figure><p><code>WatchedEvent</code> 包含了每一个事件的三个基本属性：通知状态（<code>keeperState</code>），事件类型（<code>EventType</code>）和节点路径（<code>path</code>）。</p><p>在这里提一下 <code>WathcerEvent</code> 实体。笼统地讲，两者表示的是同一个事物，都是对一个服务端事件的封装。不同的是，<code>WatchedEvent</code> 是一个逻辑事件，用于服务端和客户端程序执行过程中所需的逻辑对象，而 <code>WatcherEvent</code> 因为实现了序列化接口，因此可以用于网络传输。</p><p><code>org.apache.zookeeper.proto.WatcherEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WatcherEvent</span> <span class="keyword">implements</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端在生成 <code>WatchedEvent</code> 事件之后，会调用 <code>getWrapper</code> 方法将自己包装成一个可序列化的 <code>WatcherEvent</code> 事件，以便通过网络传输到客户端。客户端在接收到服务端的这个事件对象后，首先会将 <code>WatcherEvent</code> 还原成一个 <code>WatchedEvent</code> 事件，并传递给 <code>process</code> 方法处理，回调方法 <code>process</code> 根据入参就能够解析出完整的服务端事件了。</p><h2 id="2-工作机制"><a href="#2-工作机制" class="headerlink" title="2. 工作机制"></a>2. 工作机制</h2><h3 id="2-1-客户端注册-Watcher"><a href="#2-1-客户端注册-Watcher" class="headerlink" title="2.1 客户端注册 Watcher"></a>2.1 客户端注册 Watcher</h3><p>在创建一个 ZooKeeper 客户端的实例时可以向构造方法中传入一个默认的 Watcher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString，<span class="keyword">int</span> sessionTimeout,Watcher watcher)</span></span>;</span><br></pre></td></tr></table></figure><p>这个 Watcher 将作为整个 ZooKeeper 会话期间的默认 Watcher，会一直被保存在客户端 <code>ZKWatchManager</code> 的 <code>defaultWatcher</code> 中。另外，ZooKeeper 客户端也可以通过 <code>getData</code>，<code>getChildren</code> 和 <code>exist</code> 三个接口来向 ZooKeeper 服务器注册 Watcher，无论使用哪种方式，注册 Watcher 的工作原理都是一致的。</p><p>以 <code>org.apache.zookeeper.ZooKeeper#getData(java.lang.String, org.apache.zookeeper.Watcher, org.apache.zookeeper.data.Stat)</code> 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getData(<span class="keyword">final</span> String path, Watcher watcher, Stat stat)</span><br><span class="line">    <span class="keyword">throws</span> KeeperException, InterruptedException</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">final</span> String clientPath = path;</span><br><span class="line">    PathUtils.validatePath(clientPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the watch contains the un-chroot path</span></span><br><span class="line">    WatchRegistration wcb = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (watcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wcb = <span class="keyword">new</span> DataWatchRegistration(watcher, clientPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String serverPath = prependChroot(clientPath);</span><br><span class="line"></span><br><span class="line">    RequestHeader h = <span class="keyword">new</span> RequestHeader();</span><br><span class="line">    h.setType(ZooDefs.OpCode.getData);</span><br><span class="line">    GetDataRequest request = <span class="keyword">new</span> GetDataRequest();</span><br><span class="line">    request.setPath(serverPath);</span><br><span class="line">    request.setWatch(watcher != <span class="keyword">null</span>);</span><br><span class="line">    GetDataResponse response = <span class="keyword">new</span> GetDataResponse();</span><br><span class="line">    ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);</span><br><span class="line">    <span class="keyword">if</span> (r.getErr() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> KeeperException.create(KeeperException.Code.get(r.getErr()),</span><br><span class="line">                clientPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">        DataTree.copyStat(response.getStat(), stat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在向 <code>getData</code> 接口注册 Watcher 后，客户端首先会对当前客户端请求 <code>request</code> 进行标记，将其设置为 “使用 Watcher 监听”，同时会封装一个 Watcher 的注册信息 <code>WatchRegistration</code> 对象，用于暂时保存数据节点的路径和 Watcher 的对应关系。</p><p>在 ZooKeeper 中，<code>Packet</code> 可以被看作一个最小的通信协议单元，用于进行客户端与服务端之间的网络传输，任何需要传输的对象都需要包装成一个 <code>Packet</code> 对象。因此，在 <code>ClientCnxn</code> 中 <code>WatchRegistration</code> 又会被封装到 <code>Packet</code> 中，然后放入发送队列中等待客户端发送：</p><p><code>org.apache.zookeeper.ClientCnxn#submitRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ReplyHeader <span class="title">submitRequest</span><span class="params">(RequestHeader h, Record request,</span></span></span><br><span class="line"><span class="function"><span class="params">        Record response, WatchRegistration watchRegistration)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ReplyHeader r = <span class="keyword">new</span> ReplyHeader();</span><br><span class="line">    Packet packet = queuePacket(h, r, request, response, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">null</span>, watchRegistration);</span><br><span class="line">    <span class="keyword">synchronized</span> (packet) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!packet.finished) &#123;</span><br><span class="line">            packet.wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，ZooKeeper 客户端就会向服务端发送这个请求，同时等待请求的返回。完成请求发送后，会由客户端 <code>SendThread</code> 线程的 <code>readResponse</code> 方法负责接收来自服务端的响应，<code>finishPacket</code> 方法会从 <code>Packet</code> 中取出对应的 Watcher 并注册到 <code>ZkWatchManager</code> 中去：</p><p><code>org.apache.zookeeper.ClientCnxn#finishPacket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishPacket</span><span class="params">(Packet p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.watchRegistration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.watchRegistration.register(p.replyHeader.getErr());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p.cb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (p) &#123;</span><br><span class="line">            p.finished = <span class="keyword">true</span>;</span><br><span class="line">            p.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.finished = <span class="keyword">true</span>;</span><br><span class="line">        eventThread.queuePacket(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的内容中，我们已经了解到客户端已经将 Watcher 暂时封装在了 <code>WatchRegistration</code> 对象中，现在就需要从这个封装对象中再次提取出 Watcher 来：</p><p><code>org.apache.zookeeper.ZooKeeper.WatchRegistration#register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">protected</span> Map&lt;String, Set&lt;Watcher&gt;&gt; getWatches(<span class="keyword">int</span> rc);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">int</span> rc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldAddWatch(rc)) &#123;</span><br><span class="line">        Map&lt;String, Set&lt;Watcher&gt;&gt; watches = getWatches(rc);</span><br><span class="line">        <span class="keyword">synchronized</span>(watches) &#123;</span><br><span class="line">            Set&lt;Watcher&gt; watchers = watches.get(clientPath);</span><br><span class="line">            <span class="keyword">if</span> (watchers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                watchers = <span class="keyword">new</span> HashSet&lt;Watcher&gt;();</span><br><span class="line">                watches.put(clientPath, watchers);</span><br><span class="line">            &#125;</span><br><span class="line">            watchers.add(watcher);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.ZooKeeper.ZKWatchManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKWatchManager</span> <span class="keyword">implements</span> <span class="title">ClientWatchManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;Watcher&gt;&gt; dataWatches =</span><br><span class="line">        <span class="keyword">new</span> HashMap&lt;String, Set&lt;Watcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;Watcher&gt;&gt; existWatches =</span><br><span class="line">        <span class="keyword">new</span> HashMap&lt;String, Set&lt;Watcher&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;Watcher&gt;&gt; childWatches =</span><br><span class="line">        <span class="keyword">new</span> HashMap&lt;String, Set&lt;Watcher&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Watcher defaultWatcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>register</code> 方法中，客户端会将之前暂时保存的 Watcher 对象转交给 <code>ZKWatchManager</code>，并最终保存到 <code>dataWatches</code> 中去。<code>ZKWatchManager.dataWatches</code> 是一个 <code>Map&lt;String, Set&lt;Watcher&gt;&gt;</code> 类型的数据结构，用于将数据节点的路径和 Watcher 对象进行一一映射后管理起来。</p><p>在 <code>Packet.createBB()</code> 中，ZooKeeper 只会将 <code>requestHeader</code> 和 <code>reqeust</code> 两个属性进行序列化，也就是说，尽管 <code>WatchResgistration</code> 被封装在了 <code>Packet</code> 中，但是并没有被序列化到底层字节数组中去，因此也就不会进行网络传输了。</p><h3 id="2-2-服务端处理-Watcher"><a href="#2-2-服务端处理-Watcher" class="headerlink" title="2.2 服务端处理 Watcher"></a>2.2 服务端处理 Watcher</h3><h4 id="2-2-1-服务端注册-Watcher"><a href="#2-2-1-服务端注册-Watcher" class="headerlink" title="2.2.1 服务端注册 Watcher"></a>2.2.1 服务端注册 Watcher</h4><p>服务端收到来自客户端的请求后，在 <code>org.apache.zookeeper.server.FinalRequestProcessor#processRequest</code> 中会判断当前请求是否需要注册 Watcher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> OpCode.getData: &#123;</span><br><span class="line">    lastOp = <span class="string">"GETD"</span>;</span><br><span class="line">    GetDataRequest getDataRequest = <span class="keyword">new</span> GetDataRequest();</span><br><span class="line">    ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);</span><br><span class="line">    DataNode n = zks.getZKDatabase().getNode(getDataRequest.getPath());</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException();</span><br><span class="line">    &#125;</span><br><span class="line">    PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, request.authInfo);</span><br><span class="line">    Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">    <span class="keyword">byte</span> b[] = zks.getZKDatabase().getData(getDataRequest.getPath(), stat, getDataRequest.getWatch() ? cnxn : <span class="keyword">null</span>);</span><br><span class="line">    rsp = <span class="keyword">new</span> GetDataResponse(b, stat);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 <code>getData</code> 请求的处理逻辑中，我们可以看到，当 <code>getDataRequest.getWatch()</code> 为 true 的时候，ZooKeeper 就认为当前客户端请求需要进行 Watcher 注册，于是就会将当前的 <code>ServerCnxn</code> 对象作为一个 Watcher 连同数据节点路径传入 <code>getData</code> 方法中去。注意到，抽象类 <code>ServerCnxn</code> 实现了 <code>Watcher</code> 接口。</p><p>数据节点的节点路径和 <code>ServerCnxn</code> 最终会被存储在 <code>WatcherManager</code> 的 <code>watchTable</code> 和 <code>watch2Paths</code> 中。<code>WatchManager</code> 是 ZooKeeper 服务端 Watcher 的管理者，其内部管理的 <code>watchTable</code> 和 <code>watch2Pashs</code> 两个存储结构，分别从两个维度对 Watcher 进行存储。</p><ul><li><code>watchTable</code> 是从数据节点路径的粒度来托管 Watcher。</li><li><code>watch2Paths</code> 是从 Watcher 的粒度来控制事件触发需要触发的数据节点。</li></ul><p><code>org.apache.zookeeper.server.WatchManager#addWatch</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addWatch</span><span class="params">(String path, Watcher watcher)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;Watcher&gt; list = watchTable.get(path);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// don't waste memory if there are few watches on a node</span></span><br><span class="line">        <span class="comment">// rehash when the 4th entry is added, doubling size thereafter</span></span><br><span class="line">        <span class="comment">// seems like a good compromise</span></span><br><span class="line">        list = <span class="keyword">new</span> HashSet&lt;Watcher&gt;(<span class="number">4</span>);</span><br><span class="line">        watchTable.put(path, list);</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(watcher);</span><br><span class="line"></span><br><span class="line">    HashSet&lt;String&gt; paths = watch2Paths.get(watcher);</span><br><span class="line">    <span class="keyword">if</span> (paths == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// cnxns typically have many watches, so use default cap here</span></span><br><span class="line">        paths = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        watch2Paths.put(watcher, paths);</span><br><span class="line">    &#125;</span><br><span class="line">    paths.add(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-Watcher-触发"><a href="#2-2-2-Watcher-触发" class="headerlink" title="2.2.2 Watcher 触发"></a>2.2.2 Watcher 触发</h4><p><code>org.apache.zookeeper.server.DataTree#setData</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stat <span class="title">setData</span><span class="params">(String path, <span class="keyword">byte</span> data[], <span class="keyword">int</span> version, <span class="keyword">long</span> zxid,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">long</span> time)</span> <span class="keyword">throws</span> KeeperException.NoNodeException </span>&#123;</span><br><span class="line">    Stat s = <span class="keyword">new</span> Stat();</span><br><span class="line">    DataNode n = nodes.get(path);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span> lastdata[] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (n) &#123;</span><br><span class="line">        lastdata = n.data;</span><br><span class="line">        n.data = data;</span><br><span class="line">        n.stat.setMtime(time);</span><br><span class="line">        n.stat.setMzxid(zxid);</span><br><span class="line">        n.stat.setVersion(version);</span><br><span class="line">        n.copyStat(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// now update if the path is in a quota subtree.</span></span><br><span class="line">    String lastPrefix;</span><br><span class="line">    <span class="keyword">if</span>((lastPrefix = getMaxPrefixWithQuota(path)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.updateBytes(lastPrefix, (data == <span class="keyword">null</span> ? <span class="number">0</span> : data.length)</span><br><span class="line">          - (lastdata == <span class="keyword">null</span> ? <span class="number">0</span> : lastdata.length));</span><br><span class="line">    &#125;</span><br><span class="line">    dataWatches.triggerWatch(path, EventType.NodeDataChanged);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对指定节点进行数据更新后，通过调用 <code>org.apache.zookeeper.server.WatchManager#triggerWatch</code>方法来触发相关的事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Watcher&gt; <span class="title">triggerWatch</span><span class="params">(String path, EventType type, Set&lt;Watcher&gt; supress)</span> </span>&#123;</span><br><span class="line">    WatchedEvent e = <span class="keyword">new</span> WatchedEvent(type, KeeperState.SyncConnected, path);</span><br><span class="line">    HashSet&lt;Watcher&gt; watchers;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        watchers = watchTable.remove(path);</span><br><span class="line">        <span class="keyword">if</span> (watchers == <span class="keyword">null</span> || watchers.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Watcher w : watchers) &#123;</span><br><span class="line">            HashSet&lt;String&gt; paths = watch2Paths.get(w);</span><br><span class="line">            <span class="keyword">if</span> (paths != <span class="keyword">null</span>) &#123;</span><br><span class="line">                paths.remove(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Watcher w : watchers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (supress != <span class="keyword">null</span> &amp;&amp; supress.contains(w)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        w.process(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> watchers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是 <code>dataWatches</code> 还是 <code>childWatches</code> 管理器，Watcher 的触发逻辑都是一致的，基本步骤如下。</p><ol><li><p>封装 <code>WatchedEvent</code>。</p><p>首先将通知状态（<code>KeeperState</code>）、事件类型（<code>EventType</code>）以及节点路径（<code>Path</code>）封装成一个 <code>WatchedEvent</code> 对象。</p></li><li><p>查询 Watcher。</p><p>根据数据节点的节点路径从 <code>watchTable</code> 中取出对应的 Watcher。如果没有找到 Watcher，说明没有任何客户端在该数据节点上注册过 Watcher，直接退出。而如果找到了这个 Watcher，会将其提取出来，同时会直接从 <code>watchTable</code> 和 <code>watch2Paths</code> 中将其删除——从这里我们也可以看出，Watcher 在服务端是一次性的，即触发一次就失效了。</p></li><li><p>调用 <code>process</code> 方法来触发 Watcher。</p><p>在这一步中，会逐个依次地调用从步骤2中找出的所有 Watcher 的 <code>process</code> 方法。这里的 <code>process</code> 方法，事实上就是 <code>ServerCnxn</code> 的对应方法：</p><p><code>org.apache.zookeeper.server.NIOServerCnxn#process</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">    ReplyHeader h = <span class="keyword">new</span> ReplyHeader(-<span class="number">1</span>, -<span class="number">1L</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Convert WatchedEvent to a type that can be sent over the wire</span></span><br><span class="line">    WatcherEvent e = event.getWrapper();</span><br><span class="line"></span><br><span class="line">    sendResponse(h, e, <span class="string">"notification"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>process</code> 方法中，主要逻辑如下。</p><ul><li>在请求头中标记 “-1”，表明当前是一个通知。</li><li>将 <code>WawtchedEvent</code> 包装成 <code>WatcherEvent</code>，以便进行网络传输序列化。</li><li>向客户端发送该通知。</li></ul></li></ol><h2 id="3-客户端回调-Watcher"><a href="#3-客户端回调-Watcher" class="headerlink" title="3. 客户端回调 Watcher"></a>3. 客户端回调 Watcher</h2><h3 id="3-1-SendThread-接收事件通知"><a href="#3-1-SendThread-接收事件通知" class="headerlink" title="3.1 SendThread 接收事件通知"></a>3.1 SendThread 接收事件通知</h3><p>对于一个来自服务端的响应，客户端都是由 <code>org.apache.zookeeper.ClientCnxn.SendThread#readResponse</code> 方法来统一进行处理的，如果响应头 <code>replyHdr</code> 中标识了 XID 为 -1，表明这是一个通知类型的响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (replyHdr.getXid() == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// -1 means notification</span></span><br><span class="line">    WatcherEvent event = <span class="keyword">new</span> WatcherEvent();</span><br><span class="line">    event.deserialize(bbia, <span class="string">"response"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert from a server path to a client path</span></span><br><span class="line">    <span class="keyword">if</span> (chrootPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String serverPath = event.getPath();</span><br><span class="line">        <span class="keyword">if</span>(serverPath.compareTo(chrootPath)==<span class="number">0</span>)</span><br><span class="line">            event.setPath(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (serverPath.length() &gt; chrootPath.length())</span><br><span class="line">            event.setPath(serverPath.substring(chrootPath.length()));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Got server path "</span> + event.getPath()</span><br><span class="line">        + <span class="string">" which is too short for chroot path "</span></span><br><span class="line">        + chrootPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    WatchedEvent we = <span class="keyword">new</span> WatchedEvent(event);</span><br><span class="line">    eventThread.queueEvent( we );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理过程大体上分为以下 4 个主要步骤：</p><ol><li><p>反序列化。</p><p>将字节流转换成 <code>WatcherEvent</code> 对象。</p></li><li><p>处理 chrootPath。</p><p>如果客户端设置了 chrootPath 属性，那么需要对服务端传过来的完整的节点路径进行 <code>chrootPath</code> 处理，生成客户端的一个相对节点路径。</p></li><li><p>还原 <code>WatchedEvent</code>。</p><p>将 <code>WatcherEvent</code> 对象转换成 <code>WatchedEvent</code>。</p></li><li><p>回调 Watcher。</p><p>将 <code>WatchedEvent</code> 对象交给 <code>EventThread</code> 线程，在下一个轮询周期中进行 Watcher 回调。</p></li></ol><h3 id="3-2-EventThread-处理事件通知"><a href="#3-2-EventThread-处理事件通知" class="headerlink" title="3.2 EventThread 处理事件通知"></a>3.2 EventThread 处理事件通知</h3><p><code>SendThread</code> 接收到服务端的通知事件后，会通过调用 <code>EventThread.queueEvent</code> 方法将事件传给 <code>EventThread</code> 线程，其逻辑如下：</p><p><code>org.apache.zookeeper.ClientCnxn.EventThread#queueEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueEvent</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.getType() == EventType.None</span><br><span class="line">            &amp;&amp; sessionState == event.getState()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sessionState = event.getState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// materialize the watchers based on the event</span></span><br><span class="line">    WatcherSetEventPair pair = <span class="keyword">new</span> WatcherSetEventPair(</span><br><span class="line">            watcher.materialize(event.getState(), event.getType(),event.getPath()), event);</span><br><span class="line">    <span class="comment">// queue the pair (watch set &amp; event) for later processing</span></span><br><span class="line">    waitingEvents.add(pair);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>queueEvent</code> 方法首先会根据该通知事件，从 <code>ZKWatchManager</code> 中取出所有相关的 Watcher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Watcher&gt; <span class="title">materialize</span><span class="params">(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String clientPath)</span> </span>&#123;</span><br><span class="line">        Set&lt;Watcher&gt; result = <span class="keyword">new</span> HashSet&lt;Watcher&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="comment">// ...            </span></span><br><span class="line">        <span class="keyword">case</span> NodeDataChanged:</span><br><span class="line">        <span class="keyword">case</span> NodeCreated:</span><br><span class="line">            <span class="keyword">synchronized</span> (dataWatches) &#123;</span><br><span class="line">                addTo(dataWatches.remove(clientPath), result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (existWatches) &#123;</span><br><span class="line">                addTo(existWatches.remove(clientPath), result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端在识别出事件类型 <code>EventType</code> 后，会从相应的 Watcher 存储（即 <code>dataWatches</code>，<code>existWatches</code> 或 <code>childWatches</code> 中的一个或多个）中去除对应的 Watcher。注意，此处使用的是 <code>remove</code> 接口，因此也表明了客户端的 Watcher 机制同样也是一次性的，即一旦被触发后，该 Watcher 就失效了。</p><p>获取到相关的所有 Watcher 后，会将其放入 <code>waitingEvents</code> 这个队列中去。<code>WaitingEvents</code> 是一个待处理 Watcher 队列，<code>EventThread</code> 的 <code>run</code> 方法会不断对该队列进行处理。<code>EventThread</code> 线程每次都会从 <code>waitingEvents</code> 队列中取出一个 Watcher，并进行串行同步处理。注意，此处 <code>processEvent</code> 方法中的 <code>Watcher</code> 才是之前客户端真正注册的 Watcher，调用其 <code>process</code> 方法就可以实现 Watcher 的回调了。</p><h2 id="4-自问自答"><a href="#4-自问自答" class="headerlink" title="4. 自问自答"></a>4. 自问自答</h2><h3 id="4-1-连接中断时，客户端如何处理？"><a href="#4-1-连接中断时，客户端如何处理？" class="headerlink" title="4.1 连接中断时，客户端如何处理？"></a>4.1 连接中断时，客户端如何处理？</h3><ol><li><p>客户端抛出 <code>EndOfStreamException</code> 异常，此时客户端状态还是 <code>CONNECTED</code>。</p></li><li><p><code>SendThread</code> 处理异常，清理连接，将当前所有请求置为失败，错误码是 <code>CONNECTIONLOSS</code>。</p><p><code>org.apache.zookeeper.ClientCnxn.SendThread#cleanup</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clientCnxnSocket.cleanup();</span><br><span class="line">    <span class="keyword">synchronized</span> (pendingQueue) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Packet p : pendingQueue) &#123;</span><br><span class="line">            conLossPacket(p);</span><br><span class="line">        &#125;</span><br><span class="line">        pendingQueue.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (outgoingQueue) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Packet p : outgoingQueue) &#123;</span><br><span class="line">            conLossPacket(p);</span><br><span class="line">        &#125;</span><br><span class="line">        outgoingQueue.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>org.apache.zookeeper.ClientCnxn#conLossPacket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">conLossPacket</span><span class="params">(Packet p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.replyHeader == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> AUTH_FAILED:</span><br><span class="line">        p.replyHeader.setErr(KeeperException.Code.AUTHFAILED.intValue());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CLOSED:</span><br><span class="line">        p.replyHeader.setErr(KeeperException.Code.SESSIONEXPIRED.intValue());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        p.replyHeader.setErr(KeeperException.Code.CONNECTIONLOSS.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">    finishPacket(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>None-Disconnected</code> 事件，发送给 <code>EventThread</code>。此时 ZooKeeper 客户端仍持有之前注册的所有 Watcher。</p></li></ol><h3 id="4-2-客户端如何在重连后重新向服务器注册-Watcher？"><a href="#4-2-客户端如何在重连后重新向服务器注册-Watcher？" class="headerlink" title="4.2 客户端如何在重连后重新向服务器注册 Watcher？"></a>4.2 客户端如何在重连后重新向服务器注册 Watcher？</h3><ol><li><p><code>SendThread</code> 选下一个服务器地址请求 TCP 连接。</p></li><li><p>连上之后发送 <code>ConnectRequest</code>，其中 <code>sessionid</code> 和 <code>password</code>是当前会话的数据。</p></li><li><p>假设客户端重试比较快，session 还没超时，则服务端返回连接成功的 <code>ConnectResponse</code> 。（反之若 session 过期，则校验失败，客户端会抛出 <code>SessionExpired</code> 异常并退出。</p></li><li><p>客户端收到相应，发送 <code>SyncConnected</code> 事件。</p></li><li><p>客户端发送 <code>SetWatches</code> 请求，重建 Watcher。这个包实际上是在 <code>SendThread</code> 调用 <code>org.apache.zookeeper.ClientCnxn.SendThread#primeConnection</code> 方法时，和 <code>ConnectRequest</code> 请求先后添加到发送队列中的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primeConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    isFirstConnect = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">long</span> sessId = (seenRwServerBefore) ? sessionId : <span class="number">0</span>;</span><br><span class="line">    ConnectRequest conReq = <span class="keyword">new</span> ConnectRequest(<span class="number">0</span>, lastZxid, sessionTimeout, sessId, sessionPasswd);</span><br><span class="line">    <span class="keyword">synchronized</span> (outgoingQueue) &#123;</span><br><span class="line">        <span class="comment">// We add backwards since we are pushing into the front</span></span><br><span class="line">        <span class="comment">// Only send if there's a pending watch</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> here we have the only remaining use of zooKeeper in</span></span><br><span class="line">        <span class="comment">// this class. It's to be eliminated!</span></span><br><span class="line">        <span class="keyword">if</span> (!disableAutoWatchReset) &#123;</span><br><span class="line">            List&lt;String&gt; dataWatches = zooKeeper.getDataWatches();</span><br><span class="line">            List&lt;String&gt; existWatches = zooKeeper.getExistWatches();</span><br><span class="line">            List&lt;String&gt; childWatches = zooKeeper.getChildWatches();</span><br><span class="line">            <span class="keyword">if</span> (!dataWatches.isEmpty() || !existWatches.isEmpty() || !childWatches.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">                Iterator&lt;String&gt; dataWatchesIter = prependChroot(dataWatches).iterator();</span><br><span class="line">                Iterator&lt;String&gt; existWatchesIter = prependChroot(existWatches).iterator();</span><br><span class="line">                Iterator&lt;String&gt; childWatchesIter = prependChroot(childWatches).iterator();</span><br><span class="line">                <span class="keyword">long</span> setWatchesLastZxid = lastZxid;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (dataWatchesIter.hasNext() || existWatchesIter.hasNext() || childWatchesIter.hasNext()) &#123;</span><br><span class="line">                    List&lt;String&gt; dataWatchesBatch = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                    List&lt;String&gt; existWatchesBatch = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                    List&lt;String&gt; childWatchesBatch = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                    <span class="keyword">int</span> batchLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Note, we may exceed our max length by a bit when we add the last</span></span><br><span class="line">                    <span class="comment">// watch in the batch. This isn't ideal, but it makes the code simpler.</span></span><br><span class="line">                    <span class="keyword">while</span> (batchLength &lt; SET_WATCHES_MAX_LENGTH) &#123;</span><br><span class="line">                        <span class="keyword">final</span> String watch;</span><br><span class="line">                        <span class="keyword">if</span> (dataWatchesIter.hasNext()) &#123;</span><br><span class="line">                            watch = dataWatchesIter.next();</span><br><span class="line">                            dataWatchesBatch.add(watch);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (existWatchesIter.hasNext()) &#123;</span><br><span class="line">                            watch = existWatchesIter.next();</span><br><span class="line">                            existWatchesBatch.add(watch);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childWatchesIter.hasNext()) &#123;</span><br><span class="line">                            watch = childWatchesIter.next();</span><br><span class="line">                            childWatchesBatch.add(watch);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        batchLength += watch.length();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    SetWatches sw = <span class="keyword">new</span> SetWatches(setWatchesLastZxid,</span><br><span class="line">                            dataWatchesBatch,</span><br><span class="line">                            existWatchesBatch,</span><br><span class="line">                            childWatchesBatch);</span><br><span class="line">                    RequestHeader h = <span class="keyword">new</span> RequestHeader();</span><br><span class="line">                    h.setType(ZooDefs.OpCode.setWatches);</span><br><span class="line">                    h.setXid(-<span class="number">8</span>);</span><br><span class="line">                    Packet packet = <span class="keyword">new</span> Packet(h, <span class="keyword">new</span> ReplyHeader(), sw, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    outgoingQueue.addFirst(packet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AuthData id : authInfo) &#123;</span><br><span class="line">            outgoingQueue.addFirst(<span class="keyword">new</span> Packet(<span class="keyword">new</span> RequestHeader(-<span class="number">4</span>,</span><br><span class="line">                    OpCode.auth), <span class="keyword">null</span>, <span class="keyword">new</span> AuthPacket(<span class="number">0</span>, id.scheme,</span><br><span class="line">                    id.data), <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        outgoingQueue.addFirst(<span class="keyword">new</span> Packet(<span class="keyword">null</span>, <span class="keyword">null</span>, conReq, <span class="keyword">null</span>, <span class="keyword">null</span>, readOnly));</span><br><span class="line">    &#125;</span><br><span class="line">    clientCnxnSocket.enableReadWriteOnly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务端处理 <code>SetWatches</code> 请求。</p></li></ol>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《从 Paxos 到 ZooKeeper：分布式一致性原理与实践》：序列化与协议</title>
      <link href="/2017/12/06/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8D%8F%E8%AE%AE/"/>
      <url>/2017/12/06/%E3%80%8A%E4%BB%8E%20Paxos%20%E5%88%B0%20ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="1-使用-Jute-进行序列化"><a href="#1-使用-Jute-进行序列化" class="headerlink" title="1. 使用 Jute 进行序列化"></a>1. 使用 Jute 进行序列化</h2><p>使用 Jute 来对对象进行序列化和反序列化，大体可以分为 4 步：</p><ol><li>实体类需要实现 <code>Record</code> 接口的 <code>serialize</code> 和 <code>deserialize</code> 方法。</li><li>构建一个序列化器 <code>ByteOutputArchive</code>。</li><li>调用实体类的 <code>serialize</code> 方法，将对象序列化到指定 tag 中去。</li><li>调用实体类的 <code>deserialize</code> 方法，从指定的 tag 中反序列化出数据内容。</li></ol><h2 id="2-深入-Jute"><a href="#2-深入-Jute" class="headerlink" title="2. 深入 Jute"></a>2. 深入 Jute</h2><h3 id="2-1-Record-接口"><a href="#2-1-Record-接口" class="headerlink" title="2.1 Record 接口"></a>2.1 Record 接口</h3><p>Jute 定义了自己独特的序列化格式 <code>Record</code>。</p><p><code>org.apache.jute.Record</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(OutputArchive archive, String tag)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deserialize</span><span class="params">(InputArchive archive, String tag)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有实体类通过实现 <code>Record</code> 接口的这两个方法，来定义自己将如何被序列化和反序列化。其中 <code>archive</code> 是底层真正的序列化器和反序列化器，并且每个 <code>archive</code> 中可以包含对多个对象的序列化和反序列化，因此两个接口方法中都标记了参数 <code>tag</code>，用于向序列化器和反序列化器标识对象自己的标记。</p><p><code>OutputArchive</code> 和 <code>InputArchive</code> 分别是 Jute 底层的序列化器和反序列化器接口定义。在最新版本的 Jute 中，分别有 <code>BinaryOutputArchive</code>/<code>BinaryInputArchive</code>、<code>CsvoutputArchive</code>/<code>CsvInputArchive</code> 和 <code>XmlOutputArchive</code>/<code>XmlInputArchive</code> 三种实现。无论哪种实现，都是基于 <code>OutputStream</code> 和 <code>InputStream</code> 进行操作。</p><h2 id="3-通信协议"><a href="#3-通信协议" class="headerlink" title="3. 通信协议"></a>3. 通信协议</h2><p>基于 TCP/IP 协议，ZooKeeper 实现了自己的通信协议来完成客户端与服务端、服务端与服务端之间的网络通信。ZooKeeper 通信协议整体上的设计非常简单，对于请求，主要包含请求头和请求体，而对于响应，则主要包含响应头和响应体。</p><h3 id="3-1-协议解析：请求部分"><a href="#3-1-协议解析：请求部分" class="headerlink" title="3.1 协议解析：请求部分"></a>3.1 协议解析：请求部分</h3><h4 id="3-1-1-请求头：RequestHeader"><a href="#3-1-1-请求头：RequestHeader" class="headerlink" title="3.1.1 请求头：RequestHeader"></a>3.1.1 请求头：RequestHeader</h4><p><code>org.apache.zookeeper.proto.RequestHeader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHeader</span> <span class="keyword">implements</span> <span class="title">Record</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> xid;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xid 用于记录客户端请求发起的先后序号，用来确保单个客户端请求的响应顺序。type 代表请求的操作类型，所有操作类型都被定义在类 <code>org.apache.zookeeper.ZooDefs.OpCode</code> 中。根据协议规定，除非是会话创建请求，其他所有的客户端请求中都会带上请求头。</p><h4 id="3-1-2-请求体：Request"><a href="#3-1-2-请求体：Request" class="headerlink" title="3.1.2 请求体：Request"></a>3.1.2 请求体：Request</h4><p>协议的请求体部分是指请求的主体内容部分，包含了请求的所有操作内容。不同的请求类型，其请求体部分的结构是不同的。</p><p><code>org.apache.zookeeper.proto.GetDataRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDataRequest</span> <span class="keyword">implements</span> <span class="title">Record</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String path;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> watch;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/12514722/34356711-12dbb0c6-ea7b-11e7-9142-0857caa65127.png" alt="image"></p><h3 id="3-2-协议解析：响应部分"><a href="#3-2-协议解析：响应部分" class="headerlink" title="3.2 协议解析：响应部分"></a>3.2 协议解析：响应部分</h3><h4 id="3-2-1-响应头：ReplyHeader"><a href="#3-2-1-响应头：ReplyHeader" class="headerlink" title="3.2.1 响应头：ReplyHeader"></a>3.2.1 响应头：ReplyHeader</h4><p><code>org.apache.zookeeper.proto.ReplyHeader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReplyHeader</span> <span class="keyword">implements</span> <span class="title">Record</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> xid;  </span><br><span class="line">    <span class="keyword">long</span> zxid;  </span><br><span class="line">    <span class="keyword">int</span> err;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xid 与请求头中的xid一致，zxid 表示 ZooKeeper 服务器上当前最新的事务 ID，err 则是一个错误码，当请求处理过程中出现异常情况时，会在这个错误码中标识出来，</p><h4 id="3-2-2-响应体：Response"><a href="#3-2-2-响应体：Response" class="headerlink" title="3.2.2 响应体：Response"></a>3.2.2 响应体：Response</h4><p>协议的响应体部分包含了响应的所有返回数据，不同的响应类型，其响应体部分的结构是不同的。</p><p><code>org.apache.zookeeper.proto.GetDataResponse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetDataResponse</span> <span class="keyword">implements</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> org.apache.zookeeper.data.Stat stat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/12514722/34356771-d2132276-ea7b-11e7-8793-d1ccde42ec79.png" alt="image"></p>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：慢查询日志和监视器》</title>
      <link href="/2017/10/22/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E5%92%8C%E7%9B%91%E8%A7%86%E5%99%A8%E3%80%8B/"/>
      <url>/2017/10/22/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E5%92%8C%E7%9B%91%E8%A7%86%E5%99%A8%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-慢查询日志"><a href="#1-慢查询日志" class="headerlink" title="1. 慢查询日志"></a>1. 慢查询日志</h2><p>Redis 的慢查询日志功能用于记录执行时间超过给定时长的命令请求，用户可以通过这个功能产生的日志来监视和优化查询速度。</p><p>服务器配置有两个和慢查询日志相关的选项：</p><ul><li><p><code>slowlog-log-slower-than</code> 选项指定执行时间超过多少微秒（<code>1</code> 秒等于 <code>1,000,000</code> 微秒）的命令请求会被记录到日志上。</p></li><li><p><code>slowlog-max-len</code> 选项指定服务器最多保存多少条慢查询日志。</p><p>服务器使用先进先出的方式保存多条慢查询日志：当服务器储存的慢查询日志数量等于 <code>slowlog-max-len</code> 选项的值时，服务器在添加一条新的慢查询日志之前，会先将最旧的一条慢查询日志删除。</p></li></ul><a id="more"></a><h3 id="1-1-慢查询记录的保存"><a href="#1-1-慢查询记录的保存" class="headerlink" title="1.1 慢查询记录的保存"></a>1.1 慢查询记录的保存</h3><p>服务器状态中包含了几个和慢查询日志功能有关的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一条慢查询日志的 ID</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> slowlog_entry_id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存了所有慢查询日志的链表</span></span><br><span class="line">    <span class="built_in">list</span> *slowlog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器配置 slowlog-log-slower-than 选项的值</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> slowlog_log_slower_than;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器配置 slowlog-max-len 选项的值</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> slowlog_max_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>slowlog_entry_id</code> 属性的初始值为 <code>0</code> ，每当创建一条新的慢查询日志时，这个属性的值就会用作新日志的 <code>id</code> 值，之后程序会对这个属性的值增一。</p><p><code>slowlog</code> 链表保存了服务器中的所有慢查询日志， 链表中的每个节点都保存了一个 <code>slowlogEntry</code> 结构， 每个 <code>slowlogEntry</code> 结构代表一条慢查询日志：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slowlogEntry</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唯一标识符</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令执行时的时间，格式为 UNIX 时间戳</span></span><br><span class="line">    <span class="keyword">time_t</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行命令消耗的时间，以微秒为单位</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> duration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令与命令参数</span></span><br><span class="line">    robj **argv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令与命令参数的数量</span></span><br><span class="line">    <span class="keyword">int</span> argc;</span><br><span class="line"></span><br><span class="line">&#125; slowlogEntry;</span><br></pre></td></tr></table></figure><h3 id="1-2-慢查询日志的阅览和删除"><a href="#1-2-慢查询日志的阅览和删除" class="headerlink" title="1.2 慢查询日志的阅览和删除"></a>1.2 慢查询日志的阅览和删除</h3><p>可以使用 <code>SLOWLOG GET</code> 命令查看服务器所保存的慢查询日志，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def SLOWLOG_GET(number=None):</span><br><span class="line"></span><br><span class="line">    # 用户没有给定 number 参数</span><br><span class="line">    # 那么打印服务器包含的全部慢查询日志</span><br><span class="line">    if number is None:</span><br><span class="line">        number = SLOWLOG_LEN()</span><br><span class="line"></span><br><span class="line">    # 遍历服务器中的慢查询日志</span><br><span class="line">    for log in redisServer.slowlog:</span><br><span class="line"></span><br><span class="line">        if number &lt;= 0:</span><br><span class="line">            # 打印的日志数量已经足够，跳出循环</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            # 继续打印，将计数器的值减一</span><br><span class="line">            number -= 1</span><br><span class="line"></span><br><span class="line">        # 打印日志</span><br><span class="line">        printLog(log)</span><br></pre></td></tr></table></figure><p>查看日志数量的 <code>SLOWLOG LEN</code> 命令可以用以下伪代码来定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def SLOWLOG_LEN():</span><br><span class="line"></span><br><span class="line">    # slowlog 链表的长度就是慢查询日志的条目数量</span><br><span class="line">    return len(redisServer.slowlog)</span><br></pre></td></tr></table></figure><p>另外，用于清除所有慢查询日志的 <code>SLOWLOG RESET</code> 命令可以用以下伪代码来定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def SLOWLOG_RESET():</span><br><span class="line"></span><br><span class="line">    # 遍历服务器中的所有慢查询日志</span><br><span class="line">    for log in redisServer.slowlog:</span><br><span class="line"></span><br><span class="line">        # 删除日志</span><br><span class="line">        deleteLog(log)</span><br></pre></td></tr></table></figure><h3 id="1-3-添加新日志"><a href="#1-3-添加新日志" class="headerlink" title="1.3 添加新日志"></a>1.3 添加新日志</h3><p>在每次执行命令的之前和之后，程序都会记录微秒格式的当前 UNIX 时间戳，这两个时间戳之间的差就是服务器执行命令所耗费的时长，服务器会将这个时长作为参数之一传给 <code>slowlogPushEntryIfNeeded</code> 函数，而 <code>slowlogPushEntryIfNeeded</code> 函数则负责检查是否需要为这次执行的命令创建慢查询日志，以下伪代码展示了这一过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 记录执行命令前的时间</span><br><span class="line">before = unixtime_now_in_us()</span><br><span class="line"></span><br><span class="line"># 执行命令</span><br><span class="line">execute_command(argv, argc, client)</span><br><span class="line"></span><br><span class="line"># 记录执行命令后的时间</span><br><span class="line">after = unixtime_now_in_us()</span><br><span class="line"></span><br><span class="line"># 检查是否需要创建新的慢查询日志</span><br><span class="line">slowlogPushEntryIfNeeded(argv, argc, before-after)</span><br></pre></td></tr></table></figure><p><code>slowlogPushEntryIfNeeded</code> 函数的作用有两个：</p><ol><li>检查命令的执行时长是否超过 <code>slowlog-log-slower-than</code> 选项所设置的时间，如果是的话，就为命令创建一个新的日志，并将新日志添加到 <code>slowlog</code> 链表的表头。</li><li>检查慢查询日志的长度是否超过 <code>slowlog-max-len</code> 选项所设置的长度，如果是的话，那么将多出来的日志从 <code>slowlog</code> 链表中删除掉。</li></ol><p>以下是 <code>slowlogPushEntryIfNeeded</code> 函数的实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void slowlogPushEntryIfNeeded(robj **argv, int argc, long long duration) &#123;</span><br><span class="line"></span><br><span class="line">    // 慢查询功能未开启，直接返回</span><br><span class="line">    if (server.slowlog_log_slower_than &lt; 0) return;</span><br><span class="line"></span><br><span class="line">    // 如果执行时间超过服务器设置的上限，那么将命令添加到慢查询日志</span><br><span class="line">    if (duration &gt;= server.slowlog_log_slower_than)</span><br><span class="line">        // 新日志添加到链表表头</span><br><span class="line">        listAddNodeHead(server.slowlog,slowlogCreateEntry(argv,argc,duration));</span><br><span class="line"></span><br><span class="line">    // 如果日志数量过多，那么进行删除</span><br><span class="line">    while (listLength(server.slowlog) &gt; server.slowlog_max_len)</span><br><span class="line">        listDelNode(server.slowlog,listLast(server.slowlog));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>slowlogCreateEntry</code> 函数根据传入的参数，创建一个新的慢查询日志，并将 <code>redisServer.slowlog_entry_id</code> 的值增一。</p><h2 id="2-监视器"><a href="#2-监视器" class="headerlink" title="2. 监视器"></a>2. 监视器</h2><p>通过执行 <code>MONITOR</code> 命令，客户端可以将自己变为一个监视器，实时地接收并打印出服务器当前处理的命令请求的相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; MONITOR</span><br><span class="line">OK</span><br><span class="line">1378822099.421623 [0 127.0.0.1:56604] &quot;PING&quot;</span><br><span class="line">1378822105.089572 [0 127.0.0.1:56604] &quot;SET&quot; &quot;msg&quot; &quot;hello world&quot;</span><br><span class="line">1378822109.036925 [0 127.0.0.1:56604] &quot;SET&quot; &quot;number&quot; &quot;123&quot;</span><br><span class="line">1378822140.649496 [0 127.0.0.1:56604] &quot;SADD&quot; &quot;fruits&quot; &quot;Apple&quot; &quot;Banana&quot; &quot;Cherry&quot;</span><br><span class="line">1378822154.117160 [0 127.0.0.1:56604] &quot;EXPIRE&quot; &quot;msg&quot; &quot;10086&quot;</span><br><span class="line">1378822257.329412 [0 127.0.0.1:56604] &quot;KEYS&quot; &quot;*&quot;</span><br><span class="line">1378822258.690131 [0 127.0.0.1:56604] &quot;DBSIZE&quot;</span><br></pre></td></tr></table></figure><p>每当一个客户端向服务器发送一条命令请求时，服务器除了会处理这条命令请求之外，还会将关于这条命令请求的信息发送给所有监视器。</p><h3 id="2-1-成为监视器"><a href="#2-1-成为监视器" class="headerlink" title="2.1 成为监视器"></a>2.1 成为监视器</h3><p>发送 <code>MONITOR</code> 命令可以让一个普通客户端变为一个监视器，该命令的实现原理可以用以下伪代码来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def MONITOR():</span><br><span class="line"></span><br><span class="line">    # 打开客户端的监视器标志</span><br><span class="line">    client.flags |= REDIS_MONITOR</span><br><span class="line"></span><br><span class="line">    # 将客户端添加到服务器状态的 monitors 链表的末尾</span><br><span class="line">    server.monitors.append(client)</span><br><span class="line"></span><br><span class="line">    # 向客户端返回 OK</span><br><span class="line">    send_reply(&quot;OK&quot;)</span><br></pre></td></tr></table></figure><h3 id="2-2-向监视器发送命令信息"><a href="#2-2-向监视器发送命令信息" class="headerlink" title="2.2 向监视器发送命令信息"></a>2.2 向监视器发送命令信息</h3><p>服务器在每次处理命令请求之前，都会调用 <code>replicationFeedMonitors</code> 函数，由这个函数将被处理命令请求的相关信息发送给各个监视器。</p><p>以下是 <code>replicationFeedMonitors</code> 函数的伪代码定义，函数首先根据传入的参数创建信息，然后将信息发送给所有监视器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def replicationFeedMonitors(client, monitors, dbid, argv, argc):</span><br><span class="line"></span><br><span class="line">    # 根据执行命令的客户端、当前数据库的号码、命令参数、命令参数个数等参数</span><br><span class="line">    # 创建要发送给各个监视器的信息</span><br><span class="line">    msg = create_message(client, dbid, argv, argc)</span><br><span class="line"></span><br><span class="line">    # 遍历所有监视器</span><br><span class="line">    for monitor in monitors:</span><br><span class="line"></span><br><span class="line">        # 将信息发送给监视器</span><br><span class="line">        send_message(monitor, msg)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：客户端》</title>
      <link href="/2017/10/21/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%8B/"/>
      <url>/2017/10/21/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>Redis 服务器是典型的一对多服务器程序：一个服务器可以与多个客户端建立网络连接，每个客户端可以向服务器发送命令请求，而服务器则接收并处理客户端发送的命令请求，并向客户端返回命令回复。</p><a id="more"></a><p>通过使用由 I/O 多路复用技术实现的文件事件处理器，Redis 服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。</p><p>对于每个与服务器进行连接的客户端，服务器都为这些客户端建立了相应的 <code>redis.h/redisClient</code> 结构（客户端状态），这个结构保存了客户端当前的状态信息，以及执行相关功能时需要用到的数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* With multiplexing we need to take per-client state.</span></span><br><span class="line"><span class="comment"> * Clients are taken in a linked list. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> id;            <span class="comment">/* Client incremental unique ID. */</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    redisDb *db;</span><br><span class="line">    <span class="keyword">int</span> dictid;</span><br><span class="line">    robj *name;             <span class="comment">/* As set by CLIENT SETNAME */</span></span><br><span class="line">    sds querybuf;</span><br><span class="line">    <span class="keyword">size_t</span> querybuf_peak;   <span class="comment">/* Recent (100ms or more) peak of querybuf size */</span></span><br><span class="line">    <span class="keyword">int</span> argc;</span><br><span class="line">    robj **argv;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>, *<span class="title">lastcmd</span>;</span></span><br><span class="line">    <span class="keyword">int</span> reqtype;</span><br><span class="line">    <span class="keyword">int</span> multibulklen;       <span class="comment">/* number of multi bulk arguments left to read */</span></span><br><span class="line">    <span class="keyword">long</span> bulklen;           <span class="comment">/* length of bulk argument in multi bulk request */</span></span><br><span class="line">    <span class="built_in">list</span> *reply;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> reply_bytes; <span class="comment">/* Tot bytes of objects in reply list */</span></span><br><span class="line">    <span class="keyword">int</span> sentlen;            <span class="comment">/* Amount of bytes already sent in the current</span></span><br><span class="line"><span class="comment">                               buffer or object being sent. */</span></span><br><span class="line">    <span class="keyword">time_t</span> ctime;           <span class="comment">/* Client creation time */</span></span><br><span class="line">    <span class="keyword">time_t</span> lastinteraction; <span class="comment">/* time of the last interaction, used for timeout */</span></span><br><span class="line">    <span class="keyword">time_t</span> obuf_soft_limit_reached_time;</span><br><span class="line">    <span class="keyword">int</span> flags;              <span class="comment">/* REDIS_SLAVE | REDIS_MONITOR | REDIS_MULTI ... */</span></span><br><span class="line">    <span class="keyword">int</span> authenticated;      <span class="comment">/* when requirepass is non-NULL */</span></span><br><span class="line">    <span class="keyword">int</span> replstate;          <span class="comment">/* replication state if this is a slave */</span></span><br><span class="line">    <span class="keyword">int</span> repl_put_online_on_ack; <span class="comment">/* Install slave write handler on ACK. */</span></span><br><span class="line">    <span class="keyword">int</span> repldbfd;           <span class="comment">/* replication DB file descriptor */</span></span><br><span class="line">    <span class="keyword">off_t</span> repldboff;        <span class="comment">/* replication DB file offset */</span></span><br><span class="line">    <span class="keyword">off_t</span> repldbsize;       <span class="comment">/* replication DB file size */</span></span><br><span class="line">    sds replpreamble;       <span class="comment">/* replication DB preamble. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> reploff;      <span class="comment">/* replication offset if this is our master */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_ack_off; <span class="comment">/* replication ack offset, if this is a slave */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_ack_time;<span class="comment">/* replication ack time, if this is a slave */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> psync_initial_offset; <span class="comment">/* FULLRESYNC reply offset other slaves</span></span><br><span class="line"><span class="comment">                                       copying this slave output buffer</span></span><br><span class="line"><span class="comment">                                       should use. */</span></span><br><span class="line">    <span class="keyword">char</span> replrunid[REDIS_RUN_ID_SIZE+<span class="number">1</span>]; <span class="comment">/* master run id if this is a master */</span></span><br><span class="line">    <span class="keyword">int</span> slave_listening_port; <span class="comment">/* As configured with: SLAVECONF listening-port */</span></span><br><span class="line">    <span class="keyword">int</span> slave_capa;         <span class="comment">/* Slave capabilities: SLAVE_CAPA_* bitwise OR. */</span></span><br><span class="line">    multiState mstate;      <span class="comment">/* MULTI/EXEC state */</span></span><br><span class="line">    blockingState bpop;   <span class="comment">/* blocking state */</span></span><br><span class="line">    <span class="built_in">list</span> *watched_keys;     <span class="comment">/* Keys WATCHED for MULTI/EXEC CAS */</span></span><br><span class="line">    dict *pubsub_channels;  <span class="comment">/* channels a client is interested in (SUBSCRIBE) */</span></span><br><span class="line">    <span class="built_in">list</span> *pubsub_patterns;  <span class="comment">/* patterns a client is interested in (SUBSCRIBE) */</span></span><br><span class="line">    sds peerid;             <span class="comment">/* Cached peer ID. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Response buffer */</span></span><br><span class="line">    <span class="keyword">int</span> bufpos;</span><br><span class="line">    <span class="keyword">char</span> buf[REDIS_REPLY_CHUNK_BYTES];</span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>Redis 服务器状态结构的 <code>clients</code> 属性是一个链表，这个链表保存了所有与服务器连接的客户端的状态结构，对客户端执行批量操作，或者查找某个指定的客户端，都可以通过遍历 <code>clients</code> 链表来完成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个链表，保存了所有客户端状态</span></span><br><span class="line"><span class="built_in">list</span> *clients;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-客户端属性"><a href="#1-客户端属性" class="headerlink" title="1. 客户端属性"></a>1. 客户端属性</h2><h3 id="1-1-套接字描述符"><a href="#1-1-套接字描述符" class="headerlink" title="1.1 套接字描述符"></a>1.1 套接字描述符</h3><p>客户端状态的 <code>fd</code> 属性记录了客户端正在使用的套接字描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>根据客户端类型的不同，<code>fd</code> 属性的值可以是 <code>-1</code> 或者是大于 <code>-1</code> 的整数：</p><ul><li>伪客户端（fake client）的 <code>fd</code> 属性的值为 <code>-1</code> ：伪客户端处理的命令请求来源于 AOF 文件或者 Lua 脚本，而不是网络，所以这种客户端不需要套接字连接，自然也不需要记录套接字描述符。目前 Redis 服务器会在两个地方用到伪客户端，一个用于载入 AOF 文件并还原数据库状态，而另一个则用于执行 Lua 脚本中包含的 Redis 命令。</li><li>普通客户端的 <code>fd</code> 属性的值为大于 <code>-1</code> 的整数：普通客户端使用套接字来与服务器进行通讯，所以服务器会用 <code>fd</code> 属性来记录客户端套接字的描述符。因为合法的套接字描述符不能是 <code>-1</code> ，所以普通客户端的套接字描述符的值必然是大于 <code>-1</code> 的整数。</li></ul><p>执行 <code>CLIENT_LIST</code> 命令可以列出目前所有连接到服务器的普通客户端，命令输出中的 <code>fd</code> 域显示了服务器连接客户端所使用的套接字描述符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; CLIENT list</span><br><span class="line"></span><br><span class="line">addr=127.0.0.1:53428 fd=6 name= age=1242 idle=0 ...</span><br><span class="line">addr=127.0.0.1:53469 fd=7 name= age=4 idle=4 ...</span><br></pre></td></tr></table></figure><h3 id="1-2-名字"><a href="#1-2-名字" class="headerlink" title="1.2 名字"></a>1.2 名字</h3><p>在默认情况下，一个连接到服务器的客户端是没有名字的。使用 <code>CLIENT_SETNAME</code> 命令可以为客户端设置一个名字，让客户端的身份变得更清晰。</p><p>客户端的名字记录在客户端状态的 <code>name</code> 属性里面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    robj *name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>如果客户端没有为自己设置名字，那么相应客户端状态的 <code>name</code> 属性指向 <code>NULL</code> 指针；相反地，如果客户端为自己设置了名字，那么 <code>name</code> 属性将指向一个字符串对象，而该对象就保存着客户端的名字。</p><h3 id="1-3-标志"><a href="#1-3-标志" class="headerlink" title="1.3 标志"></a>1.3 标志</h3><p>客户端的标志属性 <code>flags</code> 记录了客户端的角色（role），以及客户端目前所处的状态：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p><code>flags</code> 属性的值可以是单个标志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flags = &lt;flag&gt;</span><br></pre></td></tr></table></figure><p>也可以是多个标志的二进制或，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flags = &lt;flag1&gt; | &lt;flag2&gt; | ...</span><br></pre></td></tr></table></figure><p>每个标志使用一个常量表示，一部分标志记录了客户端的角色：</p><ul><li>在主从服务器进行复制操作时，主服务器会成为从服务器的客户端，而从服务器也会成为主服务器的客户端。<code>REDIS_MASTER</code> 标志表示客户端代表的是一个主服务器，<code>REDIS_SLAVE</code> 标志表示客户端代表的是一个从服务器。</li><li><code>REDIS_PRE_PSYNC</code> 标志表示客户端代表的是一个版本低于 Redis 2.8 的从服务器，主服务器不能使用 <code>PSYNC</code> 命令与这个从服务器进行同步。这个标志只能在 <code>REDIS_SLAVE</code> 标志处于打开状态时使用。</li><li><code>REDIS_LUA_CLIENT</code> 标识表示客户端是专门用于处理 Lua 脚本里面包含的 Redis 命令的伪客户端。</li></ul><p>而另外一部分标志则记录了客户端目前所处的状态：</p><ul><li><code>REDIS_MONITOR</code> 标志表示客户端正在执行 <code>MONITOR</code> 命令。</li><li><code>REDIS_UNIX_SOCKET</code> 标志表示服务器使用 UNIX 套接字来连接客户端。</li><li><code>REDIS_BLOCKED</code> 标志表示客户端正在被 <code>BRPOP</code> 、<code>BLPOP</code> 等命令阻塞。</li><li><code>REDIS_UNBLOCKED</code> 标志表示客户端已经从 <code>REDIS_BLOCKED</code> 标志所表示的阻塞状态中脱离出来， 不再阻塞。 <code>REDIS_UNBLOCKED</code> 标志只能在 <code>REDIS_BLOCKED</code> 标志已经打开的情况下使用。</li><li><code>REDIS_MULTI</code> 标志表示客户端正在执行事务。</li><li><code>REDIS_DIRTY_CAS</code> 标志表示事务使用 <code>WATCH</code> 命令监视的数据库键已经被修改， <code>REDIS_DIRTY_EXEC</code> 标志表示事务在命令入队时出现了错误，以上两个标志都表示事务的安全性已经被破坏，只要这两个标记中的任意一个被打开，<code>EXEC</code> 命令必然会执行失败。这两个标志只能在客户端打开了 <code>REDIS_MULTI</code> 标志的情况下使用。</li><li><code>REDIS_CLOSE_ASAP</code> 标志表示客户端的输出缓冲区大小超出了服务器允许的范围，服务器会在下一次执行 <code>serverCron</code> 函数时关闭这个客户端，以免服务器的稳定性受到这个客户端影响。积存在输出缓冲区中的所有内容会直接被释放，不会返回给客户端。</li><li><code>REDIS_CLOSE_AFTER_REPLY</code> 标志表示有用户对这个客户端执行了 <code>CLIENT_KILL</code> 命令，或者客户端发送给服务器的命令请求中包含了错误的协议内容。服务器会将客户端积存在输出缓冲区中的所有内容发送给客户端，然后关闭客户端。</li><li><code>REDIS_ASKING</code> 标志表示客户端向集群节点（运行在集群模式下的服务器）发送了 <code>ASKING</code> 命令。</li><li><code>REDIS_FORCE_AOF</code> 标志强制服务器将当前执行的命令写入到 AOF 文件里面，<code>REDIS_FORCE_REPL</code> 标志强制主服务器将当前执行的命令复制给所有从服务器。执行 <code>PUBSUB</code> 命令会使客户端打开 <code>REDIS_FORCE_AOF</code> 标志，执行 <code>SCRIPT_LOAD</code> 命令会使客户端打开 <code>REDIS_FORCE_AOF</code> 标志和 <code>REDIS_FORCE_REPL</code> 标志。</li><li>在主从服务器进行命令传播期间，从服务器需要向主服务器发送 <code>REPLICATION ACK</code> 命令，在发送这个命令之前，从服务器必须打开主服务器对应的客户端的 <code>REDIS_MASTER_FORCE_REPLY</code> 标志，否则发送操作会被拒绝执行。</li></ul><p>以上提到的所有标志都定义在 <code>redis.h</code> 文件里面。</p><p>通常情况下，Redis 只会将那些对数据库进行了修改的命令写入到 AOF 文件，并复制到各个从服务器：如果一个命令没有对数据库进行任何修改，那么它就会被认为是只读命令，这个命令不会被写入到 AOF 文件，也不会被复制到从服务器。</p><p>以上规则适用于绝大部分 Redis 命令，但 <code>PUBSUB</code> 命令和 <code>SCRIPT_LOAD</code> 命令是其中的例外。</p><p><code>PUBSUB</code> 命令虽然没有修改数据库，但 <code>PUBSUB</code> 命令向频道的所有订阅者发送消息这一行为带有副作用，接收到消息的所有客户端的状态都会因为这个命令而改变。因此，服务器需要使用 <code>REDIS_FORCE_AOF</code> 标志，强制将这个命令写入 AOF 文件，这样在将来载入 AOF 文件时，服务器就可以再次执行相同的 <code>PUBSUB</code> 命令，并产生相同的副作用。</p><p><code>SCRIPT_LOAD</code> 命令的情况与 <code>PUBSUB</code> 命令类似：虽然 <code>SCRIPT_LOAD</code> 命令没有修改数据库，但它修改了服务器状态，所以它是一个带有副作用的命令，服务器需要使用 <code>REDIS_FORCE_AOF</code> 标志，强制将这个命令写入 AOF 文件，使得将来在载入 AOF 文件时，服务器可以产生相同的副作用。</p><p>另外，为了让主服务器和从服务器都可以正确地载入 <code>SCRIPT_LOAD</code> 命令指定的脚本，服务器需要使用 <code>REDIS_FORCE_REPL</code> 标志，强制将 <code>SCRIPT_LOAD</code> 命令复制给所有从服务器。</p><h3 id="1-4-输入缓冲区"><a href="#1-4-输入缓冲区" class="headerlink" title="1.4 输入缓冲区"></a>1.4 输入缓冲区</h3><p>客户端状态的输入缓冲区用于保存客户端发送的命令请求：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    sds querybuf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>输入缓冲区的大小会根据输入内容动态地缩小或者扩大，但它的最大大小不能超过 1 GB ，否则服务器将关闭这个客户端。</p><h3 id="1-5-命令与命令参数"><a href="#1-5-命令与命令参数" class="headerlink" title="1.5 命令与命令参数"></a>1.5 命令与命令参数</h3><p>在服务器将客户端发送的命令请求保存到客户端状态的 <code>querybuf</code> 属性之后， 服务器将对命令请求的内容进行分析，并将得出的命令参数以及命令参数的个数分别保存到客户端状态的 <code>argv</code> 属性和 <code>argc</code> 属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    robj **argv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> argc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p><code>argv</code> 属性是一个数组，数组中的每个项都是一个字符串对象：其中 <code>argv[0]</code> 是要执行的命令，而之后的其他项则是传给命令的参数。</p><p><code>argc</code> 属性则负责记录 <code>argv</code> 数组的长度。</p><h3 id="1-6-命令的实现函数"><a href="#1-6-命令的实现函数" class="headerlink" title="1.6 命令的实现函数"></a>1.6 命令的实现函数</h3><p>当服务器从协议内容中分析并得出 <code>argv</code> 属性和 <code>argc</code> 属性的值之后，服务器将根据项 <code>argv[0]</code> 的值， 在命令表中查找命令所对应的命令实现函数。</p><p>命令表是一个字典，字典的键是一个 SDS 结构，保存了命令的名字，字典的值是命令所对应的 <code>redisCommand</code> 结构，这个结构保存了命令的实现函数、命令的标志、命令应该给定的参数个数、命令的总执行次数和总消耗时长等统计信息。</p><p>当程序在命令表中成功找到 <code>argv[0]</code> 所对应的 <code>redisCommand</code> 结构时，它会将客户端状态的 <code>cmd</code> 指针指向这个结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>之后，服务器就可以使用 <code>cmd</code> 属性所指向的 <code>redisCommand</code> 结构，以及 <code>argv</code> 、<code>argc</code> 属性中保存的命令参数信息，调用命令实现函数，执行客户端指定的命令。</p><p>针对命令表的查找操作不区分输入字母的大小写。</p><h3 id="1-7-输出缓冲区"><a href="#1-7-输出缓冲区" class="headerlink" title="1.7 输出缓冲区"></a>1.7 输出缓冲区</h3><p>执行命令所得的命令回复会被保存在客户端状态的输出缓冲区里面，每个客户端都有两个输出缓冲区可用，一个缓冲区的大小是固定的，另一个缓冲区的大小是可变的：</p><ul><li>固定大小的缓冲区用于保存那些长度比较小的回复，比如 <code>OK</code> 、简短的字符串值、整数值、错误回复，等等。</li><li>可变大小的缓冲区用于保存那些长度比较大的回复，比如一个非常长的字符串值，一个由很多项组成的列表，一个包含了很多元素的集合，等等。</li></ul><p>客户端的固定大小缓冲区由 <code>buf</code> 和 <code>bufpos</code> 两个属性组成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[REDIS_REPLY_CHUNK_BYTES];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bufpos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p><code>buf</code> 是一个大小为 <code>REDIS_REPLY_CHUNK_BYTES</code> 字节的字节数组，而 <code>bufpos</code> 属性则记录了 <code>buf</code> 数组目前已使用的字节数量。</p><p><code>REDIS_REPLY_CHUNK_BYTES</code> 常量目前的默认值为 16*1024 ，也即是说，<code>buf</code> 数组的默认大小为 16 KB 。</p><p>当 <code>buf</code> 数组的空间已经用完，或者回复因为太大而没办法放进 <code>buf</code> 数组里面时，服务器就会开始使用可变大小缓冲区。</p><p>可变大小缓冲区由 <code>reply</code> 链表和一个或多个字符串对象组成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> *reply;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>通过使用链表来连接多个字符串对象，服务器可以为客户端保存一个非常长的命令回复，而不必受到固定大小缓冲区 16 KB 大小的限制。</p><h3 id="1-8-身份验证"><a href="#1-8-身份验证" class="headerlink" title="1.8 身份验证"></a>1.8 身份验证</h3><p>客户端状态的 <code>authenticated</code> 属性用于记录客户端是否通过了身份验证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> authenticated;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>如果 <code>authenticated</code> 的值为 0 ，那么表示客户端未通过身份验证；如果 <code>authenticated</code> 的值为 1， 那么表示客户端已经通过了身份验证。</p><p>当客户端 <code>authenticated</code> 属性的值为 0 时，除了 <code>AUTH</code> 命令之外，客户端发送的所有其他命令都会被服务器拒绝执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; PING</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line">redis&gt; SET msg &quot;hello world&quot;</span><br><span class="line">(error) NOAUTH Authentication required.</span><br></pre></td></tr></table></figure><p>当客户端通过 <code>AUTH</code> 命令成功进行身份验证之后， 客户端状态 <code>authenticated</code> 属性的值就会从 0 变为 1，这时客户端就可以像往常一样向服务器发送命令请求了。</p><p><code>authenticated</code> 属性仅在服务器启用了身份验证功能时使用：如果服务器没有启用身份验证功能的话， 那么即使 <code>authenticated</code> 属性的值为 0 （这是默认值），服务器也不会拒绝执行客户端发送的命令请求。</p><h3 id="1-9-时间"><a href="#1-9-时间" class="headerlink" title="1.9 时间"></a>1.9 时间</h3><p>最后，客户端还有几个和时间有关的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> ctime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> lastinteraction;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> obuf_soft_limit_reached_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p><code>ctime</code> 属性记录了创建客户端的时间，这个时间可以用来计算客户端与服务器已经连接了多少秒—— <code>CLIENT_LIST</code> 命令的 <code>age</code> 域记录了这个秒数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; CLIENT list</span><br><span class="line"></span><br><span class="line">addr=127.0.0.1:53428 ... age=1242 ...</span><br></pre></td></tr></table></figure><p><code>lastinteraction</code> 属性记录了客户端与服务器最后一次进行互动（interaction）的时间，这里的互动可以是客户端向服务器发送命令请求，也可以是服务器向客户端发送命令回复。</p><p><code>lastinteraction</code> 属性可以用来计算客户端的空转（idle）时间，也即是，距离客户端与服务器最后一次进行互动以来，已经过去了多少秒—— <code>CLIENT_LIST</code> 命令的 <code>idle</code> 域记录了这个秒数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; CLIENT list</span><br><span class="line"></span><br><span class="line">addr=127.0.0.1:53428 ... idle=12 ...</span><br></pre></td></tr></table></figure><p><code>obuf_soft_limit_reached_time</code> 属性记录了输出缓冲区第一次到达软性限制（soft limit）的时间。</p><h2 id="2-客户端的创建与关闭"><a href="#2-客户端的创建与关闭" class="headerlink" title="2. 客户端的创建与关闭"></a>2. 客户端的创建与关闭</h2><h3 id="2-1-创建普通客户端"><a href="#2-1-创建普通客户端" class="headerlink" title="2.1 创建普通客户端"></a>2.1 创建普通客户端</h3><p>如果客户端是通过网络连接与服务器进行连接的普通客户端，那么在客户端使用 <code>connect</code> 函数连接到服务器时，服务器就会调用连接事件处理器，为客户端创建相应的客户端状态，并将这个新的客户端状态添加到服务器状态结构的 <code>clients</code> 链表的末尾。</p><h3 id="2-2-关闭普通客户端"><a href="#2-2-关闭普通客户端" class="headerlink" title="2.2 关闭普通客户端"></a>2.2 关闭普通客户端</h3><p>一个普通客户端可以因为多种原因而被关闭：</p><ul><li>如果客户端进程退出或者被杀死，那么客户端与服务器之间的网络连接将被关闭，从而造成客户端被关闭。</li><li>如果客户端向服务器发送了带有不符合协议格式的命令请求，那么这个客户端也会被服务器关闭。</li><li>如果客户端成为了 <code>CLIENTKILL</code> 命令的目标，那么它也会被关闭。</li><li>如果用户为服务器设置了 <code>timeout</code> 配置选项，那么当客户端的空转时间超过 <code>timeout</code> 选项设置的值时，客户端将被关闭。不过 <code>timeout</code> 选项有一些例外情况：如果客户端是主服务器（打开了 <code>REDIS_MASTER</code>标志），从服务器（打开了 <code>REDIS_SLAVE</code>标志），正在被 <code>BLPOP</code> 等命令阻塞（打开了 <code>REDIS_BLOCKED</code> 标志），或者正在执行 <code>SUBSCRIBE</code>，<code>PSUBSCRIBE</code> 等订阅命令，那么即使客户端的空转时间超过了 <code>timeout</code> 选项的值，客户端也不会被服务器关闭。</li><li>如果客户端发送的命令请求的大小超过了输入缓冲区的限制大小（默认为 1 GB），那么这个客户端会被服务器关闭。</li><li>如果要发送给客户端的命令回复的大小超过了输出缓冲区的限制大小，那么这个客户端会被服务器关闭。</li></ul><p>为了避免客户端的回复过大，占用过多的服务器资源，服务器会时刻检查客户端的输出缓存区的大小，并在缓存区的大小超出范围时，执行相应的限制操作。</p><p>服务器使用两种模式来限制客户端的输出缓冲区的大小：</p><ul><li>硬性限制（hard limit）：如果输出缓冲区的大小超过了硬性限制所设置的大小，那么服务器立即关闭客户端。</li><li>软性限制（soft limit）：如果输出缓冲区的大小超过了软性限制所设置的大小，但还没超过硬性限制，那么服务器将使用客户端状态结构的 <code>obuf_soft_limit_reached_time</code> 属性记录下客户端到达软性限制的起始时间；之后服务器会继续监视客户端，如果输出缓冲区的大小一直超出软性限制，并且持续时间超过服务器设定的时长，那么服务器将关闭客户端；相反地，如果输出缓冲区的大小在指定时间之内，不再超出软性限制，那么客户端就不会被关闭，并且 <code>obuf_soft_limit_reached_time</code> 属性的值也会被清零。</li></ul><p>使用 <code>client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</code>，可以为普通客户端、从服务器客户端、发布/订阅客户端分别设置不同的软性限制和硬性限制。</p><h3 id="2-3-Lua-脚本的伪客户端"><a href="#2-3-Lua-脚本的伪客户端" class="headerlink" title="2.3 Lua 脚本的伪客户端"></a>2.3 Lua 脚本的伪客户端</h3><p>服务器会在初始化时创建负责执行 Lua 脚本中包含的 Redis 命令的伪客户端，并将这个伪客户端关联在服务器状态结构的 <code>lua_client</code> 属性中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">redisClient *lua_client;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lua_client 伪客户端在服务器运行的整个生命期中会一直存在，只有服务器被关闭时，这个客户端才会被关闭。</p><h3 id="2-4-AOF-文件的伪客户端"><a href="#2-4-AOF-文件的伪客户端" class="headerlink" title="2.4 AOF 文件的伪客户端"></a>2.4 AOF 文件的伪客户端</h3><p>服务器在载入 AOF 文件时，会创建用于执行 AOF 文件包含的 Redis 命令的伪客户端，并在载入完成之后，关闭这个伪客户端。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：Sentinel》</title>
      <link href="/2017/10/20/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9ASentinel%E3%80%8B/"/>
      <url>/2017/10/20/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9ASentinel%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>Sentinel 是 Redis 的高可用性解决方案：由一个或多个 Sentinel 实例组成的 Sentinel 系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。</p><a id="more"></a><h2 id="1-启动并初始化-Sentinel"><a href="#1-启动并初始化-Sentinel" class="headerlink" title="1. 启动并初始化 Sentinel"></a>1. 启动并初始化 Sentinel</h2><p>启动一个 Sentinel 可以使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-sentinel /path/to/your/sentinel.conf</span><br></pre></td></tr></table></figure><p>或者命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /path/to/your/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure><p>这两个命令的效果完全相同。</p><p>当一个 Sentinel 启动时，它需要执行以下步骤：</p><ol><li>初始化服务器。</li><li>将普通 Redis 服务器使用的代码替换成 Sentinel 专用代码。</li><li>初始化 Sentinel 状态。</li><li>根据给定的配置文件，初始化 Sentinel 的监视主服务器列表。</li><li>创建连向主服务器的网络连接。</li></ol><h3 id="1-1-初始化服务器"><a href="#1-1-初始化服务器" class="headerlink" title="1.1 初始化服务器"></a>1.1 初始化服务器</h3><p>Sentinel 模式下 Redis 服务器主要功能的使用情况</p><table><thead><tr><th>功能</th><th>使用情况</th></tr></thead><tbody><tr><td>数据库和键值对方面的命令，比如 <code>SET</code>、<code>DEL</code>、<code>FLUSHDB</code>。</td><td>不使用。</td></tr><tr><td>事务命令，比如 <code>MULTI</code> 和 <code>WATCH</code>。</td><td>不使用。</td></tr><tr><td>脚本命令，比如 <code>EVAL</code>。</td><td>不使用。</td></tr><tr><td>RDB 持久化命令，比如 <code>SAVE</code> 和 <code>BGSAVE</code>。</td><td>不使用。</td></tr><tr><td>AOF 持久化命令，比如 <code>BGREWRITEAOF</code>。</td><td>不使用。</td></tr><tr><td>复制命令，比如 <code>SLAVEOF</code>。</td><td>Sentinel 内部可以使用，但客户端不可以使用。</td></tr><tr><td>发布与订阅命令，比如 <code>PUBLISH</code> 和 <code>SUBSCRIBE</code>。</td><td><code>SUBSCRIBE</code>、<code>PSUBSCRIBE</code>、<code>UNSUBSCRIBE</code>、<code>PUNSUBSCRIBE</code> 四个命令在 Sentinel 内部和客户端都可以使用，但 <code>PUBLISH</code> 命令只能在 Sentinel 内部使用。</td></tr><tr><td>文件事件处理器（负责发送命令请求、处理命令回复）。</td><td>Sentinel 内部使用，但关联的文件事件处理器和普通 Redis 服务器不同。</td></tr><tr><td>时间事件处理器（负责执行 <code>serverCron</code> 函数）。</td><td>Sentinel 内部使用，时间事件的处理器仍然是 <code>serverCron</code> 函数，<code>serverCron</code> 函数会调用 <code>sentinel.c/sentinelTimer</code> 函数，后者包含了 Sentinel 要执行的所有操作。</td></tr></tbody></table><h3 id="1-2-使用-Sentinel-专用代码"><a href="#1-2-使用-Sentinel-专用代码" class="headerlink" title="1.2 使用 Sentinel 专用代码"></a>1.2 使用 Sentinel 专用代码</h3><p>启动 Sentinel 的第二个步骤就是将一部分普通 Redis 服务器使用的代码替换成 Sentinel 专用代码。</p><p>比如说， 普通 Redis 服务器使用 <code>redis.h/REDIS_SERVERPORT</code> 常量的值作为服务器端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define REDIS_SERVERPORT 6379</span><br></pre></td></tr></table></figure><p>而 Sentinel 则使用 <code>sentinel.c/REDIS_SENTINEL_PORT</code> 常量的值作为服务器端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define REDIS_SENTINEL_PORT 26379</span><br></pre></td></tr></table></figure><p>除此之外， 普通 Redis 服务器使用 <code>redis.c/redisCommandTable</code> 作为服务器的命令表，而 Sentinel 则使用 <code>sentinel.c/sentinelcmds</code> 作为服务器的命令表，并且其中的 <code>INFO</code> 命令会使用 Sentinel 模式下的专用实现 <code>sentinel.c/sentinelInfoCommand</code> 函数， 而不是普通 Redis 服务器使用的实现 <code>redis.c/infoCommand</code> 函数。</p><p><code>sentinelcmds</code> 命令表也解释了为什么在 Sentinel 模式下， Redis 服务器不能执行诸如 <code>SET</code>、 <code>DBSIZE</code>、 <code>EVAL</code> 等等这些命 ——因为服务器根本没有在命令表中载入这些命令：<code>PING</code>、 SENTINEL 、<code>INFO</code>、<code>SUBSCRIBE</code>、<code>UNSUBSCRIBE</code>、<code>PSUBSCRIBE</code> 和 <code>PUNSUBSCRIBE</code> 这七个命令就是客户端可以对 Sentinel 执行的全部命令了。</p><h3 id="1-3-初始化-Sentinel-状态"><a href="#1-3-初始化-Sentinel-状态" class="headerlink" title="1.3 初始化 Sentinel 状态"></a>1.3 初始化 Sentinel 状态</h3><p>在应用了 Sentinel 的专用代码之后，接下来，服务器会初始化一个 <code>sentinel.c/sentinelState</code> 结构（后面简称 “Sentinel 状态”），这个结构保存了服务器中所有和 Sentinel 功能有关的状态 （服务器的一般状态仍然由 <code>redis.h/redisServer</code> 结构保存）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">struct sentinelState &#123;</span><br><span class="line"></span><br><span class="line">    // 当前纪元，用于实现故障转移</span><br><span class="line">    uint64_t current_epoch;</span><br><span class="line"></span><br><span class="line">    // 保存了所有被这个 sentinel 监视的主服务器</span><br><span class="line">    // 字典的键是主服务器的名字</span><br><span class="line">    // 字典的值则是一个指向 sentinelRedisInstance 结构的指针</span><br><span class="line">    dict *masters;</span><br><span class="line"></span><br><span class="line">    // 是否进入了 TILT 模式？</span><br><span class="line">    int tilt;</span><br><span class="line"></span><br><span class="line">    // 目前正在执行的脚本的数量</span><br><span class="line">    int running_scripts;</span><br><span class="line"></span><br><span class="line">    // 进入 TILT 模式的时间</span><br><span class="line">    mstime_t tilt_start_time;</span><br><span class="line"></span><br><span class="line">    // 最后一次执行时间处理器的时间</span><br><span class="line">    mstime_t previous_time;</span><br><span class="line"></span><br><span class="line">    // 一个 FIFO 队列，包含了所有需要执行的用户脚本</span><br><span class="line">    list *scripts_queue;</span><br><span class="line"></span><br><span class="line">&#125; sentinel;</span><br></pre></td></tr></table></figure><h3 id="1-4-初始化-Sentinel-状态的-masters-属性"><a href="#1-4-初始化-Sentinel-状态的-masters-属性" class="headerlink" title="1.4 初始化 Sentinel 状态的 masters 属性"></a>1.4 初始化 Sentinel 状态的 <code>masters</code> 属性</h3><p>Sentinel 状态中的 <code>masters</code> 字典记录了所有被 Sentinel 监视的主服务器的相关信息，其中：</p><ul><li>字典的键是被监视主服务器的名字。</li><li>而字典的值则是被监视主服务器对应的 <code>sentinel.c/sentinelRedisInstance</code> 结构。</li></ul><p>每个 <code>sentinelRedisInstance</code> 结构（后面简称 “实例结构”）代表一个被 Sentinel 监视的 Redis 服务器实例（instance），这个实例可以是主服务器、从服务器、或者另外一个 Sentinel 。</p><p>实例结构包含的属性非常多，以下代码展示了实例结构在表示主服务器时使用的其中一部分属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">typedef struct sentinelRedisInstance &#123;</span><br><span class="line"></span><br><span class="line">    // 标识值，记录了实例的类型，以及该实例的当前状态</span><br><span class="line">    int flags;</span><br><span class="line"></span><br><span class="line">    // 实例的名字</span><br><span class="line">    // 主服务器的名字由用户在配置文件中设置</span><br><span class="line">    // 从服务器以及 Sentinel 的名字由 Sentinel 自动设置</span><br><span class="line">    // 格式为 ip:port ，例如 &quot;127.0.0.1:26379&quot;</span><br><span class="line">    char *name;</span><br><span class="line"></span><br><span class="line">    // 实例的运行 ID</span><br><span class="line">    char *runid;</span><br><span class="line"></span><br><span class="line">    // 配置纪元，用于实现故障转移</span><br><span class="line">    uint64_t config_epoch;</span><br><span class="line"></span><br><span class="line">    // 实例的地址</span><br><span class="line">    sentinelAddr *addr;</span><br><span class="line"></span><br><span class="line">    // SENTINEL down-after-milliseconds 选项设定的值</span><br><span class="line">    // 实例无响应多少毫秒之后才会被判断为主观下线（subjectively down）</span><br><span class="line">    mstime_t down_after_period;</span><br><span class="line">    </span><br><span class="line">    /* Master specific. */</span><br><span class="line">    dict *sentinels;    /* Other sentinels monitoring the same master. */</span><br><span class="line">    dict *slaves;       /* Slaves for this master instance. */</span><br><span class="line">    </span><br><span class="line">    // SENTINEL monitor &lt;master-name&gt; &lt;IP&gt; &lt;port&gt; &lt;quorum&gt; 选项中的 quorum 参数</span><br><span class="line">    // 判断这个实例为客观下线（objectively down）所需的支持投票数量</span><br><span class="line">    int quorum;</span><br><span class="line"></span><br><span class="line">    // SENTINEL parallel-syncs &lt;master-name&gt; &lt;number&gt; 选项的值</span><br><span class="line">    // 在执行故障转移操作时，可以同时对新的主服务器进行同步的从服务器数量</span><br><span class="line">    int parallel_syncs;</span><br><span class="line"></span><br><span class="line">    // SENTINEL failover-timeout &lt;master-name&gt; &lt;ms&gt; 选项的值</span><br><span class="line">    // 刷新故障迁移状态的最大时限</span><br><span class="line">    mstime_t failover_timeout;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125; sentinelRedisInstance;</span><br></pre></td></tr></table></figure><p><code>sentinelRedisInstance.addr</code> 属性是一个指向 <code>sentinel.c/sentinelAddr</code> 结构的指针，这个结构保存着实例的 IP 地址和端口号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct sentinelAddr &#123;</span><br><span class="line"></span><br><span class="line">    char *ip;</span><br><span class="line"></span><br><span class="line">    int port;</span><br><span class="line"></span><br><span class="line">&#125; sentinelAddr;</span><br></pre></td></tr></table></figure><p>对 Sentinel 状态的初始化将引发对 <code>masters</code> 字典的初始化，而 <code>masters</code> 字典的初始化是根据被载入的 Sentinel 配置文件来进行的。</p><p>配置文件的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#####################</span><br><span class="line"># master1 configure #</span><br><span class="line">#####################</span><br><span class="line"></span><br><span class="line">sentinel monitor master1 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds master1 30000</span><br><span class="line"></span><br><span class="line">sentinel parallel-syncs master1 1</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout master1 900000</span><br><span class="line"></span><br><span class="line">#####################</span><br><span class="line"># master2 configure #</span><br><span class="line">#####################</span><br><span class="line"></span><br><span class="line">sentinel monitor master2 127.0.0.1 12345 5</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds master2 50000</span><br><span class="line"></span><br><span class="line">sentinel parallel-syncs master2 5</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout master2 450000</span><br></pre></td></tr></table></figure><h3 id="1-5-创建连向主服务器的网络连接"><a href="#1-5-创建连向主服务器的网络连接" class="headerlink" title="1.5 创建连向主服务器的网络连接"></a>1.5 创建连向主服务器的网络连接</h3><p>初始化 Sentinel 的最后一步是创建连向被监视主服务器的网络连接：Sentinel 将成为主服务器的客户端，它可以向主服务器发送命令，并从命令回复中获取相关的信息。</p><p>对于每个被 Sentinel 监视的主服务器来说，Sentinel 会创建两个连向主服务器的异步网络连接：</p><ul><li>一个是命令连接，这个连接专门用于向主服务器发送命令，并接收命令回复。</li><li>另一个是订阅连接，这个连接专门用于订阅主服务器的 <code>__sentinel__:hello</code> 频道。</li></ul><p>在 Redis 目前的发布与订阅功能中， 被发送的信息都不会保存在 Redis 服务器里面，如果在信息发送时，想要接收信息的客户端不在线或者断线，那么这个客户端就会丢失这条信息。因此，为了不丢失 <code>__sentinel__:hello</code> 频道的任何信息，Sentinel 必须专门用一个订阅连接来接收该频道的信息。</p><p>而另一方面，除了订阅频道之外，Sentinel 还又必须向主服务器发送命令，以此来与主服务器进行通讯，所以 Sentinel 还必须向主服务器创建命令连接。</p><p>并且因为 Sentinel 需要与多个实例创建多个网络连接，所以 Sentinel 使用的是异步连接。</p><h2 id="2-获取主服务器信息"><a href="#2-获取主服务器信息" class="headerlink" title="2. 获取主服务器信息"></a>2. 获取主服务器信息</h2><p>Sentinel 默认会以每十秒一次的频率，通过命令连接向被监视的主服务器发送 <code>INFO</code> 命令，并通过分析 <code>INFO</code> 命令的回复来获取主服务器的当前信息。</p><p>举个例子，假设主服务器 mater 有三个从服务器 slave0、slave1 和 slave2，并且一个 Sentinel 正在连接主服务器，那么 Sentinel 将持续地向主服务器发送 <code>INFO</code> 命令，并获得类似于以下内容的回复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Server</span><br><span class="line">...</span><br><span class="line">run_id: // 略</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:3</span><br><span class="line">slave0:ip=127.0.0.1,port=11111,state=online,offset=43,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=22222,state=online,offset=43,lag=0</span><br><span class="line">slave2:ip=127.0.0.1,port=33333,state=online,offset=43,lag=0</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># Other sections</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过分析主服务器返回的 <code>INFO</code> 命令回复，Sentinel 可以获取以下两方面的信息：</p><ul><li>主服务器本身的信息，包括服务器运行 ID <code>run_id</code>，服务器角色 <code>role</code> 等；</li><li>主服务器属下的所有从服务器信息。包括从服务器的 IP 地址、端口号等，根据这些信息，Sentinel 无须用户提供从服务器的地址信息，就可以自动发现从服务器。</li></ul><p>根据 <code>run_id</code> 域和 <code>role</code> 域记录的信息，Sentinel 将对主服务器的实例结构进行更新。至于主服务返回的从服务器信息，则会被用于更新主服务器实例结构的 <code>slaves</code> 字典，这个字典记录了主服务器属下的从服务器名单：</p><ul><li>字典的键是由 Sentinel 自动设置的从服务器名字，格式为 <code>ip:port</code>。</li><li>字典的值是从服务器对应的实例结构。</li></ul><p>Sentinel 在分析 <code>INFO</code> 命令中包含的从服务器信息时，会检查从服务器对应的实例结构是否已经存在于 <code>slaves</code> 字典：</p><ul><li>如果已存在，进行更新；</li><li>否则创建一个新的实例结构。</li></ul><p>主服务器实例结构和从服务器实例结构之间的区别：</p><ul><li>主服务器实例结构的 <code>flags</code> 属性的值为 <code>SRI_MASTER</code>，而从服务器实例结构的 <code>flags</code> 属性的值为  <code>SRI SLAVE</code>。</li><li>主服务器实例结构的 <code>name</code> 属性的值是用户使用 Sentinel 配置文件设置的，而从服务器实例结构的 <code>name</code> 属性的值则是 Sentinel 根据从服务器的 IP 地址和端口号自动设置的。</li></ul><h2 id="3-获取从服务器信息"><a href="#3-获取从服务器信息" class="headerlink" title="3. 获取从服务器信息"></a>3. 获取从服务器信息</h2><p>当 Sentinel 发现主服务器有新的从服务器时，Sentinel 除了会创建相应的从服务器实例结构外，还会创建从服务器的命令连接和订阅连接。</p><p>同样，Sentinel也会以以每 10 秒一次的频率，通过命令连接向从服务器发送 <code>INFO</code> 命令，并获得类似于以下内容的回复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Server</span><br><span class="line">...</span><br><span class="line">run_id: // 略</span><br><span class="line">...</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">slave_repl_offset:11887</span><br><span class="line">slave_priority:100</span><br><span class="line"></span><br><span class="line"># Other sections</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据 <code>INFO</code> 命令的回复，Sentinel 会提取出以下信息：</p><ul><li>从服务器的运行 ID <code>run_id</code>。</li><li>从服务器的角色 <code>role</code>。</li><li>主服务器的 IP 地址 <code>master_host</code>，以及主服务器的端口号 <code>master_port。</code></li><li>主从服务器的连接状态 <code>master_link_status。</code></li><li>从服务器的优先级 <code>slave_priority。</code></li><li>从服务器的复制偏移量 <code>slave_repl_offset</code>。</li></ul><p>根据这些信息，Sentinel 会对从服务器的实例结构进行更新。</p><h2 id="4-向主服务器和从服务器发送消息"><a href="#4-向主服务器和从服务器发送消息" class="headerlink" title="4. 向主服务器和从服务器发送消息"></a>4. 向主服务器和从服务器发送消息</h2><p>在默认情况下，Sentinel 会以每两秒一次的频率，通过命令连接向所有被监视的主服务器和从服务器发送以下格式的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH __sentinel__:hello &quot;&lt;s_ip&gt;,&lt;s_port&gt;,&lt;s_runid&gt;,&lt;s_epoch&gt;,&lt;m_name&gt;,&lt;m_ip&gt;,&lt;m_port&gt;,&lt;m_epoch&gt;&quot;</span><br></pre></td></tr></table></figure><p>这条命令向服务器的 <code>__sentinel__:hello</code> 频道发送了一条消息，信息的内容由多个参数组成：</p><ul><li>其中以 <code>s_</code> 开头的参数记录的是 Sentinel 本身的信息。</li><li>而以 <code>m_</code> 开头的参数记录的则是主服务器的信息。如果 Sentinel 正在监视的是主服务器，那么这些参数记录的就是主服务器的信息；如果 Sentinel 正在监视的是从服务器，那么这些参数记录的就是从服务器正在复制的主服务器的信息。</li></ul><h2 id="5-接收来自主服务器和从服务器的频道信息"><a href="#5-接收来自主服务器和从服务器的频道信息" class="headerlink" title="5. 接收来自主服务器和从服务器的频道信息"></a>5. 接收来自主服务器和从服务器的频道信息</h2><p>当 Sentinel 与一个主服务器或者从服务器建立起订阅连接之后，Sentinel 就会通过订阅连接，向服务器发送以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE __sentinel__:hello</span><br></pre></td></tr></table></figure><p>Sentinel 对 <code>__sentinel__:hello</code> 频道的订阅会一直持续到 Sentinel 与服务器的连接断开为止。这也就是说，对于每个与 Sentinel 连接的服务器，Sentinel 既通过命令连接向服务器的 <code>__sentinel__:hello</code> 频道发送消息，又通过订阅连接从服务器的 <code>__sentinel__:hello</code> 频道接收消息。</p><p>对于监视同一个服务器的多个 Sentinel 来说，一个 Sentinel 发送的消息会被其他 Sentinel 接收到，这些消息会被用于更新其他 Sentinel 对发送消息 Sentinel 的认知，也会被用于更新其他 Sentinel 对被监视服务器的认知。</p><p>当一个 Sentinel 从 <code>__sentinel__:hello</code> 频道收到一条消息时，Sentinel 会对这条消息进行分析，提取出消息中的 Sentinel IP 地址、Sentinel 端口号、Sentinel 运行 ID等八个参数，并进行以下检查：</p><ul><li>如果信息中记录的 Sentinel 运行 ID 和接收信息的 Sentinel 运行 ID 相同，那么说明这条消息是 Sentinel 自己发送的，Sentinel 将丢弃这条消息，不做进一步处理。</li><li>相反地，如果信息中记录的 Sentinel 运行 ID 和接收信息的 Sentinel 运行 ID 不相同，那么说明这条消息是监视同一个服务器的其他 Sentinel 发来的，接收消息的 Sentinel 将根据信息中的各个参数，对相应主服务器的实例结构进行更新。</li></ul><p>（如果某个 Sentinel 发现自己的配置纪元低于接收到的配置纪元，则会用新的配置更新自己的配置？）</p><h3 id="5-1-更新-sentinels-字典"><a href="#5-1-更新-sentinels-字典" class="headerlink" title="5.1 更新 sentinels 字典"></a>5.1 更新 sentinels 字典</h3><p>Sentinel 为主服务器创建的实例结构中的 <code>sentinels</code> 字典保存了除 Sentinel 本身之外，所有同样监视这个主服务器的其他 Sentinel 的资料：</p><ul><li><code>sentinels</code> 字典的键是其中一个 Sentinel 的名字，格式为 <code>ip:port</code>。</li><li><code>sentinels</code> 字典的值则是键所对应 Sentinel 的实例结构。</li></ul><p>当一个 Sentinel 接收到其他 Sentinel 发来的消息时（称发送消息的 Sentinel 为源 Sentinel，接收消息的 Sentinel 为目标 Sentinel），目标 Sentinel 会从信息中分析并提取出以下两方面的参数：</p><ul><li>与 Sentinel 有关的参数：源 Sentinel 的 IP 地址、端口号、运行 ID 和配置纪元。</li><li>与主服务器有关的参数：源 Sentinel 正在监视的主服务器的名字、IP 地址、端口号和配置纪元。</li></ul><p>根据信息中提取出的主服务器参数，目标 Sentinel 会在自己的 Sentinel 状态的 <code>masters</code> 字典中查找相应的主服务器实例结构，然后根据提取出的 Sentinel 参数，检查主服务器实例结构的 <code>sentinels</code> 字典，源 Sentinel 的实例结构是否存在：</p><ul><li>如果源 Sentinel 的实例结构已经存在，那么对源 Sentinel 的实力结构进行更新。</li><li>如果源 Sentinel 的实例结构不存在，那么说明源 Sentinel 是刚刚开始监视主服务器的新 Sentinel，目标 Sentinel 会为源 Sentinel 创建一个新的实例结构，并将这个结构添加到 <code>sentinels</code> 字典里面。</li></ul><h3 id="5-3-创建连向其他-Sentinel-的命令连接"><a href="#5-3-创建连向其他-Sentinel-的命令连接" class="headerlink" title="5.3 创建连向其他 Sentinel 的命令连接"></a>5.3 创建连向其他 Sentinel 的命令连接</h3><p>当 Sentinel 通过频道信息发现一个新的 Sentinel 时，它不仅会为新 Sentinel 在 <code>sentinels</code> 字典中创建相应的实例结构，还会创建一个连向新 Sentinel 的命令连接，而新 Sentinel 也同样会创建连向这个 Sentinel 的命令连接，最终监视同一主服务器的多个 Sentinel 将形成相互连接的网络：Sentinel A 有连向 Sentinel B 的命令连接，而 Sentinel B 也有连向 Sentinel A 的命令连接。</p><p>使用命令连接相连的各个 Sentinel 可以通过向其他 Sentinel 发送命令请求来进行信息交换。</p><p>Sentinel 之间只会创建命令连接，不会创建订阅连接。</p><h2 id="6-检测主观下线状态"><a href="#6-检测主观下线状态" class="headerlink" title="6. 检测主观下线状态"></a>6. 检测主观下线状态</h2><p>在默认情况下，Sentinel 会以每秒一次的频率向所有与它创建了命令连接的实例（包括主服务器、从服务器、其他 Sentinel 在内）发送 <code>PING</code> 命令，并通过实例返回的 <code>PING</code> 命令回复来判断实例是否在线。</p><p>实例对 <code>PING</code> 命令的回复可以分为以下两种情况：</p><ul><li>有效回复：实例返回 <code>+PONG</code>、<code>-LOADING</code>、<code>-MASTERDOWN</code> 三种回复的其中一种。</li><li>无效回复：实例返回除 <code>+PONG</code>、<code>-LOADING</code>、<code>-MASTERDOWN</code> 三种回复之外的其他回复，或者在指定时限内没有返回任何回复。</li></ul><p>Sentinel 配置文件中的 <code>down-after-milliseconds</code> 选项指定了 Sentinel 判断实例进入主观下线所需的时间长度：如果一个实例在 <code>down-after-milliseconds</code> 毫秒内，连续向 Sentinel 返回无效回复，那么 Sentinel 会修改这个实例所对应的实例结构，在结构的 <code>flags</code> 属性中打开 <code>SRI_S_DOWN</code> 标识，以此来表示这个实例已经进入主观下线状态。</p><p>用户设置的 <code>down-after-milliseconds</code> 选项的值，不仅会被 Sentinel 用来判断主服务器的主观下线状态，还会被用于判断主服务器属下的所有从服务器，以及所有同样监视这个主服务器的其他 Sentinel 的主观下线状态。需要注意的是，对于监视同一个主服务器的多个 Sentinel 来说，这些 Sentinel 所设置的 <code>down-after-milliseconds</code> 选项的值也可能不同，因此，当一个 Sentinel 将主服务器判断为主观下线时，其他 Sentinel 可能仍然会认为主服务器处于在线状态。</p><h2 id="7-检查客观下线状态"><a href="#7-检查客观下线状态" class="headerlink" title="7. 检查客观下线状态"></a>7. 检查客观下线状态</h2><p>当 Sentinel 将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线了，它会向同样监视这一主服务器的其他 Sentinel 进行询问，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。当 Sentinel 从其他 Sentinel 那里接收到足够数量的已下线判断之后，Sentinel 就会将主服务器判定为客观下线，并对从服务器执行故障转移操作。</p><h3 id="7-1-发送-SENTINEL-is-master-down-by-addr-命令"><a href="#7-1-发送-SENTINEL-is-master-down-by-addr-命令" class="headerlink" title="7.1 发送 SENTINEL is-master-down-by-addr 命令"></a>7.1 发送 SENTINEL is-master-down-by-addr 命令</h3><p>Sentinel 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SENTINEL is-master-down-by-addr &lt;ip&gt; &lt;port&gt; &lt;current_epoch&gt; &lt;runid&gt;</span><br></pre></td></tr></table></figure><p>命令询问其他 Sentinel 是否同意主服务器已下线。</p><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:center"><strong>意义</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>ip</code></td><td style="text-align:center">被 Sentinel 判断为主观下线的主服务器的 IP 地址</td></tr><tr><td style="text-align:left"><code>port</code></td><td style="text-align:center">被 Sentinel 判断为主观下线的主服务器的端口号</td></tr><tr><td style="text-align:left"><code>current_epoch</code></td><td style="text-align:center">Sentinel 当前的配置纪元，用于选举领头 Sentinel</td></tr><tr><td style="text-align:left"><code>runid</code></td><td style="text-align:center">可以是 * 符号或者 Sentinel 的运行 ID：* 符号代表命令仅仅用于检测主服务器的客观下线状态，而 Sentinel 的运行 ID 则用于选举领头 Sentinel</td></tr></tbody></table><h3 id="7-2-接收-SENTINEL-is-master-down-by-addr-命令"><a href="#7-2-接收-SENTINEL-is-master-down-by-addr-命令" class="headerlink" title="7.2 接收 SENTINEL is-master-down-by-addr 命令"></a>7.2 接收 SENTINEL is-master-down-by-addr 命令</h3><p>当一个 Sentinl（目标 Sentinel）接收到另一个 Sentinel（源 Sentinel）发来的 <code>SENTINEL is-master-down-by-addr</code> 命令时，目标 Sentinel 会分析并取出命令请求中包含的各个参数，并根据其中的主服务器 IP 和端口号，检查主服务器是否已下线，然后向源 Sentinel 返回一条包含三个参数的 Multi Bulk 回复作为回复：</p><ol><li><code>&lt;down_state&gt;</code></li><li><code>leader_runid</code></li><li><code>leader_epoch</code></li></ol><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:center"><strong>意义</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>donw_state</code></td><td style="text-align:center">目标 Sentinel 对主服务器的检查结果，1 代表主服务器已下线，0 代表主服务器未下线</td></tr><tr><td style="text-align:left"><code>leader_runid</code></td><td style="text-align:center">可以是 * 符号或者目标 Sentinel 的局部领头 Sentinel 的运行 ID：* 符号代表命令仅仅用于检测主服务器的客观下线状态，而局部领头 Sentinel 的运行 ID 则用于选举领头 Sentinel</td></tr><tr><td style="text-align:left"><code>leader_epoch</code></td><td style="text-align:center">目标 Sentinel 的局部领头 Sentinel 的配置纪元，用于选举领头 Sentinel。仅在 <code>leader_runid</code> 的值不为 * 时有效，如果 <code>leader_epoch</code> 的值为 *，那么 <code>leader_epoch</code> 总为 0</td></tr></tbody></table><h3 id="7-2-接收-SENTINEL-is-master-down-by-addr-命令的回复"><a href="#7-2-接收-SENTINEL-is-master-down-by-addr-命令的回复" class="headerlink" title="7.2 接收 SENTINEL is-master-down-by-addr 命令的回复"></a>7.2 接收 SENTINEL is-master-down-by-addr 命令的回复</h3><p>根据其他 Sentinel 发回的 <code>SENTINEL is-master-down-by-addr</code> 命令回复，Sentinel 将统计其他 Sentinel 同意主服务器已下线的数量，当这一数量达到配置指定的判断客观下线所需的数量时，Sentinel 会将主服务器实例结构 <code>flags</code> 属性的 <code>SRI_O_DOWN</code> 标识打开，表示主服务器已经进入客观下线状态。</p><p>当认为主服务器已经进入下线状态的 Sentinel 的数量，超过 Sentinel 配置中设置的 <code>quorum</code> 参数的值，那么该 Sentinel 就会认为主服务器已经进入了客观下线状态。根据配置，对于监视同一个主服务器的多个 Sentinel 来说，它们将主服务器判断为客观下线的条件可能也不同。</p><h2 id="8-选举领头-Sentinel"><a href="#8-选举领头-Sentinel" class="headerlink" title="8. 选举领头 Sentinel"></a>8. 选举领头 Sentinel</h2><p>当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个 Sentinel 会进行协商，选举出一个领头 Sentinel，并由领头 Sentinel 对下线主服务器执行故障转移操作。</p><p>以下是 Redis 选举领头 Sentinel 的规则和方法：</p><ol><li>所有在线的监视同一个主服务器的多个 Sentinel 都有被选为领头 Sentinel 的资格。</li><li>每次进行领头 Sentinel 选举之后，不论选举是否成功，所有 Sentinel 的配置纪元（configration epoch）的值都会自增一次。</li><li>在一个配置纪元里面，所有 Sentinel 都有一次将某个 Sentinel 设置为局部领头 Sentinel 的机会，并且局部领头一旦设置，在这配置纪元里面就不能再更改了。</li><li>每个发现主服务器进入客观下线的 Sentinel 都会要求其他 Sentinel 将自己设置为局部领头 Sentinel。</li><li>当一个 Sentinel（源 Sentinel）向另一个 Sentinel（目标 Sentinel）发送 <code>SENTINEL is-master-down-by-addr</code> 命令，并且命令中的 <code>runid</code> 参数不是 * 符号而是源 Sentinel 的运行 ID 时，这表示源 Sentinel 要求目标 Sentinel 将前者设置为后者的局部领头 Sentinel。</li><li>Sentinel 设置局部领头 Sentinel 的规则是先到先得：最先向目标 Sentinel 发送设置要求的源 Sentinel 将成为目标 Sentinel 的局部领头 Sentinel，而之后接收到的所有设置要求都会被目标 Sentinel拒绝。</li><li>目标 Sentinel 在接收到 <code>SENTINEL is-master-down-by-addr</code> 命令之后，将向源 Sentinel 返回一条命令回复，回复中的 <code>leader_runid</code> 参数和 <code>leader_epoch</code> 参数分别记录了目标 Sentinel 的局部领头 Sentinel 的运行 ID 和配置纪元。</li><li>源 Sentinel 在接收到目标 Sentinel 返回的命令回复之后，会检查回复中的 <code>leader_epoch</code> 参数的值和自己的配置纪元是否相同，如果相同的话，那么源 Sentinel 继续取出回复中的 <code>leader_runid</code> 参数，如果 <code>leader_runid</code> 参数的值和源 Sentinel 的运行 ID 一致，那么表示目标 Sentinel 将源 Sentinel 设置成了局部领头 Sentinel。</li><li>如果有某个 Sentinel 被半数以上的 Sentinel 设置成了局部领头 Sentinel，那么这个 Sentinel 成为领头 Sentinel。</li><li>因为领头 Sentinel 的产生需要半数以上的 Sentinel 支持，并且每个 Sentinel 在每个配置纪元里面只能设置一次局部领头 Sentinel，所以在一个配置纪元里面，只会出现一个领头 Sentinel。</li><li>如果在给定时限内，没有一个 Sentinel 被选举为领头 Sentinel，那么各个 Sentinel 将在一段时间之后再次进行选举，直到选举出领头 Sentinel 为止。</li></ol><h2 id="9-故障转移"><a href="#9-故障转移" class="headerlink" title="9. 故障转移"></a>9. 故障转移</h2><p>在选举产生出领头 Sentinel 之后，领头 Sentinel 将对已下线的主服务器执行故障转移操作，该操作包含以下三个步骤：</p><ol><li>在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为主服务器。</li><li>让已下线主服务器属下的所有从服务器改为复制新的主服务器。</li><li>将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线时，他就会成为新的主服务器的从服务器。</li></ol><h3 id="9-1-选出新的主服务器"><a href="#9-1-选出新的主服务器" class="headerlink" title="9.1 选出新的主服务器"></a>9.1 选出新的主服务器</h3><p>故障转移操作的第一步要做的就是在已下线主服务器属下的所有从服务器中，挑选出一个状态良好、数据完整的从服务器，然后向这个从服务器发送 <code>SLAVEOF no one</code> 命令，将这个从服务器转换为主服务器。</p><p>在发送 <code>SLAVEOF no one</code> 命令之后，领头 Sentinel 会以每秒一次的频率（平时是每十秒一次），向被升级的从服务器发送 <code>INFO</code> 命令，并观察命令回复中的角色（role）信息，当被升级服务器的 role 从原来的 slave 变为 master 时，领头 Sentinel 就知道被选中的从服务器已经顺利升级为主服务器了。</p><p>领头 Sentinel 将已下线的主服务器的所有从服务器保存到一个列表中，然后按下面进行过滤：</p><ul><li>删除列表中所有处于下线或断线转发太的从服务器；</li><li>删除列表中所有最近 5s 内没有回复过领头 Sentinel 的 <code>INFO</code> 命令的从服务器；</li><li>删除所有与已下线的主服务器连接断开超过 <code>down-after-millisecondes * 10</code> 毫秒的从服务器；</li></ul><p>之后，领头 Sentinel将根据从服务器的优先级排序（选出优先级最高的）；如果具有多个相同最高优先级的从服务器，那么再按照从服务器的复制偏移量排序（选出偏移量最大的）；如果还有相同的从服务器，那么按照 <code>runid</code> 进行排序，选出其中 <code>runid</code> 最小的。</p><h3 id="9-2-修改从服务器的复制目标"><a href="#9-2-修改从服务器的复制目标" class="headerlink" title="9.2 修改从服务器的复制目标"></a>9.2 修改从服务器的复制目标</h3><p>当新的主服务器出现之后，领头 Sentinel 下一步要做的就是，让已下线主服务器属下的所有从服务器去复制新的主服务器，这一动作可以通过向从服务器发送 <code>SLAVEOF</code> 命令来实现。</p><h3 id="9-3-将旧的主服务器变为从服务器"><a href="#9-3-将旧的主服务器变为从服务器" class="headerlink" title="9.3 将旧的主服务器变为从服务器"></a>9.3 将旧的主服务器变为从服务器</h3><p>故障转移操作最后要做的是，将已下线的主服务器设置为新的主服务器的从服务器。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：发布与订阅》</title>
      <link href="/2017/10/16/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85%E3%80%8B/"/>
      <url>/2017/10/16/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>Redis 的发布与订阅功能由 <code>PUBLISH</code>、<code>SUBSCRIBE</code>、<code>PSUBSCRIBE</code> 等命令组成。</p><p>通过执行 <code>SUBSCRIBE</code> 命令，客户端可以订阅一个或多个频道从而成为这些频道的订阅者（subscriber）：每当有其它客户端向被订阅的频道发送消息（message）时，频道的所有订阅者都会收到这条消息。</p><p>除了订阅频道之外，客户端还可以通过执行 <code>PSUBSCRIBE</code> 命令订阅一个或多个模式，从而成为这些模式的订阅者：每当有其他客户端向某个频道发送消息时，消息不仅会被发送给这个频道的所有订阅者，它还会被发送给所有与这个频道相匹配的模式的订阅者。</p><a id="more"></a><h2 id="1-频道的订阅与退订"><a href="#1-频道的订阅与退订" class="headerlink" title="1. 频道的订阅与退订"></a>1. 频道的订阅与退订</h2><p>当一个客户端执行 <code>SUBSCRIBE</code> 命令订阅某个或某些频道的时候，这个客户端与被订阅频道之间就建立起了一种订阅关系。</p><p>Redis 将所有频道的订阅关系都保存在服务器状态的 <code>pubsub_channels</code> 字典里面，这个字典的键是某个被订阅的频道，而键的值是一个链表，链表里面记录了所有订阅这个频道的客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct redisServer &#123;</span><br><span class="line"> </span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">// 保存所有频道的订阅关系</span><br><span class="line">dict *pubsub_channels;  /* Map channels to list of subscribed clients */</span><br><span class="line"> </span><br><span class="line">// ...</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-1-订阅频道"><a href="#1-1-订阅频道" class="headerlink" title="1.1 订阅频道"></a>1.1 订阅频道</h3><p>每当客户端执行 <code>SUBSCRIBE</code> 命令订阅某个或某些频道的时候，服务器都会将客户端与被订阅的频道在 <code>pubsub_channels</code> 字典中进行关联。</p><p>根据频道是否已经有其他订阅者，关联操作分为两种情况执行：</p><ol><li>如果频道已经有其他订阅者，那么它在 <code>pubsub_channels</code> 字典中必然有相应的订阅者链表，程序唯一要做的就是将客户端添加到订阅者链表的末尾。</li><li>如果频道还未有任何订阅者，那么它必然不存在于 <code>pubsub_channels</code> 字典，程序首先要在 <code>pubsub_channels</code> 字典中为频道创建一个键，并将这个键的值设置为空链表，然后再将客户端添加到链表，成为链表的第一个元素。</li></ol><p><code>SUBSCRIBE</code> 命令的实现可以⽤以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def subscribe(*all_input_channels):</span><br><span class="line"></span><br><span class="line"># 遍历输⼊的所有频道</span><br><span class="line">for channel in all_input_channels:</span><br><span class="line"></span><br><span class="line"># 如果 channel 不存在于 pubsub_channels 字典（没有任何订阅者）</span><br><span class="line"># 那么在字典中添加 channel 键，并设置它的值为空链表</span><br><span class="line">if channel not in server.pubsub_channels:</span><br><span class="line">server.pubsub_channels[channel] = []</span><br><span class="line"></span><br><span class="line"># 将订阅者添加到频道所对应的链表的末尾</span><br><span class="line">server.pubsub_channels[channel].append(client)</span><br></pre></td></tr></table></figure><h3 id="1-2-退订频道"><a href="#1-2-退订频道" class="headerlink" title="1.2 退订频道"></a>1.2 退订频道</h3><p><code>UNSUBSCRIBE</code> 命令的⾏为和 <code>SUBSCRIBE</code> 命令的⾏为正好相反 —— 当⼀个客户端退订某个或某些频道的时候，服务器将从 <code>pubsub_channels</code> 中解除客户端与被退订频道之间的关联：</p><ul><li>程序会根据被退订频道的名字，在 <code>pubsub_channels</code> 字典中找到频道对应的订阅者链表，然后从订阅者链表中删除退订客户端的信息。</li><li>如果删除退订客户端之后，频道的订阅者链表变成了空链表，那么说明这个频道已经没有任何订阅者了，程序将从 <code>pubsub_channels</code> 字典中删除频道对应的键。</li></ul><p><code>UNSUBSCRIBE</code> 命令的实现可以⽤以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def unsubscribe(*all_input_channels):</span><br><span class="line"></span><br><span class="line"># 遍历要退订的所有频道</span><br><span class="line">for channel in all_input_channels:</span><br><span class="line"></span><br><span class="line"># 在订阅者链表中删除退订的客户端</span><br><span class="line">server.pubsub_channels[channel].remove(client)</span><br><span class="line"></span><br><span class="line"># 如果频道已经没有任何订阅者了（订阅者链表为空）</span><br><span class="line"># 那么将频道从字典中删除</span><br><span class="line"></span><br><span class="line">if len(server.pubsub_channels[channel]) == 0:</span><br><span class="line">server.pubsub_channels.remove(channel)</span><br></pre></td></tr></table></figure><h2 id="2-模式的订阅与退订"><a href="#2-模式的订阅与退订" class="headerlink" title="2. 模式的订阅与退订"></a>2. 模式的订阅与退订</h2><p>服务器也将所有模式的订阅关系都保存在服务器状态的 <code>pubsub_patterns</code> 属性里面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct redisServer &#123;</span><br><span class="line">    </span><br><span class="line">// ...</span><br><span class="line">    </span><br><span class="line">// 保存所有模式订阅关系</span><br><span class="line">list *pubsub_patterns;</span><br><span class="line">    </span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pubsub_patterns</code> 属性是一个链表，链表中的每个节点都包含着一个 <code>pubsubPattern</code> 结构，这个结构的 <code>pattern</code> 属性记录了被订阅的模式，而 <code>client</code>属性则记录了订阅模式的客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct pubsubPattern &#123;</span><br><span class="line"></span><br><span class="line">// 订阅模式的客户端</span><br><span class="line">redisClient *client;</span><br><span class="line">    </span><br><span class="line">// 被订阅的模式</span><br><span class="line">robj * pattern;</span><br><span class="line">    </span><br><span class="line">&#125; pubsubPattern;</span><br></pre></td></tr></table></figure><h3 id="2-1-订阅模式"><a href="#2-1-订阅模式" class="headerlink" title="2.1 订阅模式"></a>2.1 订阅模式</h3><p>每当客户端执行 <code>PSUBSCRIBE</code> 命令订阅某个或某些模式的时候，服务器会对每个被订阅的模式执行以下两个操作：</p><ol><li>新建一个 <code>pubsubPattern</code> 结构，将结构的 <code>pattern</code> 属性设置为被订阅的模式，<code>client</code> 属性设置为订阅模式的客户端。</li><li>将 <code>pubsubPattern</code> 结构添加到 <code>pubsub_patterns</code> 链表的表尾。</li></ol><p><code>PSBUSCRIBE</code> 命令的实现原理可以用以下的伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def psubscribe(*all_input_patterns):</span><br><span class="line"></span><br><span class="line"># 遍历输入的所有模式</span><br><span class="line">for pattern in all_input_patterns:</span><br><span class="line"></span><br><span class="line"># 创建新的 pubsubPattern 结构</span><br><span class="line"># 记录被订阅的模式，以及订阅模式的客户端</span><br><span class="line">pubsubPattern = create_new_pubsubPattern()</span><br><span class="line">pubsubPattern.client = client</span><br><span class="line">pubsubPattern.pattern = pattern</span><br><span class="line"></span><br><span class="line"># 将新的 pubsubPattern 追加到 pubsub_patterns 链表末尾</span><br><span class="line">server.pubsub_patterns.append(pubsubPattern)</span><br></pre></td></tr></table></figure><h3 id="2-2-退订模式"><a href="#2-2-退订模式" class="headerlink" title="2.2 退订模式"></a>2.2 退订模式</h3><p>模式的退订命令 <code>PUNSUBSCRIBE</code> 是 <code>PSUBSCRIBE</code> 命令的反操作。当一个客户端退订某个或某些模式的时候，服务器将在 <code>pubsub_patterns</code> 链表中查找并删除那些 <code>pattern</code> 属性为退订模式并且 <code>client</code> 属性为执行退订命令的客户端的 <code>pubsubPattern</code> 结构。</p><p><code>PUNSUBSCRIBE</code> 命令的实现原理可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def punsubscribe(*all_input_patterns):</span><br><span class="line"></span><br><span class="line"># 遍历所有要退订的模式</span><br><span class="line">for pattern in all_input_patterns:</span><br><span class="line"></span><br><span class="line"># 遍历 pubsub_patterns 链表中的所有 pubsubPattern 结构</span><br><span class="line">for pubsubPattern in server.pubsub_patterns:</span><br><span class="line"></span><br><span class="line"># 如果当前客户端和 pubsubPattern 记录的客户端相同</span><br><span class="line"># 并且要退订的模式也和 pubsubPattern 记录的模式相同</span><br><span class="line">if client == pubsubPattern.client and pattern == pubsubPattern.pattern</span><br><span class="line"></span><br><span class="line"># 那么将这个 pubsubPattern 从链表中删除</span><br><span class="line">server.pubsub_patterns.remove(pubsubPattern)</span><br></pre></td></tr></table></figure><h2 id="3-发送消息"><a href="#3-发送消息" class="headerlink" title="3. 发送消息"></a>3. 发送消息</h2><p>当一个 Redis 客户端执行 <code>PUBLISH &lt;channel&gt; &lt;message&gt;</code> 命令将消息 <code>message</code> 发送给频道 <code>channel</code>的时候，服务器需要执行以下两个操作：</p><ol><li>将消息 <code>message</code> 发送给频道 <code>channel</code> 的所有订阅者。</li><li>如果有一个或多个模式 <code>pattern</code> 与频道 <code>channel</code> 相匹配。那么将消息 <code>message</code> 发送给 <code>pattern</code> 模式的订阅者。</li></ol><h3 id="3-1-将消息发送给频道订阅者"><a href="#3-1-将消息发送给频道订阅者" class="headerlink" title="3.1 将消息发送给频道订阅者"></a>3.1 将消息发送给频道订阅者</h3><p>因为服务器状态中的 <code>pubsub_channels</code> 字典记录了所有频道的订阅关系，所以为了将消息发送给 <code>channel</code> 频道的所有订阅者，<code>PUBLISH</code> 命令要做的就是在 <code>pubsub_channels</code> 字典里找到频道 <code>channel</code> 的订阅者名单（一个链表），然后将消息发送给名单上的所有客户端。</p><p><code>PUBLISH</code> 命令将消息发送给频道订阅者的方法可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def channel_publish(channel,message):</span><br><span class="line"></span><br><span class="line"># 如果 channel 键不存在于 pubsub_channels 字典中</span><br><span class="line"># 那么说明 channel 频道没有任何订阅者</span><br><span class="line"># 程序不做发送动作，直接返回</span><br><span class="line">if channel not in server.pubsub_channels:</span><br><span class="line">return</span><br><span class="line">    </span><br><span class="line"># 运行到这里，说明 channel 频道至少有一个订阅者</span><br><span class="line"># 程序遍历 channel 频道的订阅者列表</span><br><span class="line"># 将消息发送给所有订阅者</span><br><span class="line">for subscriber in server.pubsub_channels[channel]:</span><br><span class="line">send_message(subscriber, message)</span><br></pre></td></tr></table></figure><h3 id="3-2-将消息发送给模式订阅者"><a href="#3-2-将消息发送给模式订阅者" class="headerlink" title="3.2 将消息发送给模式订阅者"></a>3.2 将消息发送给模式订阅者</h3><p>因为服务器状态中的 <code>pubsub_patterns</code>链表记录了所有模式的订阅关系，所以为了将消息发送给所有与 <code>channel</code> 频道相匹配的模式的订阅者，<code>PUBLISH</code> 命令要做的就是遍历整个 <code>pubsub_patterns</code> 链表，查找那些与 <code>channel</code> 频道相匹配的模式，并将消息发送给订阅了这些模式的客户端。</p><p><code>PUBLISH</code> 命令将消息发送给模式订阅者的方法可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def pattern_publish(channel, message):</span><br><span class="line">    </span><br><span class="line"># 遍历所有模式订阅消息</span><br><span class="line">for pubsubPattern in server.pubsub_patterns:</span><br><span class="line">    </span><br><span class="line"># 如果频道和模式相匹配</span><br><span class="line">if(match(channel, pubsubPatter.pattern)):</span><br><span class="line">        </span><br><span class="line"># 那么将消息发送给订阅该模式的客户端</span><br><span class="line">send_message(pubsubPattern.client, message)</span><br></pre></td></tr></table></figure><p>最后，<code>PUBLISH</code> 命令的实现可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def publish(channel, message):</span><br><span class="line"></span><br><span class="line">    # 将消息发送给 channel 频道的所有订阅者</span><br><span class="line">    channel_publish(channel, message)</span><br><span class="line">    </span><br><span class="line">    # 将消息发送给所有和 channel 频道相匹配的模式的订阅者</span><br><span class="line">    pattern_publish(channel, message)</span><br></pre></td></tr></table></figure><h2 id="4-查看订阅信息"><a href="#4-查看订阅信息" class="headerlink" title="4. 查看订阅信息"></a>4. 查看订阅信息</h2><h3 id="4-1-PUBSUB-CHANNELS"><a href="#4-1-PUBSUB-CHANNELS" class="headerlink" title="4.1 PUBSUB CHANNELS"></a>4.1 PUBSUB CHANNELS</h3><p><code>PUBSUB CHANNELS [pattern]</code> 子命令用于返回服务器当前被订阅的频道。其中 <code>pattern</code> 参数是可选的：</p><ul><li>如果不给定 <code>pattern</code> 参数，那么命令返回服务器当前被订阅的所有频道。</li><li>如果给定 <code>pattern</code> 参数，那么命令返回服务器当前被订阅的频道中那些与 <code>pattern</code> 模式相匹配的频道。</li></ul><p>这个子命令是通过遍历服务器 <code>pubsub_channels</code> 字典中的所有键（每个键都是一个被订阅的频道），然后记录并返回所有符合条件的频道来实现的，这个过程可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def pubsub_channels(pattern=None):</span><br><span class="line"></span><br><span class="line"># 一个列表，用于记录所有符合条件的频道</span><br><span class="line">channel_list = []</span><br><span class="line"></span><br><span class="line"># 遍历服务器中的所有频道</span><br><span class="line"># (也即是 pubsub_channels 字典的所有键)</span><br><span class="line">for channel in server.pubsub_channels:</span><br><span class="line"></span><br><span class="line"># 当以下两个条件的任意一个满足时，将频道添加到链表里面：</span><br><span class="line"># 1）用户没有指定 pattern 参数</span><br><span class="line"># 2）用户指定了 pattern 参数，并且 channel 和 pattern 匹配</span><br><span class="line">if (pattern is None) or match(channel, pattern):</span><br><span class="line">channel_list.append(channel)</span><br><span class="line"></span><br><span class="line"># 向客户端返回频道列表</span><br><span class="line">return channel_list</span><br></pre></td></tr></table></figure><h3 id="4-2-PUBSUB-NUMSUB"><a href="#4-2-PUBSUB-NUMSUB" class="headerlink" title="4.2 PUBSUB NUMSUB"></a>4.2 PUBSUB NUMSUB</h3><p><code>PUBSUB NUMSUB [channel1-1 channel-2 ... channel-n]</code> 子命令接受任意多个频道作为输入参数，并返回这些频道的订阅者数量。这个命令是通过在 <code>pubsub_channels</code> 字典中找到频道对应的订阅者链表，这个过程可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def pubsub_numsub(*all_input_channels):</span><br><span class="line"></span><br><span class="line"># 遍历输入的所有频道</span><br><span class="line">for channel in all_input_channels:</span><br><span class="line"></span><br><span class="line"># 如果 pubsub_channels 字典中没有 channel 这个键</span><br><span class="line"># 那么说明 channel 频道没有任何订阅者</span><br><span class="line">if channel not in server.pubsub_channels:</span><br><span class="line"># 返回频道名</span><br><span class="line">reply_channel_name(channel)</span><br><span class="line"># 订阅者数量为 0</span><br><span class="line">reply_subscribe_count(0)</span><br><span class="line"></span><br><span class="line"># 如果 pubsub_channels 字典中存在 channel 键</span><br><span class="line"># 那么说明 channel 频道至少有一个订阅者</span><br><span class="line">else:</span><br><span class="line"># 返回频道名</span><br><span class="line">reply_channel_name(channel)</span><br><span class="line"># 订阅者数量为0</span><br><span class="line">reply_subscribe_count(len(server.pubsub_channels[channel]))</span><br></pre></td></tr></table></figure><h3 id="4-3-PUBSUB-NUMPAT"><a href="#4-3-PUBSUB-NUMPAT" class="headerlink" title="4.3 PUBSUB NUMPAT"></a>4.3 PUBSUB NUMPAT</h3><p><code>PUBSUB NUMPAT</code> 命令用于返回服务器当前被订阅模式的数量。</p><p>这个命令是通过返回 <code>pubsub_patterns</code> 链表的长度来实现的，因为这个链表的长度就是服务器被订阅模式的数量，这个过程可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def pubsub_numpat():</span><br><span class="line"></span><br><span class="line"># pubsub_patterns 链表的长度就是被订阅模式的数量</span><br><span class="line">reply_pattern_count(len(server.pubsub_patterns))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：AOF 持久化》</title>
      <link href="/2017/10/14/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9AAOF-%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%8B/"/>
      <url>/2017/10/14/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9AAOF-%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>AOF 持久化保存数据库状态的方法是将服务器执行的命令保存到文件中。被写入 AOF 文件的所有命令都是以 Redis 的命令请求协议格式保存的。</p><p>服务器在启动时，可以通过载入和执行 AOF 文件中保存的命令来还原服务器关闭之前的数据库状态，以下就是服务器载入 AOF 文件并还原数据库状态时打印的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[8321] 05 Sep 11:58:50.448 # Server started, Redisversion 2.9.11</span><br><span class="line">[8321] 05 Sep 11:58:50.449 * DB loaded from append only file: 0.000 seconds</span><br><span class="line">[8321] 05 Sep 11:58:50.449 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-AOF-持久化的实现"><a href="#1-AOF-持久化的实现" class="headerlink" title="1. AOF 持久化的实现"></a>1. AOF 持久化的实现</h2><h3 id="1-1-命令追加"><a href="#1-1-命令追加" class="headerlink" title="1.1 命令追加"></a>1.1 命令追加</h3><p>当 AOF 持久化功能处于打开状态时， 服务器在执行完一个写命令之后， 会以协议格式将被执行的写命令追加到服务器状态的 <code>aof_buf</code> 缓冲区的末尾：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// AOF 缓冲区</span></span><br><span class="line">    sds aof_buf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-2-AOF-文件的写入与同步"><a href="#1-2-AOF-文件的写入与同步" class="headerlink" title="1.2 AOF 文件的写入与同步"></a>1.2 AOF 文件的写入与同步</h3><p>Redis 的服务器进程就是一个事件循环（loop）， 这个循环中的文件事件负责接收客户端的命令请求， 以及向客户端发送命令回复， 而时间事件则负责执行像 <code>serverCron</code> 函数这样需要定时运行的函数。</p><p>因为服务器在处理文件事件时可能会执行写命令， 使得一些内容被追加到 <code>aof_buf</code> 缓冲区里面， 所以在服务器每次结束一个事件循环之前， 它都会调用 <code>flushAppendOnlyFile</code> 函数， 考虑是否需要将 <code>aof_buf</code> 缓冲区中的内容写入和保存到 AOF 文件里面， 这个过程可以用以下伪代码表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def eventLoop():</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line"></span><br><span class="line">        # 处理文件事件，接收命令请求以及发送命令回复</span><br><span class="line">        # 处理命令请求时可能会有新内容被追加到 aof_buf 缓冲区中</span><br><span class="line">        processFileEvents()</span><br><span class="line"></span><br><span class="line">        # 处理时间事件</span><br><span class="line">        processTimeEvents()</span><br><span class="line"></span><br><span class="line">        # 考虑是否要将 aof_buf 中的内容写入和保存到 AOF 文件里面</span><br><span class="line">        flushAppendOnlyFile()</span><br></pre></td></tr></table></figure><p><code>flushAppendOnlyFile</code> 函数的行为由服务器配置的 <code>appendfsync</code> 选项的值来决定， 各个不同值产生的行为如下表所示：</p><table><thead><tr><th><code>appendfsync</code> 选项的值</th><th><code>flushAppendOnlyFile</code> 函数的行为</th></tr></thead><tbody><tr><td><code>always</code></td><td>将 <code>aof_buf</code> 缓冲区中的所有内容写入并同步到 AOF 文件。</td></tr><tr><td><code>everysec</code></td><td>将 <code>aof_buf</code> 缓冲区中的所有内容写入到 AOF 文件， 如果上次同步 AOF 文件的时间距离现在超过一秒钟， 那么再次对 AOF 文件进行同步， 并且这个同步操作是由一个线程专门负责执行的。</td></tr><tr><td><code>no</code></td><td>将 <code>aof_buf</code> 缓冲区中的所有内容写入到 AOF 文件， 但并不对 AOF 文件进行同步， 何时同步由操作系统来决定。</td></tr></tbody></table><p>如果用户没有主动为 <code>appendfsync</code> 选项设置值， 那么 <code>appendfsync</code> 选项的默认值为 <code>everysec</code>。</p><h3 id="1-3-AOF-持久化的效率和安全性"><a href="#1-3-AOF-持久化的效率和安全性" class="headerlink" title="1.3 AOF 持久化的效率和安全性"></a>1.3 AOF 持久化的效率和安全性</h3><p>服务器配置 <code>appendfsync</code> 选项的值直接决定 AOF 持久化功能的效率和安全性。</p><ul><li><p>当 <code>appendfsync</code> 的值为 <code>always</code> 时， 服务器在每个事件循环都要将 <code>aof_buf</code> 缓冲区中的所有内容写入到 AOF 文件， 并且同步 AOF 文件， 所以 <code>always</code> 的效率是 <code>appendfsync</code> 选项三个值当中最慢的一个， 但从安全性来说， <code>always</code> 也是最安全的， 因为即使出现故障停机， AOF 持久化也只会丢失一个事件循环中所产生的命令数据。</p></li><li><p>当 <code>appendfsync</code> 的值为 <code>everysec</code> 时， 服务器在每个事件循环都要将 <code>aof_buf</code> 缓冲区中的所有内容写入到 AOF 文件， 并且每隔超过一秒就要在子线程中对 AOF 文件进行一次同步： 从效率上来讲， <code>everysec</code> 模式足够快， 并且就算出现故障停机， 数据库也只丢失一秒钟的命令数据。</p></li><li><p>当 <code>appendfsync</code> 的值为 <code>no</code> 时， 服务器在每个事件循环都要将 <code>aof_buf</code> 缓冲区中的所有内容写入到 AOF 文件， 至于何时对 AOF 文件进行同步， 则由操作系统控制。因为处于 <code>no</code> 模式下的 <code>flushAppendOnlyFile</code> 调用无须执行同步操作， 所以该模式下的 AOF 文件写入速度总是最快的， 不过因为这种模式会在系统缓存中积累一段时间的写入数据， 所以该模式的单次同步时长通常是三种模式中时间最长的： 从平摊操作的角度来看， <code>no</code> 模式和 <code>everysec</code> 模式的效率类似， 当出现故障停机时， 使用 <code>no</code> 模式的服务器将丢失上次同步 AOF 文件之后的所有写命令数据。</p></li></ul><h2 id="2-AOF-文件的载入与数据还原"><a href="#2-AOF-文件的载入与数据还原" class="headerlink" title="2. AOF 文件的载入与数据还原"></a>2. AOF 文件的载入与数据还原</h2><p>因为 AOF 文件里面包含了重建数据库状态所需的所有写命令，所以服务器只要读入并重新执行一遍 AOF 文件里面保存的写命令，就可以还原服务器关闭之前的数据库状态。</p><p>Redis 读取 AOF 文件并还原数据库状态的详细步骤如下：</p><ol><li>创建一个不带网络连接的伪客户端（fake client）：因为 Redis 的命令只能在客户端上下文中执行，而载入 AOF 文件时所使用的命令直接来源于 AOF 文件而不是网络连接，所以服务器使用了一个没有网络连接的伪客户端来执行 AOF 文件保存的写命令，伪客户端执行命令的效果和带网络连接的客户端执行命令的效果完全一样。</li><li>从 AOF 文件中分析并读取出一条写命令。</li><li>使用伪客户端执行被读出的写命令。</li><li>一直执行步骤 2 和 步骤 3，直到 AOF 文件中的所有写命令都被处理完毕为止。</li></ol><h2 id="3-AOF重写"><a href="#3-AOF重写" class="headerlink" title="3. AOF重写"></a>3. AOF重写</h2><p>为了解决 AOF 文件体积膨胀的问题，Redis 提供了 AOF 重写功能：Redis 服务器可以创建一个新的 AOF 文件来替代现有的 AOF 文件，新旧两个文件所保存的数据库状态是相同的，但是新的 AOF 文件不会包含任何浪费空间的冗余命令，通常体积会较旧 AOF 文件小很多。</p><h3 id="3-1-AOF-文件重写的实现"><a href="#3-1-AOF-文件重写的实现" class="headerlink" title="3.1 AOF 文件重写的实现"></a>3.1 AOF 文件重写的实现</h3><p>AOF 重写并不需要对原有 AOF 文件进行任何的读取、写入、分析等操作，这个功能是通过读取服务器当前的数据库状态来实现的。首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录该键值对的多个命令。整个重写过程可以用以下的伪代码表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">def AOF_REWRITE(tmp_tile_name):</span><br><span class="line"></span><br><span class="line">  f = create(tmp_tile_name)</span><br><span class="line"></span><br><span class="line">  # 遍历所有数据库</span><br><span class="line">  for db in redisServer.db:</span><br><span class="line"></span><br><span class="line">    # 如果数据库为空，那么跳过这个数据库</span><br><span class="line">    if db.is_empty(): continue</span><br><span class="line"></span><br><span class="line">    # 写入 SELECT 命令，用于切换数据库</span><br><span class="line">    f.write_command(&quot;SELECT &quot; + db.number)</span><br><span class="line"></span><br><span class="line">    # 遍历所有键</span><br><span class="line">    for key in db:</span><br><span class="line"></span><br><span class="line">      # 如果键带有过期时间，并且已经过期，那么跳过这个键</span><br><span class="line">      if key.have_expire_time() and key.is_expired(): continue</span><br><span class="line"></span><br><span class="line">      if key.type == String:</span><br><span class="line"></span><br><span class="line">        # 用 SET key value 命令来保存字符串键</span><br><span class="line"></span><br><span class="line">        value = get_value_from_string(key)</span><br><span class="line"></span><br><span class="line">        f.write_command(&quot;SET &quot; + key + value)</span><br><span class="line"></span><br><span class="line">      elif key.type == List:</span><br><span class="line"></span><br><span class="line">        # 用 RPUSH key item1 item2 ... itemN 命令来保存列表键</span><br><span class="line"></span><br><span class="line">        item1, item2, ..., itemN = get_item_from_list(key)</span><br><span class="line"></span><br><span class="line">        f.write_command(&quot;RPUSH &quot; + key + item1 + item2 + ... + itemN)</span><br><span class="line"></span><br><span class="line">      elif key.type == Set:</span><br><span class="line"></span><br><span class="line">        # 用 SADD key member1 member2 ... memberN 命令来保存集合键</span><br><span class="line"></span><br><span class="line">        member1, member2, ..., memberN = get_member_from_set(key)</span><br><span class="line"></span><br><span class="line">        f.write_command(&quot;SADD &quot; + key + member1 + member2 + ... + memberN)</span><br><span class="line"></span><br><span class="line">      elif key.type == Hash:</span><br><span class="line"></span><br><span class="line">        # 用 HMSET key field1 value1 field2 value2 ... fieldN valueN 命令来保存哈希键</span><br><span class="line"></span><br><span class="line">        field1, value1, field2, value2, ..., fieldN, valueN =\</span><br><span class="line">        get_field_and_value_from_hash(key)</span><br><span class="line"></span><br><span class="line">        f.write_command(&quot;HMSET &quot; + key + field1 + value1 + field2 + value2 +\</span><br><span class="line">                        ... + fieldN + valueN)</span><br><span class="line"></span><br><span class="line">      elif key.type == SortedSet:</span><br><span class="line"></span><br><span class="line">        # 用 ZADD key score1 member1 score2 member2 ... scoreN memberN</span><br><span class="line">        # 命令来保存有序集键</span><br><span class="line"></span><br><span class="line">        score1, member1, score2, member2, ..., scoreN, memberN = \</span><br><span class="line">        get_score_and_member_from_sorted_set(key)</span><br><span class="line"></span><br><span class="line">        f.write_command(&quot;ZADD &quot; + key + score1 + member1 + score2 + member2 +\</span><br><span class="line">                        ... + scoreN + memberN)</span><br><span class="line"></span><br><span class="line">      else:</span><br><span class="line"></span><br><span class="line">        raise_type_error()</span><br><span class="line"></span><br><span class="line">      # 如果键带有过期时间，那么用 EXPIREAT key time 命令来保存键的过期时间</span><br><span class="line">      if key.have_expire_time():</span><br><span class="line">        f.write_command(&quot;EXPIREAT &quot; + key + key.expire_time_in_unix_timestamp())</span><br><span class="line"></span><br><span class="line">    # 关闭文件</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>在实际中，为了避免在执行命令时造成客户端输入缓冲区溢出，重写程序在处理列表、哈希表、集合、有序集合这四种可能会带有多个元素的键时，会先检查键所包含的元素数量，如果元素的数量超过了<code>redis.h/REDIS_AOF_REWRITE_ITEMS_PER_CMD</code> 常量的值，那么重写程序将使用多条命令来记录键的值，而不单单使用一条命令。</p><p>在目前版本中，<code>REDIS_AOF_REWRITE_ITEMS_PER_CMD</code> 常量的值为 64，这也就是说，如果一个集合键包含了超过 64 个元素，那么重写程序会用多条SADD命令来记录这个集合，并且每条命令设置的元素数量也为 64 个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SADD &lt;set-key&gt; &lt;elem1&gt; &lt;elem2&gt; ... &lt;elem64&gt;</span><br><span class="line">SADD &lt;set-key&gt; &lt;elem65&gt; &lt;elem66&gt; ... &lt;elem128&gt;</span><br><span class="line">SADD &lt;set-key&gt; &lt;elem129&gt; &lt;elem130&gt; ... &lt;elem192&gt;</span><br></pre></td></tr></table></figure><p>另一方面如果一个列表键包含了超过 64 个项，那么重写程序会用多条 <code>RPUSH</code> 命令来保存这个列表，并且每条命令设置的项数量也为 64 个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SADD &lt;list-key&gt; &lt;item1&gt; &lt;item2&gt; ... &lt;item64&gt;</span><br><span class="line">SADD &lt;list-key&gt; &lt;item65&gt; &lt;item66&gt; ... &lt;item128&gt;</span><br><span class="line">SADD &lt;list-key&gt; &lt;item129&gt; &lt;item130&gt; ... &lt;item192&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-AOF-后台重写"><a href="#3-2-AOF-后台重写" class="headerlink" title="3.2 AOF 后台重写"></a>3.2 AOF 后台重写</h3><p>Redis 决定将 AOF 重写程序放到（后台）子进程里执行， 这样做可以同时达到两个目的：</p><ol><li>子进程进行 AOF 重写期间，服务器进程（父进程）可以继续处理命令请求。</li><li>子进程带有服务器进程的数据副本，使用子进程而不是线程，可以在避免使用锁的情况下，保证数据的安全性。</li></ol><p>子进程在进行 AOF 重写期间，服务器进程还需要继续处理命令请求，而新的命令可能会对现有的数据库状态进行修改，从而使得服务器当前的数据库状态和重写后的 AOF 文件所保存的数据库状态不一致。</p><p>为了解决这种数据不一致问题，Redis 服务器设置了一个 AOF 重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当 Redis 服务器执行完一个写命令之后，它会同时将这个写命令发送给 AOF 缓冲区和 AOF 重写缓冲区。这也就是说，在子进程执行 AOF 重写期间，服务器进程需要执行以下三个工作：</p><ol><li>执行客户端发来的命令。</li><li>将执行后的写命令追加到 AOF 缓冲区。</li><li>将执行后的写命令追加到 AOF 重写缓冲区。</li></ol><p>这样一来，可以保证:</p><ul><li>AOF 缓冲区的内容会定期被写入和同步到 AOF 文件，对现有 AOF 文件的处理工作会如常进行。</li><li>从创建子进程开始，服务器执行的所有写命令都会被记录到 AOF 重写缓冲区里面。</li></ul><p>当子进程完成 AOF 重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：</p><ul><li>将 AOF 重写缓冲区中的所有内容写入到新 AOF 文件中，这时新 AOF 文件所保存的数据库状态将和服务器当前的数据库状态一致。</li><li>对新的 AOF 文件进行改名，原子地（atomic）覆盖现有的 AOF 文件，完成新旧两个 AOF 文件的替换。</li></ul><p>信号处理函数执行完毕之后，父进程就可以继续像往常一样接受命令请求了。</p><p>在整个 AOF 后台重写过程中，只有信号处理函数执行时会对服务器进程（父进程）造成阻塞，其他时候，AOF 后台重写都不会阻塞父进程，这将 AOF 重写对服务器性能造成的影响降到了最低。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：RDB 持久化》</title>
      <link href="/2017/10/10/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9ARDB-%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%8B/"/>
      <url>/2017/10/10/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9ARDB-%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>RDB 持久化功能所生成的 RDB 文件是一个经过压缩的二进制文件，通过该文件可以还原生成RDB文件时的数据库状态。</p><a id="more"></a><h2 id="1-RDB-文件的创建与载入"><a href="#1-RDB-文件的创建与载入" class="headerlink" title="1. RDB 文件的创建与载入"></a>1. RDB 文件的创建与载入</h2><p>有两个 Redis 命令可以用于生成 RDB 文件，一个是 <code>SAVE</code>，另一个是 <code>BGSAVE</code>。</p><p><code>SAVE</code> 命令会阻塞 Redis 服务器进程，直到 RDB 文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求。</p><p>和 <code>SAVE</code> 命令直接阻塞服务器进程的做法不同，<code>BGSAVE</code> 命令会派生出一个子进程，然后由子进程负责创建 RDB 文件，服务器进程（父进程）继续处理命令请求。</p><p>创建 RDB 文件的实际工作由 <code>rdb.c/rdbSave</code> 函数完成，<code>SAVE</code> 命令和 <code>BGSAVE</code> 命令会以不同的方式调用这个函数，通过以下伪代码可以明显地看出这两个命令之间的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def SAVE():</span><br><span class="line"></span><br><span class="line">    #创建RDB文件</span><br><span class="line">    rdbSave()</span><br><span class="line">    </span><br><span class="line">def BGSAVE():</span><br><span class="line"></span><br><span class="line">    #创建子进程</span><br><span class="line">    pid = fork()</span><br><span class="line">    </span><br><span class="line">    if pid == 0:</span><br><span class="line">    </span><br><span class="line">        #子进程负责创建RDB文件</span><br><span class="line">        rdbSave()</span><br><span class="line">        </span><br><span class="line">        #完成之后向父进程发送信号</span><br><span class="line">        signal_parent()</span><br><span class="line">        </span><br><span class="line">    elif pid ＞ 0:</span><br><span class="line">    </span><br><span class="line">        #父进程继续处理命令请求，并通过轮询等待子进程的信号</span><br><span class="line">        handle_request_and_wait_signal()</span><br><span class="line">        </span><br><span class="line">    else:</span><br><span class="line">        #处理出错情况</span><br><span class="line">        handle_fork_error()</span><br></pre></td></tr></table></figure><p>和使用 <code>SAVE</code> 命令或者 <code>BGSAVE</code> 命令创建 RDB 文件不同，RDB 文件的载入工作是在服务器启动时自动执行的，所以 Redis 并没有专门用于载入 RDB 文件的命令，只要 Redis 服务器在启动时检测到 RDB 文件存在，它就会自动载入 RDB 文件。</p><p>以下是 Redis 服务器启动时打印的日志记录，其中第二条日志 <code>DB loaded from disk:…</code> 就是服务器在成功载入 RDB 文件之后打印的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server</span><br><span class="line">[7379] 30 Aug 21:07:01.270 # Server started, Redis version 2.9.11</span><br><span class="line">[7379] 30 Aug 21:07:01.289 * DB loaded from disk: 0.018 seconds</span><br><span class="line">[7379] 30 Aug 21:07:01.289 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure><p>因为 AOF 文件的更新频率通常比RDB文件的更新频率高，所以：</p><ul><li>如果服务器开启了 AOF 持久化功能，那么服务器会优先使用 AOF 文件来还原数据库状态。</li><li>只有在 AOF 持久化功能处于关闭状态时，服务器才会使用 RDB 文件来还原数据库状态。</li></ul><p>载入 RDB 文件的实际工作由 <code>rdb.c/rdbLoad</code> 函数完成。</p><h3 id="1-1-SAVE-命令执行时的服务器状态"><a href="#1-1-SAVE-命令执行时的服务器状态" class="headerlink" title="1.1 SAVE 命令执行时的服务器状态"></a>1.1 SAVE 命令执行时的服务器状态</h3><p>当 <code>SAVE</code> 命令执行时，Redis 服务器会被阻塞，所以当 <code>SAVE</code> 命令正在执行时，客户端发送的所有命令请求都会被拒绝。只有在服务器执行完 <code>SAVE</code> 命令、重新开始接受命令请求之后，客户端发送的命令才会被处理。</p><h3 id="1-2-BGSAVE-命令执行时的服务器状态"><a href="#1-2-BGSAVE-命令执行时的服务器状态" class="headerlink" title="1.2 BGSAVE 命令执行时的服务器状态"></a>1.2 BGSAVE 命令执行时的服务器状态</h3><p>因为 <code>BGSAVE</code> 命令的保存工作是由子进程执行的，所以在子进程创建 RDB 文件的过程中，Redis 服务器仍然可以继续处理客户端的命令请求，但是，在 <code>BGSAVE</code> 命令执行期间，服务器处理 <code>SAVE</code>、<code>BGSAVE</code>、<code>BGREWRITEAOF</code> 三个命令的方式会和平时有所不同。</p><p>首先，在 <code>BGSAVE</code> 命令执行期间，客户端发送的 <code>SAVE</code> 命令会被服务器拒绝，服务器禁止 <code>SAVE</code> 命令和 <code>BGSAVE</code> 命令同时执行是为了避免父进程（服务器进程）和子进程同时执行两个 <code>rdbSave</code> 调用，防止产生竞争条件。</p><p>其次，在 <code>BGSAVE</code> 命令执行期间，客户端发送的 <code>BGSAVE</code> 命令会被服务器拒绝，因为同时执行两个 <code>BGSAVE</code> 命令也会产生竞争条件。</p><p>最后，<code>BGREWRITEAOF</code> 和 <code>BGSAVE</code> 两个命令不能同时执行：</p><ul><li>如果 <code>BGSAVE</code> 命令正在执行，那么客户端发送的 <code>BGREWRITEAOF</code> 命令会被延迟到 <code>BGSAVE</code> 命令执行完毕之后执行。</li><li>如果 <code>BGREWRITEAOF</code> 命令正在执行，那么客户端发送的 <code>BGSAVE</code> 命令会被服务器拒绝。</li></ul><p>因为 <code>BGREWRITEAOF</code> 和 <code>BGSAVE</code> 两个命令的实际工作都由子进程执行，所以这两个命令在操作方面并没有什么冲突的地方，不能同时执行它们只是一个性能方面的考虑——并发出两个子进程，并且这两个子进程都同时执行大量的磁盘写入操作，这怎么想都不会是一个好主意。</p><h3 id="1-3-RDB-文件载入时的服务器状态"><a href="#1-3-RDB-文件载入时的服务器状态" class="headerlink" title="1.3 RDB 文件载入时的服务器状态"></a>1.3 RDB 文件载入时的服务器状态</h3><p>服务器在载入 RDB 文件期间，会一直处于阻塞状态，直到载入工作完成为止。</p><h2 id="2-自动间隔性保存"><a href="#2-自动间隔性保存" class="headerlink" title="2. 自动间隔性保存"></a>2. 自动间隔性保存</h2><p>Redis 允许用户通过设置服务器配置的 <code>save</code> 选项，让服务器每隔一段时间自动执行一次 <code>BGSAVE</code> 命令。用户可以通过 <code>save</code> 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 <code>BGSAVE</code> 命令。</p><p>举个例子，如果我们向服务器提供以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>那么只要满足以下三个条件中的任意一个，<code>BGSAVE</code> 命令就会被执行：</p><ul><li>服务器在 900 秒之内，对数据库进行了至少 1 次修改。</li><li>服务器在 300 秒之内，对数据库进行了至少 10 次修改。</li><li>服务器在 60 秒之内，对数据库进行了至少 10000 次修改。</li></ul><p>举个例子，以下是 Redis 服务器在 60 秒之内，对数据库进行了至少 10000 次修改之后，服务器自动执行 <code>BGSAVE</code> 命令时打印出来的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[5085] 03 Sep 17:09:49.463 * 10000 changes in 60 seconds. Saving...</span><br><span class="line">[5085] 03 Sep 17:09:49.463 * Background saving started by pid 5189</span><br><span class="line">[5189] 03 Sep 17:09:49.522 * DB saved on disk</span><br><span class="line">[5189] 03 Sep 17:09:49.522 * RDB: 0 MB of memory used by copy-on-write</span><br><span class="line">[5085] 03 Sep 17:09:49.563 * Background saving terminated with success</span><br></pre></td></tr></table></figure><h2 id="2-1-设置保存条件"><a href="#2-1-设置保存条件" class="headerlink" title="2.1 设置保存条件"></a>2.1 设置保存条件</h2><p>当 Redis 服务器启动时，用户可以通过指定配置文件或者传入启动参数的方式设置 <code>save</code> 选项，如果用户没有主动设置 <code>save</code> 选项，那么服务器会为 <code>save</code> 选项设置默认条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>接着，服务器程序会根据 <code>save</code> 选项所设置的保存条件，设置服务器状态 <code>redisServer</code> 结构的 <code>saveparams</code> 属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">//记录了保存条件的数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> *<span class="title">saveparams</span>;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>saveparams</code> 属性是一个数组，数组中的每个元素都是一个 <code>saveparam</code> 结构，每个 <code>saveparam</code> 结构都保存了一个 <code>save</code> 选项设置的保存条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct saveparam &#123;</span><br><span class="line">    //秒数</span><br><span class="line">    time_t seconds;</span><br><span class="line">    //修改数</span><br><span class="line">    int changes;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-dirty-计数器和-lastsave-属性"><a href="#2-2-dirty-计数器和-lastsave-属性" class="headerlink" title="2.2 dirty 计数器和 lastsave 属性"></a>2.2 dirty 计数器和 lastsave 属性</h3><p>除了 <code>saveparams</code> 数组之外，服务器状态还维持着一个 <code>dirty</code> 计数器，以及一个 <code>lastsave</code> 属性：</p><ul><li><code>dirty</code> 计数器记录距离上一次成功执行 <code>SAVE</code> 命令或者 <code>BGSAVE</code> 命令之后，服务器对数据库状态（服务器中的所有数据库）进行了多少次修改（包括写入、删除、更新等操作）。</li><li><code>lastsave</code> 属性是一个 UNIX 时间戳，记录了服务器上一次成功执行 <code>SAVE</code> 命令或者 <code>BGSAVE</code> 命令的时间。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct redisServer &#123;</span><br><span class="line">    // ...</span><br><span class="line">    //修改计数器</span><br><span class="line">    long long dirty;</span><br><span class="line">    //上一次执行保存的时间</span><br><span class="line">    time_t lastsave;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当服务器成功执行一个数据库修改命令之后，程序就会对 <code>dirty</code> 计数器进行更新：命令修改了多少次数据库，<code>dirty</code> 计数器的值就增加多少。</p><h3 id="2-3-检查保存条件是否满足"><a href="#2-3-检查保存条件是否满足" class="headerlink" title="2.3 检查保存条件是否满足"></a>2.3 检查保存条件是否满足</h3><p>Redis 的服务器周期性操作函数 <code>serverCron</code> 默认每隔 100 毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，它的其中一项工作就是检查 <code>save</code> 选项所设置的保存条件是否已经满足，如果满足的话，就执行 <code>BGSAVE</code> 命令。</p><p>以下伪代码展示了 <code>serverCron</code> 函数检查保存条件的过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def serverCron():</span><br><span class="line"></span><br><span class="line">    # ...</span><br><span class="line">    </span><br><span class="line">    #遍历所有保存条件</span><br><span class="line">for saveparam in server.saveparams:</span><br><span class="line"></span><br><span class="line">        #计算距离上次执行保存操作有多少秒</span><br><span class="line">        save_interval = unixtime_now()-server.lastsave</span><br><span class="line">        </span><br><span class="line">        #如果数据库状态的修改次数超过条件所设置的次数</span><br><span class="line">        #并且距离上次保存的时间超过条件所设置的时间</span><br><span class="line">        #那么执行保存操作</span><br><span class="line">        if server.dirty ＞= saveparam.changes and \</span><br><span class="line">           save_interval ＞ saveparam.seconds:</span><br><span class="line">           </span><br><span class="line">            BGSAVE()</span><br><span class="line">            </span><br><span class="line">    # ...</span><br></pre></td></tr></table></figure><p>程序会遍历并检查 <code>saveparams</code> 数组中的所有保存条件，只要有任意一个条件被满足，那么服务器就会执行 <code>BGSAVE</code> 命令。</p><h2 id="3-RDB文件结构"><a href="#3-RDB文件结构" class="headerlink" title="3. RDB文件结构"></a>3. RDB文件结构</h2><p>一个完整 RDB 文件包含：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-----+----------+---------+---+---------+</span><br><span class="line">|     |          |         |   |         |</span><br><span class="line">|REDIS|db_version|databases|EOF|check_sum|</span><br><span class="line">|     |          |         |   |         |</span><br><span class="line">+-----+----------+---------+---+---------+</span><br></pre></td></tr></table></figure><p>RDB 文件的最开头是 <code>REDIS</code> 部分，这个部分的长度为 5 字节，保存着 “REDIS” 五个字符。通过这五个字符，程序可以在载入文件时，快速检查所载入的文件是否 RDB 文件。</p><p><code>db_version</code> 长度为 4 字节，它的值是一个字符串表示的整数，这个整数记录了 RDB 文件的版本号，比如 “0006” 就代表 RDB 文件的版本为第六版。</p><p><code>databases</code> 部分包含着零个或任意多个数据库，以及各个数据库中的键值对数据：</p><ul><li>如果服务器的数据库状态为空（所有数据库都是空的），那么这个部分也为空，长度为 0 字节。</li><li>如果服务器的数据库状态为非空（有至少一个数据库非空），那么这个部分也为非空，根据数据库所保存键值对的数量、类型和内容不同，这个部分的长度也会有所不同。</li></ul><p><code>EOF</code> 常量的长度为 1 字节，这个常量标志着 RDB 文件正文内容的结束，当读入程序遇到这个值的时候，它知道所有数据库的所有键值对都已经载入完毕了。</p><p><code>check_sum</code> 是一个 8 字节长的无符号整数，保存着一个校验和，这个校验和是程序通过对 <code>REDIS</code>、<code>db_version</code>、<code>databases</code>、<code>EOF</code> 四个部分的内容进行计算得出的。服务器在载入 RDB 文件时，会将载入数据所计算出的校验和与 <code>check_sum</code> 所记录的校验和进行对比，以此来检查 RDB 文件是否有出错或者损坏的情况出现。</p><h3 id="3-1-databases-部分"><a href="#3-1-databases-部分" class="headerlink" title="3.1 databases 部分"></a>3.1 databases 部分</h3><p>一个 RDB 文件的 <code>databases</code> 部分可以保存任意多个非空数据库。每个非空数据库在 RDB 文件中都可以保存为 <code>SELECTDB</code>、<code>db_number</code>、<code>key_value_pairs</code> 三个部分。</p><p><code>SELECTDB</code> 常量的长度为 1 字节，当读入程序遇到这个值的时候，它知道接下来要读入的将是一个数据库号码。</p><p><code>db_number</code> 保存着一个数据库号码，根据号码的大小不同，这个部分的长度可以是 1 字节、2 字节或者 5 字节。当程序读入 <code>db_number</code> 部分之后，服务器会调用 <code>SELECT</code> 命令，根据读入的数据库号码进行数据库切换，使得之后读入的键值对可以载入到正确的数据库中。</p><p><code>key_value_pairs</code> 部分保存了数据库中的所有键值对数据，如果键值对带有过期时间，那么过期时间也会和键值对保存在一起。根据键值对的数量、类型、内容以及是否有过期时间等条件的不同，<code>key_value_pairs</code> 部分的长度也会有所不同。</p><h3 id="3-2-key-value-pairs-部分"><a href="#3-2-key-value-pairs-部分" class="headerlink" title="3.2 key_value_pairs 部分"></a>3.2 key_value_pairs 部分</h3><p>RDB 文件中的每个 <code>key_value_pairs</code> 部分都保存了一个或以上数量的键值对，如果键值对带有过期时间的话，那么键值对的过期时间也会被保存在内。</p><p>不带过期时间的键值对在 RDB 文件中由 <code>TYPE</code>、<code>key</code>、<code>value</code> 三部分组成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TYPE | key | value</span><br></pre></td></tr></table></figure><p><code>TYPE</code> 记录了 <code>value</code> 的类型，长度为1字节，值可以是以下常量的其中一个：</p><ul><li><code>REDIS_RDB_TYPE_STRING</code></li><li><code>REDIS_RDB_TYPE_LIST</code></li><li><code>REDIS_RDB_TYPE_SET</code></li><li><code>REDIS_RDB_TYPE_ZSET</code></li><li><code>REDIS_RDB_TYPE_HASH</code></li><li><code>REDIS_RDB_TYPE_LIST_ZIPLIST</code></li><li><code>REDIS_RDB_TYPE_SET_INTSET</code></li><li><code>REDIS_RDB_TYPE_ZSET_ZIPLIST</code></li><li><code>REDIS_RDB_TYPE_HASH_ZIPLIST</code></li></ul><p>以上列出的每个 <code>TYPE</code> 常量都代表了一种对象类型或者底层编码，当服务器读入 RDB 文件中的键值对数据时，程序会根据 <code>TYPE</code> 的值来决定如何读入和解释 <code>value</code> 的数据。<code>key</code> 和 <code>value</code> 分别保存了键值对的键对象和值对象：</p><ul><li>其中 <code>key</code> 总是一个字符串对象，它的编码方式和 <code>REDIS_RDB_TYPE_STRING</code> 类型的 <code>value</code> 一样。根据内容长度的不同，<code>key</code> 的长度也会有所不同。</li><li>根据 <code>TYPE</code> 类型的不同，以及保存内容长度的不同，保存 <code>value</code> 的结构和长度也会有所不同。</li></ul><p>带有过期时间的键值对在 RDB 文件中的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIRETIME_MS | ms | TYPE | key | value</span><br></pre></td></tr></table></figure><p>带有过期时间的键值对中的 <code>TYPE</code>、<code>key</code>、<code>value</code> 三个部分的意义，和前面介绍的不带过期时间的键值对的 <code>TYPE</code>、<code>key</code>、<code>value</code> 三个部分的意义完全相同，至于新增的 <code>EXPIRETIME_MS</code> 和 <code>ms</code>，它们的意义如下：</p><ul><li><code>EXPIRETIME_MS</code> 常量的长度为 1 字节，它告知读入程序，接下来要读入的将是一个以毫秒为单位的过期时间。</li><li><code>ms</code> 是一个 8 字节长的带符号整数，记录着一个以毫秒为单位的 UNIX 时间戳，这个时间戳就是键值对的过期时间。</li></ul><h3 id="3-3-value-的编码"><a href="#3-3-value-的编码" class="headerlink" title="3.3 value 的编码"></a>3.3 value 的编码</h3><p>RDB 文件中的每个 <code>value</code> 部分都保存了一个值对象，每个值对象的类型都由与之对应的 <code>TYPE</code> 记录，根据类型的不同，<code>value</code> 部分的结构、长度也会有所不同。</p><h4 id="3-3-1-字符串对象"><a href="#3-3-1-字符串对象" class="headerlink" title="3.3.1 字符串对象"></a>3.3.1 字符串对象</h4><p>如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_STRING</code>，那么 <code>value</code> 保存的就是一个字符串对象，字符串对象的编码可以是 <code>REDIS_ENCODING_INT</code> 或者 <code>REDIS_ENCODING_RAW</code>。</p><p>如果字符串对象的编码为 <code>REDIS_ENCODING_INT</code>，那么说明对象中保存的是长度不超过 32 位的整数，这种编码的对象将以下面的结构保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENCODING | integer</span><br></pre></td></tr></table></figure><p>其中，<code>ENCODING</code> 的值可以是 <code>REDIS_RDB_ENC_INT8</code>、<code>REDIS_RDB_ENC_INT16</code> 或者 <code>REDIS_RDB_ENC_INT32</code> 三个常量的其中一个，它们分别代表 RDB 文件使用 8 位（bit）、16 位或者 32 位来保存整数值 integer。</p><p>如果字符串对象的编码为 <code>REDIS_ENCODING_RAW</code>，那么说明对象所保存的是一个字符串值，根据字符串长度的不同，有压缩和不压缩两种方法来保存这个字符串：</p><ul><li>如果字符串的长度小于等于 20 字节，那么这个字符串会直接被原样保存。</li><li>如果字符串的长度大于 20 字节，那么这个字符串会被压缩之后再保存。</li></ul><p>如果服务器关闭了 RDB 文件压缩功能，那么 RDB 程序总以无压缩的方式保存字符串值。</p><p>对于没有被压缩的字符串，RDB 程序会以下面的结构来保存该字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len | string</span><br></pre></td></tr></table></figure><p>其中，<code>string</code> 部分保存了字符串值本身，而 <code>len</code> 保存了字符串值的长度。</p><p>对于压缩后的字符串，RDB 程序会以下面的结构来保存该字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REDIS_RDB_ENC_LZF | compressed_len | origin_len | compressed_string</span><br></pre></td></tr></table></figure><p>其中，<code>REDIS_RDB_ENC_LZF</code> 常量标志着字符串已经被 LZF 算法（<a href="http://liblzf.plan9.de）压缩过了，读入程序在碰到这个常量时，会根据之后的" target="_blank" rel="noopener">http://liblzf.plan9.de）压缩过了，读入程序在碰到这个常量时，会根据之后的</a> <code>compressed_len</code>、<code>origin_len</code> 和 <code>compressed_string</code> 三部分，对字符串进行解压缩：其中 <code>compressed_len</code> 记录的是字符串被压缩之后的长度，而 <code>origin_len</code> 记录的是字符串原来的长度，<code>compressed_string</code> 记录的则是被压缩之后的字符串。</p><h4 id="3-3-2-列表对象"><a href="#3-3-2-列表对象" class="headerlink" title="3.3.2 列表对象"></a>3.3.2 列表对象</h4><p>如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_LIST</code>，那么 <code>value</code> 保存的就是一个 <code>REDIS_ENCODING_LINKEDLIST</code> 编码的列表对象，RDB 文件保存这种对象的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_length | item1 | item2 | ... | itemN</span><br></pre></td></tr></table></figure><p><code>list_length</code> 记录了列表的长度，它记录列表保存了多少个项（item），读入程序可以通过这个长度知道自己应该读入多少个列表项。</p><h4 id="3-3-3-集合对象"><a href="#3-3-3-集合对象" class="headerlink" title="3.3.3 集合对象"></a>3.3.3 集合对象</h4><p>如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_SET</code>，那么 <code>value</code> 保存的就是一个 <code>REDIS_ENCODING_HT</code> 编码的集合对象，RDB 文件保存这种对象的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_size | elem1 | elem2 | ... | elemN</span><br></pre></td></tr></table></figure><p>其中，<code>set_size</code> 是集合的大小，它记录集合保存了多少个元素，读入程序可以通过这个大小知道自己应该读入多少个集合元素。</p><h4 id="3-3-4-哈希表对象"><a href="#3-3-4-哈希表对象" class="headerlink" title="3.3.4 哈希表对象"></a>3.3.4 哈希表对象</h4><p>如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_HASH</code>，那么 <code>value</code> 保存的就是一个 <code>REDIS_ENCODING_HT</code> 编码的集合对象，RDB 文件保存这种对象的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash_size | key1 | value1 | key2 | value2 | ... | keyN | valueN</span><br></pre></td></tr></table></figure><ul><li><code>hash_size</code> 记录了哈希表的大小，也即是这个哈希表保存了多少键值对，读入程序可以通过这个大小知道自己应该读入多少个键值对。</li><li>键值对的键和值都是字符串对象，所以程序会以处理字符串对象的方式来保存和读入键值对。</li></ul><h4 id="3-3-5-有序集合对象"><a href="#3-3-5-有序集合对象" class="headerlink" title="3.3.5 有序集合对象"></a>3.3.5 有序集合对象</h4><p>如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_ZSET</code>，那么 <code>value</code> 保存的就是一个 <code>REDIS_ENCODING_SKIPLIST</code> 编码的有序集合对象，RDB 文件保存这种对象的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted_set_size | member1 | score1 | member2 | score2 | ... | memberN | scoreN</span><br></pre></td></tr></table></figure><p>以 <code>element</code> 开头的部分代表有序集合中的元素，每个元素又分为成员（member）和分值（score）两部分，成员是一个字符串对象，分值则是一个 double 类型的浮点数，程序在保存 RDB 文件时会先将分值转换成字符串对象，然后再用保存字符串对象的方法将分值保存起来。</p><h4 id="3-3-6-INTSET-编码的集合"><a href="#3-3-6-INTSET-编码的集合" class="headerlink" title="3.3.6 INTSET 编码的集合"></a>3.3.6 INTSET 编码的集合</h4><p>如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_SET_INTSET</code>，那么 <code>value</code> 保存的就是一个整数集合对象，RDB 文件保存这种对象的方法是，先将整数集合转换为字符串对象，然后将这个字符串对象保存到 RDB 文件里面。</p><p>如果程序在读入 RDB 文件的过程中，碰到由整数集合对象转换成的字符串对象，那么程序会根据 <code>TYPE</code> 值的指示，先读入字符串对象，再将这个字符串对象转换成原来的整数集合对象。</p><h4 id="3-3-7-ZIPLIST-编码的列表、哈希表或者有序集合"><a href="#3-3-7-ZIPLIST-编码的列表、哈希表或者有序集合" class="headerlink" title="3.3.7 ZIPLIST 编码的列表、哈希表或者有序集合"></a>3.3.7 ZIPLIST 编码的列表、哈希表或者有序集合</h4><p>如果 TYPE 的值为 <code>REDIS_RDB_TYPE_LIST_ZIPLIST</code>、<code>REDIS_RDB_TYPE_HASH_ZIPLIST</code> 或者 <code>REDIS_RDB_TYPE_ZSET_ZIPLIST</code>，那么 <code>value</code> 保存的就是一个压缩列表对象，RDB 文件保存这种对象的方法是：</p><ol><li>将压缩列表转换成一个字符串对象。</li><li>将转换所得的字符串对象保存到RDB文件。</li></ol><p>如果程序在读入 RDB 文件的过程中，碰到由压缩列表对象转换成的字符串对象，那么程序会根据 <code>TYPE</code> 值的指示，执行以下操作：</p><ol><li>读入字符串对象，并将它转换成原来的压缩列表对象。</li><li>根据 <code>TYPE</code> 的值，设置压缩列表对象的类型：如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_LIST_ZIPLIST</code>，那么压缩列表对象的类型为列表；如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_HASH_ZIPLIST</code>，那么压缩列表对象的类型为哈希表；如果 <code>TYPE</code> 的值为 <code>REDIS_RDB_TYPE_ZSET_ZIPLIST</code>，那么压缩列表对象的类型为有序集合。</li></ol>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：复制》</title>
      <link href="/2017/10/08/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%A4%8D%E5%88%B6%E3%80%8B/"/>
      <url>/2017/10/08/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%A4%8D%E5%88%B6%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-旧版复制功能的实现"><a href="#1-旧版复制功能的实现" class="headerlink" title="1. 旧版复制功能的实现"></a>1. 旧版复制功能的实现</h2><p>Redis 的复制功能分为同步（sync）和命令传播（command propagate）两个操作：</p><ul><li>其中，同步操作用于将从服务器的数据库状态更新至主服务器当前所处的数据库状态。</li><li>而命令传播操作则用于在主服务器的数据库状态被修改，导致主从服务器的数据库状态出现不一致时，让主从服务器的数据库重新回到一致状态。</li></ul><a id="more"></a><h3 id="1-1-同步"><a href="#1-1-同步" class="headerlink" title="1.1 同步"></a>1.1 同步</h3><p>当客户端向从服务器发送 <code>SLAVEOF</code> 命令，要求从服务器复制主服务器时，从服务器首先需要执行同步操作，也即是，将从服务器的数据库状态更新至主服务器当前所处的数据库状态。</p><p>从服务器对主服务器的同步操作需要通过向主服务器发送 <code>SYNC</code> 命令来完成，以下是 <code>SYNC</code> 命令的执行步骤：</p><ol><li>从服务器向主服务器发送 <code>SYNC</code> 命令。</li><li>收到 <code>SYNC</code> 命令的主服务器执行 <code>BGSAVE</code> 命令，在后台生成一个 RDB 文件，并使用一个缓冲区记录从现在开始执行的所有写命令。</li><li>当主服务器的 <code>BGSAVE</code> 命令执行完毕时，主服务器会将 <code>BGSAVE</code> 命令生成的 RDB 文件发送给从服务器，从服务器接收并载入这个 RDB 文件，将自己的数据库状态更新至主服务器执行 <code>BGSAVE</code> 命令时的数据库状态。</li><li>主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。</li></ol><h3 id="1-2-命令传播"><a href="#1-2-命令传播" class="headerlink" title="1.2 命令传播"></a>1.2 命令传播</h3><p>在同步操作执行完毕之后，主从服务器两者的数据库将达到一致状态，但这种一致并不是一成不变的——每当主服务器执行客户端发送的写命令时，主服务器的数据库就有可能会被修改，并导致主从服务器状态不再一致。</p><p>为了让主从服务器再次回到一致状态，主服务器需要对从服务器执行命令传播操作：主服务器会将自己执行的写命令——也即是造成主从服务器不一致的那条写命令——发送给从服务器执行，当从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态。</p><h2 id="2-旧版复制功能的缺陷"><a href="#2-旧版复制功能的缺陷" class="headerlink" title="2.  旧版复制功能的缺陷"></a>2.  旧版复制功能的缺陷</h2><p>在 Redis 2.8 以前，从服务器对主服务器的复制可以分为以下两种情况：</p><ul><li>初次复制：从服务器以前没有复制过任何主服务器，或者从服务器当前要复制的主服务器和上一次复制的主服务器不同。</li><li>断线后重复制：处于命令传播阶段的主从服务器因为网络原因而中断了复制，但从服务器通过自动重连接重新连上了主服务器，并继续复制主服务器。</li></ul><p>对于初次复制来说，旧版复制功能能够很好地完成任务，但对于断线后重复制来说，旧版复制功能虽然也能让主从服务器重新回到一致状态，但效率却非常低。</p><p><code>SYNC</code> 命令是一个非常耗费资源的操作，因为每次执行 <code>SYNC</code> 命令，主从服务器需要执行以下操作：</p><ol><li>主服务器需要执行 <code>BGSAVE</code> 命令来生成 RDB 文件，这个生成操作会耗费主服务器大量的 CPU、内存和磁盘 I/O 资源。</li><li>主服务器需要将自己生成的 RDB 文件发送给从服务器，这个发送操作会耗费主从服务器大量的网络资源（带宽和流量），并对主服务器响应命令请求的时间产生影响。</li><li>接收到 RDB 文件的从服务器需要载入主服务器发来的 RDB 文件，并且在载入期间，从服务器会因为阻塞而没办法处理命令请求。</li></ol><h2 id="3-新版复制功能的实现"><a href="#3-新版复制功能的实现" class="headerlink" title="3. 新版复制功能的实现"></a>3. 新版复制功能的实现</h2><p>为了解决旧版复制功能在处理断线重复制情况时的低效问题，Redis 从 2.8 版本开始，使用 <code>PSYNC</code> 命令代替 <code>SYNC</code> 命令来执行复制时的同步操作。</p><p><code>PSYNC</code> 命令具有完整重同步（full resynchronization）和部分重同步（partial resynchronization）两种模式：</p><ul><li>其中完整重同步用于处理初次复制情况：完整重同步的执行步骤和 <code>SYNC</code> 命令的执行步骤基本一样，它们都是通过让主服务器创建并发送 RDB 文件，以及向从服务器发送保存在缓冲区里面的写命令来进行同步。</li><li>而部分重同步则用于处理断线后重复制情况：当从服务器在断线后重新连接主服务器时，如果条件允许，主服务器可以将主从服务器连接断开期间执行的写命令发送给从服务器，从服务器只要接收并执行这些写命令，就可以将数据库更新至主服务器当前所处的状态。</li></ul><h2 id="4-部分重同步的实现"><a href="#4-部分重同步的实现" class="headerlink" title="4. 部分重同步的实现"></a>4. 部分重同步的实现</h2><p>部分重同步功能由以下三个部分构成：</p><ul><li>主服务器的复制偏移量（replication offset）和从服务器的复制偏移量。</li><li>主服务器的复制积压缓冲区（replication backlog）。</li><li>服务器的运行 ID（run ID）。</li></ul><h3 id="4-1-复制偏移量"><a href="#4-1-复制偏移量" class="headerlink" title="4.1 复制偏移量"></a>4.1 复制偏移量</h3><p>执行复制的双方——主服务器和从服务器会分别维护一个复制偏移量：</p><ul><li>主服务器每次向从服务器传播 N 个字节的数据时，就将自己的复制偏移量的值加上 N。</li><li>从服务器每次收到主服务器传播来的 N 个字节的数据时，就将自己的复制偏移量的值加上N。</li></ul><p>通过对比主从服务器的复制偏移量，程序可以很容易地知道主从服务器是否处于一致状态：</p><ul><li>如果主从服务器处于一致状态，那么主从服务器两者的偏移量总是相同的。</li><li>相反，如果主从服务器两者的偏移量并不相同，那么说明主从服务器并未处于一致状态。</li></ul><h3 id="4-2-复制积压缓冲区"><a href="#4-2-复制积压缓冲区" class="headerlink" title="4.2 复制积压缓冲区"></a>4.2 复制积压缓冲区</h3><p>复制积压缓冲区是由主服务器维护的一个固定长度（fixed-size）先进先出（FIFO）队列，默认大小为 1 MB。</p><p>当主服务器进行命令传播时，它不仅会将写命令发送给所有从服务器，还会将写命令入队到复制积压缓冲区里面。因此，主服务器的复制积压缓冲区里面会保存着一部分最近传播的写命令，并且复制积压缓冲区会为队列中的每个字节记录相应的复制偏移量。</p><p>当从服务器重新连上主服务器时，从服务器会通过 <code>PSYNC</code> 命令将自己的复制偏移量 <code>offset</code> 发送给主服务器，主服务器会根据这个复制偏移量来决定对从服务器执行何种同步操作：</p><ul><li>如果 <code>offset</code> 偏移量之后的数据（也即是偏移量 offset+1 开始的数据）仍然存在于复制积压缓冲区里面，那么主服务器将对从服务器执行部分重同步操作。主服务器向从服务器发送 <code>+CONTINUE</code> 回复，表示数据同步将以部分重同步模式来进行。</li><li>相反，如果 <code>offset</code> 偏移量之后的数据已经不存在于复制积压缓冲区，那么主服务器将对从服务器执行完整重同步操作。</li></ul><p>Redis 为复制积压缓冲区设置的默认大小为 1 MB，如果主服务器需要执行大量写命令，又或者主从服务器断线后重连接所需的时间比较长，那么这个大小也许并不合适。如果复制积压缓冲区的大小设置得不恰当，那么 <code>PSYNC</code> 命令的复制重同步模式就不能正常发挥作用，因此，正确估算和设置复制积压缓冲区的大小非常重要。</p><p>复制积压缓冲区的最小大小可以根据公式 <code>second*write_size_per_second</code> 来估算：</p><ul><li>其中 <code>second</code> 为从服务器断线后重新连接上主服务器所需的平均时间（以秒计算）；</li><li>而 <code>write_size_per_second</code> 则是主服务器平均每秒产生的写命令数据量（协议格式的写命令的长度总和）；</li></ul><p>为了安全起见，可以将复制积压缓冲区的大小设为 <code>2\*second*write_size_per_second</code>，这样可以保证绝大部分断线情况都能用部分重同步来处理。</p><h3 id="4-3-服务器运行-ID"><a href="#4-3-服务器运行-ID" class="headerlink" title="4.3 服务器运行 ID"></a>4.3 服务器运行 ID</h3><p>除了复制偏移量和复制积压缓冲区之外，实现部分重同步还需要用到服务器运行 ID（run ID）：</p><ul><li>每个 Redis 服务器，不论主服务器还是从服务，都会有自己的运行 ID。</li><li>运行 ID 在服务器启动时自动生成，由 40 个随机的十六进制字符组成。</li></ul><p>当从服务器对主服务器进行初次复制时，主服务器会将自己的运行 ID 传送给从服务器，而从服务器则会将这个运行 ID 保存起来。</p><p>当从服务器断线并重新连上一个主服务器时，从服务器将向当前连接的主服务器发送之前保存的运行 ID：</p><ul><li>如果从服务器保存的运行 ID 和当前连接的主服务器的运行 ID 相同，那么说明从服务器断线之前复制的就是当前连接的这个主服务器，主服务器可以继续尝试执行部分重同步操作。</li><li>相反地，如果从服务器保存的运行 ID 和当前连接的主服务器的运行 ID 并不相同，那么说明从服务器断线之前复制的主服务器并不是当前连接的这个主服务器，主服务器将对从服务器执行完整重同步操作。</li></ul><h2 id="5-PSYNC-命令的实现"><a href="#5-PSYNC-命令的实现" class="headerlink" title="5. PSYNC 命令的实现"></a>5. PSYNC 命令的实现</h2><p><code>PSYNC</code> 命令的调用方法有两种：</p><ul><li>如果从服务器以前没有复制过任何主服务器，或者之前执行过 <code>SLAVEOF no one</code> 命令，那么从服务器在开始一次新的复制时将向主服务器发送 <code>PSYNC ? -1</code>命令，主动请求主服务器进行完整重同步（因为这时不可能执行部分重同步）；</li><li>相反地，如果从服务器已经复制过某个主服务器，那么从服务器在开始一次新的复制时将向主服务器发送 <code>PSYNC &lt;runid&gt; &lt;offset&gt;</code> 命令：其中 <code>runid</code> 是上一次复制的主服务器的运行 ID，而 <code>offset</code> 则是从服务器当前的复制偏移量，接收到这个命令的主服务器会通过这两个参数来判断应该对从服务器执行哪种同步操作。</li></ul><p>根据情况，接收到 <code>PSYNC</code> 命令的主服务器会向从服务器返回以下三种回复的其中一种：</p><ul><li>如果主服务器返回 <code>+FULLRESYNC &lt;runid&gt; &lt;offset&gt;</code> 回复，那么表示主服务器将与从服务器执行完整重同步操作：其中 <code>runid</code> 是这个主服务器的运行 ID，从服务器会将这个 ID 保存起来，在下一次发送 <code>PSYNC</code> 命令时使用；而 <code>offset</code> 则是主服务器当前的复制偏移量，从服务器会将这个值作为自己的初始化偏移量.</li><li>如果主服务器返回 <code>+CONTINUE</code> 回复，那么表示主服务器将与从服务器执行部分重同步操作，从服务器只要等着主服务器将自己缺少的那部分数据发送过来就可以了。</li><li>如果主服务器返回 <code>-ERR</code> 回复，那么表示主服务器的版本低于 Redis 2.8，它识别不了 <code>PSYNC</code> 命令，从服务器将向主服务器发送 <code>SYNC</code> 命令，并与主服务器执行完整同步操作。</li></ul><h2 id="6-复制的实现"><a href="#6-复制的实现" class="headerlink" title="6. 复制的实现"></a>6. 复制的实现</h2><h3 id="6-1-步骤-1：设置主服务器的地址和端口"><a href="#6-1-步骤-1：设置主服务器的地址和端口" class="headerlink" title="6.1 步骤 1：设置主服务器的地址和端口"></a>6.1 步骤 1：设置主服务器的地址和端口</h3><p>当客户端向从服务器发送以下命令时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:12345&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>从服务器首先要做的就是将客户端给定的主服务器 IP 地址 127.0.0.1 以及端口 6379 保存到服务器状态的 <code>masterhost</code> 属性和 <code>masterport</code> 属性里面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 主服务器的地址</span></span><br><span class="line">    <span class="keyword">char</span> *masterhost;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 主服务器的端口</span></span><br><span class="line">    <span class="keyword">int</span> masterport;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>SLAVEOF</code> 命令是一个异步命令，在完成 <code>masterhost</code> 属性和 <code>masterport</code> 属性的设置工作之后，从服务器将向发送 <code>SLAVEOF</code> 命令的客户端返回 OK，表示复制指令已经被接收，而实际的复制工作将在OK 返回之后才真正开始执行。</p><h3 id="6-2-步骤-2：建立套接字连接"><a href="#6-2-步骤-2：建立套接字连接" class="headerlink" title="6.2 步骤 2：建立套接字连接"></a>6.2 步骤 2：建立套接字连接</h3><p>在 <code>SLAVEOF</code> 命令执行之后，从服务器将根据命令所设置的 IP 地址和端口，创建连向主服务器的套接字连接。</p><p>如果从服务器创建的套接字能成功连接（connect）到主服务器，那么从服务器将为这个套接字关联一个专门用于处理复制工作的文件事件处理器，这个处理器将负责执行后续的复制工作，比如接收 RDB 文件，以及接收主服务器传播来的写命令，诸如此类。</p><p>而主服务器在接受（accept）从服务器的套接字连接之后，将为该套接字创建相应的客户端状态，并将从服务器看作是一个连接到主服务器的客户端来对待，这时从服务器将同时具有服务器（server）和客户端（client）两个身份：从服务器可以向主服务器发送命令请求，而主服务器则会向从服务器返回命令回复。</p><h3 id="6-3-步骤3：发送-PING-命令"><a href="#6-3-步骤3：发送-PING-命令" class="headerlink" title="6.3 步骤3：发送 PING 命令"></a>6.3 步骤3：发送 PING 命令</h3><p>从服务器成为主服务器的客户端之后，做的第一件事就是向主服务器发送一个 <code>PING</code> 命令。</p><p>这个 <code>PING</code> 命令有两个作用：</p><ul><li>虽然主从服务器成功建立起了套接字连接，但双方并未使用该套接字进行过任何通信，通过发送 <code>PING</code> 命令可以检查套接字的读写状态是否正常。</li><li>因为复制工作接下来的几个步骤都必须在主服务器可以正常处理命令请求的状态下才能进行，通过发送 <code>PING</code> 命令可以检查主服务器能否正常处理命令请求。</li></ul><p>从服务器在发送 <code>PING</code> 命令之后将遇到以下三种情况的其中一种：</p><ul><li>主服务器向从服务器返回了一个命令回复，但从服务器却不能在规定的时限内读取命令回复的内容（timeout），那么表示主从服务器之间的网络连接状态不佳，不能继续执行复制工作的后续步骤。当出现这种情况时，从服务器断开并重新创建连向主服务器的套接字。</li><li>如果主服务器返回一个错误，那么表示主服务器暂时没有办法处理从服务器的命令请求，不能继续执行复制工作的后续步骤。当出现这种情况时，从服务器将断开并重新创建连向主服务器的套接字。</li><li>如果从服务器读取到 “PONG” 回复，那么表示主从服务器之间的网络连接状态正常，并且主服务器可以正常处理从服务器（客户端）发送的命令请求，在这种情况下，从服务器可以继续执行复制工作的后续步骤。</li></ul><h3 id="6-4-步骤-4：身份验证"><a href="#6-4-步骤-4：身份验证" class="headerlink" title="6.4 步骤 4：身份验证"></a>6.4 步骤 4：身份验证</h3><p>从服务器在收到主服务器返回的 “PONG” 回复之后，下一步要做的就是决定是否进行身份验证：</p><ul><li>如果从服务器设置了 <code>masterauth</code> 选项，那么进行身份验证。</li><li>如果从服务器没有设置 <code>masterauth</code> 选项，那么不进行身份验证。</li></ul><p>在需要进行身份验证的情况下，从服务器将向主服务器发送一条 <code>AUTH</code> 命令，命令的参数为从服务器 <code>masterauth</code> 选项的值。</p><p>从服务器在身份验证阶段可能遇到的情况有以下几种：</p><ul><li>如果主服务器没有设置 <code>requirepass</code> 选项，并且从服务器也没有设置 <code>masterauth</code> 选项，那么主服务器将继续执行从服务器发送的命令，复制工作可以继续进行。</li><li>如果从服务器通过 <code>AUTH</code> 命令发送的密码和主服务器 <code>requirepass</code> 选项所设置的密码相同，那么主服务器将继续执行从服务器发送的命令。否则主服务器将返回一个 <code>invaild password</code> 错误。</li><li>如果主服务器设置了 <code>requireoass</code> 选项，但从服务器却没有设置 <code>masterauth</code> 选项，那么主服务器将返回一个 <code>NOAUTH</code> 错误。另一方面，如果主服务器没有设置 <code>requirepass</code> 选项，但是从服务器却设置了 <code>materauth</code> 选项，那么主服务器将返回一个 <code>no password is set</code> 错误。</li></ul><p>所有错误情况都会令从服务器中止目前的复制工作，并从创建套接字开始重新执行复制，直到身份验证通过，或者从服务器放弃执行复制为止。</p><h3 id="6-5-步骤-5：发送端口信息"><a href="#6-5-步骤-5：发送端口信息" class="headerlink" title="6.5 步骤 5：发送端口信息"></a>6.5 步骤 5：发送端口信息</h3><p>身份验证步骤之后，从服务器将执行命令 <code>REPLCONF listening-port &lt;port-number&gt;**</code>，向主服务器发送从服务器的监听端口号。</p><p>主服务器在接收到这个命令之后，会将端口号记录在从服务器所对应的客户端状态的 <code>slave_listening_port</code> 属性中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从服务器的监听端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> slave_listening_port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">｝redisClient;</span><br></pre></td></tr></table></figure><p><code>slave_listening_port</code> 属性目前唯一的作用就是在主服务器执行 <code>INFO replication</code> 命令时打印出从服务器的端口号。</p><h3 id="6-6-步骤-6：同步"><a href="#6-6-步骤-6：同步" class="headerlink" title="6.6 步骤 6：同步"></a>6.6 步骤 6：同步</h3><p>在这一步，从服务器将向主服务器发送 <code>PSYNC</code> 命令，执行同步操作，并将自己的数据库更新至主服务器数据库当前所处的状态。</p><p>值得一提的是，在同步操作执行之前，只有从服务器是主服务器的客户端，但在执行同步操作之后，主服务器也会成为从服务器的客户端：</p><ul><li>如果 <code>PSYNC</code> 命令执行的是完整重同步操作，那么主服务器需要成为从服务器的客户端，才能将保存在缓冲区里面的写命令发送给从服务器执行。</li><li>如果 <code>PSYNC</code> 命令执行的是部分重同步操作，那么主服务器需要成为从服务器的客户端，才能将保存在复制积压缓冲区中的写命令发送给从服务器执行。</li></ul><p>因此，在同步操作执行之后，主从服务器双方都是对方的客户端，它们可以互相向对方发送命令请求，或者互相向对方返回命令回复。</p><h3 id="6-6-步骤-7：命令传播"><a href="#6-6-步骤-7：命令传播" class="headerlink" title="6.6 步骤 7：命令传播"></a>6.6 步骤 7：命令传播</h3><p>当完成了同步之后，主从服务器就会进入命令传播阶段，这时主服务器只要一直将自己执行的写命令发送给从服务器，而从服务器只要一直接收并执行主服务器发来的写命令，就可以保证主从服务器一直保持一致了。</p><h2 id="7-心跳检测"><a href="#7-心跳检测" class="headerlink" title="7. 心跳检测"></a>7. 心跳检测</h2><p>在命令传播阶段，从服务器默认会以每秒一次的频率，向主服务器发送命令：<code>REPLCONF ACK &lt;replication_offset&gt;</code> ，其中 <code>replication_offset</code> 是从服务器当前的复制偏移量。</p><p>发送 <code>REPLCONF ACK</code> 命令对于主从服务器有三个作用：</p><ul><li>检测主从服务器的网络连接状态。</li><li>辅助实现 <code>min-slaves</code> 选项。</li><li>检测命令丢失。</li></ul><h3 id="7-1-检测主从服务器的网络连接状态"><a href="#7-1-检测主从服务器的网络连接状态" class="headerlink" title="7.1 检测主从服务器的网络连接状态"></a>7.1 检测主从服务器的网络连接状态</h3><p>主从服务器可以通过发送和接收 <code>REPLCONF ACK</code> 命令来检查两者之间的网络连接是否正常：如果主服务器超过一秒钟没有收到从服务器发来的 <code>REPLCONF ACK</code> 命令，那么主服务器就知道主从服务器之间的连接出现问题了。</p><p>通过向主服务器发送 <code>INFO replication</code> 命令，在列出的从服务器列表的 <code>lag</code> 一栏中，我们可以看到相应从服务器最后一次向主服务器发送 <code>REPLCONF ACK</code> 命令距离现在过了多少秒。在一般情况下，<code>lag</code> 的值应该在 0 秒或者 1 秒之间跳动，如果超过 1 秒的话，那么说明主从服务器之间的连接出现了故障。</p><h3 id="7-2-辅助实现-min-slaves-配置选项"><a href="#7-2-辅助实现-min-slaves-配置选项" class="headerlink" title="7.2 辅助实现 min-slaves 配置选项"></a>7.2 辅助实现 min-slaves 配置选项</h3><p>Redis 的 <code>min-slaves-to-write</code> 和 <code>min-slaves-max-lag</code> 两个选项可以防止主服务器在不安全的情况下执行写命令。举个例子，如果我们向主服务器提供以下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 3</span><br><span class="line">min-slaves-max-lag 10</span><br></pre></td></tr></table></figure><p>那么在从服务器的数量少于 3 个，或者三个从服务器的延迟（lag）值都大于或等于 10 秒时，主服务器将拒绝执行写命令，这里的延迟值就是上面提到的 <code>INFO replication</code> 命令的 <code>lag</code> 值。</p><h3 id="7-3-检测命令丢失"><a href="#7-3-检测命令丢失" class="headerlink" title="7.3 检测命令丢失"></a>7.3 检测命令丢失</h3><p>如果因为网络故障，主服务器传播给从服务器的写命令在半路丢失，那么当从服务器向主服务器发送 <code>REPLCONF ACK</code> 命令时，主服务器将发觉从服务器当前的复制偏移量少于自己的复制偏移量，然后主服务器就会根据从服务器提交的复制偏移量，在复制积压缓冲区里面找到从服务器缺少的数据，并将这些数据重新发送给从服务器。</p><p>主服务器向从服务器补发缺失数据这一操作的原理和部分重同步操作的原理非常相似，它们的区别在于：补发缺失数据操作在主从服务器没有断线的情况下执行，而部分重同步操作则在主从服务器断线并重连之后执行。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：集群》</title>
      <link href="/2017/10/07/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E9%9B%86%E7%BE%A4%E3%80%8B/"/>
      <url>/2017/10/07/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E9%9B%86%E7%BE%A4%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-节点"><a href="#1-节点" class="headerlink" title="1. 节点"></a>1. 节点</h2><p>一个 Redis 集群通常由多个节点（node）组成，在刚开始的时候，每个节点都是相互独立的，它们都处于一个只包含自己的集群当中，要组建一个真正可工作的集群，我们必须将各个独立的节点连接起来，构成一个包含多个节点的集群。</p><p>连接各个节点的工作可以使用 <code>CLUSTER MEET</code> 命令来完成，该命令的格式如下：<code>CLUSTER MEET &lt;ip&gt; &lt;port&gt;</code>。</p><p>向一个节点 <code>node</code> 发送 <code>CLUSTER MEET</code> 命令，可以让 <code>node</code> 节点与 <code>ip</code> 和 <code>port</code> 所指定的节点进行握手（handshake），当握手成功时，<code>node</code> 节点就会将 <code>ip</code> 和 <code>port</code> 所指定的节点添加到 <code>node</code> 节点当前所在的集群中。</p><a id="more"></a><h3 id="1-1-启动节点"><a href="#1-1-启动节点" class="headerlink" title="1.1 启动节点"></a>1.1 启动节点</h3><p>一个节点就是一个运行在集群模式下的 Redis 服务器， Redis 服务器在启动时会根据 <code>cluster-enabled</code> 配置选项的是否为 <code>yes</code> 来决定是否开启服务器的集群模式。</p><p>节点（运行在集群模式下的 Redis 服务器）会继续使用所有在单机模式中使用的服务器组件。除此之外， 节点会继续使用 <code>redisServer</code> 结构来保存服务器的状态， 使用 <code>redisClient</code> 结构来保存客户端的状态， 至于那些只有在集群模式下才会用到的数据， 节点将它们保存到了 <code>cluster.h/clusterNode</code> 结构， <code>cluster.h/clusterLink</code> 结构， 以及 <code>cluster.h/clusterState</code> 结构里面。</p><h3 id="1-2-集群数据结构"><a href="#1-2-集群数据结构" class="headerlink" title="1.2 集群数据结构"></a>1.2 集群数据结构</h3><p><code>clusterNode</code> 结构保存了一个节点的当前状态，比如节点的创建时间，节点的名字，节点当前的配置纪元，节点的 IP 和地址，等等。</p><p>每个节点都会使用一个 <code>clusterNode</code> 结构来记录自己的状态，并为集群中的所有其他节点（包括主节点和从节点）都创建一个相应的 <code>clusterNode</code> 结构，以此来记录其他节点的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterNode &#123;</span><br><span class="line">    mstime_t ctime; /* Node object creation time. */</span><br><span class="line">    char name[CLUSTER_NAMELEN]; /* Node name, hex string, sha1-size */</span><br><span class="line">    int flags;      /* CLUSTER_NODE_... */</span><br><span class="line">    uint64_t configEpoch; /* Last configEpoch observed for this node */</span><br><span class="line">    unsigned char slots[CLUSTER_SLOTS/8]; /* slots handled by this node */</span><br><span class="line">    int numslots;   /* Number of slots handled by this node */</span><br><span class="line">    int numslaves;  /* Number of slave nodes, if this is a master */</span><br><span class="line">    struct clusterNode **slaves; /* pointers to slave nodes */</span><br><span class="line">    struct clusterNode *slaveof; /* pointer to the master node. Note that it</span><br><span class="line">                                    may be NULL even if the node is a slave</span><br><span class="line">                                    if we don&apos;t have the master node in our</span><br><span class="line">                                    tables. */</span><br><span class="line">    mstime_t ping_sent;      /* Unix time we sent latest ping */</span><br><span class="line">    mstime_t pong_received;  /* Unix time we received the pong */</span><br><span class="line">    mstime_t fail_time;      /* Unix time when FAIL flag was set */</span><br><span class="line">    mstime_t voted_time;     /* Last time we voted for a slave of this master */</span><br><span class="line">    mstime_t repl_offset_time;  /* Unix time we received offset for this node */</span><br><span class="line">    mstime_t orphaned_time;     /* Starting time of orphaned master condition */</span><br><span class="line">    long long repl_offset;      /* Last known repl offset for this node. */</span><br><span class="line">    char ip[NET_IP_STR_LEN];  /* Latest known IP address of this node */</span><br><span class="line">    int port;                   /* Latest known port of this node */</span><br><span class="line">    clusterLink *link;          /* TCP/IP link with this node */</span><br><span class="line">    list *fail_reports;         /* List of nodes signaling this as failing */</span><br><span class="line">&#125; clusterNode;</span><br></pre></td></tr></table></figure><p><code>clusterNode</code> 结构的 <code>link</code> 属性是一个 <code>clusterLink</code> 结构，该结构保存了连接节点所需的有关信息，比如套接字描述符，输入缓冲区和输出缓冲区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* clusterLink encapsulates everything needed to talk with a remote node. */</span><br><span class="line">typedef struct clusterLink &#123;</span><br><span class="line">    mstime_t ctime;             /* Link creation time */</span><br><span class="line">    int fd;                     /* TCP socket file descriptor */</span><br><span class="line">    sds sndbuf;                 /* Packet send buffer */</span><br><span class="line">    sds rcvbuf;                 /* Packet reception buffer */</span><br><span class="line">    struct clusterNode *node;   /* Node related to this link if any, or NULL */</span><br><span class="line">&#125; clusterLink;</span><br></pre></td></tr></table></figure><p><code>redisClient</code> 结构和 <code>clusterLink</code> 结构都有自己的套接字描述符和输入、输出缓冲区，这两个结构的区别在于，<code>redisClient</code> 结构中的套接字和缓冲区是用于连接客户端的，而 <code>clusterLink</code> 结构中的套接字和缓冲区则是用于连接节点的。</p><p>最后，每个节点都保存着一个 <code>clusterState</code> 结构，这个结构记录了在当前节点的视角下，集群目前所处的状态——比如集群是在线还是下线，集群包含多少个节点，集群当前的配置纪元，诸如此类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterState &#123;</span><br><span class="line">    clusterNode *myself;  /* This node */</span><br><span class="line">    uint64_t currentEpoch;</span><br><span class="line">    int state;            /* CLUSTER_OK, CLUSTER_FAIL, ... */</span><br><span class="line">    int size;             /* Num of master nodes with at least one slot */</span><br><span class="line">    dict *nodes;          /* Hash table of name -&gt; clusterNode structures */</span><br><span class="line">    dict *nodes_black_list; /* Nodes we don&apos;t re-add for a few seconds. */</span><br><span class="line">    clusterNode *migrating_slots_to[CLUSTER_SLOTS];</span><br><span class="line">    clusterNode *importing_slots_from[CLUSTER_SLOTS];</span><br><span class="line">    clusterNode *slots[CLUSTER_SLOTS];</span><br><span class="line">    zskiplist *slots_to_keys;</span><br><span class="line">    /* The following fields are used to take the slave state on elections. */</span><br><span class="line">    mstime_t failover_auth_time; /* Time of previous or next election. */</span><br><span class="line">    int failover_auth_count;    /* Number of votes received so far. */</span><br><span class="line">    int failover_auth_sent;     /* True if we already asked for votes. */</span><br><span class="line">    int failover_auth_rank;     /* This slave rank for current auth request. */</span><br><span class="line">    uint64_t failover_auth_epoch; /* Epoch of the current election. */</span><br><span class="line">    int cant_failover_reason;   /* Why a slave is currently not able to</span><br><span class="line">                                   failover. See the CANT_FAILOVER_* macros. */</span><br><span class="line">    /* Manual failover state in common. */</span><br><span class="line">    mstime_t mf_end;            /* Manual failover time limit (ms unixtime).</span><br><span class="line">                                   It is zero if there is no MF in progress. */</span><br><span class="line">    /* Manual failover state of master. */</span><br><span class="line">    clusterNode *mf_slave;      /* Slave performing the manual failover. */</span><br><span class="line">    /* Manual failover state of slave. */</span><br><span class="line">    long long mf_master_offset; /* Master offset the slave needs to start MF</span><br><span class="line">                                   or zero if stil not received. */</span><br><span class="line">    int mf_can_start;           /* If non-zero signal that the manual failover</span><br><span class="line">                                   can start requesting masters vote. */</span><br><span class="line">    /* The followign fields are used by masters to take state on elections. */</span><br><span class="line">    uint64_t lastVoteEpoch;     /* Epoch of the last vote granted. */</span><br><span class="line">    int todo_before_sleep; /* Things to do in clusterBeforeSleep(). */</span><br><span class="line">    long long stats_bus_messages_sent;  /* Num of msg sent via cluster bus. */</span><br><span class="line">    long long stats_bus_messages_received; /* Num of msg rcvd via cluster bus.*/</span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><h3 id="1-3-CLUSTER-MEET-命令的实现"><a href="#1-3-CLUSTER-MEET-命令的实现" class="headerlink" title="1.3 CLUSTER MEET 命令的实现"></a>1.3 CLUSTER MEET 命令的实现</h3><p>通过向节点 A 发送 CLUSTER MEET 命令，客户端可以让接收命令的节点 A 将另一个节点 B 添加到节点 A 当前所在的集群里面：<code>CLUSTER MEET &lt;ip&gt; &lt;port&gt;</code>。</p><p>收到命令的节点 A 将与节点 B 进行握手（handshake），以此来确认彼此的存在，并为将来的进一步通信打好基础：</p><ol><li>节点 A 会为节点 B 创建一个 <code>clusterNode</code> 结构，并将该结构添加到自己的 <code>clusterState.nodes</code> 字典里面。</li><li>之后，节点 A 将根据 <code>CLUSTER MEET</code> 命令给定的 IP 地址和端口号， 向节点 B 发送一条 <code>MEET</code> 消息（message）。</li><li>如果一切顺利，节点 B 将接收到节点 A 发送的 <code>MEET</code> 消息，节点 B 会为节点 A 创建一个 <code>clusterNode</code> 结构，并将该结构添加到自己的 <code>clusterState.nodes</code> 字典里面。</li><li>之后，节点 B 将向节点 A 返回一条 <code>PONG</code> 消息。</li><li>如果一切顺利，节点 A 将接收到节点 B 返回的 <code>PONG</code> 消息，通过这条 <code>PONG</code> 消息节点 A 可以知道节点 B 已经成功地接收到了自己发送的 <code>MEET</code> 消息。</li><li>之后，节点 A 将向节点 B 返回一条 <code>PING</code> 消息。</li><li>如果一切顺利，节点 B 将接收到节点 A 返回的 <code>PING</code> 消息，通过这条 <code>PING</code> 消息节点 B 可以知道节点 A 已经成功地接收到了自己返回的 <code>PONG</code> 消息，握手完成。</li></ol><p>之后，节点 A 会将节点 B 的信息通过 Gossip 协议传播给集群中的其他节点，让其他节点也与节点 B 进行握手，最终，经过一段时间之后，节点 B 会被集群中的所有节点认识。</p><h2 id="2-槽指派"><a href="#2-槽指派" class="headerlink" title="2. 槽指派"></a>2. 槽指派</h2><p>Redis 集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为 16384 个槽（slot），数据库中的每个键都属于这 16384 个槽的其中一个，集群中的每个节点可以处理 0 个或最多 16384 个槽。 </p><p>当数据库中的 16384 个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）。</p><p>通过向节点发送 <code>CLUSTER ADDSLOTS</code> 命令，我们可以将一个或多个槽指派（assign）给节点负责：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER ADDSLOTS &lt;slot&gt; [slot …]</span><br></pre></td></tr></table></figure><h3 id="2-1-记录节点的槽指派信息"><a href="#2-1-记录节点的槽指派信息" class="headerlink" title="2.1 记录节点的槽指派信息"></a>2.1 记录节点的槽指派信息</h3><p><code>clusterNode</code> 结构的 <code>slots</code> 属性和 <code>numslot</code> 属性记录了节点负责处理哪些槽：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> slots[<span class="number">16384</span>/<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numslots;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>slots</code> 属性是一个二进制位数组（bit array），这个数组的长度为 16384/8=2048 个字节，共包含 16384 个二进制位。</p><p>Redis 以 0 为起始索引，16383 为终止索引，对 slots 数组中的 16384 个二进制位进行编号，并根据索引 <code>i</code> 上的二进制位的值来判断节点是否负责处理槽 <code>i</code>：</p><ul><li>如果 <code>slots</code> 数组在索引 <code>i</code> 上的二进制位的值为 1，那么表示节点负责处理槽 <code>i</code>；</li><li>如果 <code>slots</code> 数组在索引 <code>i</code> 上的二进制位的值为 0，那么表示节点不负责处理槽 <code>i</code>；</li></ul><p>因为取出和设置 <code>slots</code> 数组中的任意一个二进制位的值的复杂度仅为 $O(1)$，所以对于一个给定节点的 <code>slots</code> 数组来说，程序检查节点是否负责处理某个槽，又或者将某个槽指派给节点负责，这两个动作的复杂度都是 $O(1)$。</p><p>至于 <code>numslots</code> 属性则记录节点负责处理的槽的数量，也即是 <code>slots</code> 数组中值为 1 的二进制位的数量。</p><h3 id="2-2-传播节点的槽指派信息"><a href="#2-2-传播节点的槽指派信息" class="headerlink" title="2.2 传播节点的槽指派信息"></a>2.2 传播节点的槽指派信息</h3><p>一个节点除了会将自己负责处理的槽记录在 <code>clusterNode</code> 结构的 <code>slots</code> 属性和 <code>numslots</code> 属性之外，它还会将自己的 <code>slots</code> 数组通过消息发送给集群中的其他节点，以此来告知其他节点自己目前负责处理哪些槽。</p><p>当节点 A 通过消息从节点 B 那里接收到节点 B 的 <code>slots</code> 数组时，节点 A 会在自己的 <code>clusterState.nodes</code> 字典中查找节点 B 对应的 <code>clusterNode</code> 结构，并对结构中的 <code>slots</code> 数组进行保存或者更新。</p><p>因为集群中的每个节点都会将自己的 <code>slots</code> 数组通过消息发送给集群中的其他节点，并且每个接收到 <code>slots</code> 数组的节点都会将数组保存到相应节点的 <code>clusterNode</code> 结构里面，因此，集群中的每个节点都会知道数据库中的 16384 个槽分别被指派给了集群中的哪些节点。</p><h3 id="2-3-记录集群所有槽的指派信息"><a href="#2-3-记录集群所有槽的指派信息" class="headerlink" title="2.3 记录集群所有槽的指派信息"></a>2.3 记录集群所有槽的指派信息</h3><p><code>clusterState</code> 结构中的 <code>slots</code> 数组记录了集群中所有 16384 个槽的指派信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterState &#123;</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">clusterNode *slots[16384];</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><p><code>slots</code> 数组包含了 16384 个项，每个数组项都是一个指向 <code>clusterNode</code> 结构的指针：</p><ul><li>如果 <code>slots[i]</code> 指针指向 NULL，那么表示槽 <code>i</code> 尚未指派给任何节点。</li><li>如果 <code>slots[i]</code> 指针指向一个 <code>clusterNode</code> 结构，那么表示槽 <code>i</code> 已经指派给了 <code>clusterNode</code> 结构所代表的节点。</li></ul><p>如果只将槽指派信息保存在各个节点的 <code>clusterNode.slots</code> 数组里，会出现一些无法高效地解决的问题，而 <code>clusterState.slots</code> 数组的存在解决了这些问题：</p><ul><li>如果节点只使用 <code>clusterNode.slots</code> 数组来记录槽的指派信息，那么为了知道槽 <code>i</code> 是否已经被指派，或者槽 <code>i</code> 被指派给了哪个节点，程序需要遍历 <code>clusterState.nodes</code> 字典中的所有 <code>clusterNode</code> 结构，检查这些结构的 <code>slots</code> 数组，直到找到负责处理槽 <code>i</code> 的节点为止，这个过程的复杂度为 $O(N)$，其中 $N$ 为 <code>clusterState.nodes</code> 字典保存的 <code>clusterNode</code> 结构的数量。</li><li>而通过将所有槽的指派信息保存在 <code>clusterState.slots</code> 数组里面，程序要检查槽 <code>i</code> 是否已经被指派，又或者取得负责处理槽 <code>i</code> 的节点，只需要访问 <code>clusterState.slots[i]</code> 的值即可，这个操作的复杂度仅为 $O(1)$。</li></ul><p>要说明的一点是，虽然 <code>clusterState.slots</code> 数组中记录了集群中所有槽的指派信息，但使用 <code>clusterNode</code> 结构的 <code>slots</code> 数组来记录单个节点的槽指派信息仍然是有必要的：</p><ul><li>因为当程序需要将某个节点的槽指派信息通过消息发送给其他节点时，程序只需要将相应节点的 <code>clusterNode.slots</code> 数组整个发送出去就可以了。</li><li>另一方面，如果 Redis 不使用 <code>clusterNode.slots</code> 数组，而单独使用 <code>clusterState.slots</code> 数组的话，那么每次要将节点 A 的槽指派信息传播给其他节点时，程序必须先遍历整个 <code>clusterState.slots</code> 数组，记录节点 A 负责处理哪些槽，然后才能发送节点 A 的槽指派信息，这比直接发送 <code>clusterNode.slots</code> 数组要麻烦和低效得多。</li></ul><p><code>clusterState.slots</code> 数组记录了集群中所有槽的指派信息，而 <code>clusterNode.slots</code> 数组只记录了 <code>clusterNode</code> 结构所代表的节点的槽指派信息，这是两个 <code>slots</code> 数组的关键区别所在。</p><h3 id="2-4-CLUSTER-ADDSLOTS命令的实现"><a href="#2-4-CLUSTER-ADDSLOTS命令的实现" class="headerlink" title="2.4 CLUSTER ADDSLOTS命令的实现"></a>2.4 CLUSTER ADDSLOTS命令的实现</h3><p><code>CLUSTER ADDSLOTS</code> 命令接受一个或多个槽作为参数，并将所有输入的槽指派给接收该命令的节点负责：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER ADDSLOTS &lt;slot&gt; [slot ...]</span><br></pre></td></tr></table></figure><p><code>CLUSTER ADDSLOTS</code> 命令的实现可以用以下伪代码来表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def CLUSTER_ADDSLOTS(*all_input_slots):</span><br><span class="line"></span><br><span class="line"># 遍历所有输入槽，检查它们是否都是未指派槽</span><br><span class="line">for i in all_input_slots:</span><br><span class="line"></span><br><span class="line"># 如果有哪怕一个槽已经被指派给了某个节点</span><br><span class="line"># 那么向客户端返回错误，并终止命令执行</span><br><span class="line">if clusterState.slots[i] != NULL:</span><br><span class="line">reply_error()</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line"># 如果所有输入槽都是未指派槽</span><br><span class="line"># 那么再次遍历所有输入槽，将这些槽指派给当前节点</span><br><span class="line">for i in all_input_slots:</span><br><span class="line"></span><br><span class="line"># 设置clusterState结构的slots数组</span><br><span class="line"># 将slots[i]的指针指向代表当前节点的clusterNode结构</span><br><span class="line">clusterState.slots[i] = clusterState.myself</span><br><span class="line"></span><br><span class="line"># 访问代表当前节点的clusterNode结构的slots数组</span><br><span class="line"># 将数组在索引i上的二进制位设置为 1</span><br><span class="line">setSlotBit(clusterState.myself.slots, i)</span><br></pre></td></tr></table></figure><p>最后，在 <code>CLUSTER ADDSLOTS</code> 命令执行完毕之后，节点会通过发送消息告知集群中的其他节点，自己目前正在负责处理哪些槽。</p><h2 id="3-在集群中执行命令"><a href="#3-在集群中执行命令" class="headerlink" title="3. 在集群中执行命令"></a>3. 在集群中执行命令</h2><p>在对数据库中的 16384 个槽都进行了指派之后，集群就会进入上线状态，这时客户端就可以向集群中的节点发送数据命令了。</p><p>当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己：</p><ul><li>如果键所在的槽正好指派了当前节点，那么节点直接执行这个命令。</li><li>如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个 <code>MOVED</code> 错误，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。</li></ul><h3 id="3-1-计算键属于哪个槽"><a href="#3-1-计算键属于哪个槽" class="headerlink" title="3.1 计算键属于哪个槽"></a>3.1 计算键属于哪个槽</h3><p>节点使用以下算法来计算给定键 <code>key</code> 属于哪个槽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def slot_number(key):</span><br><span class="line">return CRC16(key) &amp; 16383</span><br></pre></td></tr></table></figure><p>其中 <code>CRC16(key)</code> 语句用于计算键 <code>key</code> 的 <code>CRC-16</code> 校验和，而 <code>&amp; 16383</code> 语句则用于计算出一个介于0 至 16383 之间的整数作为键 <code>key</code> 的槽号。</p><p>使用 <code>CLUSTER KEYSLOT &lt;key&gt;</code> 命令可以查看一个给定键属于哪个槽，以下是该命令的伪代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def CLUSTER_KEYSLOT(key)</span><br><span class="line"></span><br><span class="line"># 计算槽号</span><br><span class="line">slot = slot_number(key)</span><br><span class="line"></span><br><span class="line"># 将槽号返回给客户端</span><br><span class="line">reply_client(slot)</span><br></pre></td></tr></table></figure><h3 id="3-2-判断槽是否由当前节点负责处理"><a href="#3-2-判断槽是否由当前节点负责处理" class="headerlink" title="3.2 判断槽是否由当前节点负责处理"></a>3.2 判断槽是否由当前节点负责处理</h3><p>当节点计算出键所属的槽 <code>i</code> 之后，节点就会检查自己在 <code>clusterState.slots</code> 数组中的项 <code>i</code>，判断键所在的槽是否由自己负责：</p><ol><li>如果 <code>clusterState.slots[i]</code> 等于 <code>clusterState.myself</code>，那么说明槽 <code>i</code> 由当前节点负责，节点可以执行客户端发送的命令。</li><li>如果 <code>clusterState.slots[i]</code> 不等于 <code>clusterState.myself</code>，那么说明槽 <code>i</code> 并非由当前节点负责，节点会根据 <code>clusterState.slots[i]</code> 指向的 <code>clusterNode</code> 结构所记录的节点 IP 和端口，向客户端返回 <code>MOVED</code> 错误，指引客户端转向至正在处理槽 <code>i</code> 的节点。</li></ol><h3 id="3-3-MOVED-错误"><a href="#3-3-MOVED-错误" class="headerlink" title="3.3 MOVED 错误"></a>3.3 MOVED 错误</h3><p>当节点发现键所在的槽并非由自己负责处理时，节点会向客户端返回一个 <code>MOVED</code> 错误，指引客户端转向至正在负责槽的节点，<code>MOVED</code> 错误的格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOVED &lt;slot&gt; &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>slot</code> 为键所在的槽，而 <code>ip</code> 和 <code>port</code> 则是负责处理槽 <code>slot</code> 的节点的 IP 地址和端口号。</p><p>当客户端接收到节点返回的 <code>MOVED</code> 错误时，客户端会根据 <code>MOVED</code> 错误中提供的 IP 地址和端口号，转向至负责处理槽 <code>slot</code> 的节点，并向该节点重新发送之前想要执行的命令。</p><p>一个集群客户端通常会与集群中的多个节点创建套接字连接，而所谓的节点转向实际上就是换一个套接字来发送命令。</p><p>如果客户端尚未与想要转向的节点创建套接字连接，那么客户端会现根据 <code>MOVED</code> 错误提供的 IP 地址和端口号来连接节点，然后再进行转向。</p><p>集群模式的 <code>redis-cli</code> 客户端在接收到 <code>MOVED</code> 错误时，并不会打印出 <code>MOVED</code> 错误，而是根据 <code>MOVED</code> 错误自动进行节点跳转，并打印出转向信息，所以我们是看不见节点返回的 <code>MOVED</code> 错误的。</p><p>但是，如果我们使用单机（stand alone）模式的 <code>redis-cli</code> 客户端，再次向节点发送相同的命令，那么 <code>MOVED</code> 错误就会被客户端打印出来。这是因为单机模式的 <code>redis-cli</code> 客户端不清楚 <code>MOVED</code> 错误的作用，所以它只会直接将 <code>MOVED</code> 错误直接打印出来，而不会进行自动转向。</p><h3 id="3-4-节点数据库的实现"><a href="#3-4-节点数据库的实现" class="headerlink" title="3.4 节点数据库的实现"></a>3.4 节点数据库的实现</h3><p>节点和单机服务器在数据库方面的一个区别是，节点只能使用 0 号数据库，而单机 Redis 服务器则没有这一限制。</p><p>另外，除了将键值对保存在数据库里面之外，节点还会用 <code>clusterState</code> 结构中的 <code>slots_to_keys</code> 跳跃表来保存键和槽之间的关系：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typdef <span class="class"><span class="keyword">struct</span> <span class="title">clusterState</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line"> zskiplist *slots_to_keys;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><p><code>slots_to_keys</code> 跳跃表每个节点的分值（score）都是一个槽号，而每个节点的成员（member）都是一个数据库键：</p><ul><li>每当节点往数据库中添加一个新的键值对时，节点就会将这个键以及键的槽号关联到 <code>slots_to_keys</code> 跳跃表。</li><li>当节点删除数据库中的某个键值对时，节点就会在 <code>slots_to_keys</code> 跳跃表解除被删除键与槽号的关联。</li></ul><p>通过在 <code>slots_to_keys</code> 跳跃表中记录各个数据库键所属的槽，节点可以很方便地对属于某个或某些槽的所有数据库键进行批量操作。</p><h2 id="4-重新分片"><a href="#4-重新分片" class="headerlink" title="4. 重新分片"></a>4. 重新分片</h2><p>Redis 集群的重新分片操作可以将任意数量已经指派给某个节点（源节点）的槽改为指派给另一个节点（目标节点），并且相关槽所属的键值对也会从源节点被移动到目标节点。 </p><p>重新分片操作可以在线（online）进行，在重新分片过程中，集群不需要下线，并且源节点和目标节点都可以继续处理命令请求。</p><p>Redis 集群的重新分片操作由 Redis 的集群管理软件 redis-trib 负责执行，Redis 提供了进行重新分片所需的所有命令，而 redis-trib 则通过向源节点和目标节点发送命令来进行重新分片操作。</p><p>redis-trib 对集群的单个槽 slot 进行重新分片的步骤如下：</p><ol><li>redis-trib 对目标节点发送 <code>CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;source_id&gt;</code> 命令，让目标节点准备好从源节点导入（import）属于槽 <code>slot</code> 的键值对。</li><li><code>redis-trib</code> 对源节点发送 <code>CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;target_id&gt;</code> 命令，让源节点准备好将属于槽 <code>slot</code> 的键值对迁移（migrate）至目标节点。</li><li><code>redis-trib</code> 向源节点发送 <code>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;</code> 命令，获得最多 <code>count</code> 个属于槽 <code>slot</code> 的键值对的键名。</li><li>对于步骤 3 获得的每个键名，redis-trib 都向源节点发送一个 <code>MIGRATE &lt;target_ip&gt; &lt;target_port&gt; &lt;key_name&gt; 0 &lt;timeout&gt;</code> 命令，将被选中的键原子地从源节点迁移至目标节点。</li><li>重复执行步骤 3 和步骤 4，直到源节点保存的所有属于槽 <code>slot</code> 的键值对都被迁移至目标节点为止。</li><li>redis-trib 向集群中的任意一个节点发送 <code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;target_id&gt;</code> 命令，将槽 <code>slot</code> 指派给目标节点，这一指派信息会通过消息发送至整个集群，最终集群中的所有节点都会知道槽 <code>slot</code> 已经被指派给了目标节点。</li></ol><p>如果重新分片涉及多个槽，那么 redis-trib 将对每个给定的槽分别执行上面给出的步骤。</p><h2 id="5-ASK-错误"><a href="#5-ASK-错误" class="headerlink" title="5. ASK 错误"></a>5. ASK 错误</h2><p>在进行重新分片期间，源节点向目标节点迁移一个槽的过程中，可能会出现这样一种情况：属于被迁移槽的一部分键值对保存在源节点里面，而另一部分键值对则保存在目标节点里面。</p><p>当客户端向源节点发送一个与数据库键有关的命令，并且命令要处理的数据库键恰好就属于正在被迁移的槽时：</p><ul><li>源节点会先在自己的数据库里面查找指定的键，如果找到的话，就直接执行客户端发送的命令</li><li>相反地，如果源节点没能在自己的数据库里面找到指定的键，那么这个键有可能已经被迁移到了目标节点，源节点将向客户端返回一个 <code>ASK</code> 错误，指引客户端转向正在导入槽的目标节点，并再次发送之前想要执行的命令。</li></ul><h3 id="5-1-CLUSTER-SETSLOT-IMPORTING-命令的实现"><a href="#5-1-CLUSTER-SETSLOT-IMPORTING-命令的实现" class="headerlink" title="5.1 CLUSTER SETSLOT IMPORTING 命令的实现"></a>5.1 CLUSTER SETSLOT IMPORTING 命令的实现</h3><p><code>clusterState</code> 结构的 <code>importing_slots_from</code> 数组记录了当前节点正在从其他节点导入的槽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterState &#123;</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">clusterNode *importing_slots_from[16384]</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><p>如果 <code>importing_slots_from[i]</code> 的值不为 NULL，而是指向一个 <code>clusterNode</code> 结构，那么表示当前节点正在从 <code>clusterNode</code> 所代表的节点导入槽 <code>i</code>。</p><p>在对集群进行重新分片的时候，向目标节点发送命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 可以将目标节点 <code>clusterState.importing_slots_from[i]</code> 的值设置为 <code>source_id</code> 所代表节点的 <code>clusterNode</code> 结构。</p><h3 id="5-2-CLUSTER-SETSLOT-MIGRATING-命令的实现"><a href="#5-2-CLUSTER-SETSLOT-MIGRATING-命令的实现" class="headerlink" title="5.2 CLUSTER SETSLOT MIGRATING 命令的实现"></a>5.2 CLUSTER SETSLOT MIGRATING 命令的实现</h3><p><code>clusterState</code> 结构的 <code>migrating_slots_to</code> 数组记录了当前节点正在迁移至其他节点的槽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct clusterState &#123;</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">clusterNode *migrating_slots_to[16384]</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><p>如果 <code>migrating_slots_to[i]</code> 的值不为 NULL，而是指向一个 <code>clusterNode</code> 结构，那么表示当前节点正在将槽 <code>i</code> 迁移至 <code>clusterNode</code> 所代表的节点。</p><p>在对集群进行重新分片的时候，向源节点发送命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER SETSLOT &lt;i&gt; MIGRATING &lt;target_id&gt;</span><br></pre></td></tr></table></figure><p> 可以将源节点 <code>clusterState.migrating_slots_to[i]</code> 的值设置为 <code>target_id</code> 所代表节点的 <code>clusterNode</code> 结构。</p><h3 id="5-3-ASK-错误"><a href="#5-3-ASK-错误" class="headerlink" title="5.3 ASK 错误"></a>5.3 ASK 错误</h3><p>如果节点收到一个关于键 <code>key</code> 的命令请求，并且键 <code>key</code> 所属的槽 <code>i</code> 正好就指派给了这个节点，那么节点会尝试在自己的数据库里查找键 <code>key</code>，如果找到了的话，节点就直接执行客户端发送的命令。</p><p>与此相反，如果节点没有在自己的数据库里找到键 <code>key</code>，那么节点会检查自己的 <code>clusterState.migrating_slots_to[i]</code>，看键 <code>key</code> 所属的槽 <code>i</code> 是否正在进行迁移，如果槽 <code>i</code> 的确在进行迁移的话，那么节点会向客户端发送一个 <code>ASK</code> 错误，引导客户端到正在导入槽 <code>i</code> 的节点去超找键 <code>key</code>。</p><p>接到 <code>ASK</code> 错误的客户端会根据错误提供的 IP 和端口号，转向至正在导入槽的目标节点，然后首先向目标节点发送一个 <code>ASKING</code> 命令，之后再重新发送原本想要执行的命令。</p><h3 id="5-4-ASKING-命令"><a href="#5-4-ASKING-命令" class="headerlink" title="5.4 ASKING 命令"></a>5.4 ASKING 命令</h3><p><code>ASKING</code> 命令唯一要做的就是打开发送该命令的客户端的 <code>REDIS_ASKING</code> 标识，以下是该命令的伪代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def ASKING():</span><br><span class="line"></span><br><span class="line"># 打开标识</span><br><span class="line">client.flags != REDIS_ASKING</span><br><span class="line"></span><br><span class="line"># 向客户端发送 OK 回复</span><br><span class="line">reply(&quot;OK)</span><br></pre></td></tr></table></figure><p>在一般情况下，如果客户端向节点发送一个关于槽 <code>i</code> 的命令，而槽 <code>i</code> 又没有指派给这个节点的话，那么节点将向客户端返回一个 <code>MOVED</code> 错误；但是，如果节点的 <code>clusterState.importing_slots_from[i]</code> 显示节点正在导入槽 <code>i</code>， 并且发送命令的客户端带有 <code>REDIS_ASKING</code> 标识，那么节点将破例执行这个关于槽 <code>i</code> 的命令一次。</p><p>当客户端接收到 <code>ASK</code> 错误并转向至正在导入槽的节点时，客户端会先向节点发送一个 <code>ASKING</code> 命令，然后才重新发送想要执行的命令，这是因为如果客户端不发送 <code>ASKING</code> 命令，而直接发送想要执行的命令的话，那么客户端发送的命令将被节点拒绝执行，并返回 <code>MOVED</code> 错误。</p><p>另外要注意的是，客户端的 <code>REDIS_ASKING</code> 标识是一个一次性标识，当节点执行了一个带有 <code>REDIS_ASKING</code> 标识的客户端发送的命令之后，客户端的 <code>REDIS_ASKING</code> 标识就会被移除。</p><h3 id="5-5-ASK-错误和-MOVED-错误的区别"><a href="#5-5-ASK-错误和-MOVED-错误的区别" class="headerlink" title="5.5 ASK 错误和 MOVED 错误的区别"></a>5.5 ASK 错误和 MOVED 错误的区别</h3><p><code>ASK</code> 错误和 <code>MOVED</code> 错误都会导致客户端转向，它们的区别在于：</p><ul><li><code>MOVED</code> 错误代表槽的负责权已经从一个节点转移到了另一个节点：客户端收到关于槽 <code>i</code> 的 <code>MOVED</code> 错误之后，客户端每次收到关于槽 <code>i</code> 的命令请求时，都可以直接将命令请求发送至 <code>MOVED</code> 错误所指向的节点，因为该节点就是目前负责处理槽 <code>i</code> 的节点。</li><li>与此相反，<code>ASK</code> 错误只是两个节点在迁移槽的过程中使用的一种临时措施：在客户端收到关于槽 <code>i</code> 的 <code>ASK</code> 错误之后，客户端只会在接下来的一次命令请求中将关于槽 <code>i</code> 的命令请求发送至 <code>ASK</code> 错误所指向的节点，但这种转向不会对客户端今后发送关于槽 <code>i</code> 的命令请求产生任何影响，客户端仍然会将关于槽 <code>i</code> 的命令请求发送至目前负责处理槽 <code>i</code> 的节点，除非 <code>ASK</code> 错误再次出现。</li></ul><h2 id="6-复制与故障迁移"><a href="#6-复制与故障迁移" class="headerlink" title="6. 复制与故障迁移"></a>6. 复制与故障迁移</h2><p>Redis 集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。</p><h3 id="6-1-设置从节点"><a href="#6-1-设置从节点" class="headerlink" title="6.1 设置从节点"></a>6.1 设置从节点</h3><p>向一个节点发送命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER REPLICATE &lt;node_id&gt;</span><br></pre></td></tr></table></figure><p>可以让接收命令的节点成为 <code>node_id</code> 所指定节点的从节点，并开始对主节点进行复制：</p><ul><li><p>接收到该命令的节点首先会在自己的  <code>clusterState.nodes</code> 字典里找到 <code>node_id</code> 所对应节点的 <code>clusterNode</code> 结构，并将自己的 <code>clusterState.myself.slaveof</code> 指针指向这个结构，以此来记录这个节点正在复制的主节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> &#123;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果这是一个从节点，那么指向主节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> *<span class="title">slaveof</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后节点会修改自己在 <code>clusterState.myself.flags</code> 中的属性，关闭原本的 <code>REDIS_NODE_MASTER</code> 标识，打开 <code>REDIS_NODE_SLAVE</code> 标识，表示这个节点已经由原来的主节点变成了从节点。</p></li><li><p>最后，节点会调用复制代码，并根据 <code>clusterState.myself.slaveof</code> 指向的 <code>clusterNode</code> 结构所保存的 IP 地址和端口号，对主节点进行复制。因为节点的复制功能和单机 Redis 服务器的复制功能使用了相同的代码，所以让从节点复制主节点相当于向从节点发送命令 <code>SLAVEOF &lt;master_ip&gt; &lt;master_port&gt;</code>。</p></li></ul><p>一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。</p><p>集群中的所有节点都会在代表主节点的 <code>clusterNode</code> 结构的 <code>slaves</code> 属性和 <code>numslaves</code> 属性中记录正在复制这个主节点的从节点名单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> &#123;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正在复制这个主节点的从节点数量</span></span><br><span class="line"><span class="keyword">int</span> numslaves;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个数组</span></span><br><span class="line"><span class="comment">// 每个数组项指向一个正在复制这个主节点的从节点的 clusterNode 结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> **<span class="title">slaves</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-故障检测"><a href="#6-2-故障检测" class="headerlink" title="6.2 故障检测"></a>6.2 故障检测</h3><p>集群中的每个节点都会定期地向集群中的其他节点发送 <code>PING</code> 消息，以此来检测对方是否在线，如果接收 <code>PING</code> 消息的节点没有在规定的时间内，向发送 <code>PING</code> 消息的节点返回 <code>PONG</code> 消息，那么发送 <code>PING</code> 消息的节点就会将接收 <code>PING</code> 消息的节点标记为疑似下线（probable fail，PFAIL）。</p><p>集群中的各个节点会通过互相发送消息的方式来交换集群中各个节点的状态信息。</p><p>当一个主节点 A 通过消息得知主节点 B 认为主节点 C 进入了疑似下线状态时，主节点 A 会在自己的 <code>clusterState.nodes</code> 字典中找到主节点 C 所对应的 <code>clusterNode</code> 结构，并将主节点 B 的下线报告（failure report）添加到 <code>clusterNode</code> 结构的 <code>fail_reports</code> 链表里面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 一个链表，记录了所有其他节点对该节点的下线报告</span></span><br><span class="line"><span class="built_in">list</span> *fail_reports;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个下线报告由一个 <code>clusterNodeFailReport</code> 结构表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNodeFailReport</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告目标节点已经下线的节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> *<span class="title">node</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一次从 node 节点收到下线报告的时间</span></span><br><span class="line"><span class="comment">// 程序使用这个时间戳来检查下线报告是否过期</span></span><br><span class="line"><span class="comment">// (与当前时间差太久的下线报告会被删除)</span></span><br><span class="line"><span class="keyword">mstime_t</span> time;</span><br><span class="line">&#125; <span class="keyword">typedef</span> clusterNodeFailReport;</span><br></pre></td></tr></table></figure><p>如果在一个集群里面，半数以上负责处理槽的主节点都将某个主节点 x 报告为疑似下线，那么这个主节点 x 将被标记为已下线（FAIL），将主节点 x 标记为已下线的节点会向集群广播一条关于主节点 x 的 <code>FAIL</code> 消息，所有收到这条 <code>FAIL</code> 消息的节点都会立即将主节点 x 标记为已下线。</p><h3 id="6-3-故障转移"><a href="#6-3-故障转移" class="headerlink" title="6.3 故障转移"></a>6.3 故障转移</h3><p>当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移的执行步骤：</p><ol><li>复制下线主节点的所有从节点里面，会有一个从节点被选中。</li><li>被选中的从节点会执行 <code>SLAVEOF no one</code> 命令，成为新的主节点。</li><li>新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。 </li><li>新的主节点向集群广播一条 <code>PONG</code> 消息，这条 <code>PONG</code> 消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。</li><li>新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。</li></ol><h3 id="6-4-选举新的主节点"><a href="#6-4-选举新的主节点" class="headerlink" title="6.4 选举新的主节点"></a>6.4 选举新的主节点</h3><p>新的主节点是通过选举产生的，以下是集群选举新的主节点的方法：</p><ol><li>集群的配置纪元是一个自增计数器，它的初始值为 0。</li><li>当集群里的某个节点开始一次故障转移操作时，集群配置纪元的值会被增一。</li><li>对于每个配置纪元，集群里每个负责处理槽的主节点都有一次投票的机会，而第一个向主节点要求投票的从节点将获得主节点的投票。</li><li>当从节点发现自己正在复制的主节点进入已下线状态时，从节点会想集群广播一条 <code>CLUSTER_TYPE_FAILOVER_AUTH_REQUEST</code> 消息，要求所有接收到这条消息、并且具有投票权的主节点向这个从节点投票。</li><li>如果一个主节点具有投票权（它正在负责处理槽），并且这个主节点尚未投票给其他从节点，那么主节点将向要求投票的从节点返回一条 <code>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</code> 消息，表示这个主节点支持从节点成为新的主节点。</li><li>每个参与选举的从节点都会接收 <code>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</code> 消息，并根据自己收到了多少条这种消息来同济自己获得了多少主节点的支持。</li><li>如果集群里有 N 个具有投票权的主节点，那么当一个从节点收集到大于等于 N/2+1 张支持票时，这个从节点就会当选为新的主节点。</li><li>因为在每一个配置纪元里面，每个具有投票权的主节点只能投一次票，所以如果有 N 个主节点进行投票，那么具有大于等于 N/2+1 张支持票的从节点只会有一个，这确保了新的主节点只会有一个。</li><li>如果在一个配置纪元里面没有从节点能收集到足够多的支持票，那么集群进入一个新的配置纪元，并再次进行选举，知道选出新的主节点为止。</li></ol><h2 id="7-消息"><a href="#7-消息" class="headerlink" title="7. 消息"></a>7. 消息</h2><p>集群中的各个节点通过发送和接收消息（message）来进行通信，我们称发送消息的节点为发送者（sender），接收消息的节点为接收者（receiver）。节点发送的消息主要有以下五种：</p><ul><li><code>MEET</code> 消息：当发送者接到客户端发送的 <code>CLUSTER MEET</code> 命令时，发送者会向接收者发送 <code>MEET</code> 消息， 请求接收者加入到发送者当前所处的集群里面。</li><li><code>PING</code> 消息：集群里的每个节点默认每隔一秒钟就会从已知节点列表中随机选出五个节点，然后对这五个节点中最长时间没有发送过 <code>PING</code> 消息的节点发送 <code>PING</code> 消息，以此来检测被选中的节点是否在线。除此以外，如果节点 A 最后一次收到节点 B 发送的 <code>PONG</code> 消息的时间，距离当前时间已经超过了节点 A 的 <code>cluster-node-timeout</code> 选项设置时长的一半，那么节点 A 也会向节点 B 发送 <code>PING</code> 消息，这可以防止节点 A 因为长时间没有随机选中节点 B 作为 <code>PING</code> 消息的发送对象而导致对节点 B 的信息更新滞后。</li><li><code>PONG</code> 消息：当接收者收到发送者发来的 <code>MEET</code> 消息或者 <code>PING</code> 消息时，为了向发送者确认这条 <code>MEET</code> 消息或者 <code>PING</code> 消息已到达，接收者会向发送者返回一条 <code>PONG</code> 消息。另外，一个节点也可以通过向集群广播 <code>PONG</code> 消息来让集群中的其他节点立即刷新关于这个节点的认识，例如当一次故障转移操作成功之后，新的主节点会向集群广播一条 <code>PONG</code> 消息，以此来让集群中的其他节点立即知道这个节点已经变成了主节点，并且接管了已下线节点负责的槽。</li><li><code>FAIL</code> 消息：当一个主节点 A 判断另一个主节点 B 已经进入 <code>FAIL</code> 状态时，节点 A 会向集群广播一条关于节点 B 的 <code>FAIL</code> 消息，所有收到这条消息的节点都会立即将节点 B 标记为已下线。</li><li><code>PUBLISH</code> 消息：当节点收到一个 <code>PUBLISH</code> 命令时，节点会执行这个命令，并向集群广播一条 <code>PUBLISH</code> 消息，所有接收到这条 <code>PUBLISH</code> 消息的节点都会执行相同的 <code>PUBLISH</code> 命令。</li></ul><p>一条消息由消息头（header）和消息正文（data）组成。</p><h3 id="7-1-消息头"><a href="#7-1-消息头" class="headerlink" title="7.1 消息头"></a>7.1 消息头</h3><p>节点发送的所有消息都由一个消息头包裹，消息头除了包含消息正文之外，还记录了消息发送者自身的一些信息，因为这些信息也会被消息接受者用到，所以严格来讲，我们可以认为消息头本身也是消息的一部分。</p><p>每个消息头都由一个<code>cluster.h/clusterMsg</code>结构表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="comment">// 消息的长度，包括消息头和消息正文</span></span><br><span class="line">  <span class="keyword">uint32_t</span> totlen;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 消息的类型</span></span><br><span class="line">  <span class="keyword">uint16_t</span> type;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 消息正文包含的节点信息数量</span></span><br><span class="line">  <span class="comment">// 只在发送MEET、PING、PONG这三种Gossip协议的消息时使用</span></span><br><span class="line">  <span class="keyword">uint16_t</span> count;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送者所处的配置纪元</span></span><br><span class="line">  <span class="keyword">uint64_t</span> currentEpoch;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果发送者是一个master，那么这里记录的是发送者的配置纪元</span></span><br><span class="line">  <span class="comment">// 如果发送者是一个slave，那么这里记录的是发送者正在复制的master的配置纪元</span></span><br><span class="line">  <span class="keyword">uint64_t</span> configEpoch;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送者的名字(ID)</span></span><br><span class="line">  <span class="keyword">char</span> sender[REDIS_CLUSTER_NAMELEN];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送者目前的槽指派信息</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> myslots[REDIS_CLUSTER_SLOTS/<span class="number">8</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果发送者是一个slave，那么这里记录的是它正在复制的master的名字</span></span><br><span class="line">  <span class="comment">// 如果发送者是一个master，那么这里记录的是REDIS_NODE_NULL_NAME</span></span><br><span class="line">  <span class="keyword">char</span> slaveof[REDIS_CLUSTER_NAMELEN];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送者的端口号</span></span><br><span class="line">  <span class="keyword">uint16_t</span> port;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送者的标识值</span></span><br><span class="line">  <span class="keyword">uint16_t</span> flags;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送者所处集群的状态</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> state;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 消息的正文</span></span><br><span class="line">  <span class="keyword">union</span> clusterMsgData data;</span><br><span class="line">&#125; cllusterMsg;</span><br></pre></td></tr></table></figure><p><code>clusterMsg.data</code> 属性指向联合体 <code>cluster.h/clusterMsgData</code>，这个联合体就是消息的正文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> clusterMsgData &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// 每条 MEET、PING、PONG 消息都包含两个 clusterMsgDataGossip 结构</span></span><br><span class="line">    clusterMsgDataGossip[<span class="number">1</span>];</span><br><span class="line">  &#125; ping;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// FAIL 消息的正文</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    clusterMsgDataFail about;</span><br><span class="line">  &#125; fail;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// PUBLISH 消息的正文</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    clusterMsgDataPublish msg;</span><br><span class="line">  &#125; publish;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>clusterMsg</code> 结构的 <code>currentEpoch</code>、<code>sender</code>、<code>myslots</code> 等属性记录了发送者的节点信息，接收者可以根据这些信息，在自己的 <code>clusterState.nodes</code>字典中找到发送者对应的 <code>clusterNode</code> 结构进行更新。</p><h3 id="7-2-MEET、PING、PONG-消息的实现"><a href="#7-2-MEET、PING、PONG-消息的实现" class="headerlink" title="7.2 MEET、PING、PONG 消息的实现"></a>7.2 MEET、PING、PONG 消息的实现</h3><p>Redis 集群中的各个节点通过 Gossip 协议来交换节点的状态信息，其中 Gossip 协议由 <code>MEET</code>、<code>PING</code>、<code>PONG</code> 三种消息实现，这三种消息的正文都是由两个 <code>cluster.h/clusterMsgDataGossip</code> 结构组成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="comment">// 节点的名字</span></span><br><span class="line">  <span class="keyword">char</span> nodename[REDIS_CLUSTER_NAMELEN];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最后一次向该节点发送 PING 消息的时间戳</span></span><br><span class="line">  <span class="keyword">uint32_t</span> ping_sent;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最后一次从该节点接收到 PONG 消息的时间戳</span></span><br><span class="line">  <span class="keyword">uint32_t</span> pong_received;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 节点的IP</span></span><br><span class="line">  <span class="keyword">char</span> ip[<span class="number">16</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 节点的端口</span></span><br><span class="line">  <span class="keyword">uint16_t</span> port;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 节点的标识符</span></span><br><span class="line">  <span class="keyword">uint16_t</span> flags;</span><br><span class="line">&#125; clusterMsgDataGossip;</span><br></pre></td></tr></table></figure><p>因为 <code>MEET</code>、<code>PING</code>、<code>PONG</code> 三种消息都是用相同的消息正文，所以节点通过消息头的 <code>type</code> 属性来判断一条消息是 <code>MEET</code>消息、<code>PING</code> 消息还是 <code>PONG</code> 消息。</p><p>每次发送 <code>MEET</code>、<code>PING</code>、<code>PONG</code> 消息时，发送者从自己的已知节点中随机选出两个节点（可以是主节点或从节点），并将这两个被选中的节点的信息分别保存到两个 <code>cluster.h/clusterMsgDataGossip</code> 结构里面。</p><p><code>clusterMsgDataGossip</code> 结构记录了被选中的节点的名字、发送者与被选中节点最后一次发送和接收 <code>PING</code> 和 <code>PONG</code> 消息的时间戳，被选中节点的 IP 地址和端口号，以及被选中节点的标识值。</p><p>当接收者收到 <code>MEET</code>、<code>PING</code>、<code>PONG</code> 消息时，接收者会访问消息正文中的两个 <code>clusterMsgDataGossip</code> 结构，并根据自己是否认识 <code>clusterMsgDataGossip</code> 记录的被选中节点来选择进行哪种操作：</p><ul><li>如果被选中节点不存在于接收者的已知节点列表，那么说明接收者是第一次接触到被选中节点，接收者将根据结构中记录的 IP 地址和端口号等信息，与被选中节点进行握手。</li><li>如果被选中节点存在于接收者的已知节点列表，那么说明接收者之前已经与被选中节点进行过接触，接收者将根据 <code>clusterMsgDataGossip</code> 结构记录的信息，对被选中的节点所对应的 <code>clusterNode</code> 结构进行更新。</li></ul><h3 id="7-3-FAIL-消息的实现"><a href="#7-3-FAIL-消息的实现" class="headerlink" title="7.3 FAIL 消息的实现"></a>7.3 FAIL 消息的实现</h3><p>当集群里的主节点 A 将主节点 B 标记为已下线时（FAIL）时，主节点 A 将向集群广播一条关于主节点 B 的 <code>FAIL</code> 消息，所有接收到这条 <code>FAIL</code> 消息的节点都会将主节点 B 标记为已下线。</p><p><code>FAIL</code> 消息的正文由 <code>cluster.h/clusterMsgDataFail</code> 结构表示，这个结构只包含一个 <code>nodeName</code> 属性，该属性记录了已下线节点的名字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> nodename[REDIS_CLUSTER_NAMELEN];</span><br><span class="line">&#125; clusterMsgDataFail;</span><br></pre></td></tr></table></figure><h3 id="7-4-PUBLISH-消息的实现"><a href="#7-4-PUBLISH-消息的实现" class="headerlink" title="7.4 PUBLISH 消息的实现"></a>7.4 PUBLISH 消息的实现</h3><p>当客户端向集群中的某个节点发送命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH &lt;channel&gt; &lt;message&gt;</span><br></pre></td></tr></table></figure><p>的时候，接收到 <code>PUBLISH</code> 命令的节点不仅会向 <code>channel</code> 频道发送消息 <code>message</code>，它还会向集群广播一条 <code>PUBLISH</code> 消息，所有接收到这条 <code>PUBLISH</code> 消息的节点都会向 <code>channnel</code> 频道发送 <code>message</code> 消息。</p><p><code>PUBLISH</code> 消息的正文由 <code>cluster.h/clusterMsgDataPublish</code> 结构表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> channel_len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> message_len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义为 8 字节只是为了对齐其他消息结构</span></span><br><span class="line"><span class="comment">// 实际的长度由保存的内容决定</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> bulk_data[<span class="number">8</span>];</span><br><span class="line">  </span><br><span class="line">&#125; clusterMsgDataPublish;</span><br></pre></td></tr></table></figure><p><code>clusterMsgDataPublish</code> 结构的 <code>bulk_data</code> 属性是一个字节数组，这个字节数组保存了客户端通过 <code>PUBLISH</code> 命令发送给节点的 <code>channel</code> 参数和 <code>message</code> 参数，而结构的 <code>channel_len</code> 和 <code>message_len</code> 则分别保存了 <code>channel</code> 参数的长度和 <code>message</code> 参数的长度：</p><ul><li>其中 <code>bulk_data</code> 的 0 字节至 channel_len - 1 字节保存的是 <code>channel</code> 参数。</li><li>而 <code>bulk_data</code> 的 channel_len 字节至 channel_len + message_len - 1 字节保存的是 <code>message</code> 参数。</li></ul>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：服务器》</title>
      <link href="/2017/10/06/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%8B/"/>
      <url>/2017/10/06/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="0-redisServer-数据结构"><a href="#0-redisServer-数据结构" class="headerlink" title="0. redisServer 数据结构"></a>0. redisServer 数据结构</h2><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="comment">/* General */</span></span><br><span class="line">    <span class="keyword">char</span> *configfile;           <span class="comment">/* Absolute config file path, or NULL */</span></span><br><span class="line">    <span class="keyword">int</span> hz;                     <span class="comment">/* serverCron() calls frequency in hertz */</span></span><br><span class="line">    redisDb *db;</span><br><span class="line">    dict *commands;             <span class="comment">/* Command table */</span></span><br><span class="line">    dict *orig_commands;        <span class="comment">/* Command table before command renaming. */</span></span><br><span class="line">    aeEventLoop *el;</span><br><span class="line">    <span class="keyword">unsigned</span> lruclock:REDIS_LRU_BITS; <span class="comment">/* Clock for LRU eviction */</span></span><br><span class="line">    <span class="keyword">int</span> shutdown_asap;          <span class="comment">/* SHUTDOWN needed ASAP */</span></span><br><span class="line">    <span class="keyword">int</span> activerehashing;        <span class="comment">/* Incremental rehash in serverCron() */</span></span><br><span class="line">    <span class="keyword">char</span> *requirepass;          <span class="comment">/* Pass for AUTH command, or NULL */</span></span><br><span class="line">    <span class="keyword">char</span> *pidfile;              <span class="comment">/* PID file path */</span></span><br><span class="line">    <span class="keyword">int</span> arch_bits;              <span class="comment">/* 32 or 64 depending on sizeof(long) */</span></span><br><span class="line">    <span class="keyword">int</span> cronloops;              <span class="comment">/* Number of times the cron function run */</span></span><br><span class="line">    <span class="keyword">char</span> runid[REDIS_RUN_ID_SIZE+<span class="number">1</span>];  <span class="comment">/* ID always different at every exec. */</span></span><br><span class="line">    <span class="keyword">int</span> sentinel_mode;          <span class="comment">/* True if this instance is a Sentinel. */</span></span><br><span class="line">    <span class="comment">/* Networking */</span></span><br><span class="line">    <span class="keyword">int</span> port;                   <span class="comment">/* TCP listening port */</span></span><br><span class="line">    <span class="keyword">int</span> tcp_backlog;            <span class="comment">/* TCP listen() backlog */</span></span><br><span class="line">    <span class="keyword">char</span> *bindaddr[REDIS_BINDADDR_MAX]; <span class="comment">/* Addresses we should bind to */</span></span><br><span class="line">    <span class="keyword">int</span> bindaddr_count;         <span class="comment">/* Number of addresses in server.bindaddr[] */</span></span><br><span class="line">    <span class="keyword">char</span> *unixsocket;           <span class="comment">/* UNIX socket path */</span></span><br><span class="line">    <span class="keyword">mode_t</span> unixsocketperm;      <span class="comment">/* UNIX socket permission */</span></span><br><span class="line">    <span class="keyword">int</span> ipfd[REDIS_BINDADDR_MAX]; <span class="comment">/* TCP socket file descriptors */</span></span><br><span class="line">    <span class="keyword">int</span> ipfd_count;             <span class="comment">/* Used slots in ipfd[] */</span></span><br><span class="line">    <span class="keyword">int</span> sofd;                   <span class="comment">/* Unix socket file descriptor */</span></span><br><span class="line">    <span class="built_in">list</span> *clients;              <span class="comment">/* List of active clients */</span></span><br><span class="line">    <span class="built_in">list</span> *clients_to_close;     <span class="comment">/* Clients to close asynchronously */</span></span><br><span class="line">    <span class="built_in">list</span> *slaves, *monitors;    <span class="comment">/* List of slaves and MONITORs */</span></span><br><span class="line">    redisClient *current_client; <span class="comment">/* Current client, only used on crash report */</span></span><br><span class="line">    <span class="keyword">char</span> neterr[ANET_ERR_LEN];   <span class="comment">/* Error buffer for anet.c */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> next_client_id;    <span class="comment">/* Next client unique ID. Incremental. */</span></span><br><span class="line">    <span class="comment">/* RDB / AOF loading information */</span></span><br><span class="line">    <span class="keyword">int</span> loading;                <span class="comment">/* We are loading data from disk if true */</span></span><br><span class="line">    <span class="keyword">off_t</span> loading_total_bytes;</span><br><span class="line">    <span class="keyword">off_t</span> loading_loaded_bytes;</span><br><span class="line">    <span class="keyword">time_t</span> loading_start_time;</span><br><span class="line">    <span class="keyword">off_t</span> loading_process_events_interval_bytes;</span><br><span class="line">    <span class="comment">/* Fast pointers to often looked up command */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">delCommand</span>, *<span class="title">multiCommand</span>, *<span class="title">lpushCommand</span>, *<span class="title">lpopCommand</span>,</span></span><br><span class="line"><span class="class">                        *<span class="title">rpopCommand</span>;</span></span><br><span class="line">    <span class="comment">/* Fields used only for stats */</span></span><br><span class="line">    <span class="keyword">time_t</span> stat_starttime;          <span class="comment">/* Server start time */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_numcommands;     <span class="comment">/* Number of processed commands */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_numconnections;  <span class="comment">/* Number of connections received */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_expiredkeys;     <span class="comment">/* Number of expired keys */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_evictedkeys;     <span class="comment">/* Number of evicted keys (maxmemory) */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_keyspace_hits;   <span class="comment">/* Number of successful lookups of keys */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_keyspace_misses; <span class="comment">/* Number of failed lookups of keys */</span></span><br><span class="line">    <span class="keyword">size_t</span> stat_peak_memory;        <span class="comment">/* Max used memory record */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_fork_time;       <span class="comment">/* Time needed to perform latest fork() */</span></span><br><span class="line">    <span class="keyword">double</span> stat_fork_rate;          <span class="comment">/* Fork rate in GB/sec. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_rejected_conn;   <span class="comment">/* Clients rejected because of maxclients */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_sync_full;       <span class="comment">/* Number of full resyncs with slaves. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_sync_partial_ok; <span class="comment">/* Number of accepted PSYNC requests. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_sync_partial_err;<span class="comment">/* Number of unaccepted PSYNC requests. */</span></span><br><span class="line">    <span class="built_in">list</span> *slowlog;                  <span class="comment">/* SLOWLOG list of commands */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> slowlog_entry_id;     <span class="comment">/* SLOWLOG current entry ID */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> slowlog_log_slower_than; <span class="comment">/* SLOWLOG time limit (to get logged) */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> slowlog_max_len;     <span class="comment">/* SLOWLOG max number of items logged */</span></span><br><span class="line">    <span class="keyword">size_t</span> resident_set_size;       <span class="comment">/* RSS sampled in serverCron(). */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_net_input_bytes; <span class="comment">/* Bytes read from network. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> stat_net_output_bytes; <span class="comment">/* Bytes written to network. */</span></span><br><span class="line">    <span class="comment">/* The following two are used to track instantaneous metrics, like</span></span><br><span class="line"><span class="comment">     * number of operations per second, network traffic. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> last_sample_time; <span class="comment">/* Timestamp of last sample in ms */</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> last_sample_count;<span class="comment">/* Count in last sample */</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> samples[REDIS_METRIC_SAMPLES];</span><br><span class="line">        <span class="keyword">int</span> idx;</span><br><span class="line">    &#125; inst_metric[REDIS_METRIC_COUNT];</span><br><span class="line">    <span class="comment">/* Configuration */</span></span><br><span class="line">    <span class="keyword">int</span> verbosity;                  <span class="comment">/* Loglevel in redis.conf */</span></span><br><span class="line">    <span class="keyword">int</span> maxidletime;                <span class="comment">/* Client timeout in seconds */</span></span><br><span class="line">    <span class="keyword">int</span> tcpkeepalive;               <span class="comment">/* Set SO_KEEPALIVE if non-zero. */</span></span><br><span class="line">    <span class="keyword">int</span> active_expire_enabled;      <span class="comment">/* Can be disabled for testing purposes. */</span></span><br><span class="line">    <span class="keyword">size_t</span> client_max_querybuf_len; <span class="comment">/* Limit for client query buffer length */</span></span><br><span class="line">    <span class="keyword">int</span> dbnum;                      <span class="comment">/* Total number of configured DBs */</span></span><br><span class="line">    <span class="keyword">int</span> daemonize;                  <span class="comment">/* True if running as a daemon */</span></span><br><span class="line">    clientBufferLimitsConfig client_obuf_limits[REDIS_CLIENT_TYPE_COUNT];</span><br><span class="line">    <span class="comment">/* AOF persistence */</span></span><br><span class="line">    <span class="keyword">int</span> aof_state;                  <span class="comment">/* REDIS_AOF_(ON|OFF|WAIT_REWRITE) */</span></span><br><span class="line">    <span class="keyword">int</span> aof_fsync;                  <span class="comment">/* Kind of fsync() policy */</span></span><br><span class="line">    <span class="keyword">char</span> *aof_filename;             <span class="comment">/* Name of the AOF file */</span></span><br><span class="line">    <span class="keyword">int</span> aof_no_fsync_on_rewrite;    <span class="comment">/* Don't fsync if a rewrite is in prog. */</span></span><br><span class="line">    <span class="keyword">int</span> aof_rewrite_perc;           <span class="comment">/* Rewrite AOF if % growth is &gt; M and... */</span></span><br><span class="line">    <span class="keyword">off_t</span> aof_rewrite_min_size;     <span class="comment">/* the AOF file is at least N bytes. */</span></span><br><span class="line">    <span class="keyword">off_t</span> aof_rewrite_base_size;    <span class="comment">/* AOF size on latest startup or rewrite. */</span></span><br><span class="line">    <span class="keyword">off_t</span> aof_current_size;         <span class="comment">/* AOF current size. */</span></span><br><span class="line">    <span class="keyword">int</span> aof_rewrite_scheduled;      <span class="comment">/* Rewrite once BGSAVE terminates. */</span></span><br><span class="line">    <span class="keyword">pid_t</span> aof_child_pid;            <span class="comment">/* PID if rewriting process */</span></span><br><span class="line">    <span class="built_in">list</span> *aof_rewrite_buf_blocks;   <span class="comment">/* Hold changes during an AOF rewrite. */</span></span><br><span class="line">    sds aof_buf;      <span class="comment">/* AOF buffer, written before entering the event loop */</span></span><br><span class="line">    <span class="keyword">int</span> aof_fd;       <span class="comment">/* File descriptor of currently selected AOF file */</span></span><br><span class="line">    <span class="keyword">int</span> aof_selected_db; <span class="comment">/* Currently selected DB in AOF */</span></span><br><span class="line">    <span class="keyword">time_t</span> aof_flush_postponed_start; <span class="comment">/* UNIX time of postponed AOF flush */</span></span><br><span class="line">    <span class="keyword">time_t</span> aof_last_fsync;            <span class="comment">/* UNIX time of last fsync() */</span></span><br><span class="line">    <span class="keyword">time_t</span> aof_rewrite_time_last;   <span class="comment">/* Time used by last AOF rewrite run. */</span></span><br><span class="line">    <span class="keyword">time_t</span> aof_rewrite_time_start;  <span class="comment">/* Current AOF rewrite start time. */</span></span><br><span class="line">    <span class="keyword">int</span> aof_lastbgrewrite_status;   <span class="comment">/* REDIS_OK or REDIS_ERR */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> aof_delayed_fsync;  <span class="comment">/* delayed AOF fsync() counter */</span></span><br><span class="line">    <span class="keyword">int</span> aof_rewrite_incremental_fsync;<span class="comment">/* fsync incrementally while rewriting? */</span></span><br><span class="line">    <span class="keyword">int</span> aof_last_write_status;      <span class="comment">/* REDIS_OK or REDIS_ERR */</span></span><br><span class="line">    <span class="keyword">int</span> aof_last_write_errno;       <span class="comment">/* Valid if aof_last_write_status is ERR */</span></span><br><span class="line">    <span class="keyword">int</span> aof_load_truncated;         <span class="comment">/* Don't stop on unexpected AOF EOF. */</span></span><br><span class="line">    <span class="comment">/* RDB persistence */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dirty;                <span class="comment">/* Changes to DB from the last save */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dirty_before_bgsave;  <span class="comment">/* Used to restore dirty on failed BGSAVE */</span></span><br><span class="line">    <span class="keyword">pid_t</span> rdb_child_pid;            <span class="comment">/* PID of RDB saving child */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> *<span class="title">saveparams</span>;</span>   <span class="comment">/* Save points array for RDB */</span></span><br><span class="line">    <span class="keyword">int</span> saveparamslen;              <span class="comment">/* Number of saving points */</span></span><br><span class="line">    <span class="keyword">char</span> *rdb_filename;             <span class="comment">/* Name of RDB file */</span></span><br><span class="line">    <span class="keyword">int</span> rdb_compression;            <span class="comment">/* Use compression in RDB? */</span></span><br><span class="line">    <span class="keyword">int</span> rdb_checksum;               <span class="comment">/* Use RDB checksum? */</span></span><br><span class="line">    <span class="keyword">time_t</span> lastsave;                <span class="comment">/* Unix time of last successful save */</span></span><br><span class="line">    <span class="keyword">time_t</span> lastbgsave_try;          <span class="comment">/* Unix time of last attempted bgsave */</span></span><br><span class="line">    <span class="keyword">time_t</span> rdb_save_time_last;      <span class="comment">/* Time used by last RDB save run. */</span></span><br><span class="line">    <span class="keyword">time_t</span> rdb_save_time_start;     <span class="comment">/* Current RDB save start time. */</span></span><br><span class="line">    <span class="keyword">int</span> rdb_child_type;             <span class="comment">/* Type of save by active child. */</span></span><br><span class="line">    <span class="keyword">int</span> lastbgsave_status;          <span class="comment">/* REDIS_OK or REDIS_ERR */</span></span><br><span class="line">    <span class="keyword">int</span> stop_writes_on_bgsave_err;  <span class="comment">/* Don't allow writes if can't BGSAVE */</span></span><br><span class="line">    <span class="keyword">int</span> rdb_pipe_write_result_to_parent; <span class="comment">/* RDB pipes used to return the state */</span></span><br><span class="line">    <span class="keyword">int</span> rdb_pipe_read_result_from_child; <span class="comment">/* of each slave in diskless SYNC. */</span></span><br><span class="line">    <span class="comment">/* Propagation of commands in AOF / replication */</span></span><br><span class="line">    redisOpArray also_propagate;    <span class="comment">/* Additional command to propagate. */</span></span><br><span class="line">    <span class="comment">/* Logging */</span></span><br><span class="line">    <span class="keyword">char</span> *logfile;                  <span class="comment">/* Path of log file */</span></span><br><span class="line">    <span class="keyword">int</span> syslog_enabled;             <span class="comment">/* Is syslog enabled? */</span></span><br><span class="line">    <span class="keyword">char</span> *syslog_ident;             <span class="comment">/* Syslog ident */</span></span><br><span class="line">    <span class="keyword">int</span> syslog_facility;            <span class="comment">/* Syslog facility */</span></span><br><span class="line">    <span class="comment">/* Replication (master) */</span></span><br><span class="line">    <span class="keyword">int</span> slaveseldb;                 <span class="comment">/* Last SELECTed DB in replication output */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> master_repl_offset;   <span class="comment">/* Global replication offset */</span></span><br><span class="line">    <span class="keyword">int</span> repl_ping_slave_period;     <span class="comment">/* Master pings the slave every N seconds */</span></span><br><span class="line">    <span class="keyword">char</span> *repl_backlog;             <span class="comment">/* Replication backlog for partial syncs */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_backlog_size;    <span class="comment">/* Backlog circular buffer size */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_backlog_histlen; <span class="comment">/* Backlog actual data length */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_backlog_idx;     <span class="comment">/* Backlog circular buffer current offset */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_backlog_off;     <span class="comment">/* Replication offset of first byte in the</span></span><br><span class="line"><span class="comment">                                       backlog buffer. */</span></span><br><span class="line">    <span class="keyword">time_t</span> repl_backlog_time_limit; <span class="comment">/* Time without slaves after the backlog</span></span><br><span class="line"><span class="comment">                                       gets released. */</span></span><br><span class="line">    <span class="keyword">time_t</span> repl_no_slaves_since;    <span class="comment">/* We have no slaves since that time.</span></span><br><span class="line"><span class="comment">                                       Only valid if server.slaves len is 0. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_min_slaves_to_write;   <span class="comment">/* Min number of slaves to write. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_min_slaves_max_lag;    <span class="comment">/* Max lag of &lt;count&gt; slaves to write. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_good_slaves_count;     <span class="comment">/* Number of slaves with lag &lt;= max_lag. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_diskless_sync;         <span class="comment">/* Send RDB to slaves sockets directly. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_diskless_sync_delay;   <span class="comment">/* Delay to start a diskless repl BGSAVE. */</span></span><br><span class="line">    <span class="comment">/* Replication (slave) */</span></span><br><span class="line">    <span class="keyword">char</span> *masterauth;               <span class="comment">/* AUTH with this password with master */</span></span><br><span class="line">    <span class="keyword">char</span> *masterhost;               <span class="comment">/* Hostname of master */</span></span><br><span class="line">    <span class="keyword">int</span> masterport;                 <span class="comment">/* Port of master */</span></span><br><span class="line">    <span class="keyword">int</span> repl_timeout;               <span class="comment">/* Timeout after N seconds of master idle */</span></span><br><span class="line">    redisClient *master;     <span class="comment">/* Client that is master for this slave */</span></span><br><span class="line">    redisClient *cached_master; <span class="comment">/* Cached master to be reused for PSYNC. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_syncio_timeout; <span class="comment">/* Timeout for synchronous I/O calls */</span></span><br><span class="line">    <span class="keyword">int</span> repl_state;          <span class="comment">/* Replication status if the instance is a slave */</span></span><br><span class="line">    <span class="keyword">off_t</span> repl_transfer_size; <span class="comment">/* Size of RDB to read from master during sync. */</span></span><br><span class="line">    <span class="keyword">off_t</span> repl_transfer_read; <span class="comment">/* Amount of RDB read from master during sync. */</span></span><br><span class="line">    <span class="keyword">off_t</span> repl_transfer_last_fsync_off; <span class="comment">/* Offset when we fsync-ed last time. */</span></span><br><span class="line">    <span class="keyword">int</span> repl_transfer_s;     <span class="comment">/* Slave -&gt; Master SYNC socket */</span></span><br><span class="line">    <span class="keyword">int</span> repl_transfer_fd;    <span class="comment">/* Slave -&gt; Master SYNC temp file descriptor */</span></span><br><span class="line">    <span class="keyword">char</span> *repl_transfer_tmpfile; <span class="comment">/* Slave-&gt; master SYNC temp file name */</span></span><br><span class="line">    <span class="keyword">time_t</span> repl_transfer_lastio; <span class="comment">/* Unix time of the latest read, for timeout */</span></span><br><span class="line">    <span class="keyword">int</span> repl_serve_stale_data; <span class="comment">/* Serve stale data when link is down? */</span></span><br><span class="line">    <span class="keyword">int</span> repl_slave_ro;          <span class="comment">/* Slave is read only? */</span></span><br><span class="line">    <span class="keyword">time_t</span> repl_down_since; <span class="comment">/* Unix time at which link with master went down */</span></span><br><span class="line">    <span class="keyword">int</span> repl_disable_tcp_nodelay;   <span class="comment">/* Disable TCP_NODELAY after SYNC? */</span></span><br><span class="line">    <span class="keyword">int</span> slave_priority;             <span class="comment">/* Reported in INFO and used by Sentinel. */</span></span><br><span class="line">    <span class="keyword">char</span> repl_master_runid[REDIS_RUN_ID_SIZE+<span class="number">1</span>];  <span class="comment">/* Master run id for PSYNC. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> repl_master_initial_offset;         <span class="comment">/* Master PSYNC offset. */</span></span><br><span class="line">    <span class="comment">/* Replication script cache. */</span></span><br><span class="line">    dict *repl_scriptcache_dict;        <span class="comment">/* SHA1 all slaves are aware of. */</span></span><br><span class="line">    <span class="built_in">list</span> *repl_scriptcache_fifo;        <span class="comment">/* First in, first out LRU eviction. */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> repl_scriptcache_size; <span class="comment">/* Max number of elements. */</span></span><br><span class="line">    <span class="comment">/* Limits */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> maxclients;            <span class="comment">/* Max number of simultaneous clients */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> maxmemory;   <span class="comment">/* Max number of memory bytes to use */</span></span><br><span class="line">    <span class="keyword">int</span> maxmemory_policy;           <span class="comment">/* Policy for key eviction */</span></span><br><span class="line">    <span class="keyword">int</span> maxmemory_samples;          <span class="comment">/* Pricision of random sampling */</span></span><br><span class="line">    <span class="comment">/* Blocked clients */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> bpop_blocked_clients; <span class="comment">/* Number of clients blocked by lists */</span></span><br><span class="line">    <span class="built_in">list</span> *unblocked_clients; <span class="comment">/* list of clients to unblock before next loop */</span></span><br><span class="line">    <span class="built_in">list</span> *ready_keys;        <span class="comment">/* List of readyList structures for BLPOP &amp; co */</span></span><br><span class="line">    <span class="comment">/* Sort parameters - qsort_r() is only available under BSD so we</span></span><br><span class="line"><span class="comment">     * have to take this state global, in order to pass it to sortCompare() */</span></span><br><span class="line">    <span class="keyword">int</span> sort_desc;</span><br><span class="line">    <span class="keyword">int</span> sort_alpha;</span><br><span class="line">    <span class="keyword">int</span> sort_bypattern;</span><br><span class="line">    <span class="keyword">int</span> sort_store;</span><br><span class="line">    <span class="comment">/* Zip structure config, see redis.conf for more information  */</span></span><br><span class="line">    <span class="keyword">size_t</span> hash_max_ziplist_entries;</span><br><span class="line">    <span class="keyword">size_t</span> hash_max_ziplist_value;</span><br><span class="line">    <span class="keyword">size_t</span> list_max_ziplist_entries;</span><br><span class="line">    <span class="keyword">size_t</span> list_max_ziplist_value;</span><br><span class="line">    <span class="keyword">size_t</span> set_max_intset_entries;</span><br><span class="line">    <span class="keyword">size_t</span> zset_max_ziplist_entries;</span><br><span class="line">    <span class="keyword">size_t</span> zset_max_ziplist_value;</span><br><span class="line">    <span class="keyword">size_t</span> hll_sparse_max_bytes;</span><br><span class="line">    <span class="keyword">time_t</span> unixtime;        <span class="comment">/* Unix time sampled every cron cycle. */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mstime;       <span class="comment">/* Like 'unixtime' but with milliseconds resolution. */</span></span><br><span class="line">    <span class="comment">/* Pubsub */</span></span><br><span class="line">    dict *pubsub_channels;  <span class="comment">/* Map channels to list of subscribed clients */</span></span><br><span class="line">    <span class="built_in">list</span> *pubsub_patterns;  <span class="comment">/* A list of pubsub_patterns */</span></span><br><span class="line">    <span class="keyword">int</span> notify_keyspace_events; <span class="comment">/* Events to propagate via Pub/Sub. This is an</span></span><br><span class="line"><span class="comment">                                   xor of REDIS_NOTIFY... flags. */</span></span><br><span class="line">    <span class="comment">/* Scripting */</span></span><br><span class="line">    lua_State *lua; <span class="comment">/* The Lua interpreter. We use just one for all clients */</span></span><br><span class="line">    redisClient *lua_client;   <span class="comment">/* The "fake client" to query Redis from Lua */</span></span><br><span class="line">    redisClient *lua_caller;   <span class="comment">/* The client running EVAL right now, or NULL */</span></span><br><span class="line">    dict *lua_scripts;         <span class="comment">/* A dictionary of SHA1 -&gt; Lua scripts */</span></span><br><span class="line">    <span class="keyword">mstime_t</span> lua_time_limit;  <span class="comment">/* Script timeout in milliseconds */</span></span><br><span class="line">    <span class="keyword">mstime_t</span> lua_time_start;  <span class="comment">/* Start time of script, milliseconds time */</span></span><br><span class="line">    <span class="keyword">int</span> lua_write_dirty;  <span class="comment">/* True if a write command was called during the</span></span><br><span class="line"><span class="comment">                             execution of the current script. */</span></span><br><span class="line">    <span class="keyword">int</span> lua_random_dirty; <span class="comment">/* True if a random command was called during the</span></span><br><span class="line"><span class="comment">                             execution of the current script. */</span></span><br><span class="line">    <span class="keyword">int</span> lua_timedout;     <span class="comment">/* True if we reached the time limit for script</span></span><br><span class="line"><span class="comment">                             execution. */</span></span><br><span class="line">    <span class="keyword">int</span> lua_kill;         <span class="comment">/* Kill the script if true. */</span></span><br><span class="line">    <span class="comment">/* Latency monitor */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> latency_monitor_threshold;</span><br><span class="line">    dict *latency_events;</span><br><span class="line">    <span class="comment">/* Assert &amp; bug reporting */</span></span><br><span class="line">    <span class="keyword">char</span> *assert_failed;</span><br><span class="line">    <span class="keyword">char</span> *assert_file;</span><br><span class="line">    <span class="keyword">int</span> assert_line;</span><br><span class="line">    <span class="keyword">int</span> bug_report_start; <span class="comment">/* True if bug report header was already logged. */</span></span><br><span class="line">    <span class="keyword">int</span> watchdog_period;  <span class="comment">/* Software watchdog period in ms. 0 = off */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!--more--><h2 id="1-命令请求的执行过程"><a href="#1-命令请求的执行过程" class="headerlink" title="1. 命令请求的执行过程"></a>1. 命令请求的执行过程</h2><h3 id="1-1-发送命令请求"><a href="#1-1-发送命令请求" class="headerlink" title="1.1 发送命令请求"></a>1.1 发送命令请求</h3><p>Redis 服务器的命令请求来自 Redis 客户端，当用户在客户端中键入一个命令请求时，客户端会将这个命令请求转换成协议格式，然后通过连接到服务器的套接字，将协议格式的命令请求发送给服务器。</p><!--more--><h3 id="1-2-读取命令请求"><a href="#1-2-读取命令请求" class="headerlink" title="1.2 读取命令请求"></a>1.2 读取命令请求</h3><p>当客户端与服务器之间的连接套接字因为客户端的写入而变得可读时，服务器将调用命令请求处理器来执行以下操作：</p><ol><li>读取套接字中协议格式的命令请求，并将其保存到客户端状态的输入缓冲区里面。</li><li>对输入缓冲区中的命令请求进行分析，提取出命令请求中包含的命令参数，以及命令参数的个数，然后分别将参数和参数个数保存到客户端状态的 <code>argv</code> 属性和 <code>argc</code> 属性里面。</li><li>调用命令执行器，执行客户端指定的命令。</li></ol><h3 id="1-3-命令执行器（1）：查找命令实现"><a href="#1-3-命令执行器（1）：查找命令实现" class="headerlink" title="1.3 命令执行器（1）：查找命令实现"></a>1.3 命令执行器（1）：查找命令实现</h3><p>命令执行器要做的第一件事就是根据客户端状态的 <code>argv[0]</code> 参数，在命令表（command table）中查找参数所指定的命令，并将找到的命令保存到客户端状态的 <code>cmd</code> 属性里面。</p><p>命令表是一个字典，字典的键是一个个命令名字，比如 <code>&quot;set&quot;</code>、<code>&quot;get&quot;</code>、<code>&quot;del&quot;</code>，等等；而字典的值则是一个个 <code>redisCommand</code> 结构，每个 <code>redisCommand</code> 结构记录了一个 Redis 命令的实现信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    redisCommandProc *proc;</span><br><span class="line">    <span class="keyword">int</span> arity;</span><br><span class="line">    <span class="keyword">char</span> *sflags; <span class="comment">/* Flags as string representation, one char per flag. */</span></span><br><span class="line">    <span class="keyword">int</span> flags;    <span class="comment">/* The actual flags, obtained from the 'sflags' field. */</span></span><br><span class="line">    <span class="comment">/* Use a function to determine keys arguments in a command line. */</span></span><br><span class="line">    redisGetKeysProc *getkeys_proc;</span><br><span class="line">    <span class="comment">/* What keys should be loaded in background when calling this command? */</span></span><br><span class="line">    <span class="keyword">int</span> firstkey; <span class="comment">/* The first argument that's a key (0 = no keys) */</span></span><br><span class="line">    <span class="keyword">int</span> lastkey;  <span class="comment">/* The last argument that's a key */</span></span><br><span class="line">    <span class="keyword">int</span> keystep;  <span class="comment">/* The step between first and last key */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> microseconds, calls;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>char *</code></td><td>命令的名字，比如 <code>&quot;set&quot;</code> 。</td></tr><tr><td><code>proc</code></td><td><code>redisCommandProc *</code></td><td>函数指针，指向命令的实现函数，比如 <code>setCommand</code>。 <code>redisCommandProc</code> 类型的定义为 <code>typedef void redisCommandProc(redisClient *c);</code>。</td></tr><tr><td><code>arity</code></td><td><code>int</code></td><td>命令参数的个数，用于检查命令请求的格式是否正确。如果这个值为负数 <code>-N</code>，那么表示参数的数量大于等于 <code>N</code>。 注意命令的名字本身也是一个参数，比如说 <code>SET msg&quot;hello world&quot;</code> 命令的参数是 <code>&quot;SET&quot;</code>、<code>&quot;msg&quot;</code>、<code>&quot;hello world&quot;</code>，而不仅仅是 <code>&quot;msg&quot;</code> 和 <code>&quot;hello world&quot;</code>。</td></tr><tr><td><code>sflags</code></td><td><code>char *</code></td><td>字符串形式的标识值，这个值记录了命令的属性，比如这个命令是写命令还是读命令，这个命令是否允许在载入数据时使用，这个命令是否允许在 Lua 脚本中使用，等等。</td></tr><tr><td><code>flags</code></td><td><code>int</code></td><td>对 <code>sflags</code> 标识进行分析得出的二进制标识，由程序自动生成。服务器对命令标识进行检查时使用的都是 <code>flags</code> 属性而不是 <code>sflags</code> 属性，因为对二进制标识的检查可以方便地通过 <code>&amp;</code>、<code>^</code>、<code>~</code> 等操作来完成。</td></tr><tr><td><code>calls</code></td><td><code>long long</code></td><td>服务器总共执行了多少次这个命令。</td></tr><tr><td><code>milliseconds</code></td><td><code>long long</code></td><td>服务器执行这个命令所耗费的总时长。</td></tr></tbody></table><p><code>flags</code> 属性可以使用的标识符及意义：</p><table><thead><tr><th>标识</th><th>意义</th><th>带有这个标识的命令</th></tr></thead><tbody><tr><td><code>w</code></td><td>这是一个写入命令，可能会修改数据库。</td><td>SET、RPUSH、DEL，等等。</td></tr><tr><td><code>r</code></td><td>这是一个只读命令，不会修改数据库。</td><td>GET、STRLEN、EXISTS，等等。</td></tr><tr><td><code>m</code></td><td>这个命令可能会占用大量内存，执行之前需要先检查服务器的内存使用情况，如果内存紧缺的话就禁止执行这个命令。</td><td>SET、APPEND、RPUSH、 LPUSH、SADD、SINTERSTORE，等等。</td></tr><tr><td><code>a</code></td><td>这是一个管理命令。</td><td>SAVE、BGSAVE、SHUTDOWN，等等。</td></tr><tr><td><code>p</code></td><td>这是一个发布与订阅功能方面的命令。</td><td>PUBLISH、SUBSCRIBE、PUBSUB，等等。</td></tr><tr><td><code>s</code></td><td>这个命令不可以在 Lua 脚本中使用。</td><td>BRPOP、BLPOP、BRPOPLPUSH、SPOP，等等。</td></tr><tr><td><code>R</code></td><td>这是一个随机命令，对于相同的数据集和相同的参数，命令返回的结果可能不同。</td><td>SPOP、SRANDMEMBER、SSCAN、RANDOMKEY，等等。</td></tr><tr><td><code>S</code></td><td>当在 Lua 脚本中使用这个命令时，对这个命令的输出结果进行一次排序，使得命令的结果有序。</td><td>SINTER、SUNION、SDIFF、SMEMBERS、KEYS，等等。</td></tr><tr><td><code>l</code></td><td>这个命令可以在服务器载入数据的过程中使用。</td><td>INFO、SHUTDOWN、PUBLISH，等等。</td></tr><tr><td><code>t</code></td><td>这是一个允许从服务器在带有过期数据时使用的命令。</td><td>SLAVEOF、PING、INFO，等等。</td></tr><tr><td><code>M</code></td><td>这个命令在监视器（monitor）模式下不会自动被传播（propagate）。</td><td>EXEC</td></tr></tbody></table><h3 id="1-4-命令执行器（2）：执行预备操作"><a href="#1-4-命令执行器（2）：执行预备操作" class="headerlink" title="1.4 命令执行器（2）：执行预备操作"></a>1.4 命令执行器（2）：执行预备操作</h3><p>到目前为止，服务器已经将执行命令所需的命令实现函数（保存在客户端状态的 <code>cmd</code> 属性）、参数（保存在客户端状态的 <code>argv</code> 属性）、参数个数（保存在客户端状态的 <code>argc</code> 属性）都收集齐了，但是在真正执行命令之前，程序还需要进行一些预备操作，从而确保命令可以正确、顺利地被执行，这些操作包括：</p><ul><li>检查客户端状态的 <code>cmd</code> 指针是否指向 <code>NULL</code> ，如果是的话，那么说明用户输入的命令名字找不到相应的命令实现，服务器不再执行后续步骤，并向客户端返回一个错误。</li><li>根据客户端 <code>cmd</code> 属性指向的 <code>redisCommand</code> 结构的 <code>arity</code> 属性，检查命令请求所给定的参数个数是否正确，当参数个数不正确时，不再执行后续步骤，直接向客户端返回一个错误。比如说，如果 <code>redisCommand</code> 结构的 <code>arity</code> 属性的值为 -3，那么用户输入的命令参数个数必须大于等于 3 个才行。</li><li>检查客户端是否已经通过了身份验证，未通过身份验证的客户端只能执行 <code>AUTH</code> 命令，如果未通过身份验证的客户端试图执行除 <code>AUTH</code> 命令之外的其他命令，那么服务器将向客户端返回一个错误。</li><li>如果服务器打开了 <code>maxmemory</code> 功能，那么在执行命令之前，先检查服务器的内存占用情况，并在有需要时进行内存回收，从而使得接下来的命令可以顺利执行。如果内存回收失败，那么不再执行后续步骤，向客户端返回一个错误。</li><li>如果服务器上一次执行 <code>BGSAVE</code> 命令时出错，并且服务器打开了 <code>stop-writes-on-bgsave-error</code> 功能，而且服务器即将要执行的命令是一个写命令，那么服务器将拒绝执行这个命令，并向客户端返回一个错误。</li><li>如果客户端当前正在用 <code>SUBSCRIBE</code> 命令订阅频道， 或者正在用 <code>PSUBSCRIBE</code> 命令订阅模式， 那么服务器只会执行客户端发来的 <code>SUBSCRIBE</code>、<code>PSUBSCRIBE</code>、<code>UNSUBSCRIBE</code>、<code>PUNSUBSCRIBE</code> 四个命令， 其他别的命令都会被服务器拒绝。</li><li>如果服务器正在进行数据载入，那么客户端发送的命令必须带有 <code>l</code> 标识（比如 <code>INFO</code>、<code>SHUTDOWN</code>、<code>PUBLISH</code>，等等）才会被服务器执行，其他别的命令都会被服务器拒绝。</li><li>如果服务器因为执行 Lua 脚本而超时并进入阻塞状态，那么服务器只会执行客户端发来的 <code>SHUTDOWN nosave</code> 命令和 <code>SCRIPT KILL</code> 命令， 其他别的命令都会被服务器拒绝。</li><li>如果客户端正在执行事务， 那么服务器只会执行客户端发来的 <code>EXEC</code>、<code>DISCARD</code>、<code>MULTI</code>、<code>WATCH</code> 四个命令， 其他命令都会被放进事务队列中。</li><li>如果服务器打开了监视器功能， 那么服务器会将要执行的命令和参数等信息发送给监视器。</li></ul><p>当完成了以上预备操作之后， 服务器就可以开始真正执行命令了。</p><h3 id="1-5-命令执行器（3）：调用命令的实现函数"><a href="#1-5-命令执行器（3）：调用命令的实现函数" class="headerlink" title="1.5 命令执行器（3）：调用命令的实现函数"></a>1.5 命令执行器（3）：调用命令的实现函数</h3><p>在前面的操作中，服务器已经将要执行命令的实现保存到了客户端状态的 <code>cmd</code> 属性里面，并将命令的参数和参数个数分别保存到了客户端状态的 <code>argv</code> 属性和 <code>argc</code> 属性里面，当服务器决定要执行命令时，它只要执行以下语句就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// client 是指向客户端状态的指针</span><br><span class="line"></span><br><span class="line">client-&gt;cmd-&gt;proc(client);</span><br></pre></td></tr></table></figure><p>因为执行命令所需的实际参数都已经保存到客户端状态的 <code>argv</code> 属性里面了，所以命令的实现函数只需要一个指向客户端状态的指针作为参数即可。</p><p>被调用的命令实现函数会执行指定的操作，并产生相应的命令回复，这些回复会被保存在客户端状态的输出缓冲区里面（<code>buf</code> 属性和 <code>reply</code> 属性），之后实现函数还会为客户端的套接字关联命令回复处理器，这个处理器负责将命令回复返回给客户端。</p><h3 id="1-6-命令执行器（4）：执行后续工作"><a href="#1-6-命令执行器（4）：执行后续工作" class="headerlink" title="1.6 命令执行器（4）：执行后续工作"></a>1.6 命令执行器（4）：执行后续工作</h3><p>在执行完实现函数之后，服务器还需要执行一些后续工作：</p><ul><li>如果服务器开启了慢查询日志功能，那么慢查询日志模块会检查是否需要为刚刚执行完的命令请求添加一条新的慢查询日志。</li><li>根据刚刚执行命令所耗费的时长，更新被执行命令的 <code>redisCommand</code> 结构的 <code>milliseconds</code> 属性，并将命令的 <code>redisCommand</code> 结构的 <code>calls</code> 计数器的值增一。</li><li>如果服务器开启了 AOF 持久化功能，那么 AOF 持久化模块会将刚刚执行的命令请求写入到 AOF 缓冲区里面。</li><li>如果有其他从服务器正在复制当前这个服务器，那么服务器会将刚刚执行的命令传播给所有从服务器。</li></ul><p>当以上操作都执行完了之后，服务器对于当前命令的执行到此就告一段落了，之后服务器就可以继续从文件事件处理器中取出并处理下一个命令请求了。</p><h3 id="1-7-将命令回复发送给客户端"><a href="#1-7-将命令回复发送给客户端" class="headerlink" title="1.7 将命令回复发送给客户端"></a>1.7 将命令回复发送给客户端</h3><p>命令实现函数会将命令回复保存到客户端的输出缓冲区里面，并为客户端的套接字关联命令回复处理器，当客户端套接字变为可写状态时，服务器就会执行命令回复处理器，将保存在客户端输出缓冲区中的命令回复发送给客户端。</p><p>当命令回复发送完毕之后，回复处理器会清空客户端状态的输出缓冲区，为处理下一个命令请求做好准备。</p><h3 id="1-8-客户端接收并打印命令回复"><a href="#1-8-客户端接收并打印命令回复" class="headerlink" title="1.8 客户端接收并打印命令回复"></a>1.8 客户端接收并打印命令回复</h3><p>当客户端接收到协议格式的命令回复之后，它会将这些回复转换成人类可读的格式，并打印给用户观看。</p><h2 id="2-serverCron-函数"><a href="#2-serverCron-函数" class="headerlink" title="2. serverCron 函数"></a>2. serverCron 函数</h2><h3 id="2-1-更新服务器时间缓存"><a href="#2-1-更新服务器时间缓存" class="headerlink" title="2.1 更新服务器时间缓存"></a>2.1 更新服务器时间缓存</h3><p>Redis 服务器中有不少功能需要获取系统的当前时间，而每次获取系统的当前时间都需要执行一次系统调用，为了减少系统调用的执行次数，服务器状态中的 <code>unixtime</code> 属性和 <code>mstime</code> 属性被用作当前时间的缓存。</p><p>由于 <code>serverCron</code> 函数默认会以每 100 毫秒一次的频率更新 <code>unixtime</code> 属性和 <code>mstime</code> 属性，所以这两个属性记录的时间精确度并不高：</p><ul><li>服务器只会在打印日志、更新服务器的 LRU 时钟、决定是否执行持久化任务、计算服务器上线时间（uptime）这类对事件精确度要求不高的功能上 “使用 unixtime 属性和 mstime 属性”。</li><li>对于为键设置过期时间、添加慢查询日志这种需要高精度时间的功能来说，服务器还是会再次执行系统调用，从而获得最准确的系统当前时间。</li></ul><h3 id="2-2-更新-LRU-时钟"><a href="#2-2-更新-LRU-时钟" class="headerlink" title="2.2 更新 LRU 时钟"></a>2.2 更新 LRU 时钟</h3><p>服务器状态中的 <code>lruclock</code> 属性保存了服务器的 LRU 时钟，也是服务器时间缓存的一种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认每 10 秒更新一次时钟缓存</span></span><br><span class="line"><span class="comment">// 用于计算键的空转(idle)时长</span></span><br><span class="line"><span class="keyword">unsigned</span> lruclock:<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 Redis 对象都会有一个 <code>lru</code> 属性，保存了对象最后一次被命令访问的时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> lrulock:<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><p>当服务器要计算一个数据库键的空转时间（也即是数据库键对应的值对象的空转时间），程序会用服务器的 <code>lruclock</code> 属性记录的时间减去对象的 <code>lru</code> 属性记录的时间，得出的计算结果就是这个对象的空转时间。</p><p><code>serverCron</code> 函数默认以每 10 秒一次的频率更新 <code>lruclock</code> 属性的值，因为这个时钟不是实时的，所以根据这个属性计算出来的 LRU 时间实际上只是一个模糊的估算值。</p><p><code>lruclock</code> 时钟的当前值可以通过 <code>INFO server</code> 命令的 <code>lru_clock</code> 域查看。</p><h3 id="2-3-更新服务器每秒执行命令次数"><a href="#2-3-更新服务器每秒执行命令次数" class="headerlink" title="2.3 更新服务器每秒执行命令次数"></a>2.3 更新服务器每秒执行命令次数</h3><p><code></code>serverCron<code>函数中的</code>trackOperationsPerSecond<code>函数会以每 100ms 一次的频率执行，这个函数的功能是以抽样计算的方式，估算并记录服务器在最近一秒钟处理的命令请求数量。可以通过</code>INFO stats<code>命令的</code>instantaneous_ops_per_sec ` 域查看。</p><h3 id="2-4-更新服务器内存峰值记录"><a href="#2-4-更新服务器内存峰值记录" class="headerlink" title="2.4 更新服务器内存峰值记录"></a>2.4 更新服务器内存峰值记录</h3><p>服务器状态中的 <code>stat_peak_memory</code> 属性记录了服务器的内存峰值大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 已使用内存峰值</span></span><br><span class="line"><span class="keyword">size_t</span> stat_peak_memory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次 <code>serverCron</code> 函数执行时，程序都会查看服务器当前使用的内存数量，并与 <code>stat_peak_memory</code> 保存的数值进行比较，如果当前使用的内存数量比 <code>stat_peak_memory</code> 属性记录的值要大，那么程序就将当前使用的内存数量记录到 <code>stat_peak_memory</code> 属性里面。</p><p><code>INFO memory</code> 命令的 <code>used_memory_peak</code> 和 <code>used_memory_peak_human</code> 两个域分别以两种格式记录了服务器的内存峰值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis&gt;INFO memory</span><br><span class="line"># Memory</span><br><span class="line">...</span><br><span class="line">used_momory_peak:501824</span><br><span class="line">used_memory_peak_human:490.06K</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2-5-处理SIGTERM信号"><a href="#2-5-处理SIGTERM信号" class="headerlink" title="2.5 处理SIGTERM信号"></a>2.5 处理SIGTERM信号</h3><p>在启动服务器时，Redis 会为服务器进程的 <code>SIGTERM</code> 信号关联处理器 <code>sigtermHandler</code> 函数，这个信号处理器负责在服务器接到 <code>SIGTERM</code> 信号时，打开服务器状态的 <code>shutdown_asap</code> 标识：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SIGTERM信号的处理器</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigtermHandler</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印日至</span></span><br><span class="line">redisLogFromHandler(REDIS_WARNIING,<span class="string">"Received SIGTERM,scheduling shutdown..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开关闭标识</span></span><br><span class="line">server.shutdown_asap = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次 <code>serverCron</code> 函数运行时，程序都会对服务器状态的 <code>shutdown_asap</code> 属性进行检查，并根据属性的值决定是否关闭服务器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭服务器的标识：</span></span><br><span class="line"><span class="comment">// 值为1时，关闭服务器，</span></span><br><span class="line"><span class="comment">// 值为0时，不做动作。</span></span><br><span class="line"><span class="keyword">int</span> shutdown_asap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>服务器在关闭自身之前会进行 RDB 持久化操作，这也是服务器拦截 <code>SIGTERM</code> 信号的原因，如果服务器一接到 <code>SIGTERM</code> 信号就立即关闭，那么它就没办法执行持久化操作了。</p><h3 id="2-6-管理客户端资源"><a href="#2-6-管理客户端资源" class="headerlink" title="2.6 管理客户端资源"></a>2.6 管理客户端资源</h3><p><code>serverCron</code> 函数每次执行都会调用 <code>clientsCron</code> 函数，<code>clientsCron</code> 函数会对一定数量的客户端进行以下两种检查：</p><ul><li>如果客户端和服务器之间的连接已经超时，那么程序释放这个客户端。</li><li>如果客户端在上一次执行命令请求后，输入缓冲区的大小超过了一定的长度，那么程序会释放客户端当前的输入缓冲区，并重新创建一个默认大小的输入缓冲区，从而防止客户端的输入缓冲区耗费了过多的内存。</li></ul><h3 id="2-7-管理数据库资源"><a href="#2-7-管理数据库资源" class="headerlink" title="2.7 管理数据库资源"></a>2.7 管理数据库资源</h3><p><code>serverCron</code> 函数每次执行都会调用 <code>databaseCron</code> 函数，这个函数会对服务器中的一部分数据库进行检查，删除其中的过期键，并在有需要时，对字典进行收缩操作。</p><h3 id="2-8-执行被延迟的-BGREWRITEAOF"><a href="#2-8-执行被延迟的-BGREWRITEAOF" class="headerlink" title="2.8 执行被延迟的 BGREWRITEAOF"></a>2.8 执行被延迟的 BGREWRITEAOF</h3><p>服务器在执行 <code>BGSAVE</code> 期间，如果客户端向服务器请求了 <code>BGREWRITEAOF</code> 命令，那么服务器会将 <code>BGREWRITEAOF</code> 命令延迟到 <code>BGSAVE</code> 执行完毕之后执行。</p><p>服务器的 <code>aof_rewrite_scheduled</code> 标识记录了服务器是否延迟了 <code>BGREWRITEAOF</code> 命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果为 1，那么表示有 BGREWRITEAOF 命令被延迟了</span></span><br><span class="line"><span class="keyword">int</span> aof_rewrite_scheduled;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每次 <code>serverCron</code> 函数执行时，函数都会检查 <code>BGSAVE</code> 命令或者 <code>BGREWRITEAOF</code> 命令是否正在执行，如果这两个命令都没在执行，并且 <code>aof_rewrite_scheduled</code> 属性的值为 1，那么服务器就会执行之前被推延的 <code>BGREWRITEAOF</code> 命令。</p><h3 id="2-9-检查持久化操作的运行状态"><a href="#2-9-检查持久化操作的运行状态" class="headerlink" title="2.9 检查持久化操作的运行状态"></a>2.9 检查持久化操作的运行状态</h3><p>服务器状态用 <code>rdb_child_pid</code> 和 <code>aof_child_pid</code> 属性记录了执行 <code>BGSAVE</code> 命令和 <code>BGREWRITEAOF</code> 命令的子进程的 ID，这两个属性可以用于检查这两个命令是否正在执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录执行 BGSAVE 命令的子进程 ID：</span></span><br><span class="line"><span class="comment">// 如果服务器没有在执行 BGSAVE，</span></span><br><span class="line"><span class="comment">// 那么这个属性的值为 -1。</span></span><br><span class="line"><span class="keyword">pid_t</span> rdb_child_pid;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 记录执行 BGREWRITEAOF 命令的子进程 ID：</span></span><br><span class="line"><span class="comment">// 如果服务器没有在执行 BGREWRITEAOF，</span></span><br><span class="line"><span class="comment">// 那么这个属性的值为 -1。</span></span><br><span class="line"><span class="keyword">pid_t</span> aof_child_pid;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>serverCron</code> 函数每次执行都会检查 <code>rdb_child_pid</code> 和 <code>aof_child_pid</code> 两个属性的值，只要其中一个属性的值不为 -1，程序会执行一次 <code>wait3</code> 函数，检查子进程是否有信号发来服务器进程：</p><ul><li>如果有信号到达，那么表示新的 RDB 文件已经生成完毕（对于 <code>BGSAVE</code> 命令来说）或者 AOF 文件已经重写完毕（对于 <code>BGREWRITEAOF</code> 命令来说），服务器需要进行相应命令的后续操作，比如用新的 RDB 文件替换现有的 RDB 文件，或者用重写后的 AOF 文件替换现有的 AOF 文件。</li><li>如果没有信号到达，那么表示持久化操作未完成，程序不做动作。</li></ul><p>另一方面，如果 <code>rdb_child_pid</code> 和 <code>aof_child_pid</code> 两个属性的值都为 -1，那么表示服务器没有在进行持久化操作，在这种情况下，程序执行以下三个检查：</p><ol><li>查看是否有 <code>BGREWRITEAOF</code> 被延迟了，如果有的话，那么开始一次新的 <code>BGREWRITEAOF</code> 操作。</li><li>检查服务器自动保存条件是否已经被满足，如果条件满足，并且服务器没有在执行其他持久化操作，那么服务器开始一次新的 <code>BGSAVE</code> 操作（因为条件 1 可能会引发一次 <code>BGREWRITEAOF</code>，所以在这个检查中，程序会再次确认服务器是否已经在执行持久化操作了）。</li><li>检查服务器设置的 AOF 重写条件是否满足，如果条件满足，并且服务器没有在执行其他持久化操作，那么服务器将开始一次新的 <code>BGREWRITEAOF</code> 操作（因为条件 1 和条件 2 都可能会引起新的持久化操作，所以在这个检查中，我们要再次确认服务器是否已经在执行持久化操作了）。</li></ol><h3 id="2-10-将-AOF-缓冲区中的内容写入-AOF-文件"><a href="#2-10-将-AOF-缓冲区中的内容写入-AOF-文件" class="headerlink" title="2.10 将 AOF 缓冲区中的内容写入 AOF 文件"></a>2.10 将 AOF 缓冲区中的内容写入 AOF 文件</h3><p>如果服务器开启了 AOF 持久化功能，并且 AOF 缓冲区里面还有待写入的数据，那么 <code>serverCron</code> 函数会调用相应的程序，将 AOF 缓冲区中的内容写入到 AOF 文件里面。</p><h3 id="2-11-关闭异步客户端"><a href="#2-11-关闭异步客户端" class="headerlink" title="2.11 关闭异步客户端"></a>2.11 关闭异步客户端</h3><p>服务器会关闭那些输出缓冲区大小超出限制的客户端。</p><h3 id="2-12-增加-cronloops-计数器的值"><a href="#2-12-增加-cronloops-计数器的值" class="headerlink" title="2.12 增加 cronloops 计数器的值"></a>2.12 增加 cronloops 计数器的值</h3><p>服务器状态的 <code>cronloops</code> 属性记录了 <code>serverCron</code> 函数执行的次数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// serverCron 函数的运行次数计数器</span></span><br><span class="line"><span class="comment">// serverCron 函数每执行一次，这个属性的值就增一</span></span><br><span class="line"><span class="keyword">int</span> cronloops;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cronloops</code> 属性目前在服务器中的唯一作用，就是在复制模块中实现 “每执行 serverCron 函数 N 次就执行一次指定代码” 的功能。</p><h2 id="3-初始化服务器"><a href="#3-初始化服务器" class="headerlink" title="3. 初始化服务器"></a>3. 初始化服务器</h2><h3 id="3-1-初始化服务器状态结构"><a href="#3-1-初始化服务器状态结构" class="headerlink" title="3.1 初始化服务器状态结构"></a>3.1 初始化服务器状态结构</h3><p>初始化服务器的第一步就是创建一个 <code>struct redisServer</code> 类型的实例变量 server 作为服务器的状态，并为结构中的各个属性设置默认值。初始化 server 变量的工作由 <code>redis.c/initServerConfig</code> 函数完成。</p><p><code>initServerConfig</code> 函数中，大部分是对 server 的属性设置默认值，还有一部分是调用 <code>populateCommandTable</code> 函数对 Redis 的命令表初始化。全局变量 <code>redisCommandTable</code> 是 <code>redisCommand</code> 类型的数组，保存 Redis 支持的所有命令。<code>server.commands</code> 是一个 <code>dict</code>，保存命令名到 <code>redisCommand</code> 的映射。<code>populateCommandTable</code> 函数会遍历全局 <code>redisCommandTable</code> 表，把每条命令插入到 <code>server.commands</code> 中，根据每个命令的属性设置其 <code>flags</code>。以下是这个函数的部分代码： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initServerConfig</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器的运行 id </span></span><br><span class="line">    getRandomHexChars(server.runid,REDIS_RUN_ID_SIZE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为运行 id 加上结尾字符</span></span><br><span class="line">    server.runid[REDIS_RUN_ID_SIZE] = <span class="string">'\0'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认配置文件路径</span></span><br><span class="line">    server.configfile = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认服务器频率</span></span><br><span class="line">    server.hz = REDIS_DEFAULT_HZ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置服务器的运行架构</span></span><br><span class="line">    server.arch_bits = (<span class="keyword">sizeof</span>(<span class="keyword">long</span>) == <span class="number">8</span>) ? <span class="number">64</span> : <span class="number">32</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认服务器端口号</span></span><br><span class="line">    server.port = REDIS_SERVERPORT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">/* Command table -- we initiialize it here as it is part of the</span></span><br><span class="line"><span class="comment">　　* initial configuration, since command names may be changed via</span></span><br><span class="line"><span class="comment">　　* redis.conf using the rename-command directive. */</span></span><br><span class="line">　　<span class="comment">// 初始化命令表</span></span><br><span class="line">　　<span class="comment">// 在这里初始化是因为接下来读取 .conf 文件时可能会用到这些命令</span></span><br><span class="line">　　server.commands = dictCreate(&amp;commandTableDictType,<span class="literal">NULL</span>);</span><br><span class="line">　　server.orig_commands = dictCreate(&amp;commandTableDictType,<span class="literal">NULL</span>);</span><br><span class="line">　　populateCommandTable();</span><br><span class="line">　　server.delCommand = lookupCommandByCString(<span class="string">"del"</span>);</span><br><span class="line">　　server.multiCommand = lookupCommandByCString(<span class="string">"multi"</span>);</span><br><span class="line">　　server.lpushCommand = lookupCommandByCString(<span class="string">"lpush"</span>);</span><br><span class="line">　　server.lpopCommand = lookupCommandByCString(<span class="string">"lpop"</span>);</span><br><span class="line">　　server.rpopCommand = lookupCommandByCString(<span class="string">"rpop"</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="comment">// ...</span></span><br><span class="line">　　</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 <code>initServerConfig</code> 函数完成的主要工作：</p><ul><li>设置服务器的运行 ID。</li><li>设置服务器的默认运行频率。</li><li>设置服务器的默认配置文件路径。</li><li>设置服务器的运行架构。</li><li>设置服务器的默认端口号。</li><li>设置服务器的默认 RDB 持久化条件和 AOF 持久化条件。</li><li>初始化服务器的 LRU 时钟。</li><li>创建命令表。</li></ul><p><code>initServerConfig</code> 函数设置的服务器状态属性基本都是一些整数、浮点数、或者字符串属性，除了命令表之外，<code>initServerConfig</code> 函数没有创建服务器状态的其他数据结构，数据库、慢查询日志、Lua 环境、共享对象这些数据结构在之后的步骤才会被创建出来。</p><h3 id="3-2-载入配置选项"><a href="#3-2-载入配置选项" class="headerlink" title="3.2 载入配置选项"></a>3.2 载入配置选项</h3><p>在启动服务器时，用户可以通过给定配置参数或者指定配置文件来修改服务器的默认配置。服务器在用 <code>initServerConfig</code> 函数初始化完 server 变量之后，就会开始载入用户给定的配置参数和配置文件，并根据用户设定的配置，对 server 变量相关属性的值进行修改。</p><ul><li>如果用户为这些属性的相应选项指定了新的值，那么服务器就使用用户指定的值来更新相应的属性。</li><li>如果用户没有为属性的相应选项设置新的值，那么服务器就沿用之前 <code>initServerConfig</code> 函数为属性设置的默认值。</li></ul><h3 id="3-3-初始化服务器数据结构"><a href="#3-3-初始化服务器数据结构" class="headerlink" title="3.3 初始化服务器数据结构"></a>3.3 初始化服务器数据结构</h3><p>在之前执行 <code>initServerConfig</code> 函数初始化 server 状态时，程序只创建了命令表一个数据结构，不过除了命令表之外，服务器状态还包含其他数据结构，比如：</p><ul><li><code>server.clients</code> 链表，这个链表记录了所有与服务器相连的客户端的状态结构，链表的每一个节点都包含一个 <code>redisClient</code> 结构实例。</li><li><code>server.db</code> 数组，数组中包含了服务器的所有数据库。</li><li>用于保存频道订阅信息的 <code>server.pubsub_channels</code> 字典，以及用于保存模式订阅信息的 <code>server.pubsub_patterns</code> 链表。</li><li>用于执行 Lua 脚本的 Lua 环境 <code>server.lua</code>。</li><li>用于保存慢查询日志的 <code>server.slowlog</code> 属性。</li></ul><p>当初始化服务器进行到这一步，服务器将调用initServer函数，为以上提到的数据结构分配内存，并在有需要时，为这些数据结构设置或关联初始化值。</p><p>服务器到现在才初始化数据结构的原因在于，服务器必须先载入用户指定的配置选项，然后才能正确地对数据结构进行初始化。如果在执行 <code>initServerConfig</code> 函数时就对数据结构进行初始化，那么一旦用户通过配置选项修改了和数据结构有关的服务器状态属性，服务器就要重新调整和修改已创建的数据结构。为了避免出现这种麻烦的情况，服务器选择了将 server 状态的初始化分为两步进行，<code>initServerConfig</code> 函数主要负责初始化一般属性，而 <code>initServer</code> 函数主要负责初始化数据结构。</p><p>除了初始化数据结构之外，<code>initServer</code> 还进行了一些非常重要的设置操作：</p><ul><li>为服务器设置进程信号处理器。</li><li>创建共享对象，这些对象包含 Redis 服务器经常用到的一些值，服务器通过重用这些共享对象来避免反复创建相同的对象。</li><li>打开服务器的监听端口，并为监听套接字关联连接应答事件处理器，等待服务器正式运行时接受客户端的连接。</li><li>为 <code>serverCron</code> 函数创建时间事件，等待服务器正式运行时执行 <code>serverCron</code> 函数。</li><li>如果 AOF 持久化功能已经打开，那么打开现有的 AOF 文件，如果 AOF 文件不存在，那么创建并打开一个新的 AOF 文件，为 AOF 写入做好准备。</li><li>初始化服务器后台 I/O 模块（bio），为将来的 I/O 操作做准备。</li></ul><p>当 <code>initServer</code> 函数执行完毕之后，服务器将用 ASCII 字符在日志中打印出 Redis 的图标，以及 Redis 的版本号信息。</p><h3 id="3-4-还原数据库状态"><a href="#3-4-还原数据库状态" class="headerlink" title="3.4 还原数据库状态"></a>3.4 还原数据库状态</h3><p>在完成了对服务器状态 server 变量的初始化之后，服务器需要载入 RDB 文件或者 AOF 文件，并根据文件记录的内容来还原服务器的数据库状态。</p><p>根据服务器是否启用了 AOF 持久化功能，服务器载入数据时所使用的目标文件会有所不同：</p><ul><li>如果服务器启用了 AOF 持久化功能，那么服务器使用 AOF 文件来还原数据库状态；</li><li>相反地，如果服务器没有启用 AOF 持久化功能，那么服务器使用 RDB 文件来还原数据库状态。</li></ul><p>当服务器完成数据库状态还原工作之后，服务器将在日志中打印出载入文件并还原数据库状态所耗费的时长：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5244] 21 Nov 22:43:49.084 * DB loaded from disk: 0.068 seconds</span><br></pre></td></tr></table></figure><h3 id="3-5-执行事件循环"><a href="#3-5-执行事件循环" class="headerlink" title="3.5 执行事件循环"></a>3.5 执行事件循环</h3><p>在初始化的最后一步，服务器将打印出以下日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5244] 21 Nov 22:43:49.084 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure><p>并开始执行服务器的事件循环。</p><p>至此，服务器的初始化工作圆满完成，服务器现在开始可以接受客户端的连接请求，并处理客户端发来的命令请求了。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：事务》</title>
      <link href="/2017/10/05/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E4%BA%8B%E5%8A%A1%E3%80%8B/"/>
      <url>/2017/10/05/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E4%BA%8B%E5%8A%A1%E3%80%8B/</url>
      <content type="html"><![CDATA[<h3 id="1-事务的实现"><a href="#1-事务的实现" class="headerlink" title="1. 事务的实现"></a>1. 事务的实现</h3><p>一个事务从开始到结束通常会经历以下三个阶段：</p><ul><li>事务开始。</li><li>命令入队。</li><li>事务执行。</li></ul><a id="more"></a><h4 id="1-1-事务开始"><a href="#1-1-事务开始" class="headerlink" title="1.1 事务开始"></a>1.1 事务开始</h4><p><code>MULTI</code> 命令的执行标志着事务的开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; MULTI</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><code>MULTI</code> 命令可以将执行该命令的客户端从非事务状态切换至事务状态，这一切换是通过在客户端状态的 <code>flags</code> 属性中打开 <code>REDIS_MULTI</code> 标识来完成的，<code>MULTI</code> 命令的实现可以用以下伪代码来表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def MULTI():</span><br><span class="line"></span><br><span class="line">    # 打开事务标识</span><br><span class="line">    client.flags |= REDIS_MULTI</span><br><span class="line"></span><br><span class="line">    # 返回 OK 回复</span><br><span class="line">    replyOK()</span><br></pre></td></tr></table></figure><h3 id="1-2-命令入队"><a href="#1-2-命令入队" class="headerlink" title="1.2 命令入队"></a>1.2 命令入队</h3><p>当一个客户端处于非事务状态时，这个客户端发送的命令会立即被服务器执行。与此不同的是，当一个客户端切换到事务状态之后，服务器会根据这个客户端发来的不同命令执行不同的操作：</p><ul><li>如果客户端发送的命令为 <code>EXEC</code>、 <code>DISCARD</code>、 <code>WATCH</code>、 <code>MULTI</code> 四个命令的其中一个，那么服务器立即执行这个命令。</li><li>与此相反，如果客户端发送的命令是 <code>EXEC</code>、<code>DISCARD</code>、<code>WATCH</code>、<code>MULTI</code> 四个命令以外的其他命令，那么服务器并不立即执行这个命令，而是将这个命令放入一个事务队列里面，然后向客户端返回 <code>QUEUED</code> 回复。</li></ul><h3 id="1-3-事务队列"><a href="#1-3-事务队列" class="headerlink" title="1.3 事务队列"></a>1.3 事务队列</h3><p>每个 Redis 客户端都有自己的事务状态，这个事务状态保存在客户端状态的 <code>mstate</code> 属性里面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务状态</span></span><br><span class="line">    multiState mstate;      <span class="comment">/* MULTI/EXEC state */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p>事务状态包含一个事务队列，以及一个已入队命令的计数器（也可以说是事务队列的长度）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">multiState</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务队列，FIFO 顺序</span></span><br><span class="line">    multiCmd *commands;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已入队命令计数</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">&#125; multiState;</span><br></pre></td></tr></table></figure><p>事务队列是一个 <code>multiCmd</code> 类型的数组，数组中的每个 <code>multiCmd</code> 结构都保存了一个已入队命令的相关信息，包括指向命令实现函数的指针，命令的参数，以及参数的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct multiCmd &#123;</span><br><span class="line"></span><br><span class="line">    // 参数</span><br><span class="line">    robj **argv;</span><br><span class="line"></span><br><span class="line">    // 参数数量</span><br><span class="line">    int argc;</span><br><span class="line"></span><br><span class="line">    // 命令指针</span><br><span class="line">    struct redisCommand *cmd;</span><br><span class="line"></span><br><span class="line">&#125; multiCmd;</span><br></pre></td></tr></table></figure><p>事务队列以先进先出（FIFO）的方式保存入队的命令：较先入队的命令会被放到数组的前面，而较后入队的命令则会被放到数组的后面。</p><h3 id="1-4-执行事务"><a href="#1-4-执行事务" class="headerlink" title="1.4 执行事务"></a>1.4 执行事务</h3><p>当一个处于事务状态的客户端向服务器发送 <code>EXEC</code> 命令时，这个 <code>EXEC</code> 命令将立即被服务器执行： 服务器会遍历这个客户端的事务队列，执行队列中保存的所有命令，最后将执行命令所得的结果全部返回给客户端。</p><p><code>EXEC</code> 命令的实现原理可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def EXEC():</span><br><span class="line"></span><br><span class="line">    # 创建空白的回复队列</span><br><span class="line">    reply_queue = []</span><br><span class="line"></span><br><span class="line">    # 遍历事务队列中的每个项</span><br><span class="line">    # 读取命令的参数，参数的个数，以及要执行的命令</span><br><span class="line">    for argv, argc, cmd in client.mstate.commands:</span><br><span class="line"></span><br><span class="line">        # 执行命令，并取得命令的返回值</span><br><span class="line">        reply = execute_command(cmd, argv, argc)</span><br><span class="line"></span><br><span class="line">        # 将返回值追加到回复队列末尾</span><br><span class="line">        reply_queue.append(reply)</span><br><span class="line"></span><br><span class="line">    # 移除 REDIS_MULTI 标识，让客户端回到非事务状态</span><br><span class="line">    client.flags &amp;= ~REDIS_MULTI</span><br><span class="line"></span><br><span class="line">    # 清空客户端的事务状态，包括：</span><br><span class="line">    # 1）清零入队命令计数器</span><br><span class="line">    # 2）释放事务队列</span><br><span class="line">    client.mstate.count = 0</span><br><span class="line">    release_transaction_queue(client.mstate.commands)</span><br><span class="line"></span><br><span class="line">    # 将事务的执行结果返回给客户端</span><br><span class="line">    send_reply_to_client(client, reply_queue)</span><br></pre></td></tr></table></figure><h3 id="2-WATCH-命令的实现"><a href="#2-WATCH-命令的实现" class="headerlink" title="2. WATCH 命令的实现"></a>2. WATCH 命令的实现</h3><p><code>WATCH</code> 命令是一个乐观锁（optimistic locking），它可以在 <code>EXEC</code> 命令执行之前，监视任意数量的数据库键，并在 <code>EXEC</code> 命令执行时，检查被监视的键是否至少有一个已经被修改过了，如果是的话，服务器将拒绝执行事务，并向客户端返回代表事务执行失败的空回复（nil）。 <code>WATCH</code> 命令总是返回 OK。</p><h4 id="2-1-使用-WATCH-命令监视数据库键"><a href="#2-1-使用-WATCH-命令监视数据库键" class="headerlink" title="2.1 使用 WATCH 命令监视数据库键"></a>2.1 使用 WATCH 命令监视数据库键</h4><p>每个 Redis 数据库都保存着一个 <code>watched_keys</code> 字典，这个字典的键是某个被 <code>WATCH</code> 命令监视的数据库键，而字典的值则是一个链表，链表中记录了所有监视相应数据库键的客户端：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dict *watched_keys;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p>通过 <code>watched_keys</code> 字典，服务器可以清楚地知道哪些数据库键正在被监视，以及哪些客户端正在监视这些数据库键。</p><p>通过执行 <code>WATCH</code> 命令，客户端可以在 <code>watched_keys</code> 字典中与被监视的键进行关联。</p><h3 id="2-2-监视机制的触发"><a href="#2-2-监视机制的触发" class="headerlink" title="2.2 监视机制的触发"></a>2.2 监视机制的触发</h3><p>所有对数据库进行修改的命令，比如 <code>SET</code>、<code>LPUSH</code>、<code>SADD</code>、<code>ZREM</code>、<code>DEL</code>、<code>FLUSHDB</code> 等等，在执行之后都会调用 <code>multi.c/touchWatchKey</code> 函数对 <code>watched_keys</code> 字典进行检查，查看是否有客户端正在监视刚刚被命令修改过的数据库键，如果有的话，那么 <code>touchWatchKey</code> 函数就会将监视被修改键的客户端的 <code>REDIS_DIRTY_CAS</code> 标识打开，表示该客户端的事务安全性已经被破坏。</p><p><code>touchWatchKey</code> 函数的定义可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def touchWatchKey(db, key):</span><br><span class="line"></span><br><span class="line"># 如果键 key 存在于数据库的 watched_keys 字典中</span><br><span class="line"># 那么说明至少有一个客户端在监视这个 key</span><br><span class="line">if key in db.watched_keys:</span><br><span class="line"></span><br><span class="line"># 遍历所有监视键 key 的客户端</span><br><span class="line">for client in db.watched_keys[key]:</span><br><span class="line"></span><br><span class="line"># 打开标识</span><br><span class="line">client.flags |= REDIS_DIRTY_CAS</span><br></pre></td></tr></table></figure><h3 id="2-3-判断事务是否安全"><a href="#2-3-判断事务是否安全" class="headerlink" title="2.3 判断事务是否安全"></a>2.3 判断事务是否安全</h3><p>当服务器接收到一个客户端发来的 <code>EXEC</code> 命令时，服务器会根据这个客户端是否打开了 <code>REDIS_DIRTY_CAS</code> 标识来决定是否执行事务：</p><ul><li>如果客户端的 <code>REDIS_DIRTY_CAS</code> 标识已经被打开，那么说明客户端所监视的键当中，至少有 一个键已经被修改过了，在这种情况下，客户端提交的事务已经不再安全，所以服务器会拒绝执行客户端提交的事务。</li><li>如果客户端的 <code>REDIS_DIRTY_CAS</code> 标识没有被打开，那么说明客户端监视的所有键都没有被修改过（或者客户端没有监视任何键），事务仍然是安全的，服务器将执行客户端提交的这个事务。</li></ul><h2 id="3-事务的-ACID-性质"><a href="#3-事务的-ACID-性质" class="headerlink" title="3. 事务的 ACID 性质"></a>3. 事务的 ACID 性质</h2><p>在传统的关系式数据库中，常常用 ACID 性质来检验事务功能的可靠性和安全性。</p><p>在 Redis 中，事务总是具有原子性（Atomicity）， 一致性（Consistency）和隔离性（Isolation），并且当 Redis 运行在某种特定的持久化模式下时，事务也具有耐久性（Durability）。</p><h3 id="3-1-原子性"><a href="#3-1-原子性" class="headerlink" title="3.1 原子性"></a>3.1 原子性</h3><p>事务具有原子性指的是，数据库将事务中的多个操作当作一个整体来执行，服务器要么就执行事务中的所有操作，要么就一个操作也不执行。 </p><p>对于 Redis 的事务功能来说，事务队列中的命令要么就全部执行，要么就一个都不执行，因此，Redis 的事务是具有原子性的。</p><p>Redis 的事务和传统的关系型数据库事务的最大区别在于，Redis 不支持事务的回滚机制（rollback），即使事务队列中的某个命令在执行期间出现了错误，整个事务也会<br>继续执行下去，直到将事务队列中的所有命令都执行完毕为止。</p><h3 id="3-2-一致性"><a href="#3-2-一致性" class="headerlink" title="3.2 一致性"></a>3.2 一致性</h3><p>事务具有一致性指的是，如果数据库在执行事务之前是一致的，那么在事务执行之后，无论事务是否执行成功，数据库也应该仍然是一致的。</p><p>”一致“ 指的是数据符合数据库本身的定义和要求，没有包含非法或者无效的错误数据。</p><p>Redis 通过谨慎的错误检测和简单的设计来保证事务一致性。</p><h4 id="3-2-1-入队错误"><a href="#3-2-1-入队错误" class="headerlink" title="3.2.1 入队错误"></a>3.2.1 入队错误</h4><p>一个事务在入队命令的过程中，出现了命令不存在或者命令格式不正确等情况，那么 Redis 将拒绝执行这个事务，因此 Redis 事务的一致性不会被带有入队错误的事务影响。</p><h4 id="3-2-2-执行错误"><a href="#3-2-2-执行错误" class="headerlink" title="3.2.2 执行错误"></a>3.2.2 执行错误</h4><p>因为在事务执行的过程中，出错的命令会被服务器识别出来，并进行相应的错误处理，所以这些出错命令不会对数据库做任何修改，也不会对事务的一致性产生任何影响。</p><h4 id="3-2-3-服务器停机"><a href="#3-2-3-服务器停机" class="headerlink" title="3.2.3 服务器停机"></a>3.2.3 服务器停机</h4><p>如果 Redis 服务器在执行事务的过程中停机，那么根据服务器所使用的持久化模式，可能有以下情况出现：</p><ul><li>如果服务器运行在无持久化的内存模式下，那么重启之后的数据库将是空白的，因此数据总是一致的。</li><li>如果服务器运行在 RDB 模式下，那么在事务中途停机不会导致不一致性，因为服务器可以根据现有的 RDB 文件来恢复数据，从而将数据库还原到一个一致的状态。如果找不到可供使用的 RDB 文件，那么重启之后的数据库将是空白的，而空白数据库总是一致的。</li><li>如果服务器运行在 AOF 模式下，那么在事务中途停机不会导致不一致性，因为服务器可以根据现有的 AOF 文件来恢复数据，从而将数据库还原到一个一致的状态。如果找不到可供使用的 AOF 文件，那么重启之后的数据库将是空白的，而空白数据库总是一致的。</li></ul><p>综上所述，无论 Redis 服务器运行在哪种持久化模式下，事务执行中途发生的停机都不会影响数据库的一致性。</p><h3 id="3-3-隔离性"><a href="#3-3-隔离性" class="headerlink" title="3.3 隔离性"></a>3.3 隔离性</h3><p>事务的隔离性指的是，即使数据库中有多个事务并发地执行，各个事务之间也不会互相影响，并且在并发状态下执行的事务和串行执行的事务产生的结果完全 相同。 </p><p>因为 Redis 使用单线程的方式来执行事务（以及事务队列中的命令），并且服务器保证，在执行事务期间不会对事物进行中断，因此，Redis 的事务总是以串行的方式运行的，并且事务也总是具有隔离性的。</p><h3 id="3-4-耐久性"><a href="#3-4-耐久性" class="headerlink" title="3.4 耐久性"></a>3.4 耐久性</h3><p>事务的耐久性指的是，当一个事务执行完毕时，执行这个事务所得的结果已经被保持到永久存储介质（比如硬盘）里面，即使服务器在事务执行完毕之后停机，执行事务所得的结果也不会丢失。 </p><p>因为 Redis 事务不过是简单的用队列包裹起了一组 Redis 命令，Redis 并没有为事务提供任何额外的持久化功能，所以 Redis 事务的耐久性由 Redis 所使用的持久化模式决定： </p><ul><li>当服务器在无持久化的内存模式下运作时，事务不具有耐久性：一旦服务器停机，包括事务数据在内的所有服务器数据都将丢失。</li><li>当服务器在 RDB 持久化模式下运作时，服务器只会在特定的保存条件被满足时，才会执行 <code>BGSAVE</code> 命令，对数据库进行保存操作，并且异步执行的 <code>BGSAVE</code> 不能保证事务数据被第一时间保存到硬盘里面，因此 RDB 持久化模式下的事务也不具有耐久性。</li><li>当服务器运行在 AOF 持久化模式下，并且 <code>appedfsync</code> 选项的值为 <code>always</code> 时，程序总会在执行命令之后调用同步（sync）函数，将命令数据真正地保存到硬盘里面，因此这种配置下的事务是具有耐久性的。 </li><li>当服务器运行在 AOF 持久化模式下，并且 <code>appedfsync</code> 的选项的值为 <code>everysec</code> 时，程序会每秒同步一次命令数据到磁盘。因为停机可能会恰好发生在等待同步的那一秒钟之内，这可能会造成事务数据丢失，所以这种配置下的事务不具有耐久性。</li><li>当服务器运行在 AOF 持久化模式下，并且 <code>appedfsync</code> 的选项的值为 <code>no</code> 时，程序会交由操作系统来决定何时将命令数据同步到硬盘。因为事务数据可能在等待同步的过程中丢失，所以这种配置下的事务不具有耐久性。</li></ul>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：事件》</title>
      <link href="/2017/10/04/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E3%80%8B/"/>
      <url>/2017/10/04/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E4%BA%8B%E4%BB%B6%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>Redis 服务器是一个事件驱动程序，服务器需要处理以下两类事件：</p><ul><li>文件事件（file event）：Redis 服务器通过套接字与客户端（或者其他 Redis 服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其他服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作。</li><li>时间事件（time event）：Redis 服务器中的一些操作（比如 <code>serverCron</code> 函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。</li></ul><a id="more"></a><h2 id="1-文件事件"><a href="#1-文件事件" class="headerlink" title="1. 文件事件"></a>1. 文件事件</h2><p>Redis 基于 Reactor 模式开发了自己的网络事件处理器：这个处理器被称为文件事件处理器（file event handler）：</p><ul><li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字，文件事件处理器即实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。</p><h3 id="1-1-文件事件处理器的构成"><a href="#1-1-文件事件处理器的构成" class="headerlink" title="1.1 文件事件处理器的构成"></a>1.1 文件事件处理器的构成</h3><p>文件事件处理器有四个组成部分，它们分别是套接字、I/O 多路复用程序、文件事件分派器（dispatcher），以及事件处理器。</p><p>文件事件是对套接字操作的抽象，每当一个套接字准备好执行连接应答（accept）、写入、读取、关闭等操作时，就会产生一个文件事件。因为一个服务器通常会连接多个套接字，所以多个文件事件有可能会并发地出现。</p><p>I/O 多路复用程序负责监听多个套接字，并向文件事件分派器传送那些产生了事件的套接字。</p><p>尽管多个文件事件可能会并发地出现，但 I/O 多路复用程序总是会将所有产生事件的套接字都放到一个队列里面，然后通过这个队列，以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字。当上一个套接字产生的事件被处理完毕之后（该套接字为事件所关联的事件处理器执行完毕），I/O 多路复用程序才会继续向文件事件分派器传送下一个套接字。</p><p>文件事件分派器接收 I/O 多路复用程序传来的套接字，并根据套接字产生的事件的类型，调用相应的事件处理器。</p><p>事件处理器是一个个函数，它们定义了某个事件发生时，服务器应该执行的动作。</p><p><img src="https://user-images.githubusercontent.com/12514722/33113050-45f79bfa-cf91-11e7-89b8-88c68606f968.png" alt="image"></p><h3 id="1-2-I-O-多路复用程序的实现"><a href="#1-2-I-O-多路复用程序的实现" class="headerlink" title="1.2 I/O 多路复用程序的实现"></a>1.2 I/O 多路复用程序的实现</h3><p>Redis 的 I/O 多路复用程序的所有功能都是通过包装常见的 select、epoll、evport 和 kqueue 这些 I/O 多路复用函数库来实现的，每个 I/O 多路复用函数库在 Redis 源码中都对应一个单独的文件，比如 ae_select.c、ae_epoll.c、ae_kqueue.c，诸如此类。</p><p>因为 Redis 为每个 I/O 多路复用函数库都实现了相同的 API，所以 I/O 多路复用程序的底层实现是可以互换的。</p><p>Redis 在 I/O 多路复用程序的实现源码中用 <code>#include</code> 宏定义了相应的规则，程序会在编译时自动选择系统中性能最高的 I/O 多路复用函数库来作为 Redis 的 I/O 多路复用程序的底层实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Include the best multiplexing layer supported by this system.</span></span><br><span class="line"><span class="comment"> * The following should be ordered by performances, descending. */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> HAVE_EVPORT</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"ae_evport.c"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">ifdef</span> HAVE_EPOLL</span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"ae_epoll.c"</span></span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="meta"># <span class="meta-keyword">ifdef</span> HAVE_KQUEUE</span></span><br><span class="line">        <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"ae_kqueue.c"</span></span></span><br><span class="line">        <span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"ae_select.c"</span></span></span><br><span class="line">        <span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="1-3-事件的类型"><a href="#1-3-事件的类型" class="headerlink" title="1.3 事件的类型"></a>1.3 事件的类型</h3><p>I/O 多路复用程序可以监听多个套接字的 <code>ae.h/AE_READABLE</code> 事件和 <code>ae.h/AE_WRITABLE</code> 事件，这两类事件和套接字操作之间的对应关系如下：</p><ul><li>当套接字变得可读时（客户端对套接字执行 write 操作，或者执行 close 操作），或者有新的可应答（acceptable）套接字出现时（客户端对服务器的监听套接字执行 connect 操作），套接字产生 <code>AE_READABLE</code> 事件；</li><li>当套接字变得可写时（客户端对套接字执行 read 操作），套接字产生 <code>AE_WRITABLE</code> 事件。</li></ul><p>I/O 多路复用程序允许服务器同时监听套接字的 <code>AE_READABLE</code> 事件和 <code>AE_WRITABLE</code> 事件，如果一个套接字同时产生了这两种事件，那么文件事件分派器会优先处理 <code>AE_READABLE</code> 事件，等到 <code>AE_READABLE</code> 事件处理完之后，才处理 <code>AE_WRITABLE</code> 事件。这也就是说，如果一个套接字又可读又可写的话，那么服务器将先读套接字，后写套接字。</p><h3 id="1-4-API"><a href="#1-4-API" class="headerlink" title="1.4 API"></a>1.4 API</h3><ul><li><code>ae.c/aeCreateFileEvent</code> 函数接受一个套接字描述符、一个事件类型，以及一个事件处理器作为参数，将给定套接字的给定事件加入到 I/O 多路复用程序的监听范围之内，并对事件和事件处理器进行关联。</li><li><code>ae.c/aeDeleteFileEvent</code> 函数接受一个套接字描述符和一个监听事件类型作为参数，让 I/O 多路复用程序取消对给定套接字的给定事件的监听，并取消事件和事件处理器之间的关联。</li><li><code>ae.c/aeGetFileEvents</code>函数接受一个套接字描述符，返回该套接字正在被监听的事件类型：<ul><li>如果套接字没有任何事件被监听，那么函数返回 <code>AE_NONE</code>。</li><li>如果套接字的读事件正在被监听，那么函数返回 <code>AE_READABLE</code>。</li><li>如果套接字的写事件正在被监听，那么函数返回 <code>AE_WRITABLE</code>。</li><li>如果套接字的读事件和写事件正在被监听，那么函数返回 <code>AE_READABLE|AE_WRITABLE</code>。</li></ul></li><li><code>ae.c/aeWait</code> 函数接受一个套接字描述符、一个事件类型和一个毫秒数为参数，在给定的时间内阻塞并等待套接字的给定类型事件产生，当事件成功产生，或者等待超时之后，函数返回。</li><li><code>ae.c/aeApiPoll</code> 函数接受一个 <code>sys/time.h/struct timeval</code> 结构为参数，并在指定的时间內，阻塞并等待所有被 <code>aeCreateFileEvent</code> 函数设置为监听状态的套接字产生文件事件，当有至少一个事件产生，或者等待超时后，函数返回。</li><li><code>ae.c/aeProcessEvents</code> 函数是文件事件分派器，它先调用 <code>aeApiPoll</code> 函数来等待事件产生，然后遍历所有已产生的事件，并调用相应的事件处理器来处理这些事件。</li><li><code>ae.c/aeGetApiName</code> 函数返回 I/O 多路复用程序底层所使用的 I/O 多路复用函数库的名称：返回 “epoll” 表示底层为 epoll 函数库，返回 “select” 表示底层为 select 函数库，诸如此类。</li></ul><h3 id="1-5-文件事件处理器"><a href="#1-5-文件事件处理器" class="headerlink" title="1.5 文件事件处理器"></a>1.5 文件事件处理器</h3><h4 id="1-5-1-连接应答处理器"><a href="#1-5-1-连接应答处理器" class="headerlink" title="1.5.1 连接应答处理器"></a>1.5.1 连接应答处理器</h4><p><code>networking.c/acceptTcpHandler</code> 函数是 Redis 的连接应答处理器，这个处理器用于对连接服务器监听套接字的客户端进行应答，其主要调用 <code>anet.c中anetTcpAccept</code> 函数实现，具体实现为 <code>sys/socket.h/accept</code> 函数的包装。</p><p>当 Redis 服务器进行初始化的时候，程序会将这个连接应答处理器和服务器监听套接字的 <code>AE_READABLE</code> 事件关联起来，当有客户端用 <code>sys/socket.h/connect</code> 函数连接服务器监听套接字的时候，套接字就会产生 <code>AE_READABLE</code> 事件，引发连接应答处理器执行，并执行相应的套接字应答操作。</p><h3 id="1-5-1-命令请求处理器"><a href="#1-5-1-命令请求处理器" class="headerlink" title="1.5.1 命令请求处理器"></a>1.5.1 命令请求处理器</h3><p><code>networking.c/readQueryFromClient</code>函数是 Redis 的命令请求处理器，这个处理器负责从套接字中读入客户端发送的命令请求内容，具体实现为 <code>unistd.h/read</code> 函数的包装。</p><p>当一个客户端通过连接应答处理器成功连接到服务器之后，服务器会将客户端套接字的 <code>AE_READABLE</code> 事件和命令请求处理器关联起来，当客户端向服务器发送命令请求的时候，套接字就会产生 <code>AE_READABLE</code> 事件，引发命令请求处理器执行，并执行相应的套接字读入操作；</p><p>在客户端连接服务器的整个过程中，服务器都会一直为客户端套接字的 <code>AE_READABLE</code> 事件关联命令请求处理器。</p><h4 id="1-5-2-命令回复处理器"><a href="#1-5-2-命令回复处理器" class="headerlink" title="1.5.2 命令回复处理器"></a>1.5.2 命令回复处理器</h4><p><code>networking.c/sendReplyToClient</code> 函数是 Redis 的命令回复处理器，这个处理器负责将服务器执行命令后得到的命令回复通过套接字返回给客户端，具体实现为 <code>unistd.h/write</code> 函数的包装。</p><p>当服务器有命令回复需要传送给客户端的时候<strong>，</strong>服务器会将客户端套接字的 <code>AE_WRITABLE</code> 事件和命令回复处理器关联起来，当客户端准备好接收服务器传回的命令回复时，就会产生 <code>AE_WRITABLE</code> 事件，引发命令回复处理器执行，并执行相应的套接字写入操作。</p><h2 id="2-时间事件"><a href="#2-时间事件" class="headerlink" title="2. 时间事件"></a>2. 时间事件</h2><p>时间事件分为以下两类：</p><ul><li>定时事件：让一段程序在指定的时间之后执行一次。比如说，让程序 X 在当前时间的 30 毫秒之后执行一次。</li><li>周期性事件：让一段程序每隔指定时间就执行一次。比如说，让程序 Y 每隔 30 毫秒就执行一次。</li></ul><p>时间事件主要由以下三个属性组成：</p><ul><li><code>id</code>：服务器为时间事件创建的全局唯一 ID（标识号）。ID 号按从小到大的顺序递增，新事件的 ID 号比旧事件的 ID 号要大。</li><li><code>when</code>：毫秒精度的 UNIX 时间戳，记录了时间事件的到达（arrive）时间;</li><li><code>timeProc</code>：时间事件处理器，一个函数。当时间事件到达时，服务器就会调用相应的处理器来处理事件。</li></ul><p>一个时间事件是定时事件还是周期性事件取决于时间事件处理器的返回值：</p><ul><li>如果事件处理器返回 <code>ae.h/AE_NOMORE</code>，那么这个事件为定时事件：该事件在达到一次之后就会被删除，之后不再到达;</li><li>如果事件处理器返回一个非 <code>AE_NOMORE</code> 的整数值，那么这个事件为周期性时间：当一个时间事件到达之后，服务器会根据事件处理器返回的值，对时间事件的 <code>when</code> 属性进行更新，让这个事件在一段时间之后再次到达，并以这种方式一直更新并运行下去。比如说，如果一个时间事件的处理器返回整数值 30，那么服务器应该对这个时间事件进行更新，让这个事件在 30 毫秒之后再次到达。</li></ul><p>目前版本的 Redis 只使用周期性事件，而没有使用定时事件。</p><h3 id="2-1-实现"><a href="#2-1-实现" class="headerlink" title="2.1 实现"></a>2.1 实现</h3><p>服务器将所有时间事件都存放在一个无序链表中，每当时间事件执行器执行时，它就遍历整个链表，找到所有已到达的时间事件并调用相应事件处理器。这里的的无序链表，指的是不按 <code>when</code> 属性大小排序，而按 ID 排序，新的时间事件总是插入链表的表头。因此，当时间事件执行器运行的时候，它必须遍历链表中的所有时间事件，这样才能确保服务器中所有已到达的时间事件都会被处理。</p><h3 id="2-2-API"><a href="#2-2-API" class="headerlink" title="2.2 API"></a>2.2 API</h3><p><code>ae.c/aeCreateTimeEvent</code> 函数接受一个毫秒数 milliseconds 和一个时间事件处理器 <code>proc</code> 作为参数，将一个新的时间事件添加到服务器，这个新的时间事件将在当前时间的 milliseconds 毫秒之后到达，而事件的处理器为 <code>proc</code>。</p><p><code>ae.c/aeDeleteFileEvent</code> 函数接受一个时间事件 ID 作为参数，然后从服务器中删除该 ID 所对应的时间事件。</p><p><code>ae.c/aeSearchNearestTimer</code>函数返回到达时间距离当前时间最接近的那个时间事件；</p><p><code>ae.c/processTimeEvents</code> 函数是时间事件的执行器，这个函数会遍历所有已到达的时间事件，并调用这些事件的处理器。已到达指的是，时间事件的 <code>when</code> 属性记录的 UNIX 时间戳等于或小于当前时间的 UNIX 时间戳。</p><p><code>processTimeEvents</code> 函数的定义可以用以下伪代码来描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def processTimeEvents():</span><br><span class="line">    # 遍历服务器中的所有时间事件</span><br><span class="line">    for time_event in all_time_event():</span><br><span class="line">        # 检查事件是否已经到达</span><br><span class="line">        if time_event.when &lt;= unix_ts_now():</span><br><span class="line">            # 事件已到达</span><br><span class="line">            # 执行事件处理器，并获取返回值</span><br><span class="line">            retval = time_event.timeProc()</span><br><span class="line">            </span><br><span class="line">            # 如果这是一个定时事件</span><br><span class="line">            if retval == AE_NOMORE:</span><br><span class="line">                # 那么将该事件从服务器中删除</span><br><span class="line">                delete_time_event_from_server(time_event)</span><br><span class="line">                </span><br><span class="line">        # 如果这是一个周期性事件</span><br><span class="line">        else:</span><br><span class="line">            # 那么按照事件处理器的返回值更新时间事件的 when 属性</span><br><span class="line">            # 让这个事件在指定的时间之后再次到达</span><br><span class="line">            update_when(time_event, retval)</span><br></pre></td></tr></table></figure><h3 id="2-3-时间事件应用实例：serverCron-函数"><a href="#2-3-时间事件应用实例：serverCron-函数" class="headerlink" title="2.3 时间事件应用实例：serverCron 函数"></a>2.3 时间事件应用实例：serverCron 函数</h3><p>持续运行的 Redis 服务器需要定期对自身的资源和状态进行检查和调整，从而确保服务器可以长期、稳定地运行，这些定期操作由 <code>redis.c/serverCron</code> 函数负责执行，它的主要工作包括：</p><ul><li>更新服务器的各类统计信息，比如时间、内存占用、数据库占用情况等。</li><li>清理数据库中的过期键值对。</li><li>关闭和清理连接失效的客户端。</li><li>尝试进行 AOF 或 RDB 持久化操作。</li><li>如果服务器是主服务器，那么对从服务器进行定期同步。</li><li>如果处于集群模式，对集群进行定期同步和连接测试。</li></ul><p>Redis 服务器以周期性事件的方式来运行 <code>serverCron</code> 函数，在服务器运行期间，每隔一段时间，<code>serverCron</code> 就会执行一次，直到服务器关闭。</p><h2 id="3-事件的调度与执行"><a href="#3-事件的调度与执行" class="headerlink" title="3. 事件的调度与执行"></a>3. 事件的调度与执行</h2><p>事件的调度和执行由 <code>ae.c/aeProcessEvents</code> 函数负责，以下是该函数的伪代码表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def aeProcessEvents():</span><br><span class="line">    # 获取到达时间离当前时间最接近的时间事件</span><br><span class="line">    time_event = aeSearchNearestTimer()</span><br><span class="line">    </span><br><span class="line">    # 计算最接近的时间事件距离到达还有多少毫秒</span><br><span class="line">    remaind_ms = time_event.when - unix_ts_now()</span><br><span class="line">    </span><br><span class="line">    # 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设定为 0</span><br><span class="line">    if remaind_ms &lt; 0:</span><br><span class="line">        remaind_ms = 0</span><br><span class="line">        </span><br><span class="line">    # 根据remaind_ms的值，创建timeval结构</span><br><span class="line">    timeval = create_timeval_with_ms(remaind_ms)</span><br><span class="line">    </span><br><span class="line">    # 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 结构决定</span><br><span class="line">    # 如果 remaind_ms 的值为0，那么 aeApiPoll 调用之后马上返回，不阻塞</span><br><span class="line">    aeApiPoll(timeval)</span><br><span class="line">    </span><br><span class="line">    # 处理所有已产生的文件事件</span><br><span class="line">    processFileEvents()</span><br><span class="line">    </span><br><span class="line">    # 处理所有已到达的时间事件</span><br><span class="line">    processTimeEvents()</span><br></pre></td></tr></table></figure><p>将 <code>aeProcessEvents</code> 函数置于一个循环里面，加上初始化和清理函数，这就构成了 Redis 服务器的主函数，以下是该函数的伪代码表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line"></span><br><span class="line"># 初始化服务器</span><br><span class="line">init_server()</span><br><span class="line"></span><br><span class="line"># 一直处理事件，直到服务器关闭为止</span><br><span class="line">while server_is_not_shutdown():</span><br><span class="line">aeProcessEvents()</span><br><span class="line"></span><br><span class="line"># 服务器关闭，执行清理操作</span><br><span class="line">clean_server()</span><br></pre></td></tr></table></figure><p>以下是事件的调度和执行规则：</p><ul><li><code>aeApiPoll</code> 函数的最大阻塞时间由到达时间最接近当前时间的时间事件决定，这个方法既可以避免服务器对时间事件进行频繁的轮询（忙等待），也可以确保 <code>aeApiPoll</code> 函数不会阻塞过长时间。</li><li>因为文件事件是随机出现的，如果等待并处理完一次文件事件后，仍未有任何时间事件到达，那么服务器将再次等待并处理文件事件。随着文件事件的不断执行，时间会逐渐向时间事件所设置的到达时间逼近，并最终来到到达时间，这是服务器就可以开始处理到达的时间事件了。</li><li>对文件事件和时间事件的处理都是同步、有序、原子地执行的，服务器不会中途中断事件处理，也不会对事件进行抢占，因此，文件事件和时间事件的处理器都会尽可能地减少程序的阻塞时间，并在有需要时主动让出执行权，从而降低造成事件饥饿的可能性。</li><li>因为时间事件在文件事件后执行，并且事件之间不会出现抢占，所以时间事件的实际处理时间通常会比时间事件设定的到达时间稍晚一些。</li></ul>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：数据库》</title>
      <link href="/2017/10/03/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%8B/"/>
      <url>/2017/10/03/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-服务器中的数据库"><a href="#1-服务器中的数据库" class="headerlink" title="1. 服务器中的数据库"></a>1. 服务器中的数据库</h2><p>Redis 服务器将所有数据库都保存在服务器状态 <code>redis.h/redisServer</code> 结构的 <code>db</code> 数组中，<code>db</code> 数组的每个项都是一个 <code>redis.h/redisDb</code> 结构，每个 <code>redisDb</code> 结构代表一个数据库：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//一个数组，保存着服务器中的所有数据库</span></span><br><span class="line">redisDb *db;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//服务器的数据库数量</span></span><br><span class="line"><span class="keyword">int</span> dbnum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在初始化服务器时，程序会根据服务器状态的 <code>dbnum</code> 属性来决定应该创建多少个数据库。</p><p><code>dbnum</code> 属性的值由服务器配置的 <code>database</code> 选项决定，默认情况下，该选项的值为 16，所以 Redis 服务器默认会创建 16 个数据库。</p><a id="more"></a><h2 id="2-切换数据库"><a href="#2-切换数据库" class="headerlink" title="2. 切换数据库"></a>2. 切换数据库</h2><p>每个 Redis 客户端都有自己的目标数据库，每当客户端执行数据库写命令或者数据库读命令的时候，目标数据库就会成为这些命令的操作对象。</p><p>默认情况下，Redis 客户端的目标数据库为 0 号数据库，但客户端可以通过执行 <code>SELECT</code> 命令来切换目标数据库。</p><p>在服务器内部，客户端状态 <code>redisClient</code> 结构的 <code>db</code> 属性记录了客户端当前的目标数据库，这个属性是一个指向 <code>redisDb</code> 结构的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisClient</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录客户端当前正在使用的数据库</span></span><br><span class="line">redisDb *db;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125; redisClient;</span><br></pre></td></tr></table></figure><p><code>redisClient.db</code> 指针指向 <code>redisServer.db</code> 数组的其中一个元素，而被指向的元素就是客户端的目标数据库。</p><p>通过修改 <code>redisClient.db</code> 指针，让它指向服务器中的不同数据库，从而实现切换目标数据库的功能——这就是 <code>SELECT</code> 命令的实现原理。</p><h2 id="3-数据库空间"><a href="#3-数据库空间" class="headerlink" title="3. 数据库空间"></a>3. 数据库空间</h2><p>Redis 是一个键值对（key-value pair）数据库服务器，服务器中的每个数据库都由一个 <code>redis.h/redisDb</code> 结构表示，其中，<code>redisDb</code> 结构的 <code>dict</code> 字典保存了数据库中的所有键值对，我们将这个字典称为键空间（key space）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    dict *dict;                 <span class="comment">/* The keyspace for this DB */</span></span><br><span class="line">    dict *expires;              <span class="comment">/* Timeout of keys with a timeout set */</span></span><br><span class="line">    dict *blocking_keys;        <span class="comment">/* Keys with clients waiting for data (BLPOP) */</span></span><br><span class="line">    dict *ready_keys;           <span class="comment">/* Blocked keys that received a PUSH */</span></span><br><span class="line">    dict *watched_keys;         <span class="comment">/* WATCHED keys for MULTI/EXEC CAS */</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl;          <span class="comment">/* Average TTL, just for stats */</span></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p>键空间和用户所见的数据库是直接对应的：</p><ul><li>键空间的键也就是数据库的键，每个键都是一个字符串对象。</li><li>键空间的值也就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、集合对象和有序集合对象中的任意一种 Redis 对象。</li></ul><p>当使用 Redis 命令对数据库进行读写时，服务器不仅会对键空间执行指定的读写操作，还会执行一些额外的维护操作，其中包括：</p><ul><li>在读取一个键之后（读操作和写操作都要对键进行读取），服务器会根据键是否存在来更新服务器的键空间命中（hit）次数或键空间不命中（miss）次数，这两个值可以在 <code>INFO stats</code> 命令的 <code>keyspace_hits</code> 属性和 <code>keyspace_misses</code> 属性中查看。</li><li>在读取一个键之后，服务器会更新键的 LRU（最后一次使用）时间，这个值可以用于计算键的闲置时间，使用 <code>OBJECT idletime</code> 命令可以查看键 key 的闲置时间。</li><li>如果服务器在读取一个键时发现该键已经过期，那么服务器会先删除这个过期键，然后才执行余下的其他操作。</li><li>如果有客户端使用 <code>WATCH</code> 命令监视了某个键，那么服务器在对被监视的键进行修改之后，会将这个键标记为脏（dirty），从而让事务程序注意到这个键已经被修改过。</li><li>服务器每次修改一个键之后，都会对脏（dirty）键计数器的值增 1，这个计数器会触发服务器的持久化以及复制操作。</li><li>如果服务器开启了数据库通知功能，那么在对键进行修改之后，服务器将按配置发送相应的数据库通知。</li></ul><h2 id="4-设置键的生存时间或过期时间"><a href="#4-设置键的生存时间或过期时间" class="headerlink" title="4. 设置键的生存时间或过期时间"></a>4. 设置键的生存时间或过期时间</h2><p>通过 <code>EXPIRE</code> 命令或者 <code>PEXPIRE</code> 命令，客户端可以以秒或者毫秒精度为数据库中的某个键设置生存时间（Time To Live，TTL），在经过指定的秒数或者毫秒数之后，服务器就会自动删除生存时间为 0 的键。</p><p>与 <code>EXPIRE</code> 命令和 <code>PEXPIRE</code> 命令类似，客户端可以通过 <code>EXPIREAT</code> 命令或 <code>PEXPIREAT</code> 命令，以秒或者毫秒精度给数据库中的某个键设置过期时间（expire time）。</p><p><code>TTL</code> 命令和 <code>PTTL</code> 命令接受一个带有生存时间或者过期时间的键，返回这个键的剩余生存时间，也就是，返回距离这个键被服务器自动删除还有多长时间。</p><h3 id="4-1-设置过期时间"><a href="#4-1-设置过期时间" class="headerlink" title="4.1 设置过期时间"></a>4.1 设置过期时间</h3><p>Redis 有四个不同的命令可以用于设置键的生存时间（键可以存在多久）或过期时间（键什么时候会被删除）：</p><ul><li><code>EXPIRE＜key＞＜ttl＞</code> 命令用于将键 key 的生存时间设置为 ttl 秒。</li><li><code>PEXPIRE＜key＞＜ttl＞</code> 命令用于将键 key 的生存时间设置为 ttl 毫秒。</li><li><code>EXPIREAT＜key＞＜timestamp＞</code> 命令用于将键 key 的过期时间设置为 timestamp 所指定的秒数时间戳。</li><li><code>PEXPIREAT＜key＞＜timestamp＞</code> 命令用于将键 key 的过期时间设置为 timestamp 所指定的毫秒数时间戳。</li></ul><p>虽然有多种不同单位和不同形式的设置命令，但实际上 <code>EXPIRE</code>、<code>PEXPIRE</code>、<code>EXPIREAT</code> 三个命令都是使用 <code>PEXPIREAT</code> 命令来实现的：无论客户端执行的是以上四个命令中的哪一个，经过转换之后，最终的执行效果都和执行 <code>PEXPIREAT</code> 命令一样。</p><p>首先，<code>EXPIRE</code> 命令可以转换成 <code>PEXPIRE</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def EXPIRE(key,ttl_in_sec):</span><br><span class="line"></span><br><span class="line">    #将TTL从秒转换成毫秒</span><br><span class="line">    ttl_in_ms = sec_to_ms(ttl_in_sec)</span><br><span class="line">    </span><br><span class="line">    PEXPIRE(key, ttl_in_ms)</span><br></pre></td></tr></table></figure><p>接着，<code>PEXPIRE</code> 命令又可以转换成 <code>PEXPIREAT</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def PEXPIRE(key,ttl_in_ms):</span><br><span class="line"></span><br><span class="line">    #获取以毫秒计算的当前 UNIX 时间戳</span><br><span class="line">    now_ms = get_current_unix_timestamp_in_ms()</span><br><span class="line">    </span><br><span class="line">    #当前时间加上 TTL，得出毫秒格式的键过期时间</span><br><span class="line">    PEXPIREAT(key,now_ms+ttl_in_ms)</span><br></pre></td></tr></table></figure><p>并且，<code>EXPIREAT</code> 命令也可以转换成 <code>PEXPIREAT</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def EXPIREAT(key,expire_time_in_sec):</span><br><span class="line"></span><br><span class="line">    #将过期时间从秒转换为毫秒</span><br><span class="line">    expire_time_in_ms = sec_to_ms(expire_time_in_sec)</span><br><span class="line">    </span><br><span class="line">    PEXPIREAT(key, expire_time_in_ms)</span><br></pre></td></tr></table></figure><p>最终，<code>EXPIRE</code>、<code>PEXPIRE</code> 和 <code>EXPIREAT</code> 三个命令都会转换成 <code>PEXPIREAT</code> 命令来执行。</p><h3 id="4-2-保存过期时间"><a href="#4-2-保存过期时间" class="headerlink" title="4.2 保存过期时间"></a>4.2 保存过期时间</h3><p>redisDb 结构的 <code>expires</code> 字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：</p><ul><li>过期字典的键是一个指针，这个指针指向键空间中的某个键对象（也即是某个数据库键）。在实际中，键空间的键和过期字典的键都指向同一个键对象。</li><li>过期字典的值是一个 long long 类型的整数，这个整数保存了键所指向的数据库键的过期时间——一个毫秒精度的 UNIX 时间戳。</li></ul><p>当客户端执行 <code>PEXPIREAT</code> 命令（或者其他三个会转换成 <code>PEXPIREAT</code> 命令的命令）为一个数据库键设置过期时间时，服务器会在数据库的过期字典中关联给定的数据库键和过期时间。</p><p>以下是 <code>PEXPIREAT</code> 命令的伪代码定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def PEXPIREAT(key, expire_time_in_ms):</span><br><span class="line"></span><br><span class="line">    #如果给定的键不存在于键空间，那么不能设置过期时间</span><br><span class="line">    if key not in redisDb.dict:</span><br><span class="line">        return0</span><br><span class="line">        </span><br><span class="line">    #在过期字典中关联键和过期时间</span><br><span class="line">    redisDb.expires[key] = expire_time_in_ms</span><br><span class="line">    </span><br><span class="line">    #过期时间设置成功</span><br><span class="line">    return 1</span><br></pre></td></tr></table></figure><h3 id="4-3-移除过期时间"><a href="#4-3-移除过期时间" class="headerlink" title="4.3 移除过期时间"></a>4.3 移除过期时间</h3><p><code>PERSIST</code> 命令可以移除一个键的过期时间，它是 <code>PEXPIREAT</code> 命令的反操作： <code>PERSIST</code> 命令在过期字典中查找给定的键，并解除键和值（过期时间）在过期字典中的关联。</p><p>以下是 <code>PERSIST</code> 命令的伪代码定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def PERSIST(key):</span><br><span class="line">#如果键不存在，或者键没有设置过期时间，那么直接返回</span><br><span class="line">if key not in redisDb.expires:</span><br><span class="line">    return0</span><br><span class="line">#移除过期字典中给定键的键值对关联</span><br><span class="line">redisDb.expires.remove(key)</span><br><span class="line">#键的过期时间移除成功</span><br><span class="line">return 1</span><br></pre></td></tr></table></figure><h3 id="4-4-计算并返回剩余生存时间"><a href="#4-4-计算并返回剩余生存时间" class="headerlink" title="4.4 计算并返回剩余生存时间"></a>4.4 计算并返回剩余生存时间</h3><p><code>TTL</code> 命令以秒为单位返回键的剩余生存时间，而 <code>PTTL</code> 命令则以毫秒为单位返回键的剩余生存时间。<code>TTL</code> 和 <code>PTTL</code> 两个命令都是通过计算键的过期时间和当前时间之间的差来实现的，以下是这两个命令的伪代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def PTTL(key):</span><br><span class="line"></span><br><span class="line">    #键不存在于数据库</span><br><span class="line">    if key not in redisDb.dict:</span><br><span class="line">        return-2</span><br><span class="line">        </span><br><span class="line">    #尝试取得键的过期时间</span><br><span class="line">    #如果键没有设置过期时间，那么 expire_time_in_ms将为 None</span><br><span class="line">    expire_time_in_ms = redisDb.expires.get(key)</span><br><span class="line">    </span><br><span class="line">    #键没有设置过期时间</span><br><span class="line">    if expire_time_in_ms is None:</span><br><span class="line">return -1</span><br><span class="line"></span><br><span class="line">    #获得当前时间</span><br><span class="line">    now_ms = get_current_unix_timestamp_in_ms()</span><br><span class="line">    </span><br><span class="line">    #过期时间减去当前时间，得出的差就是键的剩余生存时间</span><br><span class="line">    return(expire_time_in_ms - now_ms)</span><br><span class="line">    </span><br><span class="line">def TTL(key):</span><br><span class="line"></span><br><span class="line">    #获取以毫秒为单位的剩余生存时间</span><br><span class="line">    ttl_in_ms = PTTL(key)</span><br><span class="line">    </span><br><span class="line">    if ttl_in_ms ＜ 0:</span><br><span class="line">        #处理返回值为-2和-1的情况</span><br><span class="line">        return ttl_in_ms</span><br><span class="line">    else:</span><br><span class="line">#将毫秒转换为秒</span><br><span class="line">return ms_to_sec(ttl_in_ms)</span><br></pre></td></tr></table></figure><h3 id="4-5-过期键的判定"><a href="#4-5-过期键的判定" class="headerlink" title="4.5 过期键的判定"></a>4.5 过期键的判定</h3><p>通过过期字典，程序可以用以下步骤检查一个给定键是否过期：</p><ol><li>检查给定键是否存在于过期字典：如果存在，那么取得键的过期时间。</li><li>检查当前 UNIX 时间戳是否大于键的过期时间：如果是的话，那么键已经过期；否则的话，键未过期。</li></ol><p>可以用伪代码来描述这一过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def is_expired(key):</span><br><span class="line">    </span><br><span class="line">    #取得键的过期时间</span><br><span class="line">    expire_time_in_ms = redisDb.expires.get(key)</span><br><span class="line">    </span><br><span class="line">    #键没有设置过期时间</span><br><span class="line">    if expire_time_in_ms is None:</span><br><span class="line">        return False</span><br><span class="line">    </span><br><span class="line">    #取得当前时间的UNIX时间戳</span><br><span class="line">    now_ms = get_current_unix_timestamp_in_ms()</span><br><span class="line">    </span><br><span class="line">    #检查当前时间是否大于键的过期时间</span><br><span class="line">    if now_ms ＞ expire_time_in_ms:</span><br><span class="line">        #是，键已经过期</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">    #否，键未过期</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure><h2 id="5-过期键删除策略"><a href="#5-过期键删除策略" class="headerlink" title="5. 过期键删除策略"></a>5. 过期键删除策略</h2><p>有三种不同的过期键删除策略：</p><ul><li>定时删除：在设置键的过期时间的同时，创建一个定时器（timer），让定时器在键的过期时间来临时，立即执行对键的删除操作。</li><li>惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有过期，就返回该键。</li><li>定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。</li></ul><p>在这三种策略中，第一种和第三种为主动删除策略，而第二种则为被动删除策略。</p><h3 id="5-1-定时删除"><a href="#5-1-定时删除" class="headerlink" title="5.1 定时删除"></a>5.1 定时删除</h3><p>定时删除策略对内存是最友好的：通过使用定时器，定时删除策略可以保证过期键会尽可能快地被删除，并释放过期键所占用的内存。</p><p>另一方面，定时删除策略的缺点是，它对 CPU 时间是最不友好的：在过期键比较多的情况下，删除过期键这一行为可能会占用相当一部分 CPU 时间，在内存不紧张但是 CPU 时间非常紧张的情况下，将 CPU 时间用在删除和当前任务无关的过期键上，无疑会对服务器的响应时间和吞吐量造成影响。</p><p>除此之外，创建一个定时器需要用到 Redis 服务器中的时间事件，而当前时间事件的实现方式——无序链表，查找一个事件的时间复杂度为 $O(N)$ ——并不能高效地处理大量时间事件。</p><h3 id="5-2-惰性删除"><a href="#5-2-惰性删除" class="headerlink" title="5.2 惰性删除"></a>5.2 惰性删除</h3><p>惰性删除策略对 CPU 时间来说是最友好的：程序只会在取出键时才对键进行过期检查，这可以保证删除过期键的操作只会在非做不可的情况下进行，并且删除的目标仅限于当前处理的键，这个策略不会在删除其他无关的过期键上花费任何 CPU 时间。</p><p>惰性删除策略的缺点是，它对内存是最不友好的：如果一个键已经过期，而这个键又仍然保留在数据库中，那么只要这个过期键不被删除，它所占用的内存就不会释放。</p><p>在使用惰性删除策略时，如果数据库中有非常多的过期键，而这些过期键又恰好没有被访问到的话，那么它们也许永远也不会被删除（除非用户手动执行 <code>FLUSHDB</code>），我们甚至可以将这种情况看作是一种内存泄漏——无用的垃圾数据占用了大量的内存，而服务器却不会自己去释放它们，这对于运行状态非常依赖于内存的 Redis 服务器来说，肯定不是一个好消息。</p><h3 id="5-3-定期删除"><a href="#5-3-定期删除" class="headerlink" title="5.3 定期删除"></a>5.3 定期删除</h3><p>从上面对定时删除和惰性删除的讨论来看，这两种删除方式在单一使用时都有明显的缺陷：</p><ul><li>定时删除占用太多 CPU 时间，影响服务器的响应时间和吞吐量。</li><li>惰性删除浪费太多内存，有内存泄漏的危险。</li></ul><p>定期删除策略是前两种策略的一种整合和折中：</p><ul><li>定期删除策略每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li><li>除此之外，通过定期删除过期键，定期删除策略有效地减少了因为过期键而带来的内存浪费。</li></ul><p>定期删除策略的难点是确定删除操作执行的时长和频率：</p><ul><li>如果删除操作执行得太频繁，或者执行的时间太长，定期删除策略就会退化成定时删除策略，以至于将 CPU 时间过多地消耗在删除过期键上面。</li><li>如果删除操作执行得太少，或者执行的时间太短，定期删除策略又会和惰性删除策略一样，出现浪费内存的情况。</li></ul><p>因此，如果采用定期删除策略的话，服务器必须根据情况，合理地设置删除操作的执行时长和执行频率。</p><h2 id="6-Redis的过期键删除策略"><a href="#6-Redis的过期键删除策略" class="headerlink" title="6. Redis的过期键删除策略"></a>6. Redis的过期键删除策略</h2><p>Redis 服务器实际使用的是惰性删除和定期删除两种策略：通过配合使用这两种删除策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡。</p><h3 id="6-1-惰性删除策略的实现"><a href="#6-1-惰性删除策略的实现" class="headerlink" title="6.1 惰性删除策略的实现"></a>6.1 惰性删除策略的实现</h3><p>过期键的惰性删除策略由 <code>db.c/expireIfNeeded</code> 函数实现，所有读写数据库的 Redis 命令在执行之前都会调用 <code>expireIfNeeded</code> 函数对输入键进行检查：</p><ul><li>如果输入键已经过期，那么 <code>expireIfNeeded</code> 函数将输入键从数据库中删除。</li><li>如果输入键未过期，那么 <code>expireIfNeeded</code> 函数不做动作。</li></ul><p><code>expireIfNeeded</code> 函数就像一个过滤器，它可以在命令真正执行之前，过滤掉过期的输入键，从而避免命令接触到过期键。</p><p>另外，因为每个被访问的键都可能因为过期而被 <code>expireIfNeeded</code> 函数删除，所以每个命令的实现函数都必须能同时处理键存在以及键不存在这两种情况：</p><ul><li>当键存在时，命令按照键存在的情况执行。</li><li>当键不存在或者键因为过期而被 <code>expireIfNeeded</code> 函数删除时，命令按照键不存在的情况执行。</li></ul><h3 id="6-2-定期删除策略的实现"><a href="#6-2-定期删除策略的实现" class="headerlink" title="6.2 定期删除策略的实现"></a>6.2 定期删除策略的实现</h3><p>过期键的定期删除策略由 <code>redis.c/activeExpireCycle</code> 函数实现，每当 Redis 的服务器周期性操作 <code>redis.c/serverCron</code> 函数执行时，<code>activeExpireCycle</code> 函数就会被调用，它在规定的时间内，分多次遍历服务器中的各个数据库，从数据库的 <code>expires</code> 字典中随机检查一部分键的过期时间，并删除其中的过期键。</p><p>整个过程可以用伪代码描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#默认每次检查的数据库数量</span><br><span class="line">DEFAULT_DB_NUMBERS = 16</span><br><span class="line"></span><br><span class="line">#默认每个数据库检查的键数量</span><br><span class="line">DEFAULT_KEY_NUMBERS = 20</span><br><span class="line"></span><br><span class="line">#全局变量，记录检查进度</span><br><span class="line">current_db = 0</span><br><span class="line"></span><br><span class="line">def activeExpireCycle():</span><br><span class="line"></span><br><span class="line">    #初始化要检查的数据库数量</span><br><span class="line">    #如果服务器的数据库数量比 DEFAULT_DB_NUMBERS要小</span><br><span class="line">    #那么以服务器的数据库数量为准</span><br><span class="line">    if server.dbnum ＜ DEFAULT_DB_NUMBERS:</span><br><span class="line">        db_numbers = server.dbnum</span><br><span class="line">    else:</span><br><span class="line">        db_numbers = DEFAULT_DB_NUMBERS</span><br><span class="line">        </span><br><span class="line">    #遍历各个数据库</span><br><span class="line">    for i in range(db_numbers):</span><br><span class="line">    </span><br><span class="line">        #如果current_db的值等于服务器的数据库数量</span><br><span class="line">        #这表示检查程序已经遍历了服务器的所有数据库一次</span><br><span class="line">        #将current_db重置为0，开始新的一轮遍历</span><br><span class="line">        if current_db == server.dbnum:</span><br><span class="line">            current_db = 0</span><br><span class="line">            </span><br><span class="line">        #获取当前要处理的数据库</span><br><span class="line">        redisDb = server.db[current_db]</span><br><span class="line">        </span><br><span class="line">        #将数据库索引增1，指向下一个要处理的数据库</span><br><span class="line">        current_db += 1</span><br><span class="line">        </span><br><span class="line">        #检查数据库键</span><br><span class="line">        for j in range(DEFAULT_KEY_NUMBERS):</span><br><span class="line">        </span><br><span class="line">            #如果数据库中没有一个键带有过期时间，那么跳过这个数据库</span><br><span class="line">            if redisDb.expires.size() == 0: break</span><br><span class="line">            </span><br><span class="line">            #随机获取一个带有过期时间的键</span><br><span class="line">            key_with_ttl = redisDb.expires.get_random_key()</span><br><span class="line">            </span><br><span class="line">            #检查键是否过期，如果过期就删除它</span><br><span class="line">            if is_expired(key_with_ttl):</span><br><span class="line">                delete_key(key_with_ttl)</span><br><span class="line">                </span><br><span class="line">            #已达到时间上限，停止处理</span><br><span class="line">            if reach_time_limit(): return</span><br></pre></td></tr></table></figure><p><code>activeExpireCycle</code> 函数的工作模式可以总结如下： </p><ul><li>函数每次运行时，都从一定数量的数据库中取出一定数量的随机键进行检查，并删除其中的过期键。</li><li>全局变量 <code>current_db</code> 会记录当前 <code>activeExpireCycle</code> 函数检查的进度，并在下一次 <code>activeExpireCycle</code> 函数调用时，接着上一次的进度进行处理。</li><li>随着 <code>activeExpireCycle</code> 函数的不断执行，服务器中的所有数据库都会被检查一遍，这时函数将 <code>current_db</code> 变量重置为 0，然后再次开始新一轮的检查工作。</li></ul><h2 id="7-AOF、RDB-和复制功能对过期键的处理"><a href="#7-AOF、RDB-和复制功能对过期键的处理" class="headerlink" title="7. AOF、RDB 和复制功能对过期键的处理"></a>7. AOF、RDB 和复制功能对过期键的处理</h2><h3 id="7-1-生成-RDB-文件"><a href="#7-1-生成-RDB-文件" class="headerlink" title="7.1 生成 RDB 文件"></a>7.1 生成 RDB 文件</h3><p>在执行 <code>SAVE</code> 命令或者 <code>BGSAVE</code> 命令创建一个新的 RDB 文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的 RDB 文件中。</p><p>因此，数据库中包含过期键不会对生成新的RDB文件造成影响。</p><h3 id="7-2-载入-RDB-文件"><a href="#7-2-载入-RDB-文件" class="headerlink" title="7.2 载入 RDB 文件"></a>7.2 载入 RDB 文件</h3><p>在启动 Redis 服务器时，如果服务器开启了 RDB 功能，那么服务器将对 RDB 文件进行载入：</p><ul><li>如果服务器以主服务器模式运行，那么在载入 RDB 文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而过期键则会被忽略，所以过期键对载入 RDB 文件的主服务器不会造成影响。</li><li>如果服务器以从服务器模式运行，那么在载入 RDB 文件时，文件中保存的所有键，不论是否过期，都会被载入到数据库中。不过，因为主从服务器在进行数据同步的时候，从服务器的数据库就会被清空，所以一般来讲，过期键对载入 RDB 文件的从服务器也不会造成影响。</li></ul><h3 id="7-3-AOF-文件写入"><a href="#7-3-AOF-文件写入" class="headerlink" title="7.3 AOF 文件写入"></a>7.3 AOF 文件写入</h3><p>当服务器以 AOF 持久化模式运行时，如果数据库中的某个键已经过期，但它还没有被惰性删除或者定期删除，那么 AOF 文件不会因为这个过期键而产生任何影响。</p><p>当过期键被惰性删除或者定期删除之后，程序会向 AOF 文件追加（append）一条 <code>DEL</code> 命令，来显式地记录该键已被删除。</p><h3 id="7-4-AOF-重写"><a href="#7-4-AOF-重写" class="headerlink" title="7.4 AOF 重写"></a>7.4 AOF 重写</h3><p>和生成 RDB 文件时类似，在执行 AOF 重写的过程中，程序会对数据库中的键进行检查，已过期的键不会被保存到重写后的 AOF 文件中。</p><h3 id="7-5-复制"><a href="#7-5-复制" class="headerlink" title="7.5 复制"></a>7.5 复制</h3><p>当服务器运行在复制模式下时，从服务器的过期键删除动作由主服务器控制：</p><ul><li>主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个 <code>DEL</code> 命令，告知从服务器删除这个过期键。</li><li>从服务器在执行客户端发送的读命令时，即使碰到过期键也不会将过期键删除，而是继续像处理未过期的键一样来处理过期键。</li><li>从服务器只有在接到主服务器发来的 <code>DEL</code> 命令之后，才会删除过期键。</li></ul><p>通过由主服务器来控制从服务器统一地删除过期键，可以保证主从服务器数据的一致性，也正是因为这个原因，当一个过期键仍然存在于主服务器的数据库时，这个过期键在从服务器里的复制品也会继续存在。</p><p>举个例子，有一对主从服务器，它们的数据库中都保存着同样的三个键 message、xxx 和 yyy，其中 message 为过期键。如果这时有客户端向从服务器发送命令 <code>GET message</code>，那么从服务器将发现 message 键已经过期，但从服务器并不会删除 message 键，而是继续将 message 键的值返回给客户端，就好像 message 键并没有过期一样。假设在此之后，有客户端向主服务器发送命令 <code>GET message</code>，那么主服务器将发现键 message 已经过期：主服务器会删除 message 键，向客户端返回空回复，并向从服务器发送 <code>DEL message</code> 命令。从服务器在接收到主服务器发来的 <code>DEL message</code> 命令之后，也会从数据库中删除 message 键，在这之后，主从服务器都不再保存过期键 message 了。</p><h2 id="8-数据库通知"><a href="#8-数据库通知" class="headerlink" title="8. 数据库通知"></a>8. 数据库通知</h2><p>数据库通知是 Redis 2.8 版本新增加的功能，这个功能可以让客户端通过订阅给定的频道或者模式，来获知数据库中键的变化，以及数据库中命令的执行情况。</p><p>关注 “某个键执行了什么命令” 的通知称为键空间通知（key-space notification），除此之外，还有另一类称为键事件通知（key-event notification）的通知，它们关注的是 “某个命令被什么键执行了”。</p><p>服务器配置的 <code>notify-keyspace-events</code> 选项决定了服务器所发送通知的类型：</p><ul><li>想让服务器发送所有类型的键空间通知和键事件通知，可以将选项的值设置为 AKE。</li><li>想让服务器发送所有类型的键空间通知，可以将选项的值设置为 AK。</li><li>想让服务器发送所有类型的键事件通知，可以将选项的值设置为 AE。</li><li>想让服务器只发送和字符串键有关的键空间通知，可以将选项的值设置为 K$。</li><li>想让服务器只发送和列表键有关的键事件通知，可以将选项的值设置为 El。</li></ul><h3 id="8-1-发送通知"><a href="#8-1-发送通知" class="headerlink" title="8.1 发送通知"></a>8.1 发送通知</h3><p>发送数据库通知的功能是由 <code>notify.c/notifyKeyspaceEvent</code> 函数实现的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyKeyspaceEvent</span><span class="params">(<span class="keyword">int</span> type,<span class="keyword">char</span> *event,robj *key,<span class="keyword">int</span> dbid)</span></span>;</span><br></pre></td></tr></table></figure><p>函数的 <code>type</code> 参数是当前想要发送的通知的类型，程序会根据这个值来判断通知是否就是服务器配置 <code>notify-keyspace-events</code> 选项所选定的通知类型，从而决定是否发送通知。</p><p><code>event</code>、<code>keys</code> 和 <code>dbid</code> 分别是事件的名称、产生事件的键，以及产生事件的数据库号码，函数会根据 <code>type</code> 参数以及这三个参数来构建事件通知的内容，以及接收通知的频道名。</p><p>每当一个 Redis 命令需要发送数据库通知的时候，该命令的实现函数就会调用 <code>notify-KeyspaceEvent</code> 函数，并向函数传递传递该命令所引发的事件的相关信息。</p><h3 id="8-2-发送通知的实现"><a href="#8-2-发送通知的实现" class="headerlink" title="8.2 发送通知的实现"></a>8.2 发送通知的实现</h3><p>以下是 <code>notifyKeyspaceEvent</code> 函数的伪代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def notifyKeyspaceEvent(type, event, key, dbid):</span><br><span class="line">    #如果给定的通知不是服务器允许发送的通知，那么直接返回</span><br><span class="line">    if not(server.notify_keyspace_events &amp; type):</span><br><span class="line">        return</span><br><span class="line">        </span><br><span class="line">    #发送键空间通知</span><br><span class="line">    if server.notify_keyspace_events &amp; REDIS_NOTIFY_KEYSPACE:</span><br><span class="line">    </span><br><span class="line">        #将通知发送给频道__keyspace@＜dbid＞__:＜key＞</span><br><span class="line">        #内容为键所发生的事件 ＜event＞</span><br><span class="line">        </span><br><span class="line">        #构建频道名字</span><br><span class="line">        chan = &quot;__keyspace@&#123;dbid&#125;__:&#123;key&#125;&quot;.format(dbid=dbid, key=key)</span><br><span class="line">        </span><br><span class="line">        #发送通知</span><br><span class="line">        pubsubPublishMessage(chan, event)</span><br><span class="line">        </span><br><span class="line">    #发送键事件通知</span><br><span class="line">    if server.notify_keyspace_events &amp; REDIS_NOTIFY_KEYEVENT:</span><br><span class="line">    </span><br><span class="line">        #将通知发送给频道__keyevent@＜dbid＞__:＜event＞</span><br><span class="line">        #内容为发生事件的键 ＜key＞</span><br><span class="line">        </span><br><span class="line">        #构建频道名字</span><br><span class="line">        chan = &quot;__keyevent@&#123;dbid&#125;__:&#123;event&#125;&quot;.format(dbid=dbid,event=event)</span><br><span class="line">        </span><br><span class="line">        #发送通知</span><br><span class="line">        pubsubPublishMessage(chan, key)</span><br></pre></td></tr></table></figure><p><code>notifyKeyspaceEvent</code> 函数执行以下操作：</p><ol><li><code>server.notify_keyspace_events</code> 属性就是服务器配置 <code>notify-keyspace-events</code> 选项所设置的值，如果给定的通知类型 <code>type</code> 不是服务器允许发送的通知类型，那么函数会直接返回，不做任何动作。</li><li>如果给定的通知是服务器允许发送的通知，那么下一步函数会检测服务器是否允许发送键空间通知，如果允许的话，程序就会构建并发送事件通知。</li><li>最后，函数检测服务器是否允许发送键事件通知，如果允许的话，程序就会构建并发送事件通知。</li></ol><p>另外，<code>pubsubPublishMessage</code> 函数是 <code>PUBLISH</code> 命令的实现函数，执行这个函数等同于执行 <code>PUBLISH</code> 命令，订阅数据库通知的客户端收到的信息就是由这个函数发出的。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Redis 设计与实现：数据结构与对象》</title>
      <link href="/2017/10/02/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%8B/"/>
      <url>/2017/10/02/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-简单动态字符串"><a href="#1-简单动态字符串" class="headerlink" title="1. 简单动态字符串"></a>1. 简单动态字符串</h2><p>Redis 没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，以下简称 C 字符串），而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型，并将 SDS 用作 Redis 的默认字符串表示。</p><p>当 Redis 需要的不仅仅是一个字符串字面量，而是一个可以被修改的字符串值时，Redis 就会使用 SDS 来表示字符串值：比如在 Redis 的数据库里面，包含字符串值的键值对在底层都是由 SDS 实现的。</p><p>除了用来保存数据库中的字符串值之外，SDS 还被用作缓冲区（buffer）：AOF 模块中的 AOF 缓冲区，以及客户端状态中的输入缓冲区，都是由 SDS 实现的。</p><a id="more"></a><h3 id="1-1-SDS-的定义"><a href="#1-1-SDS-的定义" class="headerlink" title="1.1 SDS 的定义"></a>1.1 SDS 的定义</h3><p>每个 <code>sds.h/sdshdr</code> 结构表示一个 SDS 值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 buf 数组中已使用字节的数量</span></span><br><span class="line">    <span class="comment">// 等于 SDS 所保存字符串的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 buf 数组中未使用字节的数量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字节数组，用于保存字符串</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SDS 遵循 C 字符串以空字符结尾的惯例，保存空字符的 1 字节空间不计算在 SDS 的 <code>len</code> 属性里面，并且为空字符分配额外的 1 字节空间，以及添加空字符到字符串末尾等操作都是由 SDS 函数自动完成的，所以这个空字符对于 SDS 的使用者来说是完全透明的。遵循空字符结尾这一惯例的好处是，SDS 可以直接重用一部分 C 字符串函数库里面的函数。</p><h3 id="1-2-SDS-与-C-字符串的区别"><a href="#1-2-SDS-与-C-字符串的区别" class="headerlink" title="1.2 SDS 与 C 字符串的区别"></a>1.2 SDS 与 C 字符串的区别</h3><h4 id="1-2-1-常数复杂度获取字符串长度"><a href="#1-2-1-常数复杂度获取字符串长度" class="headerlink" title="1.2.1 常数复杂度获取字符串长度"></a>1.2.1 常数复杂度获取字符串长度</h4><p>因为 C 字符串并不记录自身的长度信息，所以为了获取一个 C 字符串的长度，程序必须遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符为止，这个操作的复杂度为 $O(N)$ 。</p><p>通过使用 SDS 而不是 C 字符串，Redis 将获取字符串长度所需的复杂度从 $O(N) $ 降低到了 $O(1)$ ，这确保了获取字符串长度的工作不会成为 Redis 的性能瓶颈。</p><h4 id="1-2-2-杜绝缓冲区溢出"><a href="#1-2-2-杜绝缓冲区溢出" class="headerlink" title="1.2.2 杜绝缓冲区溢出"></a>1.2.2 杜绝缓冲区溢出</h4><p>当 SDS API 需要对 SDS 进行修改时，API 会先检查 SDS 的空间是否满足修改所需的要求，如果不满足的话，API 会自动将 SDS 的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用 SDS 既不需要手动修改 SDS 的空间大小，也不会出现缓冲区溢出问题。</p><h4 id="1-2-3-减少修改字符串时带来的内存重分配次数"><a href="#1-2-3-减少修改字符串时带来的内存重分配次数" class="headerlink" title="1.2.3 减少修改字符串时带来的内存重分配次数"></a>1.2.3 减少修改字符串时带来的内存重分配次数</h4><h5 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h5><p>空间预分配用于优化 SDS 的字符串增长操作：当 SDS 的 API 对一个 SDS 进行修改，并且需要对 SDS 进行空间扩展的时候，程序不仅会为 SDS 分配修改所必须要的空间，还会为 SDS 分配额外的未使用空间。</p><p>其中，额外分配的未使用空间数量由以下公式决定：</p><ul><li>如果对 SDS 进行修改之后，SDS 的长度（也即是 <code>len</code> 属性的值）将小于 1 MB，那么程序分配和 <code>len</code> 属性同样大小的未使用空间，这时 SDS <code>len</code> 属性的值将和 <code>free</code> 属性的值相同。</li><li>如果对 SDS 进行修改之后，SDS 的长度将大于等于 1 MB，那么程序会分配 1 MB 的未使用空间。</li></ul><p>在扩展 SDS 空间之前，SDS API 会先检查未使用空间是否足够，如果足够的话，API 就会直接使用未使用空间，而无须执行内存重分配。</p><p>通过这种预分配策略，SDS 将连续增长 N 次字符串所需的内存重分配次数从必定 N 次降低为最多 N 次。</p><h5 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h5><p>惰性空间释放用于优化 SDS 的字符串缩短操作：当 SDS 的 API 需要缩短 SDS 保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用 <code>free</code> 属性将这些字节的数量记录起来， 并等待将来使用。</p><p>通过惰性空间释放策略，SDS 避免了缩短字符串时所需的内存重分配操作，并为将来可能有的增长操作提供了优化。</p><p>与此同时，SDS 也提供了相应的 API ，让我们可以在有需要时，真正地释放 SDS 里面的未使用空间，所以不用担心惰性空间释放策略会造成内存浪费。</p><h4 id="1-2-4-二进制安全"><a href="#1-2-4-二进制安全" class="headerlink" title="1.2.4 二进制安全"></a>1.2.4 二进制安全</h4><p>C 字符串中的字符必须符合某种编码（比如 ASCII），并且除了字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾——这些限制使得 C 字符串只能保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据。</p><p>SDS 的 API 都是二进制安全的（binary-safe）：所有 SDS API 都会以处理二进制的方式来处理 SDS 存放在 <code>buf</code> 数组里的数据，程序不会对其中的数据做任何限制、过滤、或者假设——数据在写入时是什么样的，它被读取时就是什么样。</p><p>这也是我们将 SDS 的 <code>buf</code> 属性称为字节数组的原因—— Redis 不是用这个数组来保存字符，而是用它来保存一系列二进制数据。</p><h4 id="1-2-5-兼容部分-C-字符串函数"><a href="#1-2-5-兼容部分-C-字符串函数" class="headerlink" title="1.2.5 兼容部分 C 字符串函数"></a>1.2.5 兼容部分 C 字符串函数</h4><p>虽然 SDS 的 API 都是二进制安全的，但它们一样遵循 C 字符串以空字符结尾的惯例：这些 API 总会将 SDS 保存的数据的末尾设置为空字符，并且总会在为 <code>buf</code> 数组分配空间时多分配一个字节来容纳这个空字符，这是为了让那些保存文本数据的 SDS 可以重用一部分 <code>&lt;string.h&gt;</code> 库定义的函数。</p><h4 id="1-2-6-总结"><a href="#1-2-6-总结" class="headerlink" title="1.2.6 总结"></a>1.2.6 总结</h4><table><thead><tr><th>C 字符串</th><th>SDS</th></tr></thead><tbody><tr><td>获取字符串长度的复杂度为 $O(N)$。</td><td>获取字符串长度的复杂度为 $O(1)$。</td></tr><tr><td>API 是不安全的，可能会造成缓冲区溢出。</td><td>API 是安全的，不会造成缓冲区溢出。</td></tr><tr><td>修改字符串长度 N 次必然需要执行 N 次内存重分配。</td><td>修改字符串长度 N 次最多需要执行 N 次内存重分配。</td></tr><tr><td>只能保存文本数据。</td><td>可以保存文本或者二进制数据。</td></tr><tr><td>可以使用所有 <code>&lt;string.h&gt;</code> 库中的函数。</td></tr></tbody></table><h3 id="1-3-SDS-API"><a href="#1-3-SDS-API" class="headerlink" title="1.3 SDS API"></a>1.3 SDS API</h3><table><thead><tr><th>函数</th><th>作用</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>sdsnew</code></td><td>创建一个包含给定 C 字符串的 SDS 。</td><td>$O(N)$，N 为给定 C 字符串的长度。</td></tr><tr><td><code>sdsempty</code></td><td>创建一个不包含任何内容的空 SDS 。</td><td>$O(1)$</td></tr><tr><td><code>sdsfree</code></td><td>释放给定的 SDS 。</td><td>$O(1)$</td></tr><tr><td><code>sdslen</code></td><td>返回 SDS 的已使用空间字节数。</td><td>这个值可以通过读取 SDS 的 <code>len</code> 属性来直接获得，复杂度为 $O(1)$。</td></tr><tr><td><code>sdsavail</code></td><td>返回 SDS 的未使用空间字节数。</td><td>这个值可以通过读取 SDS 的 <code>free</code> 属性来直接获得，复杂度为 $O(1)$。</td></tr><tr><td><code>sdsdup</code></td><td>创建一个给定 SDS 的副本（copy）。</td><td>$O(N)$，N 为给定 SDS 的长度。</td></tr><tr><td><code>sdsclear</code></td><td>清空 SDS 保存的字符串内容。</td><td>因为惰性空间释放策略，复杂度为 $O(1)$。</td></tr><tr><td><code>sdscat</code></td><td>将给定 C 字符串拼接到 SDS 字符串的末尾。</td><td>$O(N)$，N 为被拼接 C 字符串的长度。</td></tr><tr><td><code>sdscatsds</code></td><td>将给定 SDS 字符串拼接到另一个 SDS 字符串的末尾。</td><td>$O(N)$，N为被拼接 SDS 字符串的长度。</td></tr><tr><td><code>sdscpy</code></td><td>将给定的 C 字符串复制到 SDS 里面， 覆盖 SDS 原有的字符串。</td><td>$O(N)$，N 为被复制 C 字符串的长度。</td></tr><tr><td><code>sdsgrowzero</code></td><td>用空字符将 SDS 扩展至给定长度。</td><td>$O(N)$，N 为扩展新增的字节数。</td></tr><tr><td><code>sdsrange</code></td><td>保留 SDS 给定区间内的数据， 不在区间内的数据会被覆盖或清除。</td><td>$O(N)$，N 为被保留数据的字节数。</td></tr><tr><td><code>sdstrim</code></td><td>接受一个 SDS 和一个 C 字符串作为参数， 从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符。</td><td>$O(M*N)$，M 为 SDS 的长度，N  为给定 C 字符串的长度。</td></tr><tr><td><code>sdscmp</code></td><td>对比两个 SDS 字符串是否相同。</td><td>$O(N)$，N 为两个 SDS 中较短的那个 SDS 的长度。</td></tr></tbody></table><h2 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h2><h3 id="2-1-链表和链表节点的实现"><a href="#2-1-链表和链表节点的实现" class="headerlink" title="2.1 链表和链表节点的实现"></a>2.1 链表和链表节点的实现</h3><p>每个链表节点使用一个 <code>adlist.h/listNode</code> 结构来表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">void</span> *value;</span><br><span class="line"></span><br><span class="line">&#125; listNode;</span><br></pre></td></tr></table></figure><p>多个 <code>listNode</code> 可以通过 <code>prev</code> 和 <code>next</code> 指针组成双端链表。</p><p>虽然仅仅使用多个 <code>listNode</code> 结构就可以组成链表，但使用 <code>adlist.h/list</code> 来持有链表的话，操作起来会更方便：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表头节点</span></span><br><span class="line">    listNode *head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表尾节点</span></span><br><span class="line">    listNode *tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点值复制函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点值对比函数</span></span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">&#125; <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p><code>list</code> 结构为链表提供了表头指针 <code>head</code>、表尾指针 <code>tail</code>，以及链表长度计数器 <code>len</code>，而 <code>dup</code>、<code>free</code> 和 <code>match</code> 成员则是用于实现多态链表所需的类型特定函数：</p><ul><li><code>dup</code> 函数用于复制链表节点所保存的值；</li><li><code>free</code> 函数用于释放链表节点所保存的值；</li><li><code>match</code> 函数则用于对比链表节点所保存的值和另一个输入值是否相等。</li></ul><p>Redis 的链表实现的特性可以总结如下：</p><ul><li>双端：链表节点带有 <code>prev</code> 和 <code>next</code> 指针，获取某个节点的前置节点和后置节点的复杂度都是 $O(1)$。</li><li>无环：表头节点的 <code>prev</code> 指针和表尾节点的 <code>next</code> 指针都指向 <code>NULL</code>，对链表的访问以 <code>NULL</code> 为终点。</li><li>带表头指针和表尾指针：通过 <code>list</code> 结构的 <code>head</code> 指针和 <code>tail</code> 指针，程序获取链表的表头节点和表尾节点的复杂度为 $O(1)$。</li><li>带链表长度计数器：程序使用 <code>list</code> 结构的 <code>len</code> 属性来对 <code>list</code> 持有的链表节点进行计数，程序获取链表中节点数量的复杂度为 $O(1)$。</li><li>多态：链表节点使用 <code>void*</code> 指针来保存节点值，并且可以通过 <code>list</code> 结构的 <code>dup</code>、<code>free</code>、<code>match</code> 三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。</li></ul><h3 id="2-2-链表和链表节点的-API"><a href="#2-2-链表和链表节点的-API" class="headerlink" title="2.2 链表和链表节点的 API"></a>2.2 链表和链表节点的 API</h3><table><thead><tr><th>函数</th><th>作用</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>listSetDupMethod</code></td><td>将给定的函数设置为链表的节点值复制函数。</td><td>$O(1)$。</td></tr><tr><td><code>listGetDupMethod</code></td><td>返回链表当前正在使用的节点值复制函数。</td><td>复制函数可以通过链表的 <code>dup</code> 属性直接获得，$O(1)$</td></tr><tr><td><code>listSetFreeMethod</code></td><td>将给定的函数设置为链表的节点值释放函数。</td><td>$O(1)$</td></tr><tr><td><code>listGetFree</code></td><td>返回链表当前正在使用的节点值释放函数。</td><td>$O(1)$</td></tr><tr><td><code>listSetMatchMethod</code></td><td>将给定的函数设置为链表的节点值对比函数。</td><td>$O(1)$</td></tr><tr><td><code>listGetMatchMethod</code></td><td>返回链表当前正在使用的节点值对比函数。</td><td>对比函数可以通过链表的 <code>match</code> 属性直接获得，$O(1)$</td></tr><tr><td><code>listLength</code></td><td>返回链表的长度（包含了多少个节点）。</td><td>链表长度可以通过链表的 <code>len</code> 属性直接获得，$O(1)$。</td></tr><tr><td><code>listFirst</code></td><td>返回链表的表头节点。</td><td>表头节点可以通过链表的 <code>head</code> 属性直接获得，$O(1)$。</td></tr><tr><td><code>listLast</code></td><td>返回链表的表尾节点。</td><td>表尾节点可以通过链表的 <code>tail</code> 属性直接获得，$O(1)$。</td></tr><tr><td><code>listPrevNode</code></td><td>返回给定节点的前置节点。</td><td>前置节点可以通过节点的 <code>prev</code> 属性直接获得，$O(1)$。</td></tr><tr><td><code>listNextNode</code></td><td>返回给定节点的后置节点。</td><td>后置节点可以通过节点的 <code>next</code> 属性直接获得，$O(1)$。</td></tr><tr><td><code>listNodeValue</code></td><td>返回给定节点目前正在保存的值。</td><td>节点值可以通过节点的 <code>value</code> 属性直接获得，$O(1)$。</td></tr><tr><td><code>listCreate</code></td><td>创建一个不包含任何节点的新链表。</td><td>$O(1)$</td></tr><tr><td><code>listAddNodeHead</code></td><td>将一个包含给定值的新节点添加到给定链表的表头。</td><td>$O(1)$</td></tr><tr><td><code>listAddNodeTail</code></td><td>将一个包含给定值的新节点添加到给定链表的表尾。</td><td>$O(1)$</td></tr><tr><td><code>listInsertNode</code></td><td>将一个包含给定值的新节点添加到给定节点的之前或者之后。</td><td>$O(1)$</td></tr><tr><td><code>listSearchKey</code></td><td>查找并返回链表中包含给定值的节点。</td><td>$O(N)$，N 为链表长度。</td></tr><tr><td><code>listIndex</code></td><td>返回链表在给定索引上的节点。</td><td>$O(N)$，N 为链表长度。</td></tr><tr><td><code>listDelNode</code></td><td>从链表中删除给定节点。</td><td>$O(1)$</td></tr><tr><td><code>listRotate</code></td><td>将链表的表尾节点弹出，然后将被弹出的节点插入到链表的表头， 成为新的表头节点。</td><td>$O(1)$</td></tr><tr><td><code>listDup</code></td><td>复制一个给定链表的副本。</td><td>$O(N)$，N 为链表长度。</td></tr><tr><td><code>listRelease</code></td><td>释放给定链表，以及链表中的所有节点。</td><td>$O(N)$，N 为链表长度。</td></tr></tbody></table><h2 id="3-字典"><a href="#3-字典" class="headerlink" title="3. 字典"></a>3. 字典</h2><h3 id="3-1-字典的实现"><a href="#3-1-字典的实现" class="headerlink" title="3.1 字典的实现"></a>3.1 字典的实现</h3><h4 id="3-1-1-哈希表"><a href="#3-1-1-哈希表" class="headerlink" title="3.1.1 哈希表"></a>3.1.1 哈希表</h4><p>Redis 字典所使用的哈希表由 <code>dict.h/dictht</code> 结构定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line"></span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p><code>table</code> 属性是一个数组，数组中的每个元素都是一个指向 <code>dict.h/dictEntry</code> 结构的指针，每个 <code>dictEntry</code> 结构保存着一个键值对。</p><p><code>size</code> 属性记录了哈希表的大小，也即是 <code>table</code> 数组的大小，而 <code>used</code> 属性则记录了哈希表目前已有节点（键值对）的数量。</p><p><code>sizemask</code> 属性的值总是等于 <code>size - 1</code>，这个属性和哈希值一起决定一个键应该被放到 <code>table</code> 数组的哪个索引上面。</p><h4 id="3-1-2-哈希表节点"><a href="#3-1-2-哈希表节点" class="headerlink" title="3.1.2 哈希表节点"></a>3.1.2 哈希表节点</h4><p>哈希表节点使用 <code>dictEntry</code> 结构表示，每个 <code>dictEntry</code> 结构都保存着一个键值对：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p><code>key</code> 属性保存着键值对中的键，而 <code>v</code> 属性则保存着键值对中的值，其中键值对的值可以是一个指针，或者是一个 <code>uint64_t</code> 整数，又或者是一个 <code>int64_t</code> 整数。</p><p><code>next</code> 属性是指向另一个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对连接在一次，以此来解决键冲突（collision）的问题。</p><h4 id="3-1-3-字典"><a href="#3-1-3-字典" class="headerlink" title="3.1.3 字典"></a>3.1.3 字典</h4><p>Redis 中的字典由 <code>dict.h/dict</code> 结构表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line"></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p><code>type</code> 属性和 <code>privdata</code> 属性是针对不同类型的键值对，为创建多态字典而设置的：</p><ul><li><code>type</code> 属性是一个指向 <code>dictType</code> 结构的指针，每个 <code>dictType</code> 结构保存了一簇用于操作特定类型键值对的函数，Redis 会为用途不同的字典设置不同的类型特定函数。</li><li>而 <code>privdata</code> 属性则保存了需要传给那些类型特定函数的可选参数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制键的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制值的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对比键的函数</span></span><br><span class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁键的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁值的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</span><br><span class="line"></span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure><p><code>ht</code> 属性是一个包含两个项的数组，数组中的每个项都是一个 <code>dictht</code> 哈希表，一般情况下，字典只使用 <code>ht[0]</code> 哈希表，<code>ht[1]</code> 哈希表只会在对 <code>ht[0]</code> 哈希表进行 rehash 时使用。</p><p>除了 <code>ht[1]</code> 之外，另一个和 rehash 有关的属性就是 <code>rehashidx</code>：它记录了 rehash 目前的进度，如果目前没有在进行 rehash ，那么它的值为 -1。</p><p><img src="https://user-images.githubusercontent.com/12514722/33157908-af43ef96-d040-11e7-8e29-f62f94572c69.png" alt="image"></p><h3 id="3-2-哈希算法"><a href="#3-2-哈希算法" class="headerlink" title="3.2 哈希算法"></a>3.2 哈希算法</h3><p>当要将一个新的键值对添加到字典里面时，程序需要先根据键值对的键计算出哈希值和索引值，然后再根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。</p><p>Redis 计算哈希值和索引值的方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用字典设置的哈希函数，计算键 key 的哈希值</span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(key);</span><br><span class="line"></span><br><span class="line"># 使用哈希表的 sizemask 属性和哈希值，计算出索引值</span><br><span class="line"># 根据情况不同， ht[x] 可以是 ht[0] 或者 ht[1]</span><br><span class="line">index = hash &amp; dict-&gt;ht[x].sizemask;</span><br></pre></td></tr></table></figure><h3 id="3-3-解决键冲突"><a href="#3-3-解决键冲突" class="headerlink" title="3.3 解决键冲突"></a>3.3 解决键冲突</h3><p>Redis 的哈希表使用链地址法（separate chaining）来解决键冲突：每个哈希表节点都有一个 <code>next</code> 指针，多个哈希表节点可以用 <code>next</code>指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表连接起来，这就解决了键冲突的问题。</p><p>因为 <code>dictEntry</code> 节点组成的链表没有指向链表表尾的指针，所以为了速度考虑，程序总是将新节点添加到链表的表头位置（复杂度为 $O(1)$），排在其他已有节点的前面。</p><h3 id="3-4-rehash"><a href="#3-4-rehash" class="headerlink" title="3.4 rehash"></a>3.4 rehash</h3><p>扩展和收缩哈希表的工作可以通过执行 rehash （重新散列）操作来完成，Redis 对字典的哈希表执行 rehash 的步骤如下：</p><ol><li>为字典的 <code>ht[1]</code> 哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及 <code>ht[0]</code> 当前包含的键值对数量 （也即是 <code>ht[0].used</code> 属性的值）：<ul><li>如果执行的是扩展操作，那么 <code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used * 2</code> 的 $2^n$；</li><li>如果执行的是收缩操作， 那么 <code>ht[1]</code> 的大小为第一个大于等于 <code>ht[0].used</code> 的 $2^n$。</li></ul></li><li>将保存在 <code>ht[0]</code> 中的所有键值对 rehash 到 <code>ht[1]</code> 上面：rehash 指的是重新计算键的哈希值和索引值，然后将键值对放置到 <code>ht[1]</code>哈希表的指定位置上。</li><li>当 <code>ht[0]</code> 包含的所有键值对都迁移到了 <code>ht[1]</code> 之后 （<code>ht[0]</code> 变为空表），释放 <code>ht[0]</code>，将 <code>ht[1]</code> 设置为 <code>ht[0]</code>，并在 <code>ht[1]</code> 新创建一个空白哈希表，为下一次 rehash 做准备。</li></ol><p>因为在进行渐进式 rehash 的过程中， 字典会同时使用 <code>ht[0]</code> 和 <code>ht[1]</code> 两个哈希表， 所以在渐进式 rehash 进行期间， 字典的删除（delete）、查找（find）、更新（update）等操作会在两个哈希表上进行： 比如说， 要在字典里面查找一个键的话， 程序会先在 <code>ht[0]</code>里面进行查找， 如果没找到的话， 就会继续到 <code>ht[1]</code> 里面进行查找， 诸如此类。</p><p>另外， 在渐进式 rehash 执行期间， 新添加到字典的键值对一律会被保存到 <code>ht[1]</code> 里面， 而 <code>ht[0]</code> 则不再进行任何添加操作： 这一措施保证了 <code>ht[0]</code> 包含的键值对数量会只减不增， 并随着 rehash 操作的执行而最终变成空表。</p><h3 id="3-5-渐进式-rehash"><a href="#3-5-渐进式-rehash" class="headerlink" title="3.5 渐进式 rehash"></a>3.5 渐进式 rehash</h3><p>为了避免 rehash 对服务器性能造成影响，服务器不是一次性将 <code>ht[0]</code> 里面的所有键值对全部 rehash 到 <code>ht[1]</code>，而是分多次、渐进式地将 <code>ht[0]</code> 里面的键值对慢慢地 rehash 到 <code>ht[1]</code>。</p><p>以下是哈希表渐进式 rehash 的详细步骤：</p><ol><li>为 <code>ht[1]</code> 分配空间，让字典同时持有 <code>ht[0]</code> 和 <code>ht[1]</code> 两个哈希表。</li><li>在字典中维持一个索引计数器变量 <code>rehashidx</code> ，并将它的值设置为 0，表示 rehash 工作正式开始。</li><li>在 rehash 进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将 <code>ht[0]</code> 哈希表在 <code>rehashidx</code> 索引上的所有键值对 rehash 到 <code>ht[1]</code> ，当 rehash 工作完成之后，程序将 <code>rehashidx</code> 属性的值增一。</li><li>随着字典操作的不断执行，最终在某个时间点上，<code>ht[0]</code> 的所有键值对都会被 rehash 至 <code>ht[1]</code> ，这时程序将 <code>rehashidx</code> 属性的值设为 -1，表示 rehash 操作已完成。</li></ol><p>渐进式 rehash 的好处在于它采取分而治之的方式，将 rehash 键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式 rehash 而带来的庞大计算量。</p><h3 id="3-6-字典-API"><a href="#3-6-字典-API" class="headerlink" title="3.6 字典 API"></a>3.6 字典 API</h3><table><thead><tr><th>函数</th><th>作用</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>dictCreate</code></td><td>创建一个新的字典。</td><td>$O(1)$</td></tr><tr><td><code>dictAdd</code></td><td>将给定的键值对添加到字典里面。</td><td>$O(1)$</td></tr><tr><td><code>dictReplace</code></td><td>将给定的键值对添加到字典里面，如果键已经存在于字典，那么用新值取代原有的值。</td><td>$O(1)$</td></tr><tr><td><code>dictFetchValue</code></td><td>返回给定键的值。</td><td>$O(1)$</td></tr><tr><td><code>dictGetRandomKey</code></td><td>从字典中随机返回一个键值对。</td><td>$O(1)$</td></tr><tr><td><code>dictDelete</code></td><td>从字典中删除给定键所对应的键值对。</td><td>$O(1)$</td></tr><tr><td><code>dictRelease</code></td><td>释放给定字典，以及字典中包含的所有键值对。</td><td>$O(N)$，N 为字典包含的键值对数量。</td></tr></tbody></table><h2 id="4-跳跃表"><a href="#4-跳跃表" class="headerlink" title="4. 跳跃表"></a>4. 跳跃表</h2><p>跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。</p><p>跳跃表支持平均 $O(log N)$ 最坏 $O(N)$ 复杂度的节点查找，还可以通过顺序性操作来批量处理节点。</p><p>在大部分情况下，跳跃表的效率可以和平衡树相媲美，并且因为跳跃表的实现比平衡树要来得更为简单， 所以有不少程序都使用跳跃表来代替平衡树。</p><p>Redis 使用跳跃表作为有序集合键的底层实现之一：如果一个有序集合包含的元素数量比较多，又或者有序集合中元素的成员（member）是比较长的字符串时，Redis 就会使用跳跃表来作为有序集合键的底层实现。</p><p>Redis 只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。</p><h3 id="4-1-跳跃表的实现"><a href="#4-1-跳跃表的实现" class="headerlink" title="4.1 跳跃表的实现"></a>4.1 跳跃表的实现</h3><p>Redis 的跳跃表由 <code>redis.h/zskiplistNode</code> 和 <code>redis.h/zskiplist</code> 两个结构定义，其中 <code>zskiplistNode</code> 结构用于表示跳跃表节点，而 <code>zskiplist</code> 结构则用于保存跳跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针。</p><h4 id="4-1-1-跳跃表节点"><a href="#4-1-1-跳跃表节点" class="headerlink" title="4.1.1 跳跃表节点"></a>4.1.1 跳跃表节点</h4><p>跳跃表节点的实现由 <code>redis.h/zskiplistNode</code> 结构定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分值</span></span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨度</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> span;</span><br><span class="line"></span><br><span class="line">    &#125; level[];</span><br><span class="line"></span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><h5 id="1-层"><a href="#1-层" class="headerlink" title="1. 层"></a>1. 层</h5><p>跳跃表节点的 <code>level</code> 数组可以包含多个元素，每个元素都包含一个指向其他节点的指针，程序可以通过这些层来加快访问其他节点的速度，一般来说，层的数量越多，访问其他节点的速度就越快。</p><p>每次创建一个新跳跃表节点的时候，程序都根据幂次定律 （<a href="http://en.wikipedia.org/wiki/Power_law" target="_blank" rel="noopener">power law</a>，越大的数出现的概率越小） 随机生成一个介于 1 和 32 之间的值作为 <code>level</code> 数组的大小，这个大小就是层的 “高度”。</p><h5 id="2-前进指针"><a href="#2-前进指针" class="headerlink" title="2. 前进指针"></a>2. 前进指针</h5><p>每个层都有一个指向表尾方向的前进指针（<code>level[i].forward</code> 属性），用于从表头向表尾方向访问节点。</p><h5 id="3-跨度"><a href="#3-跨度" class="headerlink" title="3. 跨度"></a>3. 跨度</h5><p>层的跨度（<code>level[i].span</code> 属性）用于记录两个节点之间的距离：</p><ul><li>两个节点之间的跨度越大，它们相距得就越远。</li><li>指向 <code>NULL</code> 的所有前进指针的跨度都为 0，因为它们没有连向任何节点。</li></ul><p>遍历操作只使用前进指针就可以完成了，跨度实际上是用来计算排位（rank）的：在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。</p><h5 id="4-后退指针"><a href="#4-后退指针" class="headerlink" title="4. 后退指针"></a>4. 后退指针</h5><p>节点的后退指针（<code>backward</code> 属性）用于从表尾向表头方向访问节点：跟可以一次跳过多个节点的前进指针不同，因为每个节点只有一个后退指针，所以每次只能后退至前一个节点。</p><h5 id="5-分值和成员"><a href="#5-分值和成员" class="headerlink" title="5. 分值和成员"></a>5. 分值和成员</h5><p>节点的分值（<code>score</code> 属性）是一个 <code>double</code> 类型的浮点数，跳跃表中的所有节点都按分值从小到大来排序。</p><p>节点的成员对象（<code>obj</code> 属性）是一个指针，它指向一个字符串对象，而字符串对象则保存着一个 SDS 值。</p><p>在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却可以是相同的：分值相同的节点将按照成员对象在字典序中的大小来进行排序，成员对象较小的节点会排在前面（靠近表头的方向），而成员对象较大的节点则会排在后面（靠近表尾的方向）。</p><h4 id="4-1-2-跳跃表"><a href="#4-1-2-跳跃表" class="headerlink" title="4.1.2 跳跃表"></a>4.1.2 跳跃表</h4><p>通过使用一个 <code>zskiplist</code> 结构来持有节点，程序可以更方便地对整个跳跃表进行处理，比如快速访问跳跃表的表头节点和表尾节点，又或者快速地获取跳跃表节点的数量（也即是跳跃表的长度）等信息。</p><p><code>zskiplist</code> 结构的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表头节点和表尾节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中层数最大的节点的层数</span></span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><p><code>header</code> 和 <code>tail</code> 指针分别指向跳跃表的表头和表尾节点，通过这两个指针，程序定位表头节点和表尾节点的复杂度为 $O(1)$。</p><p>通过使用 <code>length</code> 属性来记录节点的数量，程序可以在 $O(1)$ 复杂度内返回跳跃表的长度。</p><p><code>level</code> 属性则用于在 $O(1)$ 复杂度内获取跳跃表中层高最大的那个节点的层数量，注意表头节点的层高并不计算在内。</p><h3 id="4-2-跳跃表-API"><a href="#4-2-跳跃表-API" class="headerlink" title="4.2 跳跃表 API"></a>4.2 跳跃表 API</h3><table><thead><tr><th>函数</th><th>作用</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>zslCreate</code></td><td>创建一个新的跳跃表。</td><td>$O(1)$</td></tr><tr><td><code>zslFree</code></td><td>释放给定跳跃表，以及表中包含的所有节点。</td><td>$O(N)$，N 为跳跃表的长度。</td></tr><tr><td><code>zslInsert</code></td><td>将包含给定成员和分值的新节点添加到跳跃表中。</td><td>平均 $O(log N)$，最坏 $O(N)$，N 为跳跃表长度。</td></tr><tr><td><code>zslDelete</code></td><td>删除跳跃表中包含给定成员和分值的节点。</td><td>平均 $O(log N)$，最坏 $O(N)$，N 为跳跃表长度。</td></tr><tr><td><code>zslGetRank</code></td><td>返回包含给定成员和分值的节点在跳跃表中的排位。</td><td>平均 $O(log N)$，最坏 $O(N)$，N 为跳跃表长度。</td></tr><tr><td><code>zslGetElementByRank</code></td><td>返回跳跃表在给定排位上的节点。</td><td>平均 $O(log N)$，最坏 $O(N)$，N 为跳跃表长度。</td></tr><tr><td><code>zslIsInRange</code></td><td>给定一个分值范围（range），如果给定的分值范围包含在跳跃表的分值范围之内，那么返回 1，否则返回 0。</td><td>通过跳跃表的表头节点和表尾节点，这个检测可以用 $O(1)$ 复杂度完成。</td></tr><tr><td><code>zslFirstInRange</code></td><td>给定一个分值范围，返回跳跃表中第一个符合这个范围的节点。</td><td>平均 $O(log N)$，最坏 $O(N)$。N 为跳跃表长度。</td></tr><tr><td><code>zslLastInRange</code></td><td>给定一个分值范围，返回跳跃表中最后一个符合这个范围的节点。</td><td>平均 $O(log N)$，最坏 $O(N)$。N 为跳跃表长度。</td></tr><tr><td><code>zslDeleteRangeByScore</code></td><td>给定一个分值范围，删除跳跃表中所有在这个范围之内的节点。</td><td>$O(N)$，N 为被删除节点数量。</td></tr><tr><td><code>zslDeleteRangeByRank</code></td><td>给定一个排位范围，删除跳跃表中所有在这个范围之内的节点。</td><td>$O(N)$，N 为被删除节点数量。</td></tr></tbody></table><h2 id="5-整数集合"><a href="#5-整数集合" class="headerlink" title="5. 整数集合"></a>5. 整数集合</h2><p>整数集合（intset）是集合键的底层实现之一：当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis 就会使用整数集合作为集合键的底层实现。</p><h3 id="5-1-整数集合的实现"><a href="#5-1-整数集合的实现" class="headerlink" title="5.1 整数集合的实现"></a>5.1 整数集合的实现</h3><p>整数集合（intset）是 Redis 用于保存整数值的集合抽象数据结构，它可以保存类型为 <code>int16_t</code>、 <code>int32_t</code> 或者 <code>int64_t</code> 的整数值，并且保证集合中不会出现重复元素。</p><p>每个 <code>intset.h/intset</code> 结构表示一个整数集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct intset &#123;</span><br><span class="line"></span><br><span class="line">    // 编码方式</span><br><span class="line">    uint32_t encoding;</span><br><span class="line"></span><br><span class="line">    // 集合包含的元素数量</span><br><span class="line">    uint32_t length;</span><br><span class="line"></span><br><span class="line">    // 保存元素的数组</span><br><span class="line">    int8_t contents[];</span><br><span class="line"></span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p><code>contents</code> 数组是整数集合的底层实现：整数集合的每个元素都是 <code>contents</code> 数组的一个数组项（item），各个项在数组中按值的大小从小到大有序地排列，并且数组中不包含任何重复项。</p><p><code>length</code> 属性记录了整数集合包含的元素数量，也即是 <code>contents</code> 数组的长度。</p><p>虽然 <code>intset</code> 结构将 <code>contents</code> 属性声明为 <code>int8_t</code> 类型的数组，但实际上 <code>contents</code> 数组并不保存任何 <code>int8_t</code> 类型的值 —— <code>contents</code> 数组的真正类型取决于 <code>encoding</code> 属性的值：</p><ul><li>如果 <code>encoding</code> 属性的值为 <code>INTSET_ENC_INT16</code> ，那么 <code>contents</code> 就是一个 <code>int16_t</code> 类型的数组，数组里的每个项都是一个 <code>int16_t</code>类型的整数值（最小值为 -32,768，最大值为 32,767）。</li><li>如果 <code>encoding</code> 属性的值为 <code>INTSET_ENC_INT32</code> ，那么 <code>contents</code> 就是一个 <code>int32_t</code> 类型的数组，数组里的每个项都是一个 <code>int32_t</code>类型的整数值（最小值为 -2,147,483,648，最大值为 2,147,483,647）。</li><li>如果 <code>encoding</code> 属性的值为 <code>INTSET_ENC_INT64</code> ，那么 <code>contents</code> 就是一个 <code>int64_t</code> 类型的数组，数组里的每个项都是一个 <code>int64_t</code>类型的整数值（最小值为 -9,223,372,036,854,775,808，最大值为 9,223,372,036,854,775,807）。</li></ul><h3 id="5-2-升级"><a href="#5-2-升级" class="headerlink" title="5.2 升级"></a>5.2 升级</h3><p>每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有所有元素的类型都要长时，整数集合需要先进行升级（upgrade），然后才能将新元素添加到整数集合里面。</p><p>升级整数集合并添加新元素共分为三步进行：</p><ol><li>根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放置到正确的位上，而且在放置元素的过程中，需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层数组里面。</li></ol><p>因为每次向整数集合添加新元素都可能会引起升级，而每次升级都需要对底层数组中已有的所有元素进行类型转换，所以向整数集合添加新元素的时间复杂度为 $O(N)$。</p><p>因为引发升级的新元素的长度总是比整数集合现有所有元素的长度都大，所以这个新元素的值要么就大于所有现有元素，要么就小于所有现有元素：</p><ul><li>在新元素小于所有现有元素的情况下，新元素会被放置在底层数组的最开头（索引 0 ）；</li><li>在新元素大于所有现有元素的情况下，新元素会被放置在底层数组的最末尾（索引 <code>length-1</code> ）。</li></ul><h3 id="5-3-降级"><a href="#5-3-降级" class="headerlink" title="5.3 降级"></a>5.3 降级</h3><p>整数集合不支持降级操作。</p><h3 id="5-4-整数集合-API"><a href="#5-4-整数集合-API" class="headerlink" title="5.4 整数集合 API"></a>5.4 整数集合 API</h3><table><thead><tr><th>函数</th><th>作用</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>intsetNew</code></td><td>创建一个新的整数集合。</td><td>$O(1)$</td></tr><tr><td><code>intsetAdd</code></td><td>将给定元素添加到整数集合里面。</td><td>$O(N)$</td></tr><tr><td><code>intsetRemove</code></td><td>从整数集合中移除给定元素。</td><td>$O(N)$</td></tr><tr><td><code>intsetFind</code></td><td>检查给定值是否存在于集合。</td><td>因为底层数组有序，查找可以通过二分查找法来进行， 所以复杂度为 $O(log N)$。</td></tr><tr><td><code>intsetRandom</code></td><td>从整数集合中随机返回一个元素。</td><td>$O(1)$</td></tr><tr><td><code>intsetGet</code></td><td>取出底层数组在给定索引上的元素。</td><td>$O(1)$</td></tr><tr><td><code>intsetLen</code></td><td>返回整数集合包含的元素个数。</td><td>$O(1)$</td></tr><tr><td><code>intsetBlobLen</code></td><td>返回整数集合占用的内存字节数。</td><td>$O(1)$</td></tr></tbody></table><h2 id="6-压缩列表"><a href="#6-压缩列表" class="headerlink" title="6. 压缩列表"></a>6. 压缩列表</h2><p>整数集合（intset）是集合键的底层实现之一：当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis 就会使用整数集合作为集合键的底层实现。</p><p>另外，当一个哈希键只包含少量键值对，并且每个键值对的键和值要么就是小整数值，要么就是长度比较短的字符串， 那么 Redis 就会使用压缩列表来做哈希键的底层实现。</p><h4 id="6-1-压缩列表的构成"><a href="#6-1-压缩列表的构成" class="headerlink" title="6.1 压缩列表的构成"></a>6.1 压缩列表的构成</h4><p>压缩列表是 Redis 为了节约内存而开发的，由一系列特殊编码的连续内存块组成的顺序型（sequential）数据结构。</p><p>一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zlbytes | zltail | zllen | entry1 | entry2 | ... | entryN | zlend</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>长度</th><th>用途</th></tr></thead><tbody><tr><td><code>zlbytes</code></td><td><code>uint32_t</code></td><td>4 字节</td><td>记录整个压缩列表占用的内存字节数：在对压缩列表进行内存重分配， 或者计算 <code>zlend</code>的位置时使用。</td></tr><tr><td><code>zltail</code></td><td><code>uint32_t</code></td><td>4 字节</td><td>记录压缩列表表尾节点距离压缩列表的起始地址有多少字节： 通过这个偏移量，程序无须遍历整个压缩列表就可以确定表尾节点的地址。</td></tr><tr><td><code>zllen</code></td><td><code>uint16_t</code></td><td>2 字节</td><td>记录了压缩列表包含的节点数量： 当这个属性的值小于 <code>UINT16_MAX</code> （65535）时， 这个属性的值就是压缩列表包含节点的数量； 当这个值等于 <code>UINT16_MAX</code> 时， 节点的真实数量需要遍历整个压缩列表才能计算得出。</td></tr><tr><td><code>entryX</code></td><td>列表节点</td><td>不定</td><td>压缩列表包含的各个节点，节点的长度由节点保存的内容决定。</td></tr><tr><td><code>zlend</code></td><td><code>uint8_t</code></td><td>1 字节</td><td>特殊值 0xFF （十进制 255），用于标记压缩列表的末端。</td></tr></tbody></table><h3 id="6-2-压缩列表节点的构成"><a href="#6-2-压缩列表节点的构成" class="headerlink" title="6.2 压缩列表节点的构成"></a>6.2 压缩列表节点的构成</h3><p>每个压缩列表节点可以保存一个字节数组或者一个整数值，其中，字节数组可以是以下三种长度的其中一种：</p><ol><li>长度小于等于 63（$2^{6}-1$）字节的字节数组；</li><li>长度小于等于 16383（$2^{14}-1$） 字节的字节数组；</li><li>长度小于等于 4294967295（$2^{32}-1$）字节的字节数组；</li></ol><p>每个压缩列表节点都由 <code>previous_entry_length</code>、 <code>encoding</code>、 <code>content</code> 三个部分组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">previous_entry_length | encoding | content</span><br></pre></td></tr></table></figure><h4 id="6-2-1-previous-entry-length"><a href="#6-2-1-previous-entry-length" class="headerlink" title="6.2.1 previous_entry_length"></a>6.2.1 previous_entry_length</h4><p>节点的 <code>previous_entry_length</code> 属性以字节为单位，记录了压缩列表中前一个节点的长度。</p><p><code>previous_entry_length</code> 属性的长度可以是 1 字节或者 5 字节：</p><ul><li>如果前一节点的长度小于 254 字节，那么 <code>previous_entry_length</code> 属性的长度为 1 字节：前一节点的长度就保存在这一个字节里面。</li><li>如果前一节点的长度大于等于 254 字节， 那么 <code>previous_entry_length</code> 属性的长度为 5 字节：其中属性的第一字节会被设置为 <code>0xFE</code>（十进制值 254），而之后的四个字节则用于保存前一节点的长度。</li></ul><p>因为节点的 <code>previous_entry_length</code> 属性记录了前一个节点的长度，所以程序可以通过指针运算，根据当前节点的起始地址来计算出前一个节点的起始地址。</p><p>压缩列表的从表尾向表头遍历操作就是使用这一原理实现的：只要我们拥有了一个指向某个节点起始地址的指针，那么通过这个指针以及这个节点的 <code>previous_entry_length</code> 属性，程序就可以一直向前一个节点回溯，最终到达压缩列表的表头节点。</p><h4 id="6-2-2-encoding"><a href="#6-2-2-encoding" class="headerlink" title="6.2.2 encoding"></a>6.2.2 encoding</h4><p>节点的 <code>encoding</code> 属性记录了节点的 <code>content</code> 属性所保存数据的类型以及长度：</p><ul><li>一字节、两字节或者五字节长，值的最高位为 00、01 或者 10 的是字节数组编码：这种编码表示节点的 <code>content</code> 属性保存着字节数组，数组的长度由编码除去最高两位之后的其他位记录；</li><li>一字节长，值的最高位以 11 开头的是整数编码：这种编码表示节点的 <code>content</code> 属性保存着整数值，整数值的类型和长度由编码除去最高两位之后的其他位记录。</li></ul><h4 id="6-2-3-content"><a href="#6-2-3-content" class="headerlink" title="6.2.3 content"></a>6.2.3 content</h4><p>节点的 <code>content</code> 属性负责保存节点的值，节点值可以是一个字节数组或者整数，值的类型和长度由节点的 <code>encoding</code> 属性决定。</p><h3 id="6-3-连锁更新"><a href="#6-3-连锁更新" class="headerlink" title="6.3 连锁更新"></a>6.3 连锁更新</h3><p>对 ziplist 添加和删除节点时，可能引起连续多次空间扩展操作，称为 “连锁更新”。</p><p>因为连锁更新在最坏情况下需要对压缩列表执行 N 次空间重分配操作，而每次空间重分配的最坏复杂度为 $O(N)$，所以连更新的最坏复杂度为 $O(N^2)$。</p><p>要注意的是，尽管连锁更新的复杂度较高，但它真正造成性能问题的几率是很低的：</p><ul><li>首先，压缩列表里要恰好有多个连续的、长度介于 250 字节至 253 字节之间的节点，连锁更新才有可能被引发，在实际中，这种情况并不多见；</li><li>其次，即使出现连锁更新，但只要被更新的节点数量不多，就不会对性能造成任何影响：比如说，对三五个节点进行连锁更新是绝对不会影响性能的；</li></ul><p>因为以上原因，<code>ziplistPush</code> 等命令的平均复杂度仅为 $O(N)$，在实际中，我们可以放心地使用这些函数，而不必担心连锁更新会影响压缩列表的性能。</p><h3 id="6-4-压缩列表-API"><a href="#6-4-压缩列表-API" class="headerlink" title="6.4 压缩列表 API"></a>6.4 压缩列表 API</h3><table><thead><tr><th>函数</th><th>作用</th><th>算法复杂度</th></tr></thead><tbody><tr><td><code>ziplistNew</code></td><td>创建一个新的压缩列表。</td><td>$O(1)$</td></tr><tr><td><code>ziplistPush</code></td><td>创建一个包含给定值的新节点，并将这个新节点添加到压缩列表的表头或者表尾。</td><td>平均 $O(N)$，最坏 $O(N^2)$。</td></tr><tr><td><code>ziplistInsert</code></td><td>将包含给定值的新节点插入到给定节点之后。</td><td>平均 $O(N)$，最坏 $O(N^2)$。</td></tr><tr><td><code>ziplistIndex</code></td><td>返回压缩列表给定索引上的节点。</td><td>$O(N)$</td></tr><tr><td><code>ziplistFind</code></td><td>在压缩列表中查找并返回包含了给定值的节点。</td><td>因为节点的值可能是一个字节数组，所以检查节点值和给定值是否相同的复杂度为 $O(N)$，而查找整个列表的复杂度则为 $O(N^2)$。</td></tr><tr><td><code>ziplistNext</code></td><td>返回给定节点的下一个节点。</td><td>$O(1)$</td></tr><tr><td><code>ziplistPrev</code></td><td>返回给定节点的前一个节点。</td><td>$O(1)$</td></tr><tr><td><code>ziplistGet</code></td><td>获取给定节点所保存的值。</td><td>$O(1)$</td></tr><tr><td><code>ziplistDelete</code></td><td>从压缩列表中删除给定的节点。</td><td>平均 $O(N)$，最坏 $O(N^2)$。</td></tr><tr><td><code>ziplistDeleteRange</code></td><td>删除压缩列表在给定索引上的连续多个节点。</td><td>平均 $O(N)$，最坏 $O(N^2)$。</td></tr><tr><td><code>ziplistBlobLen</code></td><td>返回压缩列表目前占用的内存字节数。</td><td>$O(1)$</td></tr><tr><td><code>ziplistLen</code></td><td>返回压缩列表目前包含的节点数量。</td><td>节点数量小于 65535 时 $O(1)$， 大于 65535 时 $O(N)$。</td></tr></tbody></table><p>因为 <code>ziplistPush</code>、<code>ziplistInsert</code>、<code>ziplistDelete</code> 和 <code>ziplistDeleteRange</code> 四个函数都有可能会引发连锁更新，所以它们的最坏复杂度都是 $O(N^2)$。</p><h2 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h2><h3 id="7-1-对象的类型与编码"><a href="#7-1-对象的类型与编码" class="headerlink" title="7.1 对象的类型与编码"></a>7.1 对象的类型与编码</h3><p>Redis 使用对象来表示数据库中的键和值，每次当我们在 Redis 的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象），另一个对象用作键值对的值（值对象）。</p><p>Redis 中的每个对象都由一个 <code>redisObject</code> 结构表示，该结构中和保存数据有关的三个属性分别是 <code>type</code> 属性、<code>encoding</code> 属性和 <code>ptr</code> 属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> lru:REDIS_LRU_BITS; <span class="comment">/* lru time (relative to server.lruclock) */</span></span><br><span class="line">    <span class="keyword">int</span> refcount;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><h4 id="7-1-1-类型"><a href="#7-1-1-类型" class="headerlink" title="7.1.1 类型"></a>7.1.1 类型</h4><p>对象的 <code>type</code> 属性记录了对象的类型，这个属性的值可以是</p><table><thead><tr><th>类型常量</th><th>对象的名称</th></tr></thead><tbody><tr><td><code>REDIS_STRING</code></td><td>字符串对象</td></tr><tr><td><code>REDIS_LIST</code></td><td>列表对象</td></tr><tr><td><code>REDIS_HASH</code></td><td>哈希对象</td></tr><tr><td><code>REDIS_SET</code></td><td>集合对象</td></tr><tr><td><code>REDIS_ZSET</code></td><td>有序集合对象</td></tr></tbody></table><p>对于 Redis 数据库保存的键值对来说，键总是一个字符串对象，而值则可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象的其中一种，因此：</p><ul><li>当我们称呼一个数据库键为 “字符串键” 时，我们指的是 “这个数据库键所对应的值为字符串对象”；</li><li>当我们称呼一个键为 “列表键” 时，我们指的是 “这个数据库键所对应的值为列表对象”。</li></ul><p><code>TYPE</code> 命令的实现方式也与此类似，当我们对一个数据库键执行 <code>TYPE</code> 命令时，命令返回的结果为数据库键对应的值对象的类型， 而不是键对象的类型。</p><h4 id="7-1-2-编码和底层实现"><a href="#7-1-2-编码和底层实现" class="headerlink" title="7.1.2 编码和底层实现"></a>7.1.2 编码和底层实现</h4><p>对象的 <code>ptr</code> 指针指向对象的底层实现数据结构，而这些数据结构由对象的 <code>encoding</code> 属性决定。</p><p><code>encoding</code> 属性记录了对象所使用的编码，也即是说这个对象使用了什么数据结构作为对象的底层实现，这个属性的值可以是：</p><table><thead><tr><th>编码常量</th><th>编码所对应的底层数据结构</th></tr></thead><tbody><tr><td><code>REDIS_ENCODING_INT</code></td><td><code>long</code> 类型的整数</td></tr><tr><td><code>REDIS_ENCODING_EMBSTR</code></td><td><code>embstr</code> 编码的简单动态字符串</td></tr><tr><td><code>REDIS_ENCODING_RAW</code></td><td>简单动态字符串</td></tr><tr><td><code>REDIS_ENCODING_HT</code></td><td>字典</td></tr><tr><td><code>REDIS_ENCODING_LINKEDLIST</code></td><td>双端链表</td></tr><tr><td><code>REDIS_ENCODING_ZIPLIST</code></td><td>压缩列表</td></tr><tr><td><code>REDIS_ENCODING_INTSET</code></td><td>整数集合</td></tr><tr><td><code>REDIS_ENCODING_SKIPLIST</code></td><td>跳跃表和字典</td></tr></tbody></table><p>每种类型的对象都至少使用了两种不同的编码：</p><table><thead><tr><th>类型</th><th>编码</th><th>对象</th></tr></thead><tbody><tr><td><code>REDIS_STRING</code></td><td><code>REDIS_ENCODING_INT</code></td><td>使用整数值实现的字符串对象。</td></tr><tr><td><code>REDIS_STRING</code></td><td><code>REDIS_ENCODING_EMBSTR</code></td><td>使用 <code>embstr</code> 编码的简单动态字符串实现的字符串对象。</td></tr><tr><td><code>REDIS_STRING</code></td><td><code>REDIS_ENCODING_RAW</code></td><td>使用简单动态字符串实现的字符串对象。</td></tr><tr><td><code>REDIS_LIST</code></td><td><code>REDIS_ENCODING_ZIPLIST</code></td><td>使用压缩列表实现的列表对象。</td></tr><tr><td><code>REDIS_LIST</code></td><td><code>REDIS_ENCODING_LINKEDLIST</code></td><td>使用双端链表实现的列表对象。</td></tr><tr><td><code>REDIS_HASH</code></td><td><code>REDIS_ENCODING_ZIPLIST</code></td><td>使用压缩列表实现的哈希对象。</td></tr><tr><td><code>REDIS_HASH</code></td><td><code>REDIS_ENCODING_HT</code></td><td>使用字典实现的哈希对象。</td></tr><tr><td><code>REDIS_SET</code></td><td><code>REDIS_ENCODING_INTSET</code></td><td>使用整数集合实现的集合对象。</td></tr><tr><td><code>REDIS_SET</code></td><td><code>REDIS_ENCODING_HT</code></td><td>使用字典实现的集合对象。</td></tr><tr><td><code>REDIS_ZSET</code></td><td><code>REDIS_ENCODING_ZIPLIST</code></td><td>使用压缩列表实现的有序集合对象。</td></tr><tr><td><code>REDIS_ZSET</code></td><td><code>REDIS_ENCODING_SKIPLIST</code></td><td>使用跳跃表和字典实现的有序集合对象。</td></tr></tbody></table><p>使用 <code>OBJECT ENCODING</code> 命令可以查看一个数据库键的值对象的编码。不同编码的对象所对应的 <code>OBJECT ENCODING</code> 命令输出：</p><table><thead><tr><th>对象所使用的底层数据结构</th><th>编码常量</th><th>OBJECT ENCODING 命令输出</th></tr></thead><tbody><tr><td>整数</td><td><code>REDIS_ENCODING_INT</code></td><td><code>&quot;int&quot;</code></td></tr><tr><td><code>embstr</code> 编码的简单动态字符串（SDS）</td><td><code>REDIS_ENCODING_EMBSTR</code></td><td><code>&quot;embstr&quot;</code></td></tr><tr><td>简单动态字符串</td><td><code>REDIS_ENCODING_RAW</code></td><td><code>&quot;raw&quot;</code></td></tr><tr><td>字典</td><td><code>REDIS_ENCODING_HT</code></td><td><code>&quot;hashtable&quot;</code></td></tr><tr><td>双端链表</td><td><code>REDIS_ENCODING_LINKEDLIST</code></td><td><code>&quot;linkedlist&quot;</code></td></tr><tr><td>压缩列表</td><td><code>REDIS_ENCODING_ZIPLIST</code></td><td><code>&quot;ziplist&quot;</code></td></tr><tr><td>整数集合</td><td><code>REDIS_ENCODING_INTSET</code></td><td><code>&quot;intset&quot;</code></td></tr><tr><td>跳跃表和字典</td><td><code>REDIS_ENCODING_SKIPLIST</code></td><td><code>&quot;skiplist&quot;</code></td></tr></tbody></table><p>通过 <code>encoding</code> 属性来设定对象所使用的编码，而不是为特定类型的对象关联一种固定的编码，极大地提升了 Redis 的灵活性和效率，因为 Redis 可以根据不同的使用场景来为一个对象设置不同的编码，从而优化对象在某一场景下的效率。</p><h3 id="7-2-字符串对象"><a href="#7-2-字符串对象" class="headerlink" title="7.2 字符串对象"></a>7.2 字符串对象</h3><p>字符串对象的编码可以是 <code>int</code>、<code>raw</code> 或者 <code>embstr</code>。</p><p>如果一个字符串对象保存的是整数值，并且这个整数值可以用 <code>long</code> 类型来表示，那么字符串对象会将整数值保存在字符串对象结构的 <code>ptr</code> 属性里面（将 <code>void*</code> 转换成 <code>long</code> ），并将字符串对象的编码设置为 <code>int</code> 。</p><p>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度大于 39 字节，那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值，并将对象的编码设置为 <code>raw</code> 。</p><p>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度小于等于 39 字节，那么字符串对象将使用 <code>embstr</code> 编码的方式来保存这个字符串值。</p><p><code>embstr</code> 编码是专门用于保存短字符串的一种优化编码方式，这种编码和 <code>raw</code> 编码一样，都使用 <code>redisObject</code> 结构和 <code>sdshdr</code> 结构来表示字符串对象，但 <code>raw</code> 编码会调用两次内存分配函数来分别创建 <code>redisObject</code> 结构和 <code>sdshdr</code> 结构，而 <code>embstr</code> 编码则通过调用一次内存分配函数来分配一块连续的空间，空间中依次包含 <code>redisObject</code> 和 <code>sdshdr</code> 两个结构。</p><p><code>embstr</code> 编码的字符串对象在执行命令时，产生的效果和 <code>raw</code> 编码的字符串对象执行命令时产生的效果是相同的，但使用 <code>embstr</code> 编码的字符串对象来保存短字符串值有以下好处：</p><ol><li><code>embstr</code> 编码将创建字符串对象所需的内存分配次数从 <code>raw</code> 编码的两次降低为一次。</li><li>释放 <code>embstr</code> 编码的字符串对象只需要调用一次内存释放函数，而释放 <code>raw</code> 编码的字符串对象需要调用两次内存释放函数。</li><li>因为 <code>embstr</code> 编码的字符串对象的所有数据都保存在一块连续的内存里面，所以这种编码的字符串对象比起 <code>raw</code> 编码的字符串对象能够更好地利用缓存带来的优势。</li></ol><p>最后要说的是，可以用 <code>long double</code> 类型表示的浮点数在 Redis 中也是作为字符串值来保存的：如果我们要保存一个浮点数到字符串对象里面，那么程序会先将这个浮点数转换成字符串值，然后再保存起转换所得的字符串值。在有需要的时候，程序会将保存在字符串对象里面的字符串值转换回浮点数值，执行某些操作，然后再将执行操作所得的浮点数值转换回字符串值，并继续保存在字符串对象里面。</p><h4 id="7-2-1-编码的转换"><a href="#7-2-1-编码的转换" class="headerlink" title="7.2.1 编码的转换"></a>7.2.1 编码的转换</h4><p><code>int</code> 编码的字符串对象和 <code>embstr</code> 编码的字符串对象在条件满足的情况下，会被转换为 <code>raw</code> 编码的字符串对象。</p><p>对于 <code>int</code> 编码的字符串对象来说，如果我们向对象执行了一些命令，使得这个对象保存的不再是整数值，而是一个字符串值，那么字符串对象的编码将从 <code>int</code> 变为 <code>raw</code>。</p><p>另外，因为 Redis 没有为 <code>embstr</code> 编码的字符串对象编写任何相应的修改程序 （只有 <code>int</code> 编码的字符串对象和 <code>raw</code> 编码的字符串对象有这些程序），所以 <code>embstr</code> 编码的字符串对象实际上是只读的：当我们对 <code>embstr</code> 编码的字符串对象执行任何修改命令时，程序会先将对象的编码从 <code>embstr</code> 转换成 <code>raw</code> ，然后再执行修改命令；因为这个原因，<code>embstr</code> 编码的字符串对象在执行修改命令之后，总会变成一个 <code>raw</code> 编码的字符串对象。</p><h4 id="7-2-2-字符串命令的实现"><a href="#7-2-2-字符串命令的实现" class="headerlink" title="7.2.2 字符串命令的实现"></a>7.2.2 字符串命令的实现</h4><table><thead><tr><th>命令</th><th><code>int</code> 编码的实现方法</th><th><code>embstr</code> 编码的实现方法</th><th><code>raw</code> 编码的实现方法</th></tr></thead><tbody><tr><td>SET</td><td>使用 <code>int</code> 编码保存值。</td><td>使用 <code>embstr</code> 编码保存值。</td><td>使用 <code>raw</code> 编码保存值。</td></tr><tr><td>GET</td><td>拷贝对象所保存的整数值，将这个拷贝转换成字符串值，然后向客户端返回这个字符串值。</td><td>直接向客户端返回字符串值。</td><td>直接向客户端返回字符串值。</td></tr><tr><td>APPEND</td><td>将对象转换成 <code>raw</code> 编码，然后按 <code>raw</code> 编码的方式执行此操作。</td><td>将对象转换成 <code>raw</code> 编码，然后按 <code>raw</code> 编码的方式执行此操作。</td><td>调用 <code>sdscatlen</code> 函数，将给定字符串追加到现有字符串的末尾。</td></tr><tr><td>INCRBYFLOAT</td><td>取出整数值并将其转换成 <code>longdouble</code> 类型的浮点数，对这个浮点数进行加法计算，然后将得出的浮点数结果保存起来。</td><td>取出字符串值并尝试将其转换成<code>long double</code> 类型的浮点数，对这个浮点数进行加法计算，然后将得出的浮点数结果保存起来。 如果字符串值不能被转换成浮点数，那么向客户端返回一个错误。</td><td>取出字符串值并尝试将其转换成 <code>longdouble</code> 类型的浮点数，对这个浮点数进行加法计算，然后将得出的浮点数结果保存起来。如果字符串值不能被转换成浮点数，那么向客户端返回一个错误。</td></tr><tr><td>INCRBY</td><td>对整数值进行加法计算，得出的计算结果会作为整数被保存起来。</td><td><code>embstr</code> 编码不能执行此命令，向客户端返回一个错误。</td><td><code>raw</code> 编码不能执行此命令，向客户端返回一个错误。</td></tr><tr><td>DECRBY</td><td>对整数值进行减法计算，得出的计算结果会作为整数被保存起来。</td><td><code>embstr</code> 编码不能执行此命令，向客户端返回一个错误。</td><td><code>raw</code> 编码不能执行此命令，向客户端返回一个错误。</td></tr><tr><td>STRLEN</td><td>拷贝对象所保存的整数值，将这个拷贝转换成字符串值，计算并返回这个字符串值的长度。</td><td>调用 <code>sdslen</code> 函数，返回字符串的长度。</td><td>调用 <code>sdslen</code> 函数，返回字符串的长度。</td></tr><tr><td>SETRANGE</td><td>将对象转换成 <code>raw</code> 编码，然后按 <code>raw</code> 编码的方式执行此命令。</td><td>将对象转换成 <code>raw</code> 编码，然后按 <code>raw</code> 编码的方式执行此命令。</td><td>将字符串特定索引上的值设置为给定的字符。</td></tr><tr><td>GETRANGE</td><td>拷贝对象所保存的整数值，将这个拷贝转换成字符串值，然后取出并返回字符串指定索引上的字符。</td><td>直接取出并返回字符串指定索引上的字符。</td><td>直接取出并返回字符串指定索引上的字符。</td></tr></tbody></table><h3 id="7-3-列表对象"><a href="#7-3-列表对象" class="headerlink" title="7.3 列表对象"></a>7.3 列表对象</h3><p>列表对象的编码可以是 <code>ziplist</code> 或者 <code>linkedlist</code>。</p><p><code>ziplist</code> 编码的列表对象使用压缩列表作为底层实现，每个压缩列表节点（entry）保存了一个列表元素。</p><p>另一方面，<code>linkedlist</code> 编码的列表对象使用双端链表作为底层实现，每个双端链表节点（node）都保存了一个字符串对象，而每个字符串对象都保存了一个列表元素。</p><p>注意，<code>linkedlist</code> 编码的列表对象在底层的双端链表结构中包含了多个字符串对象，这种嵌套字符串对象的行为在稍后介绍的哈希对象、集合对象和有序集合对象中都会出现，字符串对象是 Redis 五种类型的对象中唯一一种会被其他四种类型对象嵌套的对象。</p><h4 id="7-3-1-编码转换"><a href="#7-3-1-编码转换" class="headerlink" title="7.3.1 编码转换"></a>7.3.1 编码转换</h4><p>当列表对象可以同时满足以下两个条件时，列表对象使用 <code>ziplist</code> 编码：</p><ol><li>列表对象保存的所有字符串元素的长度都小于 64 字节；</li><li>列表对象保存的元素数量小于 512 个；</li></ol><p>不能满足这两个条件的列表对象需要使用 <code>linkedlist</code> 编码。</p><p>对于使用 <code>ziplist</code> 编码的列表对象来说，当使用 <code>ziplist</code> 编码所需的两个条件的任意一个不能被满足时，对象的编码转换操作就会被执行：原本保存在压缩列表里的所有列表元素都会被转移并保存到双端链表里面，对象的编码也会从 <code>ziplist</code> 变为 <code>linkedlist</code>。</p><h4 id="7-3-2-列表命令的实现"><a href="#7-3-2-列表命令的实现" class="headerlink" title="7.3.2 列表命令的实现"></a>7.3.2 列表命令的实现</h4><table><thead><tr><th>命令</th><th><code>ziplist</code> 编码的实现方法</th><th><code>linkedlist</code> 编码的实现方法</th></tr></thead><tbody><tr><td>LPUSH</td><td>调用 <code>ziplistPush</code> 函数，将新元素推入到压缩列表的表头。</td><td>调用 <code>listAddNodeHead</code> 函数，将新元素推入到双端链表的表头。</td></tr><tr><td>RPUSH</td><td>调用 <code>ziplistPush</code> 函数，将新元素推入到压缩列表的表尾。</td><td>调用 <code>listAddNodeTail</code> 函数，将新元素推入到双端链表的表尾。</td></tr><tr><td>LPOP</td><td>调用 <code>ziplistIndex</code> 函数定位压缩列表的表头节点，在向用户返回节点所保存的元素之后，调用 <code>ziplistDelete</code> 函数删除表头节点。</td><td>调用 <code>listFirst</code> 函数定位双端链表的表头节点，在向用户返回节点所保存的元素之后，调用 <code>listDelNode</code> 函数删除表头节点。</td></tr><tr><td>RPOP</td><td>调用 <code>ziplistIndex</code> 函数定位压缩列表的表尾节点，在向用户返回节点所保存的元素之后，调用 <code>ziplistDelete</code> 函数删除表尾节点。</td><td>调用 <code>listLast</code> 函数定位双端链表的表尾节点，在向用户返回节点所保存的元素之后，调用 <code>listDelNode</code> 函数删除表尾节点。</td></tr><tr><td>LINDEX</td><td>调用 <code>ziplistIndex</code> 函数定位压缩列表中的指定节点，然后返回节点所保存的元素。</td><td>调用 <code>listIndex</code> 函数定位双端链表中的指定节点，然后返回节点所保存的元素。</td></tr><tr><td>LLEN</td><td>调用 <code>ziplistLen</code> 函数返回压缩列表的长度。</td><td>调用 <code>listLength</code> 函数返回双端链表的长度。</td></tr><tr><td>LINSERT</td><td>插入新节点到压缩列表的表头或者表尾时，使用 <code>ziplistPush</code> 函数；插入新节点到压缩列表的其他位置时，使用 <code>ziplistInsert</code> 函数。</td><td>调用 <code>listInsertNode</code> 函数，将新节点插入到双端链表的指定位置。</td></tr><tr><td>LREM</td><td>遍历压缩列表节点，并调用 <code>ziplistDelete</code> 函数删除包含了给定元素的节点。</td><td>遍历双端链表节点，并调用 <code>listDelNode</code> 函数删除包含了给定元素的节点。</td></tr><tr><td>LTRIM</td><td>调用 <code>ziplistDeleteRange</code> 函数，删除压缩列表中所有不在指定索引范围内的节点。</td><td>遍历双端链表节点，并调用 <code>listDelNode</code> 函数删除链表中所有不在指定索引范围内的节点。</td></tr><tr><td>LSET</td><td>调用 <code>ziplistDelete</code> 函数，先删除压缩列表指定索引上的现有节点，然后调用 <code>ziplistInsert</code> 函数，将一个包含给定元素的新节点插入到相同索引上面。</td><td>调用 <code>listIndex</code> 函数，定位到双端链表指定索引上的节点，然后通过赋值操作更新节点的值。</td></tr></tbody></table><h3 id="7-4-哈希对象"><a href="#7-4-哈希对象" class="headerlink" title="7.4 哈希对象"></a>7.4 哈希对象</h3><p>哈希对象的编码可以是 <code>ziplist</code> 或者 <code>hashtable</code>。</p><p><code>ziplist</code> 编码的哈希对象使用压缩列表作为底层实现，每当有新的键值对要加入到哈希对象时，程序会先将保存了键的压缩列表节点推入到压缩列表表尾，然后再将保存了值的压缩列表节点推入到压缩列表表尾，因此：</p><ul><li>保存了同一键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点在后；</li><li>先添加到哈希对象中的键值对会被放在压缩列表的表头方向，而后来添加到哈希对象中的键值对会被放在压缩列表的表尾方向。</li></ul><p>另一方面，<code>hashtable</code> 编码的哈希对象使用字典作为底层实现，哈希对象中的每个键值对都使用一个字典键值对来保存：</p><ul><li>字典的每个键都是一个字符串对象，对象中保存了键值对的键；</li><li>字典的每个值都是一个字符串对象，对象中保存了键值对的值。</li></ul><h4 id="7-4-1-编码转换"><a href="#7-4-1-编码转换" class="headerlink" title="7.4.1 编码转换"></a>7.4.1 编码转换</h4><p>当哈希对象可以同时满足以下两个条件时，哈希对象使用 <code>ziplist</code> 编码：</p><ol><li>哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节；</li><li>哈希对象保存的键值对数量小于 512 个；</li></ol><p>不能满足这两个条件的哈希对象需要使用 <code>hashtable</code> 编码。</p><p>对于使用 <code>ziplist</code> 编码的列表对象来说，当使用 <code>ziplist</code> 编码所需的两个条件的任意一个不能被满足时，对象的编码转换操作就会被执行：原本保存在压缩列表里的所有键值对都会被转移并保存到字典里面，对象的编码也会从 <code>ziplist</code> 变为 <code>hashtable</code>。</p><h4 id="7-4-2-哈希命令的实现"><a href="#7-4-2-哈希命令的实现" class="headerlink" title="7.4.2 哈希命令的实现"></a>7.4.2 哈希命令的实现</h4><table><thead><tr><th>命令</th><th><code>ziplist</code> 编码实现方法</th><th><code>hashtable</code> 编码的实现方法</th></tr></thead><tbody><tr><td>HSET</td><td>首先调用 <code>ziplistPush</code> 函数，将键推入到压缩列表的表尾，然后再次调用 <code>ziplistPush</code> 函数，将值推入到压缩列表的表尾。</td><td>调用 <code>dictAdd</code> 函数，将新节点添加到字典里面。</td></tr><tr><td>HGET</td><td>首先调用 <code>ziplistFind</code> 函数，在压缩列表中查找指定键所对应的节点，然后调用 <code>ziplistNext</code> 函数，将指针移动到键节点旁边的值节点，最后返回值节点。</td><td>调用 <code>dictFind</code> 函数，在字典中查找给定键，然后调用 <code>dictGetVal</code> 函数，返回该键所对应的值。</td></tr><tr><td>HEXISTS</td><td>调用 <code>ziplistFind</code> 函数，在压缩列表中查找指定键所对应的节点，如果找到的话说明键值对存在，没找到的话就说明键值对不存在。</td><td>调用 <code>dictFind</code> 函数，在字典中查找给定键，如果找到的话说明键值对存在，没找到的话就说明键值对不存在。</td></tr><tr><td>HDEL</td><td>调用 <code>ziplistFind</code> 函数，在压缩列表中查找指定键所对应的节点，然后将相应的键节点、以及键节点旁边的值节点都删除掉。</td><td>调用 <code>dictDelete</code> 函数，将指定键所对应的键值对从字典中删除掉。</td></tr><tr><td>HLEN</td><td>调用 <code>ziplistLen</code> 函数，取得压缩列表包含节点的总数量，将这个数量除以 2 ，得出的结果就是压缩列表保存的键值对的数量。</td><td>调用 <code>dictSize</code> 函数，返回字典包含的键值对数量，这个数量就是哈希对象包含的键值对数量。</td></tr><tr><td>HGETALL</td><td>遍历整个压缩列表，用 <code>ziplistGet</code> 函数返回所有键和值（都是节点）。</td><td>遍历整个字典，用 <code>dictGetKey</code> 函数返回字典的键，用 <code>dictGetVal</code> 函数返回字典的值。</td></tr></tbody></table><h3 id="7-5-集合对象"><a href="#7-5-集合对象" class="headerlink" title="7.5 集合对象"></a>7.5 集合对象</h3><p>集合对象的编码可以是 <code>intset</code> 或者 <code>hashtable</code>。</p><p><code>intset</code> 编码的集合对象使用整数集合作为底层实现，集合对象包含的所有元素都被保存在整数集合里面。</p><p>另一方面，<code>hashtable</code> 编码的集合对象使用字典作为底层实现，字典的每个键都是一个字符串对象，每个字符串对象包含了一个集合元素，而字典的值则全部被设置为 <code>NULL</code>。</p><h4 id="7-5-1-编码的转换"><a href="#7-5-1-编码的转换" class="headerlink" title="7.5.1 编码的转换"></a>7.5.1 编码的转换</h4><p>当集合对象可以同时满足以下两个条件时，对象使用 <code>intset</code> 编码：</p><ol><li>集合对象保存的所有元素都是整数值；</li><li>集合对象保存的元素数量不超过 512 个；</li></ol><p>不能满足这两个条件的集合对象需要使用 <code>hashtable</code> 编码。</p><p>对于使用 <code>intset</code> 编码的集合对象来说，当使用 <code>intset</code> 编码所需的两个条件的任意一个不能被满足时，对象的编码转换操作就会被执行：原本保存在整数集合中的所有元素都会被转移并保存到字典里面，并且对象的编码也会从 <code>intset</code> 变为 <code>hashtable</code>。</p><h4 id="7-5-2-集合命令的实现"><a href="#7-5-2-集合命令的实现" class="headerlink" title="7.5.2 集合命令的实现"></a>7.5.2 集合命令的实现</h4><table><thead><tr><th>命令</th><th><code>intset</code> 编码的实现方法</th><th><code>hashtable</code> 编码的实现方法</th></tr></thead><tbody><tr><td>SADD</td><td>调用 <code>intsetAdd</code> 函数，将所有新元素添加到整数集合里面。</td><td>调用 <code>dictAdd</code> ，以新元素为键，<code>NULL</code> 为值，将键值对添加到字典里面。</td></tr><tr><td>SCARD</td><td>调用 <code>intsetLen</code> 函数，返回整数集合所包含的元素数量，这个数量就是集合对象所包含的元素数量。</td><td>调用 <code>dictSize</code> 函数，返回字典所包含的键值对数量，这个数量就是集合对象所包含的元素数量。</td></tr><tr><td>SISMEMBER</td><td>调用 <code>intsetFind</code> 函数，在整数集合中查找给定的元素，如果找到了说明元素存在于集合，没找到则说明元素不存在于集合。</td><td>调用 <code>dictFind</code> 函数，在字典的键中查找给定的元素，如果找到了说明元素存在于集合，没找到则说明元素不存在于集合。</td></tr><tr><td>SMEMBERS</td><td>遍历整个整数集合，使用 <code>intsetGet</code> 函数返回集合元素。</td><td>遍历整个字典，使用 <code>dictGetKey</code> 函数返回字典的键作为集合元素。</td></tr><tr><td>SRANDMEMBER</td><td>调用 <code>intsetRandom</code> 函数，从整数集合中随机返回一个元素。</td><td>调用 <code>dictGetRandomKey</code> 函数，从字典中随机返回一个字典键。</td></tr><tr><td>SPOP</td><td>调用 <code>intsetRandom</code> 函数，从整数集合中随机取出一个元素，在将这个随机元素返回给客户端之后，调用 <code>intsetRemove</code> 函数，将随机元素从整数集合中删除掉。</td><td>调用 <code>dictGetRandomKey</code> 函数，从字典中随机取出一个字典键，在将这个随机字典键的值返回给客户端之后，调用 <code>dictDelete</code> 函数，从字典中删除随机字典键所对应的键值对。</td></tr><tr><td>SREM</td><td>调用 <code>intsetRemove</code> 函数，从整数集合中删除所有给定的元素。</td><td>调用 <code>dictDelete</code> 函数，从字典中删除所有键为给定元素的键值对。</td></tr></tbody></table><h3 id="7-6-有序集合对象"><a href="#7-6-有序集合对象" class="headerlink" title="7.6 有序集合对象"></a>7.6 有序集合对象</h3><p>有序集合的编码可以是 <code>ziplist</code> 或者 <code>skiplist</code>。</p><p><code>ziplist</code> 编码的有序集合对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员（member），而第二个元素则保存元素的分值（score）。</p><p>压缩列表内的集合元素按分值从小到大进行排序，分值较小的元素被放置在靠近表头的方向，而分值较大的元素则被放置在靠近表尾的方向。</p><p><code>skiplist</code> 编码的有序集合对象使用 <code>zset</code> 结构作为底层实现，一个 <code>zset</code> 结构同时包含一个字典和一个跳跃表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    zskiplist *zsl;</span><br><span class="line"></span><br><span class="line">    dict *dict;</span><br><span class="line"></span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure><p><code>zset</code> 结构中的 <code>zsl</code> 跳跃表按分值从小到大保存了所有集合元素，每个跳跃表节点都保存了一个集合元素：跳跃表节点的 <code>object</code> 属性保存了元素的成员，而跳跃表节点的 <code>score</code> 属性则保存了元素的分值。 通过这个跳跃表，程序可以对有序集合进行范围型操作，比如 <code>ZRANK</code>、<code>ZRANGE</code> 等命令就是基于跳跃表 API 来实现的。</p><p>除此之外，<code>zset</code> 结构中的 <code>dict</code> 字典为有序集合创建了一个从成员到分值的映射，字典中的每个键值对都保存了一个集合元素：字典的键保存了元素的成员，而字典的值则保存了元素的分值。通过这个字典，程序可以用 $O(1)$ 复杂度查找给定成员的分值，<code>ZSCORE</code> 命令就是根据这一特性实现的，而很多其他有序集合命令都在实现的内部用到了这一特性。</p><p>有序集合每个元素的成员都是一个字符串对象，而每个元素的分值都是一个 <code>double</code> 类型的浮点数。值得一提的是，虽然 <code>zset</code> 结构同时使用跳跃表和字典来保存有序集合元素，但这两种数据结构都会通过指针来共享相同元素的成员和分值，所以同时使用跳跃表和字典来保存集合元素不会产生任何重复成员或者分值，也不会因此而浪费额外的内存。</p><h4 id="7-6-1-编码的转换"><a href="#7-6-1-编码的转换" class="headerlink" title="7.6.1 编码的转换"></a>7.6.1 编码的转换</h4><p>当有序集合对象可以同时满足以下两个条件时，对象使用 <code>ziplist</code> 编码：</p><ol><li>有序集合保存的元素数量小于 128 个；</li><li>有序集合保存的所有元素成员的长度都小于 64 字节；</li></ol><p>不能满足以上两个条件的有序集合对象将使用 <code>skiplist</code> 编码。</p><p>对于使用 <code>ziplist</code> 编码的有序集合对象来说，当使用 <code>ziplist</code> 编码所需的两个条件中的任意一个不能被满足时，程序就会执行编码转换操作，将原本储存在压缩列表里面的所有集合元素转移到 <code>zset</code> 结构里面，并将对象的编码从 <code>ziplist</code> 改为 <code>skiplist</code>。</p><h4 id="7-6-2-有序集合命令的实现"><a href="#7-6-2-有序集合命令的实现" class="headerlink" title="7.6.2 有序集合命令的实现"></a>7.6.2 有序集合命令的实现</h4><table><thead><tr><th>命令</th><th style="text-align:left"><code>ziplist</code> 编码的实现方法</th><th><code>zset</code> 编码的实现方法</th></tr></thead><tbody><tr><td>ZADD</td><td style="text-align:left">调用 <code>ziplistInsert</code> 函数，将成员和分值作为两个节点分别插入到压缩列表。</td><td>先调用 <code>zslInsert</code> 函数，将新元素添加到跳跃表，然后调用 <code>dictAdd</code> 函数，将新元素关联到字典。</td></tr><tr><td>ZCARD</td><td style="text-align:left">调用 <code>ziplistLen</code> 函数，获得压缩列表包含节点的数量，将这个数量除以 2 得出集合元素的数量。</td><td>访问跳跃表数据结构的 <code>length</code> 属性，直接返回集合元素的数量。</td></tr><tr><td>ZCOUNT</td><td style="text-align:left">遍历压缩列表，统计分值在给定范围内的节点的数量。</td><td>遍历跳跃表，统计分值在给定范围内的节点的数量。</td></tr><tr><td>ZRANGE</td><td style="text-align:left">从表头向表尾遍历压缩列表，返回给定索引范围内的所有元素。</td><td>从表头向表尾遍历跳跃表，返回给定索引范围内的所有元素。</td></tr><tr><td>ZREVRANGE</td><td style="text-align:left">从表尾向表头遍历压缩列表，返回给定索引范围内的所有元素。</td><td>从表尾向表头遍历跳跃表，返回给定索引范围内的所有元素。</td></tr><tr><td>ZRANK</td><td style="text-align:left">从表头向表尾遍历压缩列表， 查找给定的成员，沿途记录经过节点的数量，当找到给定成员之后，途经节点的数量就是该成员所对应元素的排名。</td><td>从表头向表尾遍历跳跃表，查找给定的成员，沿途记录经过节点的数量，当找到给定成员之后，途经节点的数量就是该成员所对应元素的排名。</td></tr><tr><td>ZREVRANK</td><td style="text-align:left">从表尾向表头遍历压缩列表，查找给定的成员，沿途记录经过节点的数量， 当找到给定成员之后，途经节点的数量就是该成员所对应元素的排名。</td><td>从表尾向表头遍历跳跃表，查找给定的成员，沿途记录经过节点的数量，当找到给定成员之后，途经节点的数量就是该成员所对应元素的排名。</td></tr><tr><td>ZREM</td><td style="text-align:left">遍历压缩列表，删除所有包含给定成员的节点，以及被删除成员节点旁边的分值节点。</td><td>遍历跳跃表，删除所有包含了给定成员的跳跃表节点。并在字典中解除被删除元素的成员和分值的关联。</td></tr><tr><td>ZSCORE</td><td style="text-align:left">遍历压缩列表，查找包含了给定成员的节点，然后取出成员节点旁边的分值节点保存的元素分值。</td><td>直接从字典中取出给定成员的分值。</td></tr></tbody></table><h3 id="7-7-类型检查与命令多态"><a href="#7-7-类型检查与命令多态" class="headerlink" title="7.7 类型检查与命令多态"></a>7.7 类型检查与命令多态</h3><h4 id="7-7-1-类型检查的实现"><a href="#7-7-1-类型检查的实现" class="headerlink" title="7.7.1 类型检查的实现"></a>7.7.1 类型检查的实现</h4><p>在执行一个类型特定的命令之前，Redis 会先检查输入键的类型是否正确，然后再决定是否执行给定的命令。</p><p>类型特定命令所进行的类型检查是通过 <code>redisObject</code> 结构的 <code>type</code> 属性来实现的：</p><ul><li>在执行一个类型特定命令之前，服务器会先检查输入数据库键的值对象是否为执行命令所需的类型，如果是的话，服务器就对键执行指定的命令；</li><li>否则，服务器将拒绝执行命令，并向客户端返回一个类型错误。</li></ul><h4 id="7-7-2-多态命令的实现"><a href="#7-7-2-多态命令的实现" class="headerlink" title="7.7.2 多态命令的实现"></a>7.7.2 多态命令的实现</h4><p>Redis 除了会根据值对象的类型来判断键是否能够执行指定命令之外，还会根据值对象的编码方式，选择正确的命令实现代码来执行命令。</p><p>现在，考虑这样一个情况，如果我们对一个键执行 <code>LLEN</code> 命令，那么服务器除了要确保执行命令的是列表键之外，还需要根据键的值对象所使用的编码来选择正确的 <code>LLEN</code> 命令实现：</p><ul><li>如果列表对象的编码为 <code>ziplist</code>，那么说明列表对象的实现为压缩列表，程序将使用 <code>ziplistLen</code> 函数来返回列表的长度；</li><li>如果列表对象的编码为 <code>linkedlist</code>，那么说明列表对象的实现为双端链表，程序将使用 <code>listLength</code> 函数来返回双端链表的长度；</li></ul><p>借用面向对象方面的术语来说，我们可以认为 <code>LLEN</code> 命令是多态（<a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science" target="_blank" rel="noopener">polymorphism</a>)）的：只要执行 <code>LLEN</code> 命令的是列表键，那么无论值对象使用的是 <code>ziplist</code> 编码还是 <code>linkedlist</code> 编码，命令都可以正常执行。</p><p><code>DEL</code>、<code>EXPIRE</code> 等命令和 <code>LLEN</code> 等命令的区别在于， 前者是基于类型的多态——一个命令可以同时用于处理多种不同类型的键， 而后者是基于编码的多态——一个命令可以同时用于处理多种不同编码。</p><h3 id="7-8-内存回收"><a href="#7-8-内存回收" class="headerlink" title="7.8 内存回收"></a>7.8 内存回收</h3><p>Redis 在自己的对象系统中构建了一个引用计数（<a href="http://en.wikipedia.org/wiki/Reference_counting" target="_blank" rel="noopener">reference counting</a>）技术实现的内存回收机制， 通过这一机制，程序可以通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。</p><p>每个对象的引用计数信息由 <code>redisObject</code> 结构的 <code>refcount</code> 属性记录。</p><p>对象的引用计数信息会随着对象的使用状态而不断变化：</p><ul><li>在创建一个新对象时，引用计数的值会被初始化为 1 ；</li><li>当对象被一个新程序使用时，它的引用计数值会被增一；</li><li>当对象不再被一个程序使用时，它的引用计数值会被减一；</li><li>当对象的引用计数值变为 0 时，对象所占用的内存会被释放。</li></ul><p>修改对象引用计数的 API：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>incrRefCount</code></td><td>将对象的引用计数值增一。</td></tr><tr><td><code>decrRefCount</code></td><td>将对象的引用计数值减一， 当对象的引用计数值等于 0 时， 释放对象。</td></tr><tr><td><code>resetRefCount</code></td><td>将对象的引用计数值设置为 0， 但并不释放对象， 这个函数通常在需要重新设置对象的引用计数值时使用。</td></tr></tbody></table><h3 id="7-9-对象共享"><a href="#7-9-对象共享" class="headerlink" title="7.9 对象共享"></a>7.9 对象共享</h3><p>在 Redis 中，让多个键共享同一个值对象需要执行以下两个步骤：</p><ol><li>将数据库键的值指针指向一个现有的值对象；</li><li>将被共享的值对象的引用计数增一。</li></ol><p>目前来说，Redis 会在初始化服务器时，创建一万个字符串对象，这些对象包含了从 0 到 9999 的所有整数值， 当服务器需要用到值为 0 到 9999 的字符串对象时， 服务器就会使用这些共享对象， 而不是新创建对象。</p><p>另外，这些共享对象不单单只有字符串键可以使用，那些在数据结构中嵌套了字符串对象的对象（<code>linkedlist</code> 编码的列表对象、<code>hashtable</code> 编码的哈希对象、<code>hashtable</code> 编码的集合对象、以及 <code>zset</code> 编码的有序集合对象）都可以使用这些共享对象。</p><p>当服务器考虑将一个共享对象设置为键的值对象时，程序需要先检查给定的共享对象和键想创建的目标对象是否完全相同，只有在共享对象和目标对象完全相同的情况下，程序才会将共享对象用作键的值对象，而一个共享对象保存的值越复杂，验证共享对象和目标对象是否相同所需的复杂度就会越高，消耗的 CPU 时间也会越多：</p><ul><li>如果共享对象是保存整数值的字符串对象，那么验证操作的复杂度为 $O(1)$；</li><li>如果共享对象是保存字符串值的字符串对象，那么验证操作的复杂度为 $O(N)$；</li><li>如果共享对象是包含了多个值（或者对象的）对象，比如列表对象或者哈希对象，那么验证操作的复杂度将会是 $O(N^2)$。</li></ul><p>因此，尽管共享更复杂的对象可以节约更多的内存，但受到 CPU 时间的限制，Redis 只对包含整数值的字符串对象进行共享。</p><h3 id="7-10-对象的空转时长"><a href="#7-10-对象的空转时长" class="headerlink" title="7.10 对象的空转时长"></a>7.10 对象的空转时长</h3><p><code>lru</code> 属性记录了对象最后一次被命令程序访问的时间。</p><p><code>OBJECT IDLETIME</code> 命令可以打印出给定键的空转时长，这一空转时长就是通过将当前时间减去键的值对象的 <code>lru</code> 时间计算得出的。<code>OBJECT IDLETIME</code> 命令的实现是特殊的，这个命令在访问键的值对象时，不会修改值对象的 <code>lru</code> 属性。</p><p>除了可以被 <code>OBJECT IDLETIME</code> 命令打印出来之外，键的空转时长还有另外一项作用：如果服务器打开了 <code>maxmemory</code> 选项，并且服务器用于回收内存的算法为 <code>volatile-lru</code> 或者 <code>allkeys-lru</code>，那么当服务器占用的内存数超过了 <code>maxmemory</code> 选项所设置的上限值时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot: 关于management配置</title>
      <link href="/2017/09/08/Spring%20Boot%EF%BC%9A%E5%85%B3%E4%BA%8Emanagement%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/09/08/Spring%20Boot%EF%BC%9A%E5%85%B3%E4%BA%8Emanagement%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/spring-projects/spring-boot/issues/10200" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/issues/10200</a></p>]]></content>
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring Cloud 微服务实战》：属性加载顺序</title>
      <link href="/2017/08/30/%E3%80%8ASpring%20Cloud%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
      <url>/2017/08/30/%E3%80%8ASpring%20Cloud%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>为了能够更合理的重写各属性的值，Spring Boot 使用了下面这种较为特别的属性加载顺序：</p><ol><li>命令行中传入的参数。</li><li><code>SPRING_APPLICATION_JSON</code> 中的属性，<code>SPRING_APPLICATION_JSON</code> 是以 JSON 格式配置在系统环境变量中的内容。</li><li>java：comp/env 中的 JNDI 属性。</li><li>java 的系统属性，可以通过 <code>System.getProperties()</code> 获取的内容操作系统的环境变量。</li><li>通过 <code>random.*</code> 配置的随机属性。</li><li>位于当前应用 jar 包之外，针对不同 {profile} 环境的配置文件内容。</li><li>位于当前应用 jar 包之内，针对不同 {profile} 环境的配置文件内容。</li><li>位于当前应用 jar 包之外的 <code>application.properties</code> 配置内容。</li><li>位于当前应用 jar 包之内的 <code>application.properties</code> 配置内容。</li><li>在 <code>@Configuration</code> 注解修改的类，通过 <code>@PropertySource</code> 注解定义的属性。</li><li>应用默认属性，使用 <code>SpringApplication.setDefaultProperties</code> 定义的内容。</li></ol>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Config: 基于服务发现的客户端启动过程</title>
      <link href="/2017/08/13/Spring%20Cloud%20Config%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2017/08/13/Spring%20Cloud%20Config%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>当Config Server已注册到Spring Cloud Eureka上时，想从Config Server获取配置信息的Client可以通过从Eureka获得服务注册信息，动态发现Config Server实例。<br><a id="more"></a></p><h3 id="1-Config-Client配置"><a href="#1-Config-Client配置" class="headerlink" title="1. Config Client配置"></a>1. Config Client配置</h3><ol><li><p>在<code>application.properties</code>中配置如下项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=demo-server</span><br><span class="line">server.port=10001</span><br></pre></td></tr></table></figure></li><li><p>在<code>bootstrap-test.properties</code>中配置如下项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.config.discovery.enabled=true</span><br><span class="line">spring.cloud.config.discovery.service-id=cloud-config</span><br><span class="line">spring.cloud.config.fail-fast=true</span><br><span class="line">spring.cloud.config.profile=test</span><br><span class="line">eureka.client.serviceUrl.defaultZone = http://localhost:9090/eureka/</span><br></pre></td></tr></table></figure><p>启动时设置<code>spring.profile.active=test</code>。</p><p>也可以用<code>bootstrap.properties</code>并采用default的profile。</p></li><li><p>Config Server运行在localhost:9086，eureka server运行在localhost:9090。Config server已以服务名cloud-config注册到eureka server。Config Server使用本地文件作为仓库。</p></li></ol><h3 id="2-Config-Client处理流程："><a href="#2-Config-Client处理流程：" class="headerlink" title="2. Config Client处理流程："></a>2. Config Client处理流程：</h3><ol><li><p>构建bootstrap的context</p><p>Spring Cloud Commons的说明：</p><blockquote><p>A Spring Cloud application operates by creating a “bootstrap” context, which is a parent context for the main application. Out of the box it is responsible for loading configuration properties from the external sources, and also decrypting properties in the local external configuration files. The two contexts share an Environment which is the source of external properties for any Spring application. Bootstrap properties are added with high precedence, so they cannot be overridden by local configuration, by default.</p></blockquote><p>根据<code>org.springframework.cloud.bootstrap.BootstrapApplicationListener</code>的类说明：</p><blockquote><p> A listener that prepares a SpringApplication (e.g. populating its Environment) by delegating to {@link ApplicationContextInitializer} beans in a separate bootstrap context. The bootstrap context is a SpringApplication created from sources defined in spring.factories as {@link BootstrapConfiguration}, and initialized with external config taken from “bootstrap.properties” (or yml), instead of the normal “application.properties”.</p></blockquote><p>Spring Cloud会根据<code>boostrap.properties</code>及<code>boostrap-{profile}.properties</code>的配置构建单独的BootStrapContext。这个BootStrapContext是Main Application的父Context，其配置属性可以被子Context获取。</p></li><li><p>构建<code>CompositePropertySource</code></p><p>根据Spring-Cloud-Commons的文档：</p><blockquote><p>“bootstrap”: an optional CompositePropertySource appears with high priority if any PropertySourceLocators are found in the Bootstrap context, and they have non-empty properties. An example would be properties from the Spring Cloud Config Server. See below for instructions on how to customize the contents of this property source.</p><p>​</p><p>“applicationConfig: [classpath:bootstrap.yml]” (and friends if Spring profiles are active). If you have a bootstrap.yml (or properties) then those properties are used to configure the Bootstrap context, and then they get added to the child context when its parent is set. They have lower precedence than the application.yml (or properties) and any other property sources that are added to the child as a normal part of the process of creating a Spring Boot application. See below for instructions on how to customize the contents of these property sources.</p></blockquote><p>注意，Bootstrap获取到的远程配置具有高优先级，但<code>bootstrap.properties</code>里的配置项本身是低优先级。</p><p>在Spring Cloud Config项目中配置了<code>ConfigServicePropertySourceLocator</code>，在BootstrapContext构建阶段，它从<code>bootstrap.properties</code>中拿到<code>eureka.client.serviceUrl.defaultZone</code>，并访问eureka server，请求获取服务注册信息。在config client的console输出中可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 15:59:53.704  INFO [bootstrap,,,] 77988 --- [  restartedMain] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br><span class="line">2017-09-07 15:59:53.736  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Disable delta property : false</span><br><span class="line">2017-09-07 15:59:53.736  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : null</span><br><span class="line">2017-09-07 15:59:53.736  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : false</span><br><span class="line">2017-09-07 15:59:53.736  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Application is null : false</span><br><span class="line">2017-09-07 15:59:53.736  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : true</span><br><span class="line">2017-09-07 15:59:53.737  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Application version is -1: true</span><br><span class="line">2017-09-07 15:59:53.737  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span><br><span class="line">2017-09-07 15:59:53.964  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : The response status is 200</span><br><span class="line">2017-09-07 15:59:53.966  INFO [bootstrap,,,] 77988 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Not registering with Eureka server per configuration</span><br></pre></td></tr></table></figure><p>与此对应的eureka server的log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 15:59:53.882 DEBUG [http-nio-9090-exec-6] org.apache.coyote.http11.Http11InputBuffer: Received [GET /eu</span><br><span class="line">reka/apps/ HTTP/1.1</span><br><span class="line">Accept: application/json</span><br><span class="line">DiscoveryIdentity-Name: DefaultClient</span><br><span class="line">DiscoveryIdentity-Version: 1.4</span><br><span class="line">DiscoveryIdentity-Id: 10.236.19.51</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Host: localhost:9090</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: Java-EurekaClient/v1.6.2</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到Bootstrap阶段config client并不向eureka server注册自己，仅是获取服务列表，并从中查找config server。Bootstrap Context的工作到此结束。</p></li><li><p>从config server获取配置</p><p>config client日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 16:00:08.855 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.c.e.PropertySourcesPropertyResolver  : Could not find key &apos;spring.profiles.default&apos; in any property source</span><br><span class="line">2017-09-07 16:00:08.856 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.retry.support.RetryTemplate          : Retry: count=0</span><br><span class="line">2017-09-07 16:00:08.856 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.c.e.PropertySourcesPropertyResolver  : Could not find key &apos;spring.application.name:application&apos; in any property source</span><br><span class="line">2017-09-07 16:00:08.856 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.c.e.PropertySourcesPropertyResolver  : Found key &apos;spring.application.name&apos; in [applicationConfig: [classpath:/application.properties]] with type [String]</span><br><span class="line">2017-09-07 16:00:08.856 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.c.e.PropertySourcesPropertyResolver  : Could not find key &apos;spring.cloud.config.name:demo-server&apos; in any property source</span><br><span class="line">2017-09-07 16:00:08.856 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.c.e.PropertySourcesPropertyResolver  : Could not find key &apos;spring.cloud.config.name&apos; in any property source</span><br><span class="line">2017-09-07 16:00:08.856 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.c.e.PropertySourcesPropertyResolver  : Found key &apos;spring.cloud.config.profile&apos; in [applicationConfig: [classpath:/bootstrap-test.properties]] with type [String]</span><br><span class="line">2017-09-07 16:00:08.862  INFO [demo-server,,,] 77988 --- [restartedMain] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at: http://localhost:9086/</span><br><span class="line">2017-09-07 16:00:08.862 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.web.client.RestTemplate              : Created GET request for &quot;http://localhost:9086/demo-server/test&quot;</span><br><span class="line">2017-09-07 16:00:08.865 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.web.client.RestTemplate              : Setting request Accept header to [application/json, application/*+json]</span><br><span class="line">2017-09-07 16:00:08.866 DEBUG [demo-server,,,] 77988 --- [restartedMain] s.n.www.protocol.http.HttpURLConnection  : sun.net.www.MessageHeader@a83b1655 pairs: &#123;GET /demo-server/test HTTP/1.1: null&#125;&#123;Accept: application/json, application/*+json&#125;&#123;User-Agent: Java/1.8.0_91&#125;&#123;Host: localhost:9086&#125;&#123;Connection: keep-alive&#125;</span><br><span class="line">2017-09-07 16:00:08.997 DEBUG [demo-server,,,] 77988 --- [restartedMain] s.n.www.protocol.http.HttpURLConnection  : sun.net.www.MessageHeader@231715a35 pairs: &#123;null: HTTP/1.1 200&#125;&#123;X-Application-Context: cloud-config:native:9086&#125;&#123;Content-Type: application/json;charset=UTF-8&#125;&#123;Transfer-Encoding: chunked&#125;&#123;Date: Thu, 07 Sep 2017 08:00:08 GMT&#125;</span><br><span class="line">2017-09-07 16:00:08.998 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.web.client.RestTemplate              : GET request for &quot;http://localhost:9086/demo-server/test&quot; resulted in 200 (null)</span><br><span class="line">2017-09-07 16:00:08.998 DEBUG [demo-server,,,] 77988 --- [restartedMain] o.s.web.client.RestTemplate              : Reading [class org.springframework.cloud.config.environment.Environment] as &quot;application/json;charset=UTF-8&quot; using [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@7044a1c0]</span><br><span class="line">2017-09-07 16:00:08.999  INFO [demo-server,,,] 77988 --- [restartedMain] c.c.c.ConfigServicePropertySourceLocator : Located environment: name=demo-server, profiles=[test], label=null, version=null, state=null</span><br><span class="line">2017-09-07 16:00:08.999  INFO [demo-server,,,] 77988 --- [restartedMain] b.c.PropertySourceBootstrapConfiguration : Located property source: CompositePropertySource [name=&apos;configService&apos;, propertySources=[MapPropertySource@1198162374 [name=&apos;classpath:native/demo-server-test.properties&apos;, properties=&#123;test-key=test-value&#125;]]]</span><br></pre></td></tr></table></figure><p>此时已经到Main Application Context构建阶段，作为Bootstrap Context的子Context，它可以从<code>application.properties</code>，<code>application-{profile}.properties</code>，<code>bootstrap.properties</code>，<code>bootstrap-{profile}.properties</code>和System properties中查找访问config server所需的application name，label，profile等属性。</p><p>Moreover，config server可能配置了basic authentication。在这种情况下，config server需要在向eureka server注册的metadataMap中上传user和password参数，以供config client访问。这里的源码如下：<br><code>org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.config.discovery.enabled"</span>, matchIfMissing = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; UtilAutoConfiguration.class &#125;)</span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryClientConfigServiceBootstrapConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory</span><br><span class="line">.getLog(DiscoveryClientConfigServiceBootstrapConfiguration.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigClientProperties config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HeartbeatMonitor monitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line"><span class="meta">@EventListener</span>(ContextRefreshedEvent.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EventListener</span>(HeartbeatEvent.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heartbeat</span><span class="params">(HeartbeatEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (monitor.update(event.getValue())) &#123;</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"Locating configserver via discovery"</span>);</span><br><span class="line">String serviceId = <span class="keyword">this</span>.config.getDiscovery().getServiceId();</span><br><span class="line">List&lt;ServiceInstance&gt; instances = <span class="keyword">this</span>.client.getInstances(serviceId);</span><br><span class="line"><span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line">logger.warn(<span class="string">"No instances found of configserver ("</span> + serviceId + <span class="string">")"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ServiceInstance server = instances.get(<span class="number">0</span>);</span><br><span class="line">String url = getHomePage(server);</span><br><span class="line"><span class="keyword">if</span> (server.getMetadata().containsKey(<span class="string">"password"</span>)) &#123;</span><br><span class="line">String user = server.getMetadata().get(<span class="string">"user"</span>);</span><br><span class="line">user = user == <span class="keyword">null</span> ? <span class="string">"user"</span> : user;</span><br><span class="line"><span class="keyword">this</span>.config.setUsername(user);</span><br><span class="line">String password = server.getMetadata().get(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">this</span>.config.setPassword(password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (server.getMetadata().containsKey(<span class="string">"configPath"</span>)) &#123;</span><br><span class="line">String path = server.getMetadata().get(<span class="string">"configPath"</span>);</span><br><span class="line"><span class="keyword">if</span> (url.endsWith(<span class="string">"/"</span>) &amp;&amp; path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">url = url.substring(<span class="number">0</span>, url.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">url = url + path;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.config.setUri(url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">logger.warn(<span class="string">"Could not locate configserver via discovery"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getHomePage</span><span class="params">(ServiceInstance server)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> server.getUri().toString() + <span class="string">"/"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向eureka server注册</p><ul><li>client log：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 15:59:53.882 DEBUG [http-nio-9090-exec-6] org.apache.coyote.http11.Http11InputBuffer: Received [GET /eu</span><br><span class="line">reka/apps/ HTTP/1.1</span><br><span class="line">Accept: application/json</span><br><span class="line">DiscoveryIdentity-Name: DefaultClient</span><br><span class="line">DiscoveryIdentity-Version: 1.4</span><br><span class="line">DiscoveryIdentity-Id: 10.236.19.51</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Host: localhost:9090</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: Java-EurekaClient/v1.6.2</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>eureka server log:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 16:00:13.111 DEBUG [http-nio-9090-exec-7] org.apache.coyote.http11.Http11InputBuffer: Received [PUT /eureka/apps/DEMO-SERVER/localhost:10001:demo-server?status=UP&amp;lastDirtyTimestamp=1504771208220 HTTP/1.1</span><br><span class="line">DiscoveryIdentity-Name: DefaultClient</span><br><span class="line">DiscoveryIdentity-Version: 1.4</span><br><span class="line">DiscoveryIdentity-Id: 10.236.19.51</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Host: localhost:9090</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: Java-EurekaClient/v1.6.2</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个过程甚至发生在config client向config server请求之后。</p></li></ol><h3 id="3-一个脑洞"><a href="#3-一个脑洞" class="headerlink" title="3. 一个脑洞"></a>3. 一个脑洞</h3><p>假如我在config server的远程配置中配置另一个地址作为<code>eureka.client.serviceUrl.defaultZone</code>，config client获取到配置后会怎么办呢？</p><ol><li><p>仓库修改配置，重启config server。访问<a href="http://localhost:9086/demo-server-test.properties得到" target="_blank" rel="noopener">http://localhost:9086/demo-server-test.properties得到</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone: http://localhost:9091/eureka/</span><br></pre></td></tr></table></figure><p>实际上eureka server仍然运行在localhost:9090。</p></li><li><p>启动Demo-server。正确地从eureka server拿到了服务注册信息，然后从config server更新了配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 17:06:26.782  INFO [demo-server,,,] 78952 --- [  restartedMain] b.c.PropertySourceBootstrapConfiguration : Located property source: CompositePropertySource [name=&apos;configService&apos;, propertySources=[MapPropertySource@1069590480 [name=&apos;classpath:native/demo-server-test.properties&apos;, properties=&#123;eureka.client.serviceUrl.defaultZone=http://localhost:9091/eureka/&#125;]]]</span><br></pre></td></tr></table></figure><p>但此后无法注册到eureka server：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2017-09-07 17:10:17.698  WARN [demo-server,,,] 78952 --- [tbeatExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: java.net.ConnectException: Connection refused</span><br><span class="line">2017-09-07 17:10:17.698 ERROR [demo-server,,,] 78952 --- [tbeatExecutor-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_DEMO-SERVER/localhost:10001:demo-server - was unable to send heartbeat!</span><br><span class="line"></span><br><span class="line">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</span><br></pre></td></tr></table></figure><p>其原因在于<code>org.springframework.cloud.config.client.ConfigServicePropertySourceLocator</code>注解了<code>@Order(0)</code>，会首先执行并更新配置，client注册eureka server时，会使用从config server拿到的更新后的地址。</p></li></ol><h3 id="4-另一个脑洞"><a href="#4-另一个脑洞" class="headerlink" title="4. 另一个脑洞"></a>4. 另一个脑洞</h3><p>如果我是在Demo-Server启动并连接上eureka server后再修改config server里配置的地址呢？</p><p>这种情况下config server的仓库需要配置为git等外部仓库，push到仓库后以post访问demo-server的/refresh endpoint，则之后log里抛出无法连接的异常。</p><p>那么以这种方式，应该也同样可以动态配置其他参数。</p><p>有一点比较特殊，在这个例子中，修改的是eureka server的注册地址，且config client使用的是基于服务化的查找方式。那么即使我们此后revert掉git仓库的修改，并对demo-server发起refresh请求，由于demo-server无法连接到eureka-server，那么自然也就无法查找config server并获取更新后的配置了。若client是基于uri的形式配置的config server，则可以刷新配置。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Config：整合 Spring Cloud Bus</title>
      <link href="/2017/08/10/Spring%20Cloud%20Config%EF%BC%9A%E6%95%B4%E5%90%88%20Spring%20Cloud%20Bus/"/>
      <url>/2017/08/10/Spring%20Cloud%20Config%EF%BC%9A%E6%95%B4%E5%90%88%20Spring%20Cloud%20Bus/</url>
      <content type="html"><![CDATA[<ol><li><p>安装 kafka + ZooKeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install kafka</span></span><br></pre></td></tr></table></figure></li><li><p>启动 kafka 和 ZooKeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zookeeper-server-start /usr/<span class="built_in">local</span>/etc/kafka/zookeeper.properties</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kafka-server-start /usr/<span class="built_in">local</span>/etc/kafka/server.properties</span></span><br></pre></td></tr></table></figure></li><li><p>监听 kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kafka-console-consumer --zookeeper localhost:2181</span></span><br></pre></td></tr></table></figure></li><li><p>创建 Spring Boot 项目 cloud-config 和 demo-server，添加 actuator 和 cloud-bus 依赖：</p><p>build.gradle:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-actuator&apos;)</span><br><span class="line">compile(&apos;org.springframework.cloud:spring-cloud-starter-bus-kafka&apos;)</span><br></pre></td></tr></table></figure></li><li><p>以 <code>spring.profile.active=native</code> 启动 config server</p><p>application.properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=cloud-config</span><br><span class="line">server.port=9086</span><br><span class="line">spring.cloud.config.server.native.search-locations=classpath:native/</span><br><span class="line"></span><br><span class="line">spring.cloud.stream.kafka.binder.brokers=localhost:9092</span><br><span class="line">spring.cloud.stream.kafka.binder.zkNodes=localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>以 <code>spring.profile.active=test</code> 启动 demo-server</p><p>bootstrap.properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=demo-server</span><br><span class="line">server.port=10001</span><br><span class="line">spring.cloud.config.uri=http://localhost:9086</span><br><span class="line"></span><br><span class="line">spring.cloud.stream.kafka.binder.brokers=localhost:9092</span><br><span class="line">spring.cloud.stream.kafka.binder.zkNodes=localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>发出刷新指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">""</span> <span class="string">"localhost:9086/bus/refresh"</span></span></span><br></pre></td></tr></table></figure></li><li><p>查看 kafka console 输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">contentType "text/plain"</span><br><span class="line">originalContentType "application/json;charset=UTF-8"&#123;</span><br><span class="line">"type":"RefreshRemoteApplicationEvent",</span><br><span class="line">"timestamp":1505074284683,</span><br><span class="line">"originService":"cloud-config:native:9086",</span><br><span class="line">"destinationService":"**",</span><br><span class="line">"id":"9b4dd274-43a6-4636-b1f3-74fbc7f00ca5"&#125;</span><br><span class="line"></span><br><span class="line">contentType "text/plain"</span><br><span class="line">originalContentType "application/json;charset=UTF-8"&#123;</span><br><span class="line">"type":"AckRemoteApplicationEvent",</span><br><span class="line">"timestamp":1505074284745,</span><br><span class="line">"originService":"cloud-config:native:9086",</span><br><span class="line">"destinationService":"**",</span><br><span class="line">"id":"df8374db-d89e-43f2-b012-1ca9e58b785e",</span><br><span class="line">"ackId":"9b4dd274-43a6-4636-b1f3-74fbc7f00ca5",</span><br><span class="line">"ackDestinationService":"**",</span><br><span class="line">"event":"org.springframework.cloud.bus.event.RefreshRemoteApplicationEvent"&#125;</span><br><span class="line"></span><br><span class="line">contentType "text/plain"</span><br><span class="line">originalContentType "application/json;charset=UTF-8"&#123;</span><br><span class="line">"type":"AckRemoteApplicationEvent",</span><br><span class="line">"timestamp":1505074376165,</span><br><span class="line">"originService":"demo-server:test:10001",</span><br><span class="line">"destinationService":"**",</span><br><span class="line">"id":"490bd6ca-aa87-40d4-bb2b-6cd6c7b44b97",</span><br><span class="line">"ackId":"9b4dd274-43a6-4636-b1f3-74fbc7f00ca5",</span><br><span class="line">"ackDestinationService":"**",</span><br><span class="line">"event":"org.springframework.cloud.bus.event.RefreshRemoteApplicationEvent"&#125;</span><br></pre></td></tr></table></figure></li><li><p>自己往总线上发出的 Ack 消息自己也会收到，这一点可以通过 debug 模式的日志观察到。</p></li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Config </tag>
            
            <tag> Spring Cloud Bus </tag>
            
            <tag> kafka </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Eureka：配置项</title>
      <link href="/2017/08/04/Spring%20Cloud%20Eureka%20%E9%85%8D%E7%BD%AE%E9%A1%B9/"/>
      <url>/2017/08/04/Spring%20Cloud%20Eureka%20%E9%85%8D%E7%BD%AE%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h3 id="1-服务端配置"><a href="#1-服务端配置" class="headerlink" title="1. 服务端配置:"></a>1. 服务端配置:</h3><p>org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean</p><table><thead><tr><th>配置参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>eureka.server.enable-self-preservation</td><td>false</td><td>关闭注册中心的保护机制，Eureka 会统计15分钟之内心跳失败的比例低于85%将会触发保护机制，不剔除服务提供者，如果关闭服务注册中心将不可用的实例正确剔除</td></tr></tbody></table><a id="more"></a><h3 id="2-客户端实例相关配置"><a href="#2-客户端实例相关配置" class="headerlink" title="2. 客户端实例相关配置"></a>2. 客户端实例相关配置</h3><p>org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean</p><table><thead><tr><th>配置参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>eureka.instance.prefer-ip-address</td><td>false</td><td>不使用主机名来定义注册中心的地址，而使用IP地址的形式，如果设置了eureka.instance.ip-address 属性，则使用该属性配置的IP，否则自动获取除环路IP外的第一个IP地址</td></tr><tr><td>eureka.instance.ip-address</td><td></td><td>IP地址</td></tr><tr><td>eureka.instance.hostname</td><td></td><td>设置当前实例的主机名称</td></tr><tr><td>eureka.instance.appname</td><td></td><td>服务名，默认取 spring.application.name 配置值，如果没有则为 unknown</td></tr><tr><td>eureka.instance.lease-renewal-interval-in-seconds</td><td>30</td><td>定义服务续约任务（心跳）的调用间隔，单位：秒</td></tr><tr><td>eureka.instance.lease-expiration-duration-in-seconds</td><td>90</td><td>定义服务失效的时间，单位：秒</td></tr><tr><td>eureka.instance.status-page-url-path</td><td>/info</td><td>状态页面的URL，相对路径，默认使用HTTP访问，如果需要使用 HTTPS则需要使用绝对路径配置</td></tr><tr><td>eureka.instance.status-page-url</td><td></td><td>状态页面的URL，绝对路径</td></tr><tr><td>eureka.instance.health-check-url-path</td><td>/health</td><td>健康检查页面的URL，相对路径，默认使用HTTP访问，如果需要使用HTTPS则需要使用绝对路径配置</td></tr><tr><td>eureka.instance.health-check-url</td><td></td><td>健康检查页面的URL，绝对路径</td></tr></tbody></table><h3 id="3-客户端注册相关配置"><a href="#3-客户端注册相关配置" class="headerlink" title="3. 客户端注册相关配置:"></a>3. 客户端注册相关配置:</h3><p>org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</p><table><thead><tr><th>配置参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>eureka.client.service-url</td><td></td><td>指定服务注册中心地址，类型为 HashMap，并设置有一组默认值，默认的Key为 defaultZone；默认的Value为<a href="http://localhost:8761/eureka，如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔。如果服务注册中心加入了安全验证，这里配置的地址格式为：http://" target="_blank" rel="noopener">http://localhost:8761/eureka，如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔。如果服务注册中心加入了安全验证，这里配置的地址格式为：http://</a><username>:<password>@localhost:8761/eureka，其中<code>&lt;username&gt;</code>为安全校验的用户名；<code>&lt;password&gt;</code>为该用户的密码</password></username></td></tr><tr><td>eureka.client.fetch-registery</td><td>true</td><td>检索服务</td></tr><tr><td>eureka.client.registery-fetch-interval-seconds</td><td>30</td><td>从Eureka服务器端获取注册信息的间隔时间，单位：秒</td></tr><tr><td>eureka.client.register-with-eureka</td><td>true</td><td>启动服务注册</td></tr><tr><td>eureka.client.eureka-server-connect-timeout-seconds</td><td>5</td><td>连接Eureka Server的超时时间，单位：秒</td></tr><tr><td>eureka.client.eureka-server-read-timeout-seconds</td><td>8</td><td>读取 Eureka Server 信息的超时时间，单位：秒</td></tr><tr><td>eureka.client.filter-only-up-instances</td><td>true</td><td>获取实例时是否过滤，只保留UP状态的实例</td></tr><tr><td>eureka.client.eureka-connection-idle-timeout-seconds</td><td>30</td><td>Eureka 服务端连接空闲关闭时间，单位：秒</td></tr><tr><td>eureka.client.eureka-server-total-connections</td><td>200</td><td>从Eureka 客户端到所有Eureka服务端的连接总数</td></tr><tr><td>eureka.client.eureka-server-total-connections-per-host</td><td>50</td><td>从Eureka客户端到每个Eureka服务主机的连接总数</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《分布式服务框架：原理与实践》：RPC demo</title>
      <link href="/2017/07/20/%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9ARPC%20demo/"/>
      <url>/2017/07/20/%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9ARPC%20demo/</url>
      <content type="html"><![CDATA[<p>下面通过 Java 原生的序列化、Socket 通信、动态代理和反射机制，实现最简单 RPC 框架。它由三部分组成：</p><ol><li>服务提供者：运行在服务端，负责提供服务接口定义和服务实现类 </li><li>服务发布者：运行在 RPC 服务端，负责将本地服务发布成远程服务，供其他消费者调用 </li><li><p>本地服务代理：运行在 RPC 客户端，通过代理调用远程服务提供者，然后将结果进行封装返回给本地消费者</p><a id="more"></a></li></ol><p>代码如下：</p><ul><li><p><code>EchoService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EchoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">echo</span><span class="params">(String ping)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>EchoServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServiceImpl</span> <span class="keyword">implements</span> <span class="title">EchoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String ping)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ping + <span class="string">" --&gt; I am ok."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>RpcExporter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcExporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Executor executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exporter</span><span class="params">(String hostName, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">      serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(hostName, port));</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">              executor.execute(<span class="keyword">new</span> ExporterTask(serverSocket.accept()));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          serverSocket.close();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExporterTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Socket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">ExporterTask</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.socket = socket;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span>(ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">              ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream())) &#123;</span><br><span class="line">              String interfaceName = inputStream.readUTF();</span><br><span class="line">              </span><br><span class="line">              <span class="comment">//硬编码形式指定接口实现</span></span><br><span class="line">              <span class="keyword">if</span>(interfaceName.equals(<span class="string">"EchoService"</span>)) &#123;</span><br><span class="line">                  interfaceName = <span class="string">"EchoServiceImpl"</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              Class&lt;?&gt; service = Class.forName(interfaceName);</span><br><span class="line">              String methodName = inputStream.readUTF();</span><br><span class="line">              Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[])inputStream.readObject();</span><br><span class="line">              Method method = service.getMethod(methodName, parameterTypes);</span><br><span class="line">              Object[] arguments = (Object[])inputStream.readObject();</span><br><span class="line">              Object result = method.invoke(service.newInstance(), arguments);</span><br><span class="line">              outputStream.writeObject(result);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="keyword">if</span>(socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      socket.close();</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RpcExporter</code> 的主要作用：</p><ul><li>作为服务端，监听客户端的 TCP 连接，接收到新的客户端连接之后，将其封装成 Task，由线程池执行。</li><li>将客户端发送的码流反序列化成对象，反射调用服务实现者，获取执行结果。</li><li>将执行结果对象反序列化，通过 Socket 发送给客户端。</li><li>远程服务调用完成后，释放 Socket 等连接资源，防止句柄泄露。 </li></ul></li><li><p><code>RpcImporter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcImporter</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> S <span class="title">importer</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceClass, <span class="keyword">final</span> InetSocketAddress addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (S) Proxy.newProxyInstance(</span><br><span class="line">                serviceClass.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;serviceClass.getInterfaces()[<span class="number">0</span>]&#125;,</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket socket = <span class="keyword">null</span>;</span><br><span class="line">                ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">                ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                    socket.connect(addr);</span><br><span class="line">                    outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                    outputStream.writeUTF(serviceClass.getName());</span><br><span class="line">                    outputStream.writeUTF(method.getName());</span><br><span class="line">                    outputStream.writeObject(method.getParameterTypes());</span><br><span class="line">                    outputStream.writeObject(args);</span><br><span class="line">                    inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                    <span class="keyword">return</span> inputStream.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(socket != <span class="keyword">null</span>) socket.close();</span><br><span class="line">                    <span class="keyword">if</span>(inputStream != <span class="keyword">null</span>) inputStream.close();</span><br><span class="line">                    <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>) outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RpcImporter</code> 的主要功能：</p><ul><li>将本地的接口调用转化成 JDK 的动态代理，在动态代理中实现接口的远程调用。</li><li>创建 Socket 客户端，根据指定地址连接远程服务提供者。</li><li>将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者。</li><li>同步阻塞等待服务端返回应答，获取应答之后返回数据。</li></ul></li><li><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> port = <span class="number">9300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    RpcExporter.exporter(host, port);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">      RpcImporter&lt;EchoService&gt; importer = <span class="keyword">new</span> RpcImporter&lt;EchoService&gt;();</span><br><span class="line">      EchoService echoService = importer.importer(</span><br><span class="line">              EchoService.class, <span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line">      System.out.println(echoService.echo(<span class="string">"Are you ok ?"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you ok ? --&gt; I am ok.</span><br></pre></td></tr></table></figure></li></ul><p>存在的问题：<code>RpcExporter</code> 中为了 demo 的简便，使用了硬编码形式指定接口的实现类，实际项目中可以用 Spring IoC 的方式配置。</p>]]></content>
      
      <categories>
          
          <category> RPC </category>
          
          <category> 架构，读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《分布式服务框架：原理与实践》：SOA 与微服务</title>
      <link href="/2017/07/03/%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9ASOA%20%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2017/07/03/%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9ASOA%20%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="1-SOA-服务化架构"><a href="#1-SOA-服务化架构" class="headerlink" title="1. SOA 服务化架构"></a>1. SOA 服务化架构</h2><p>SOA 是一种粗粒度、松耦合的以服务为中心的架构，接口之间通过定义明确的协议和接口进行通信。SOA 帮助工程师站在一个新的高度理解企业级架构中各种组件的开发和部署形式，可以帮助企业系统架构以更迅速、可靠和可重用的形式规划整个业务系统。相比传统的非服务化架构，SOA 能够更加从容地应对复杂企业系统集成和需要的快速变化。<br><a id="more"></a></p><h3 id="1-1-SOA-设计的原则"><a href="#1-1-SOA-设计的原则" class="headerlink" title="1.1 SOA 设计的原则"></a>1.1 SOA 设计的原则</h3><p>SOA 面向服务的一般原则总结如下</p><ul><li>服务可复用：不管是否存在即时复用的机会，服务均被设计为支持潜在的可复用</li><li>服务共享一个标准契约：为了与服务提供者交互，消费者需要导入服务提供者的服务契约，这个契约可以是一个 IDL 文件、Java 接口定义、WSDL 文件，甚至是个接口说明文档</li><li>服务是松耦合的：服务被设计为功能相对独立、尽量不依赖其他服务的独立功能提供者</li><li>服务是底层逻辑的抽象：只有经服务契约所暴露的服务对外部世界可见，契约之外底层的实现逻辑是不可见的</li><li>服务是可组合、可编排的：多个服务可能被编排组合成一个新的服务，这允许不同逻辑抽象的自由组合，促进服务的复用</li><li>服务是自治的：逻辑由服务所控制，并位于一个清晰的边界内，服务已经在边界内被控制，不依赖其他服务</li><li>服务是无状态的：服务应当不需要管理状态信息，因此能够维持送耦合性。服务应该被尽可能设计成无状态，即便这意味着要将状态管理移至他处</li><li>服务是可被自动发现的：服务发布上线后，允许被其他消费者自动发现；当服务提供者下线后，允许消费者接收服务下线通知。</li></ul><h3 id="1-2-服务治理"><a href="#1-2-服务治理" class="headerlink" title="1.2 服务治理"></a>1.2 服务治理</h3><p>SOA 服务化之后，应用服务化之后给系统运维带来很大挑战：</p><ol><li>分布式框架下的服务调用性能</li><li>服务化架构如何支持线性扩展</li><li>如何实现高效、实时的服务多维度监控</li><li>大规模分布式环境下的故障快速定界和定位</li><li>分布式环境下海量日志在线检索、模糊查询</li><li>服务的流控、超时控制、服务升降级等管控手段</li><li>服务的划分原则，如何实现最大程度复用</li><li>……</li></ol><p>此时，SOA 服务治理是关键。SOA 服务治理主要包括如下几个方面：</p><ol><li>服务定义：SOA 治理最基础的方面就是监视服务的创建过程。必须对服务进行标识，描述其功能，确定其行为范围并设计其接口。创建服务时需要与使用这些服务的团队进行协调，以确保服务能够满足消费者需求，避免重复工作。</li><li>服务生命周期管理：服务的生命周期通常有五个主要的阶段。<ul><li>计划阶段</li><li>测试阶段</li><li>运行阶段</li><li>弃用阶段</li><li>废弃阶段</li></ul></li><li>服务版本治理：新版本的前向兼容性，灰度发布等需要按照统一的策略进行管理。</li><li>服务注册中心：需要统一的服务注册中心支持服务的订阅发布和动态发现机制。</li><li>服务监控：服务监控中心需要对服务的调用时延、成功率、吞吐率等数据进行实时采样和汇总，通过图形化报表的形式展示，以便运维人员对服务的运行质量进行实时分析和掌控。</li><li>运行期服务质量保障：包括服务限流、服务迁入迁出、服务升降级、服务权重调整和服务超时控制等，通过运行期的动态治理，可以在不重启服务的前提下达到快速提升服务运行质量的目标。</li></ol><h2 id="2-微服务架构"><a href="#2-微服务架构" class="headerlink" title="2. 微服务架构"></a>2. 微服务架构</h2><p>微服务架构（MSA）是一种服务化架构风格，通过将功能分散到各个离散的服务中以实现对解决方案的解耦。</p><h3 id="2-1-什么是微服务"><a href="#2-1-什么是微服务" class="headerlink" title="2.1 什么是微服务"></a>2.1 什么是微服务</h3><p>微服务架构的主要特征如下：</p><ol><li>原子服务：单一职责，“高内聚，松耦合”。</li><li>高密度部署：重要的服务可以独立进程部署，非核心服务可以独立打包，合设到同一个进程中，服务被高密度部署。物理机部署，可在一台服务器上部署多个服务实例进程；如果是云端部署，则可以利用 LXC 实现容器级部署，以降低部署成本，提升资源利用率。</li><li>敏捷交付：真正的 DevOps。</li><li>微自治：服务足够小，功能单一，可以独立打包、部署、升级、回滚和弹性伸缩，不依赖其他服务，实现局部自治。</li></ol><h3 id="2-2-微服务架构对比-SOA"><a href="#2-2-微服务架构对比-SOA" class="headerlink" title="2.2 微服务架构对比 SOA"></a>2.2 微服务架构对比 SOA</h3><p>两者的主要差异如下：</p><ol><li>服务拆分粒度：SOA 首先要解决的是异构系统应用的服务化；微服务强调的是服务拆分尽可能小，最好是独立的原子服务。</li><li>服务依赖：传统的 SOA 服务，由于需要重用已有的资产，存在大量的服务间依赖；微服务的设计理念是服务自治、功能单一独立，避免依赖其他服务产生耦合，耦合会带来更高的复杂度。</li><li>服务规模：传统 SOA 服务粒度比较大，多数会采用将多个服务合并打成 war 包的方案，因此服务实例数比较有限；微服务强调尽可能拆分，同时很多服务会独立部署，这将导致服务规模急剧膨胀，对服务治理和运维带来新的挑战。</li><li>架构差异：微服务化之后，服务数量的激增会引起架构质量属性的变化，例如企业集成总线 ESB 逐渐被 P2P 的虚拟总线替代；为了保证高性能、低时延，需要高性能的分布式服务框架保证微服务架构的实施。</li><li>服务治理：传统基于 SOA Governance 的静态治理转型为服务运行态微治理、实时生效。</li><li>敏捷交付：服务由小研发团队负责微服务设计、开发、测试、部署、线上治理、灰度发布和下线，运维整个生命周期支撑，实现真正的 DevOps。</li><li>快速的故障定界定位手段：故障定界定位主要包括两方面的内容。<ul><li>大规模分布式环境下海量业务/平台日志的采集、汇总和实时在线检索，支持多维度的条件检索、模糊查询，可以快速的在线查看各种系统运行日志，方便问题定位；</li><li>分布式消息跟踪，通过调用链打通业务、服务调用和异常，发现线上系统故障源；通过在线和离线调用链大数据分析，得到链路各个依赖的稳定性指标，梳理依赖链路风险表，识别系统核心功能的服务调用依赖关系，评估可能的最大风险点，针对性改进以预防风险，同时为容量规划和扩容提供数据决策依据。</li></ul></li><li>服务安全：服务调用必须能够提供安全功能，对服务的访问进行权限控制，将服务的访问权限仅限于授权使用者。服务安全访问策略有多种，例如可以通过动态生成令牌（Token）的方式做安全访问授权，服务提供者动态生成 Token 并告知服务注册中心，由注册中心告知是否告知消费方，这样就能在注册中心页面上做复杂的授权模型。</li></ol><p>总结：量变引起质变，这就是微服务架构和 SOA 服务化架构的最大差异。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> SOA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《微服务架构与实践》：微服务模型</title>
      <link href="/2017/07/01/%E3%80%8A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9E%8B/"/>
      <url>/2017/07/01/%E3%80%8A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-Martin-Fowler-对微服务架构的定义"><a href="#1-Martin-Fowler-对微服务架构的定义" class="headerlink" title="1. Martin Fowler 对微服务架构的定义"></a>1. Martin Fowler 对微服务架构的定义</h2><blockquote><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p></blockquote><a id="more"></a><h2 id="2-什么是微服务"><a href="#2-什么是微服务" class="headerlink" title="2. 什么是微服务"></a>2. 什么是微服务</h2><h3 id="2-1-多微才够微"><a href="#2-1-多微才够微" class="headerlink" title="2.1 多微才够微"></a>2.1 多微才够微</h3><p>可以有以下几个参考指标</p><ul><li>代码行数</li><li>重写时间</li><li>团队合适</li></ul><h3 id="2-2-单一职责"><a href="#2-2-单一职责" class="headerlink" title="2.2 单一职责"></a>2.2 单一职责</h3><p>微服务架构中的每个服务，都是具有业务逻辑的，符合高内聚、低耦合原则以及单一职责原则的单元，不同的服务通过“管道”的方式灵活组合，从而构建出庞大的系统。</p><h3 id="2-3-轻量级通信"><a href="#2-3-轻量级通信" class="headerlink" title="2.3 轻量级通信"></a>2.3 轻量级通信</h3><p>对于微服务而言，通过使用语言无关、平台无关的轻量级通信机制，使服务于服务之间的协作变得更加标准化，也就意味着在保持服务外部通信机制轻量级的情况下，团队可以选择更适合的语言、工具或者平台来开发服务本身。</p><h3 id="2-4-独立性"><a href="#2-4-独立性" class="headerlink" title="2.4 独立性"></a>2.4 独立性</h3><p>在微服务架构中，每个服务都是一个独立的业务单元，当对某个服务进行改变时，对其他的服务不会产生影响。换句话说，服务与服务之间是独立的。</p><p>对于每个服务，都有独立的代码库。当对当前服务的代码进行修改后，并不会影响其他服务。从代码库的层面而言，服务与服务是隔离的。</p><p>对于每个服务，都有独立的测试机制，并不必担心破坏其他功能而需要建立大范围的回归测试。也就是说，从测试的角度而言，服务与服务之间是松耦合的。</p><h3 id="2-5-进程隔离"><a href="#2-5-进程隔离" class="headerlink" title="2.5 进程隔离"></a>2.5 进程隔离</h3><p>在微服务架构中，应用程序由多个服务组成，每个服务都是一个具有高度自治的独立业务实体。通常情况下，每个服务都能运行在一个独立的操作系统进程中，这就意味着不同的服务能非常容易地被部署到不同的主机上。</p><p>综上所述，微服务架构其实是将单一的应用程序划分为一组小的服务，每个服务都是具有业务属性的独立单元，同时能够被独立开发、独立运行、独立测试以及独立部署。</p><h2 id="3-微服务与-SOA"><a href="#3-微服务与-SOA" class="headerlink" title="3. 微服务与 SOA"></a>3. 微服务与 SOA</h2><p>对于微服务的概念而言，它是传统 SOA 的定义的一个子集；而对于其实现方式而言，它是一种更符合现代化互联网发展趋势的实践，是一种更容易帮助企业或组织有效并成功实施服务架构的实践。</p><h2 id="4-微服务的本质"><a href="#4-微服务的本质" class="headerlink" title="4. 微服务的本质"></a>4. 微服务的本质</h2><ul><li>服务作为组件</li><li>围绕业务组织团队</li><li>关注产品而非项目</li><li>技术多样性</li><li>业务数据独立</li><li>基础设施自动化</li><li>演进式架构</li></ul>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring 实战》：Spring MVC</title>
      <link href="/2017/05/31/%E3%80%8ASpring%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ASpring-MVC/"/>
      <url>/2017/05/31/%E3%80%8ASpring%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ASpring-MVC/</url>
      <content type="html"><![CDATA[<h2 id="1-请求处理流程"><a href="#1-请求处理流程" class="headerlink" title="1. 请求处理流程"></a>1. 请求处理流程</h2><p><img src="https://user-images.githubusercontent.com/12514722/30251731-612d2c8c-9698-11e7-8c34-df6e0f96bd8f.png" alt=""><br><a id="more"></a><br>在请求离开浏览器时①，会带有用户所请求内容的信息，至少会包含请求的 URL。</p><p>请求旅程的第一站是 Spring 的 <code>DispatcherServlet</code>。Spring MVC 所有的请求都会通过一个前端控制器（front controller）Servlet。前端控制器是常用的 Web 应用程序模式，在这里一个单实例的 Servlet 将请求委托给应用程序的其他组件来执行实际的处理。在 Spring MVC 中，<code>DispatcherServlet</code> 就是前端控制器。</p><p><code>DispatcherServlet</code> 的任务是将请求发送给 Spring MVC 控制器（controller）。控制器是一个用于处理请求的 Spring 组件。在典型的应用程序中可能会有多个控制器，<code>DispatcherServlet</code> 需要知道应该将请求发送给哪个控制器。所以<code>DispatcherServlet</code> 以会查询一个或多个处理器映射（handler mapping）②来确定请求的下一站在哪里。处理器映射会根据请求所携带的 URL 信息来进行决策。</p><p>一旦选择了合适的控制器，<code>DispatcherServlet</code> 会将请求发送给选中的控制器③。到了控制器，请求会卸下其负载（用户提交的信息）并耐心等待控制器处理这些信息。（实际上，设计良好的控制器本身只处理很少甚至不处理工作，而是将业务逻辑委托给一个或多个服务对象进行处理。）</p><p>控制器在完成逻辑处理后，通常会产生一些信息，这些信息需要返回给用户并在浏览器上显示。这些信息被称为模型（model）。不过仅仅给用户返回原始的信息是不够的——这些信息需要以用户友好的方式进行格式化，一般会是 HTML。所以，信息需要发送给一个视图（view），通常会是 JSP。</p><p>控制器所做的最后一件事就是将模型数据打包，并且标示出用于渲染输出的视图名。它接下来会将请求连同模型和视图名发送回 <code>DispatcherServlet</code>④。</p><p>这样，控制器就不会与特定的视图相耦合，传递给 <code>DispatcherServlet</code> 的视图名并不直接表示某个特定的 JSP。实际上，它甚至并不能确定视图就是 JSP。相反，它仅仅传递了一个逻辑名称，这个名字将会用来查找产生结果的真正视图。<code>DispatcherServlet</code> 将会使用视图解析器（view resolver）⑤来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是 JSP。</p><p>既然 <code>DispatcherServlet</code> 已经知道由哪个视图渲染结果，那请求的任务基本上也就完成了。它的最后一站是视图的实现（可能是 JSP）⑥，在这里它交付模型数据。请求的任务就完成了。视图将使用模型数据渲染输出，这个输出会通过响应对象传递给客户端。</p><h2 id="2-基于-Java-类配置的-DispatcherServlet"><a href="#2-基于-Java-类配置的-DispatcherServlet" class="headerlink" title="2. 基于 Java 类配置的 DispatcherServlet"></a>2. 基于 Java 类配置的 DispatcherServlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispactcherServletInitializer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() <span class="comment">// 将DispatcherServlet映射到“/”</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected class&lt;?&gt;[] getRootConfigClasses()</span><br><span class="line">    &#123;</span><br><span class="line">        return new class&lt;?&gt;[] &#123;RootConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected class&lt;?&gt;[] getServletConfigClasses() // 指定配置类</span><br><span class="line">    &#123;</span><br><span class="line">        return new class&lt;?&gt;[] &#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 的任意类都会自动地配置 <code>DispatcherServlet</code> 和 Spring 应用上下文，Spring 的应用上下文会位于应用程序的 Servlet 上下文之中。</p><p>在 Servlet 3.0 环境中，容器会在类路径中查找实现 <code>javax.servlet.ServletContainerInitializer</code> 接口的类，如果能发现的话，就会用它来配置 Servlet 容器。</p><p>Spring 提供了这个接口的实现，名为 <code>SpringServletContainerInitializer</code>，这个类反过来又会查找实现 <code>WebApplicationInitializer</code> 的类并将配置的任务交给它们来完成。Spring 3.2 引入了一个便利的 <code>WebApplicationInitializer</code> 基础实现，也就是 <code>AbstractAnnotationConfigDispatcherServletInitializer</code>。因为我们的 <code>Spittr-WebAppInitializer</code> 扩展了 <code>AbstractAnnotationConfigDispatcherServletInitializer</code>（同时也就实现了 <code>WebApplicationInitializer</code>），因此当部署到 Servlet 3.0 容器中的时候，容器会自动发现它，并用它来配置 Servlet 上下文。</p><p>在上述程序中，<code>SpittrWebAppInitializer</code> 重写了三个方法：第一个方法 <code>getServletMappings()</code>，它会将一个或多个路径映射到 <code>DispatcherServlet</code> 上。在本例中，它映射的是“/”，这表示它会是应用的默认 Servlet。它会处理进入应用的所有请求。</p><p><code>AbstractAnnotationConfigDispatcherServletInitializer</code> 会同时创建 <code>DispatcherServlet</code> 和 <code>ContextLoaderListener</code>。<code>GetServletConfigClasses()</code> 方法返回的带有 <code>@Configuration</code> 注解的类将会用来定义 <code>DispatcherServlet</code> 应用上下文中的 bean。<code>getRootConfigClasses()</code> 方法返回的带有 <code>@Configuration</code> 注解的类将会用来配置 <code>ContextLoaderListener</code> 创建的应用上下文中的 bean。</p><h2 id="3-ViewResolver"><a href="#3-ViewResolver" class="headerlink" title="3. ViewResolver"></a>3. ViewResolver</h2><p>Spring 自带了 12 个视图解析器，能够将逻辑视图名转换为物理实现。</p><table><thead><tr><th>视图解析器</th><th>描述</th></tr></thead><tbody><tr><td>BeanNameViewResolver</td><td>将视图解析为 Spring 应用上下文中的 bean，其中 bean 的 ID 与视图的名字相同</td></tr><tr><td>ContentNegotiatingViewResolver</td><td>通过考虑客户端需要的内容类型来解析视图，委托给另外一个能够产生对应内容类型的视图解析器</td></tr><tr><td>FreeMarkerViewResolver</td><td>将视图解析为 FreeMarker 模板</td></tr><tr><td>InternalResourceViewResolver</td><td>将视图解析为 Web 应用的内部资源（一般为 JSP）</td></tr><tr><td>JasperReportsViewResolver</td><td>将视图解析为 JasperReports 定义</td></tr><tr><td>ResourceBundleViewResolver</td><td>将视图解析为资源 bundle（一般为属性文件）</td></tr><tr><td>TilesViewResolver</td><td>将视图解析为 Apache Tile 定义，其中 tile ID 与视图名称相同。注意有两个不同的 TilesViewResolver 实现，分别对应于 Tiles 2.0 和 Tiles 3.0</td></tr><tr><td>UrlBasedViewResolver</td><td>直接根据视图的名称解析视图，视图的名称会匹配一个物理视图的定义</td></tr><tr><td>VelocityLayoutViewResolver</td><td>将视图解析为 Velocity 布局，从不同的 Velocity 模板中组合页面</td></tr><tr><td>VelocityViewResolver</td><td>将视图解析为 Velocity 模板</td></tr><tr><td>XmlViewResolver</td><td>将视图解析为特定 XML 文件中的 bean 定义。类似于 BeanNameViewResolver</td></tr><tr><td>XsltViewResolver</td><td>将视图解析为 XSLT 转换后的结果</td></tr></tbody></table><h2 id="4-HTTPMessageConverter"><a href="#4-HTTPMessageConverter" class="headerlink" title="4. HTTPMessageConverter"></a>4. HTTPMessageConverter</h2><p>消息转换（message conversion）它能够将控制器产生的数据转换为服务于客户端的表述形式。Spring 提供了多个 HTTP 信息转换器，用于实现资源表述与各种 Java 类型之间的互相转换。</p><table><thead><tr><th>信息转换器</th><th>描述</th></tr></thead><tbody><tr><td>AtomFeedHttpMessageConverter</td><td>Rome Feed 对象和 Atom feed（媒体类型 application/atom+xml）之间的互相转换。如果 Rome 包在类路径下将会进行注册</td></tr><tr><td>BufferedImageHttpMessageConverter</td><td>BufferedImages 与图片二进制数据之间互相转换</td></tr><tr><td>ByteArrayHttpMessageConverter</td><td>读取/写入字节数组。从所有媒体类型(*/*)中读取，并以 application/octet-stream 格式写入</td></tr><tr><td>FormHttpMessageConverter</td><td>将 application/x-www-form-urlencoded 内容读入到 <code>MultiValueMap&lt;String,String&gt;</code> 中，也会将 <code>MultiValueMap&lt;String,String&gt;</code> 写入到 application/x-www-form-urlencoded 中或将 <code>MultiValueMap&lt;String,Object&gt;</code> 写入到 multipart/form-data 中</td></tr><tr><td>Jaxb2RootElementHttpMessageConverter</td><td>在 XML（ text/xml 或 application/xml）和使用 JAXB2 注解的对象间互相读取和写入。如果 JAXB v2 库在类路径下，将进行注册</td></tr><tr><td>MappingJackson2HttpMessageConverter</td><td>在 JSON 和类型化的对象或非类型化的 HashMap 间互相读取和写入。如果 Jackson 2 JSON 库字类路径下，将进行注册</td></tr><tr><td>MarshallingHttpMessageConverter</td><td>使用注入的编排器和解排器（marshaller 和 unmarshaller）来读取和写入 XML。支持的编排器和解排器包括 Castor、JAXB2、JIBX、XMLBeans 以及 Xstream</td></tr><tr><td>ResourceHttpMessageConverter</td><td>读取或写入 Resource</td></tr><tr><td>RssChannelHttpMessageConverter</td><td>在 RSS feed 和 Rome Channel 对象间互相读取或写入。如果 Rome 库在类路径下，将进行注册</td></tr><tr><td>SourceHttpMessageConverter</td><td>在 XML 和 <code>javax.xml.transform.Source</code> 对象间互相读取和写入。默认注册</td></tr><tr><td>StringHttpMessageConverter</td><td>将所有媒体类型(*/*)读取为 String。将 String 写入为 text/plain</td></tr><tr><td>XmlAwareFormHttpMessageConverter</td><td>FormHttpMessageConverter 的扩展，使用 SourceHttpMessageConverter 来支持基于 XML 的部分</td></tr></tbody></table><p>表中的 HTTP 信息转换器除了其中的五个以外都是自动注册的，所以要使用它们的话，不需要 Spring 配置。但是为了支持它们，需要添加一些库到应用程序的类路径下。</p><h2 id="5-异常"><a href="#5-异常" class="headerlink" title="5. 异常"></a>5. 异常</h2><p>Spring 的一些异常会默认映射为 HTTP 状态码。</p><table><thead><tr><th>Spring 异常</th><th>HTTP 状态码</th></tr></thead><tbody><tr><td>BindException</td><td>400 - Bad Request</td></tr><tr><td>ConversionNotSupportedException</td><td>500 - Internal Server Error</td></tr><tr><td>HttpMediaTypeNotAcceptableExceptio</td><td>406 - Not Acceptable</td></tr><tr><td>HttpMediaTypeNotSupportedException</td><td>415 - Unsupported Media Type</td></tr><tr><td>HttpMessageNotReadableException</td><td>400 - Bad Request</td></tr><tr><td>MissingServletRequestParameterException</td><td>400 - Bad Request</td></tr><tr><td>MissingServletRequestPartException</td><td>400 - Bad Requestn</td></tr><tr><td>NoSuchRequestHandlingMethodExceptio</td><td>404 - Not Found</td></tr><tr><td>TypeMismatchException</td><td>400 - Bad Request</td></tr><tr><td>HttpMessageNotWritableException</td><td>500 - Internal Server Error</td></tr><tr><td>HttpRequestMethodNotSupportedException</td><td>405 - Method Not Allowed</td></tr></tbody></table><p>异常一般会由 Spring 自身抛出，作为 <code>DispatcherServlet</code> 处理过程中或执行校验时出现问题的结果。</p><p>Spring 提供了一种机制，能够通过 <code>@ResponseStatus</code> 注解将异常映射为 HTTP 状态码。（作用于自定义异常类上）</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring Boot 实战》: @Enable* 注解的工作原理</title>
      <link href="/2017/05/19/%E3%80%8ASpring%20Boot%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9A@Enable*%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2017/05/19/%E3%80%8ASpring%20Boot%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9A@Enable*%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>通过观察 <code>@Enable*</code> 注解的源码，可以发现所有的注解都有一个 <code>@Import</code> 注解。</p><p><code>@Import</code> 注解是用来导入配置类的，这也就是说这些自动开启的实现其实是导入了一些自动配置的 Bean。<br><a id="more"></a></p><h2 id="Import-注解导入配置方式的三种类型"><a href="#Import-注解导入配置方式的三种类型" class="headerlink" title="@Import 注解导入配置方式的三种类型"></a>@Import 注解导入配置方式的三种类型</h2><h3 id="1-直接导入配置类"><a href="#1-直接导入配置类" class="headerlink" title="1. 直接导入配置类"></a>1. 直接导入配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(&#123;SchedulingConfiguration.class&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableScheduling &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接导入配置类 <code>SchedulingConfiguration</code>，这个类注解了 <code>@Configuration</code>，且注册了一个 <code>scheduledAnnotationProcessor</code> 的 Bean。</p><h3 id="2-依据条件选择配置类"><a href="#2-依据条件选择配置类" class="headerlink" title="2. 依据条件选择配置类"></a>2. 依据条件选择配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(AsyncConfigurationSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAsync &#123;</span><br><span class="line">    Class&lt;? extends Annotation&gt; annotation() <span class="keyword">default</span> Annotation.class;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">    <span class="function">AdviceMode <span class="title">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AsyncConfigurationSelector</code> 通过条件来选择需要导入的配置类，<code>AsyncConfigurationSelector</code> 的根接口为 <code>ImportSelector</code>，这个接口需要重写 <code>selectImports</code> 方法，在此方法内进行事先条件判断。若 <code>adviceMode</code> 为 <code>PORXY</code>，则返回 <code>ProxyAsyncConfiguration</code> 这个配置类；若 <code>activeMode</code> 为 <code>ASPECTJ</code>，则返回 <code>AspectJAsyncConfiguration</code> 配置类，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfigurationSelector</span> <span class="keyword">extends</span> <span class="title">AdviceModeImportSelector</span>&lt;<span class="title">EnableAsync</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME =</span><br><span class="line">            <span class="string">"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ProxyAsyncConfiguration&#125; or &#123;<span class="doctag">@code</span> AspectJAsyncConfiguration&#125; for</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> PROXY&#125; and &#123;<span class="doctag">@code</span> ASPECTJ&#125; values of &#123;<span class="doctag">@link</span> EnableAsync#mode()&#125;, respectively</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (adviceMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROXY:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; ProxyAsyncConfiguration.class.getName() &#125;;</span><br><span class="line">            <span class="keyword">case</span> ASPECTJ:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME &#125;;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-动态注册-Bean"><a href="#3-动态注册-Bean" class="headerlink" title="3. 动态注册 Bean"></a>3. 动态注册 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(AspectJAutoProxyRegistrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AspectJAutoProxyRegistrar</code> 实现了 <code>ImportBeanDefinitionRegistrar</code> 接口，<code>ImportBeanDefinitionRegistrar</code> 的作用是在运行时自动添加 Bean 到已有的配置类，通过重写方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span></span><br></pre></td></tr></table></figure><p>其中，<code>AnnotationMetadata</code> 参数用来获得当前配置类上的注解；<code>BeanDefinittionRegistry</code> 参数用来注册 Bean。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span></span><br><span class="line"><span class="comment">     * of the @&#123;<span class="doctag">@link</span> EnableAspectJAutoProxy#proxyTargetClass()&#125; attribute on the importing</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line"></span><br><span class="line">        AnnotationAttributes enableAJAutoProxy =</span><br><span class="line">                AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class="line">        <span class="keyword">if</span> (enableAJAutoProxy.getBoolean(<span class="string">"proxyTargetClass"</span>)) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring Boot 实战》: Spring Boot 自动配置原理</title>
      <link href="/2017/05/11/%E3%80%8ASpring%20Boot%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ASpring%20Boot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
      <url>/2017/05/11/%E3%80%8ASpring%20Boot%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ASpring%20Boot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>SpringBoot 框架可用于创建可执行的 Spring 应用程序，采用了习惯优于配置的方法。其中奥秘在于 <code>@EnableAutoConfiguration</code> 注释，此注释自动载入应用程序所需的所有 Bean——这依赖于 SpringBoot 在类路径中的查找。<br><a id="more"></a></p><h2 id="1-SpringBootApplication"><a href="#1-SpringBootApplication" class="headerlink" title="1. @SpringBootApplication"></a>1. @SpringBootApplication</h2><p>首先来看 <code>@SpringBootApplication</code> 注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.TypeExcludeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration.class, attribute = <span class="string">"exclude"</span>)</span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment"> * applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration.class, attribute = <span class="string">"excludeName"</span>)</span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base packages to scan for annotated components. Use &#123;<span class="doctag">@link</span> #scanBasePackageClasses&#125;</span></span><br><span class="line"><span class="comment"> * for a type-safe alternative to String-based package names.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> base packages to scan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = ComponentScan.class, attribute = <span class="string">"basePackages"</span>)</span><br><span class="line">String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Type-safe alternative to &#123;<span class="doctag">@link</span> #scanBasePackages&#125; for specifying the packages to</span></span><br><span class="line"><span class="comment"> * scan for annotated components. The package of each class specified will be scanned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Consider creating a special no-op marker class or interface in each package that</span></span><br><span class="line"><span class="comment"> * serves no purpose other than being referenced by this attribute.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> base packages to scan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = ComponentScan.class, attribute = <span class="string">"basePackageClasses"</span>)</span><br><span class="line">Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解上存在元注解<code>@EnableAutoConfiguration</code>，这就是 Spring Boot 自动配置实现的核心入口，其定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment"> * applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见通过<code>@Import</code>注解，引入了<code>EnableAutoConfigurationImportSelector</code>。</p><h2 id="2-EnableAutoConfigurationImportSelector"><a href="#2-EnableAutoConfigurationImportSelector" class="headerlink" title="2. @EnableAutoConfigurationImportSelector"></a>2. @EnableAutoConfigurationImportSelector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationImportSelector</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">AutoConfigurationImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getClass().equals(EnableAutoConfigurationImportSelector.class)) &#123;</span><br><span class="line"><span class="keyword">return</span> getEnvironment().getProperty(</span><br><span class="line">EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class,</span><br><span class="line"><span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类 <code>AutoConfigurationImportSelector</code> 的 <code>selectImports</code> 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata  </span><br><span class="line">                .getAnnotationAttributes(EnableAutoConfiguration.class.getName(),  </span><br><span class="line">                        <span class="keyword">true</span>));  </span><br><span class="line">  </span><br><span class="line">        Assert.notNull(attributes, <span class="string">"No auto-configuration attributes found. Is "</span>  </span><br><span class="line">                + metadata.getClassName()  </span><br><span class="line">                + <span class="string">" annotated with @EnableAutoConfiguration?"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Find all possible auto configuration classes, filtering duplicates  </span></span><br><span class="line">        List&lt;String&gt; factories = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="keyword">new</span> LinkedHashSet&lt;String&gt;(  </span><br><span class="line">                SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,  </span><br><span class="line">                        <span class="keyword">this</span>.beanClassLoader)));  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Remove those specifically disabled  </span></span><br><span class="line">        factories.removeAll(Arrays.asList(attributes.getStringArray(<span class="string">"exclude"</span>)));  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Sort  </span></span><br><span class="line">        factories = <span class="keyword">new</span> AutoConfigurationSorter(<span class="keyword">this</span>.resourceLoader)  </span><br><span class="line">                .getInPriorityOrder(factories);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> factories.toArray(<span class="keyword">new</span> String[factories.size()]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法使用了 Spring Core 包的 <code>SpringFactoriesLoader</code> 类的 <code>loadFactoryNamesof()</code> 方法，查询 <code>META-INF/spring.factories</code> 文件下以 <code>EnableAutoConfiguration</code> 的全限定名（<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>）为 key 的对应值，其结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure  </span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\  </span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jms.hornetq.HornetQAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchDataAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoDataAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.velocity.VelocityAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.GzipFilterAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\  </span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration</span><br></pre></td></tr></table></figure><p>在这个文件中，可以看到一系列 Spring Boot 自动配置的列表。</p><h2 id="3-MongoAutoConfiguration"><a href="#3-MongoAutoConfiguration" class="headerlink" title="3. MongoAutoConfiguration"></a>3. MongoAutoConfiguration</h2><p>以 <code>MongoAutoConfiguration</code> 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Mongo.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MongoProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mongo mongo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mongo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mongo.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mongo <span class="title">mongo</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mongo = <span class="keyword">this</span>.properties.createMongoClient();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mongo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类进行了简单的 Spring 配置，声明了 MongoDB 所需典型 Bean，并且和其他很多自动配置类一样，重度依赖于 Spring Boot 的注解（<code>@Condition*</code>）。</p><h2 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h2><p>以 DEBUG 级 log 启动 Springboot 项目，Spring Boot 会产生一个报告，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   MessageSourceAutoConfiguration</span><br><span class="line">      - @ConditionalOnMissingBean (types: org.springframework.context.MessageSource; SearchStrategy: all) found no beans (OnBeanCondition)</span><br><span class="line"></span><br><span class="line">   JmxAutoConfiguration</span><br><span class="line">      - @ConditionalOnClass classes found: org.springframework.jmx.export.MBeanExporter (OnClassCondition)</span><br><span class="line">      - SpEL expression on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration: $&#123;spring.jmx.enabled:true&#125; (OnExpressionCondition)</span><br><span class="line">      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: all) found no beans (OnBeanCondition)</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration</span><br><span class="line">      - found web application StandardServletEnvironment (OnWebApplicationCondition)</span><br><span class="line">      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet (OnClassCondition)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DataSourceAutoConfiguration</span><br><span class="line">      - required @ConditionalOnClass classes not found: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   DataSourceTransactionManagerAutoConfiguration</span><br><span class="line">      - required @ConditionalOnClass classes not found: org.springframework.jdbc.core.JdbcTemplate,org.springframework.transaction.PlatformTransactionManager (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   MongoAutoConfiguration</span><br><span class="line">      - required @ConditionalOnClass classes not found: com.mongodb.Mongo (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   FallbackWebSecurityAutoConfiguration</span><br><span class="line">      - SpEL expression on org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration: !$&#123;security.basic.enabled:true&#125; (OnExpressionCondition)</span><br><span class="line"></span><br><span class="line">   SecurityAutoConfiguration</span><br><span class="line">      - required @ConditionalOnClass classes not found: org.springframework.security.authentication.AuthenticationManager (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   EmbeddedServletContainerAutoConfiguration.EmbeddedJetty</span><br><span class="line">      - required @ConditionalOnClass classes not found: org.eclipse.jetty.server.Server,org.eclipse.jetty.util.Loader (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver</span><br><span class="line">      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.LocaleResolver; SearchStrategy: all) found no beans (OnBeanCondition)</span><br><span class="line">      - SpEL expression: '$&#123;spring.mvc.locale:&#125;' != '' (OnExpressionCondition)</span><br><span class="line"></span><br><span class="line">   WebSocketAutoConfiguration</span><br><span class="line">      - required @ConditionalOnClass classes not found: org.springframework.web.socket.WebSocketHandler,org.apache.tomcat.websocket.server.WsSci (OnClassCondition)</span><br></pre></td></tr></table></figure><p>对于每个自动配置，可以看到它启动或失败的原因。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring Boot 实战》: Spring EL 和资源调用</title>
      <link href="/2017/05/04/%E3%80%8ASpring%20Boot%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ASpring%20EL%E5%92%8C%E8%B5%84%E6%BA%90%E8%B0%83%E7%94%A8/"/>
      <url>/2017/05/04/%E3%80%8ASpring%20Boot%20%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ASpring%20EL%E5%92%8C%E8%B5%84%E6%BA%90%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Spring EL 也就是 Spring 表达式语言，支持在 xml 和注解中使用表达式，类似于 JSP 的 EL 表达式语言。</p><p>Spring 开发中我们可能经常涉及到调用各种资源的情况，包含普通文件、网址、配置文件、系统环境变量等，我们可以使用 Spring 的表达式语言实现资源的注入。<br><a id="more"></a></p><ol><li><p>因为需要将 file 转换成字符串，我们增加 commons-io 可以简化文件的相关操作。<code>build.gradle</code> 中增加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'commons-io'</span>, <span class="string">name:</span> <span class="string">'commons-io'</span>, <span class="string">version:</span> <span class="string">'2.5'</span></span><br></pre></td></tr></table></figure></li><li><p>resource 目录下新建 <code>test.txt</code>，内容随意。</p></li><li><p>resource 目录下新建新建 <code>test.properties</code> 文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project.name=SpringEL</span><br></pre></td></tr></table></figure></li><li><p>需要被注入的 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"DemoService类的属性"</span>)<span class="comment">//注入字符串</span></span><br><span class="line">    <span class="keyword">private</span> String another;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAnother</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> another;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnother</span><span class="params">(String another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.another = another;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.springel"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:test.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"I LOVE YOU!"</span>)<span class="comment">//注入字符串</span></span><br><span class="line">    <span class="keyword">private</span> String normal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)<span class="comment">//获取操作系统名</span></span><br><span class="line">    <span class="keyword">private</span> String osName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123; T(java.lang.Math).random() * 100.0 &#125;"</span>)<span class="comment">//注入表达式结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> randomNumber;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;demoService.another&#125;"</span>)<span class="comment">//注入其他Bean的属性</span></span><br><span class="line">    <span class="keyword">private</span> String fromAnother;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;project.name&#125;"</span>)<span class="comment">//注入配置文件</span></span><br><span class="line">    <span class="keyword">private</span> String projectName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"classpath:cn/hncu/p2_2_2SpringEL/test.txt"</span>)</span><br><span class="line">    <span class="keyword">private</span> Resource testFile;<span class="comment">//注意这个Resource是:org.springframework.core.io.Resource;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//注入配置文件</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"http://www.baidu.com"</span>)<span class="comment">//注入网址资源</span></span><br><span class="line">    <span class="keyword">private</span> Resource testUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//注入配置文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">propertyConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"normal:"</span>+normal);</span><br><span class="line">            System.out.println(<span class="string">"osName:"</span>+osName);</span><br><span class="line">            System.out.println(<span class="string">"randomNumber:"</span>+randomNumber);</span><br><span class="line">            System.out.println(<span class="string">"fromAnother:"</span>+fromAnother);</span><br><span class="line">            System.out.println(<span class="string">"projectName:"</span>+projectName);</span><br><span class="line">            System.out.println(<span class="string">"测试文件:"</span>+IOUtils.toString(testFile.getInputStream()));</span><br><span class="line">            System.out.println(<span class="string">"配置文件project.author:"</span>+environment.getProperty(<span class="string">"project.author"</span>));</span><br><span class="line">            System.out.println(<span class="string">"网址资源:"</span>+IOUtils.toString(testUrl.getInputStream()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入配置配件需要使用 <code>@PropertySource</code> 指定文件地址，若使用 <code>@Value</code> 注入，则要配置一个 <code>PropertySourcesPlaceholderConfigurer</code> 的 Bean。 注意，<code>@Value(&quot;${project.name}&quot;)</code> 使用的是 “$” 而不是 “#”。</p></li><li><p>运行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ElConfig.class);</span><br><span class="line">        ElConfig resourceService = context.getBean(ElConfig.class);</span><br><span class="line">        resourceService.outputResource();</span><br><span class="line">        context.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《深入分析 Java Web 技术内幕》：JVM 内存管理</title>
      <link href="/2017/04/28/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%20Java%20Web%20%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B%EF%BC%9AJVM%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2017/04/28/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%20Java%20Web%20%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B%EF%BC%9AJVM%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="1-JVM-内存结构"><a href="#1-JVM-内存结构" class="headerlink" title="1. JVM 内存结构"></a>1. JVM 内存结构</h2><p>在 Java 虚拟机规范中将 Java 运行时数据划分为 6 种，分别为：</p><ul><li>PC 寄存器数据；</li><li>Java 栈；</li><li>堆；</li><li>方法区；</li><li>本地方法区；</li><li>运行时常量池。</li></ul><a id="more"></a><h3 id="1-1-Java-栈"><a href="#1-1-Java-栈" class="headerlink" title="1.1 Java 栈"></a>1.1 Java 栈</h3><p>Java 栈总是和线程关联在一起，每当创建一个线程时，JVM 就会为这个线程创建一个对应的 Java 栈，在这个 Java 栈中又会含有多个栈帧（Frames），这些栈帧是与每个方法关联起来的，每运行一个方法就创建一个栈帧，每个栈帧会含有一些内部变量（在方法内定义的变量）、操作栈和方法返回值等信息。</p><p>每当一个方法执行完成时，这个栈帧就会弹出栈帧的元素作为这个方法的返回值，并清除这个栈帧，Java 栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作栈使用，当在这个栈帧中调用另外一个方法时，与之对应的一个新的栈帧又被创建，这个新创建的栈帧又被放到 Java 栈的顶部，变为当前的活动栈帧。同样现在只有这个栈帧的本地变量才能被使用，当在这个栈帧中所有指令执行完成时这个栈帧移出 Java 栈，刚才的那个栈帧又变为活动栈帧，前面的栈帧的返回值又变为这个栈帧的操作栈中的一个操作数。如果前面的栈帧没有返回值，那么当前的栈帧的操作栈的操作数没有变化。</p><p>由于 Java 栈是与 Java 线程对应起来的，这个数据不是线程共享的，所以我们不用关心它的数据一致性问题，也不会存在同步锁的问题。</p><h3 id="1-2-方法区"><a href="#1-2-方法区" class="headerlink" title="1.2 方法区"></a>1.2 方法区</h3><p>JVM 方法区是用于存储类结构信息的地方，class 文件会被 JVM 解析成几个部分，这些不同的部分在这个 class 被加载到 JVM 时，会被存储在不同的数据结构中，其中的常量池、域、方法数据、方法体、构造函数，包括类中的专用方法、实例初始化、接口初始化都存储在这个区域。</p><p>方法区这个存储区域也属于后面介绍的 Java 堆中的一部分，也就是我们通常所说的 Java 堆中的永久区。这个区域可以被所有的线程共享，并且它的大小可以通过参数来设置。</p><p>这个方法区存储区域的大小一般在程序启动后的一段时间内就是固定的了，JVM 运行一段时间后，需要加载的类通常都已经加载到 JVM 中了。但是有一种情况是需要注意的，那就是在项目中如果存在对类的动态编译，而且是同样一个类的多次编译，那么需要观察方法区的大小是否能满足类存储。</p><h3 id="1-3-运行时常量池"><a href="#1-3-运行时常量池" class="headerlink" title="1.3 运行时常量池"></a>1.3 运行时常量池</h3><p>在 JVM 规范中是这样定义运行时常量池这个数据结构的：Runtime Constant Pool 代表运行时每个 class 文件中的常量表。它包括几种常量：编译期的数字常量、方法或者域的引用（在运行时解析）。Runtime Constant Pool 的功能类似于传统编程语言的符号表，尽管它包含的数据比典型的符号表要丰富得多。每个Runtime Constant pool 都是在 JVM 的 Method area 中分配的，每个 Class 或者 Interface 的 Constant Pool 都是在 JVM 创建 class 或接口时创建的。</p><p>运行时常量池是方法区的一部分，所以它的存储也受方法区的规范约束，如果常量池无法分配，同样会 抛出 OutOfMemoryError。</p><h3 id="1-4-本地方法栈"><a href="#1-4-本地方法栈" class="headerlink" title="1.4 本地方法栈"></a>1.4 本地方法栈</h3><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，它和前面介绍的 Java 栈的作用是类似的，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈，除了在我们的代码中包含的常规的 Native 方法会使用这个存储空间，在 JVM 利用 JIT 技术时会将一些 Java 方法重新编译为 Native Code 代码，这些编译后的本地代码通常也是利用这个栈来跟踪方法的执行状态的。</p><h2 id="2-垃圾回收"><a href="#2-垃圾回收" class="headerlink" title="2. 垃圾回收"></a>2. 垃圾回收</h2><h3 id="2-1-如何检测垃圾"><a href="#2-1-如何检测垃圾" class="headerlink" title="2.1 如何检测垃圾"></a>2.1 如何检测垃圾</h3><p>只要是某个对象不再被其他活动对象引用，那么这个对象就可以被回收了。这里的活动对象指的是能够被一个根对象集合到达的对象。根对象集合大都会包含如下一些元素：</p><ul><li>在方法中局部变量区的元素的引用；</li><li>在 Java 操作栈中的对象的引用；</li><li>在常量池中的对象引用；</li><li>在本地方法中持有的对象的引用；</li><li>类的 Class 对象。</li></ul><h3 id="2-2-基于分代的垃圾回收算法"><a href="#2-2-基于分代的垃圾回收算法" class="headerlink" title="2.2 基于分代的垃圾回收算法"></a>2.2 基于分代的垃圾回收算法</h3><p>该算法的设计思路是：把对象按照寿命长短来分组，分为年轻代和年老代，新创建的对象被分在年轻代，如果对象经过几次回收后仍然存活，那么再把这个对象划分到年老代。年老代的收集频度不像年轻代那么频繁，这样就减少了每次垃圾收集时所要扫描的对象的数量，从而提高了垃圾回收效率。</p><p>这种设计的思路是把堆划分成若干个子堆，每个子堆对应一个年龄代。</p><p>JVM 将整个堆划分为 Young 区、Old 区和 Perm 区，分别存放不同年龄的对象，这三个区存放的对象有如下区别。</p><ul><li>Young 区又分为 Eden 区和两个 Survivor 区，其中所有新创建的对象都在 Eden 区，当 Eden 区满后会触发 minor GC 将 Eden 区仍然存活的对象复制到其中一个<br>Survivor 区中，另外一个 Survivor 区中的存活对象也复制到这个 Survivor 中，以<br>保证始终有一个 Survivor 区是空的。</li><li>Old 区存放的是 Young 区的 Survivor 满后触发 minor GC 后仍然存活的对象，当 Eden 区满后会将对象存放到 Survivor 区中，如果 Survivor 区仍然存不下这些对象，GC 收集器会将这些对象直接存放到 Old 区。如果在 Survivor 区中的对象足<br>够老，也直接存放到 Old 区。如果 Old 区也满了，将会触发 Full GC，回收整个堆<br>内存。</li><li>Perm 区存放的主要是类的 Class 对象，如果一个类被频繁地加载，也可能会导致 Perm 区满，Perm 区的垃圾回收也是由 Full GC 触发的。</li></ul><p>Sun 对堆中的不同代的大小也给出了建议，一般建议 Young 区的大小为整个堆的 1/4，而 Young 区中 Survivor 区一般设置为整个 Young 区的 1/8。</p><h3 id="2-3-Serial-Collector"><a href="#2-3-Serial-Collector" class="headerlink" title="2.3 Serial Collector"></a>2.3 Serial Collector</h3><p>Serial Collector 是 JVM 在client 模式下默认的 GC 方式。可以通过 JVM 配置参数 <code>-XX:+UseSerialGC</code> 来指定 GC 使用该收集算法。我们指定所有的对象都在 Young 区的 Eden中创建，但是如果创建的对象超过 Eden 区的总大小，或者超过了 <code>PretenureSizeThreshold</code> 配置参数配置的大小，就只能在 Old 区分配了。</p><p>当 Eden 空间不足时就触发了 Minor GC，触发 Minor GC 时首先会检查之前每次 Minor GC 时晋升到 Old 区的平均对象大小是否大于 Old 区的剩余空间，如果大于，则将直接触发 Full GC，如果小于，则要看 <code>HandlePromotionFailure</code> 参数（<code>-XX:-HandlePromotionFailure</code>）的值。如果为 true，仅触发 Minor GC，否则再触发一次 Full GC。其实这个规则很好理解，如果每次晋升的对象大小都超过了 Old 区的剩余空间，那么说明当前的 Old 区的空间已经不能满足新对象所占空间的大小，只有触发 Full GC 才能获得更多的内存空间。</p><p>当 Minor GC时，除了将 Eden 区的非活动对象回收以外，还会把一些老对象也复制到 Old 区中。这个老对象的定义是通过配置参数 <code>MaxTenuringThreshold</code> 来控制的，如 <code>-XX:MaxTenuringThreshold=10</code>，则如果这个对象已经被 Minor GC 回收过 10 次后仍然存活，那么这个对象在这次 Minor GC 后直接放入 Old 区。还有一种情况，当这次 Minor GC 时 Survivor 区中的 To Space 放不下这些对象时，这些对象也将直接放入 Old 区。如果 Old 区或者 Perm 区空间不足，将会触发 Full GC，Full GC 会检查 Heap 堆中的所有对象，清除所有垃圾对象，如果是 Perm 区，会清除已经被卸载的 classloader 中加载的类的信息。</p><h3 id="2-4-Parallel-Collector"><a href="#2-4-Parallel-Collector" class="headerlink" title="2.4 Parallel Collector"></a>2.4 Parallel Collector</h3><p>Parallel GC 根据 Minor GC 和 Full GC 的不同分为三种，分别是 ParNewGC、ParallelGC 和 ParallelOldGC。</p><ol><li><p>ParNewGC</p><p>可以通过 <code>-XX:+UseParNewGC</code> 参数来指定， 它的对象分配和回收策略与 Serial<br>Collector 类似，只是回收的线程不是单线程的，而是多线程并行回收。在 Parallel Collector 中还有一个 <code>UseAdaptiveSizePolicy</code> 配置参数，这个参数是用来动态控制 Eden、From Space 和 To Space 的 <code>TenuringThreshold</code> 大小的，以便于控制哪些对象经过多少次回收后可以直接放入 Old 区。</p></li><li><p>ParallelGC</p><p>在 Server 下默认的 GC 方式，可以通过 <code>-XX:+UseParallelGC</code> 参数来强制指定，并行回收的线程数可以通过 <code>-XX:ParallelGCThreads</code> 来指定，这个值有个计算公式，如果 CPU 和核数小于 8，线程数可以和核数一样，如果大于 8，值为 $3+(cpu core*5)/8$。</p><p>可以通过 <code>-Xmn</code> 来控制 Young 区的大小，如 <code>-Xman10m</code>，即设置 Young 区的大小为 10MB。在 Young 区内的 Eden、From Space 和 To Space 的大小控制可以通过 <code>SurvivorRatio</code> 参数来完成，如设置成 <code>-XX:SurvivorRatio=8</code>，表示 Eden 区与 From Space 的大小为 8:1，如果 Young 区的总大小为 10 MB，那么 Eden、s0 和 s1 的大小分别为 8 MB、1 MB 和 1 MB。但在默认情况下以 <code>-XX:InitialSurivivorRatio</code> 设置的为准，这个值默认也为 8，表示的是 Young:s0 为 8:1。当在 Eden 区中申请内存空间时，如果 Eden 区不够，那么看当前申请的空间是否大于等于 Eden 的一半，如果大于则这次申请的空间直接在 Old 中分配，如果小于则触发 Minor GC。在触发 GC 之前首先会检查每次晋升到 Old 区的平均大小是否大于 Old 区的剩余空间，如大于则再触发 Full GC。在这次触发 GC 后仍然会按照这个规则重新检查一次。也就是如果满足上面这个规则，Full GC 会执行两次。</p><p>在 Young 区的对象经过多次 GC 后有可能仍然存活，那么它们晋升到 Old 区的规则可以通过如下参数来控制：<code>AlwaysTenure</code>，默认为false，表示只要 Minor GC 时存活就晋升到 old；<code>NeverTenure</code>，默认为 false，表示永远不晋升到old 区。如果在上面两个都没设置的情况下设置 <code>UseAdaptiveSizePolicy</code>，启动时以 <code>InitialTenuringThreshold</code> 值作为存活次数的阈值，在每次 GC 后会动态调整，如果不想使用 <code>UseAdaptiveSizePolicy</code>，则以 <code>MaxTenuringThreshold</code><br>为准，不使用 <code>UseAdaptiveSizePolicy</code> 可以设置为 <code>-XX:-UseAdaptiveSizePolicy</code>。如果 Minor GC 时 To Space 不够，对象也将会直接放到 Old 区。当 Old 或者 Perm 区空间不足时会触发 Full GC，如果配置了参数 <code>ScavengeBeforeFullGC</code>，在 Full GC 之前会先触发Minor GC。</p></li><li><p>ParallelOldGC<br>可以通过 <code>-XX:+UseParallelOldGC</code> 参数来强制指定， 并行回收的线程数可以通过<br><code>-XX:ParallelGCThreads</code> 来指定，这个数字的值有个计算公式，如果 CPU 和核数小于 8，线程数可以和核数一样，如果大于 8，值为 $3+(cpu core*5)/8$。</p><p>它与 ParallelGC 有何不同呢？其实不同之处在 Full GC 上，前者 Full GC 进行的动作为清空整个 Heap 堆中的垃圾对象，清除 Perm 区中已经被卸载的类信息，并进行压缩。而后者是清除 Heap 堆中的部分垃圾对象，并进行部分的空间压缩。GC 垃圾回收都是以多线程方式进行的，同样也将暂停所有的应用程序。</p></li></ol><h3 id="2-5-CMS-Collector"><a href="#2-5-CMS-Collector" class="headerlink" title="2.5 CMS Collector"></a>2.5 CMS Collector</h3><p>可通过 <code>-XX:+UseConcMarkSweepGC</code> 来指定，并发的线程数默认为 4（并行GC 线程数 +3），也可通过 <code>ParallelCMSThreads</code> 来指定。</p><p>CMS GC 与上面讨论的 GC 不太一样，它既不是上面所说的 Minor GC，也不是 Full GC，它是基于这两种 GC 之间的一种 GC。它的触发规则是检查 Old 区或者 Perm 区的使用率，当达到一定比例时就会触发 CMS GC，触发时会回收 Old 区中的内存空间。这个比例可以通过 <code>CMSInitiatingOccupancyFraction</code> 参数来指定， 默认是 92%， 这个默认值是通过</p><p>$$ ((100-MinHeapFreeRatio)+(double)(CMSTriggerRatio*MinHeapFreeRatio)/100.0)/100.0$$</p><p>计算出来的，其中的 <code>MinHeapFreeRatio</code> 为 40、<code>CMSTriggerRatio</code> 为 80。如果让 Perm 区也使用 CMS GC 可以通过 <code>-XX:+CMSClassUnloadingEnabled</code> 来设定，Perm 区的比例默认值也是 92%，这个值可以通过 <code>CMSInitiatingPermOccupancyFraction</code> 设定。这个默认值也是通过一个公式计算出来的：</p><p>$$<br>((100-MinHeapFreeRatio)+(double)(CMSTriggerPermRatio*MinHeapFreeRatio)/</p><p>100.0)/100.0<br>$$<br>其中 <code>MinHeapFreeRatio</code> 为 40，<code>CMSTriggerPermRatio</code> 为 80。</p><p>触发 CMS GC 时回收的只是 Old 区或者 Perm 区的垃圾对象，在回收时和前面所说的<br>Minor GC 和 Full GC 基本没有关系。在这个模式下的 Minor GC 触发规则和回收规则与 Serial Collector 基本一致，不同之处只是GC 回收的线程是多线程而已。</p><p>触发 Full GC 是在这两种情况下发生的：一种是 Eden 分配失败，Minor GC 后分配到 ToSpace，To Space 不够再分配到 Old 区，Old 区不够则触发 Full GC；另外一种情况是，当CMS GC 正在进行时向Old 申请内存失败则会直接触发 Full GC。</p><p>这里还需要特别提醒一下，在Hotspot 1.6 中使用这种 GC 方式时在程序中显式地调用<br>了 <code>System.gc</code>，且设置了 <code>ExplicitGCInvokesConcurrent</code> 参数，那么使用 NIO 时可能会引发内存泄漏。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《深入分析 Java Web 技术内幕》：Java I/O</title>
      <link href="/2017/04/23/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%20Java%20Web%20%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B%EF%BC%9AJava-I-O/"/>
      <url>/2017/04/23/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%20Java%20Web%20%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B%EF%BC%9AJava-I-O/</url>
      <content type="html"><![CDATA[<h2 id="1-建立通信链路"><a href="#1-建立通信链路" class="headerlink" title="1. 建立通信链路"></a>1. 建立通信链路</h2><p>当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 <code>IOException</code> 错误。<br><a id="more"></a></p><p>与之对应的服务端将创建一个 <code>ServerSocket</code> 实例，<code>ServerSocket</code> 创建比较简单只要指定的端口号没有被占用，一般实例创建都会成功，同时操作系统也会为 <code>ServerSocket</code> 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。之后当调用 <code>accept()</code> 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 <code>ServerSocket</code> 实例的一个未完成的连接数据结构列表中，注意这时服务端与之对应的 <code>Socket</code> 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 <code>Socket</code> 实例才会返回，并将这个 <code>Socket</code> 实例对应的数据结构从未完成列表中移到已完成列表中。所以 <code>ServerSocket</code> 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。</p><h2 id="2-数据传输"><a href="#2-数据传输" class="headerlink" title="2. 数据传输"></a>2. 数据传输</h2><p>当连接已经建立成功，服务端和客户端都会拥有一个 <code>Socket</code> 实例，每个 <code>Socket</code> 实例都有一个 <code>InputStream</code> 和 <code>OutputStream</code>，正是通过这两个对象来交换数据。同时我们也知道网络 I/O 都是以字节流传输的。当 <code>Socket</code> 对象创建时，操作系统将会为 <code>InputStream</code> 和 <code>OutputStream</code> 分别分配一定大小的缓冲区，数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 <code>OutputStream</code> 对应的 SendQ 队列中，当队列填满时，数据将被发送到另一端 <code>InputStream</code> 的 RecvQ 队列中，如果这时 RecvQ 已经满了，那么 <code>OutputStream</code> 的 <code>write</code> 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率。</p><h2 id="3-NIO"><a href="#3-NIO" class="headerlink" title="3. NIO"></a>3. NIO</h2><p>典型的 NIO 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selector</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);  </span><br><span class="line">        Selector selector = Selector.open();  </span><br><span class="line">        ServerSocketChannel ssc = ServerSocketChannel.open();  </span><br><span class="line">        ssc.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞方式  </span></span><br><span class="line">        ssc.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));  </span><br><span class="line">        ssc.register(selector, SelectionKey.OP_ACCEPT);<span class="comment">//注册监听的事件  </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">            Set selectedKeys = selector.selectedKeys();<span class="comment">//取得所有key集合  </span></span><br><span class="line">            Iterator it = selectedKeys.iterator();  </span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;  </span><br><span class="line">                SelectionKey key = (SelectionKey) it.next();  </span><br><span class="line">                <span class="keyword">if</span> ((key.readyOps() &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT) &#123;  </span><br><span class="line">                    ServerSocketChannel ssChannel = (ServerSocketChannel) key.channel();  </span><br><span class="line">                 SocketChannel sc = ssChannel.accept();<span class="comment">//接受到服务端的请求  </span></span><br><span class="line">                    sc.configureBlocking(<span class="keyword">false</span>);  </span><br><span class="line">                    sc.register(selector, SelectionKey.OP_READ);  </span><br><span class="line">                    it.remove();  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>   </span><br><span class="line">                ((key.readyOps() &amp; SelectionKey.OP_READ) == SelectionKey.OP_READ) &#123;  </span><br><span class="line">                    SocketChannel sc = (SocketChannel) key.channel();  </span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">                        buffer.clear();  </span><br><span class="line">                        <span class="keyword">int</span> n = sc.read(buffer);<span class="comment">//读取数据  </span></span><br><span class="line">                        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        buffer.flip();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    it.remove();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>Selector</code> 的静态工厂创建一个选择器，创建一个服务端的 <code>Channel</code> 绑定到一个 <code>Socket</code> 对象，并把这个通信信道注册到选择器上，把这个通信信道设置为非阻塞模式。然后就可以调用 <code>Selector</code> 的 <code>selectedKeys</code> 方法来检查已经注册在这个选择器上的所有通信信道是否有需要的事件发生，如果有某个事件发生时，将会返回所有的 <code>SelectionKey</code>，通过这个对象 <code>Channel</code> 方法就可以取得这个通信信道对象从而可以读取通信的数据，而这里读取的数据是 <code>Buffer</code>，这个 <code>Buffer</code> 是我们可以控制的缓冲器。</p><p>在上面的这段程序中，是将 Server 端的监听连接请求的事件和处理请求的事件放在一个线程中，但是在实际应用中，我们通常会把它们放在两个线程中，一个线程专门负责监听客户端的连接请求，而且是阻塞方式执行的；另外一个线程专门来处理请求，这个专门处理请求的线程才会真正采用 NIO 的方式，像 Web 服务器 Tomcat 和 Jetty 都是这个处理方式。</p><p>通过 <code>Channel</code> 获取的 I/O 数据首先要经过操作系统的 <code>Socket</code> 缓冲区再将数据复制到 <code>Buffer</code> 中，这个的操作系统缓冲区就是底层的 TCP 协议关联的 RecvQ 或者 SendQ 队列，从操作系统缓冲区到用户缓冲区复制数据比较耗性能，<code>Buffer</code> 提供了另外一种直接操作操作系统缓冲区的的方式即 <code>ByteBuffer.allocateDirector(size)</code>，这个方法返回的 <code>byteBuffer</code> 就是与底层存储空间关联的缓冲区，它通过 Native 代码操作非 JVM 堆的内存空间。每次创建或者释放的时候都调用一次 <code>System.gc()</code>。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis: 持久化</title>
      <link href="/2017/03/25/Redis-%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2017/03/25/Redis-%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="1-持久化选项"><a href="#1-持久化选项" class="headerlink" title="1. 持久化选项"></a>1. 持久化选项</h3><p>Redis提供了两种不同的持久化方法来将数据存储到硬盘里面。一种方法叫快照(snapshotting)，它可以将存在于某一时刻的所有数据都写入硬盘里；另一种方法叫只追加文件(append-only file, AOF)，它会在执行命令时，将被执行的写命令复制到硬盘里面。这两种持久化方法既可以同时使用，又可以单独使用。<br><a id="more"></a></p><h3 id="2-RDB方式"><a href="#2-RDB方式" class="headerlink" title="2. RDB方式"></a>2. RDB方式</h3><p>Redis可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。如果在新的快照文件创建完毕之前，Redis、系统或者硬件这三者之中的任意一个崩溃了，那么Redis将丢失最近一次创建快照之后写入的所有数据。</p><h4 id="2-1-快照时机"><a href="#2-1-快照时机" class="headerlink" title="2.1 快照时机"></a>2.1 快照时机</h4><p>创建快照的办法有以下几种。</p><ul><li>客户端可以通过想Redis发送BGSAVE命令来创建一个快照，对于支持BGSAVE命令的平台来说，Redis会调用fork来创建一个子进程，然后子进程负责将快照写入硬盘，而父进程则继续处理命令请求。执行BGSAVE后Redis会立即返回OK表示开始执行快照操作，如果想知道快照是否完成，可以通过LASTSAVE命令获取最近一次执行快照的时间，返回结果是一个UNIX时间戳。 </li><li>客户端还可以通过向Redis发送SAVE命令来创建一个快照，接到SAVE命令的Redis服务器在快照创建完毕之前将不再响应任何额其他命令。SAVE命令并不常用，我们通常只会在没有足够内存去执行BGSAVE命令的情况下，又或者即使等待持久化操作执行完毕也无所谓的情况下，才会使用这个命令。</li><li>如果用户设置了save配置选项，那么当任意一个save配置选项所设置的条件被满足时，Redis就会触发一次BGSAVE命令。save选项的格式为<code>save M N</code>：每当时间M内被更改的键的个数大于N时，即符合自动快照条件。</li><li><ul><li>当执行FLUSHALL命令时，Redis会清除数据库中的所有数据。需要注意的是，不论清空数据库的操作是否出发了自动快照条件，只要自动快照条件不为空，Redis就会执行一次快照操作。当没有定义自动快照条件时，执行FLUSHALL则不会进行快照。</li></ul></li><li>当Redis通过SHUTDOWN命令接收到关闭服务器的请求时，或者接收到标准TERM信号时，会执行一个SAVE命令，阻塞所有客户端，不在执行客户端发送的任何命令，并在SAVE命令执行完毕之后关闭服务器。</li><li>当一个Redis服务器连接另一个Redis服务器，并向对方发送SYNC命令来开始一次复制操作的时候，如果主服务器目前没有在执行BGSAVE操作，或者从服务器并非刚刚执行完BGSAVE操作，那么主服务器就会执行BGSAVE命令。</li></ul><h4 id="2-2-快照原理"><a href="#2-2-快照原理" class="headerlink" title="2.2 快照原理"></a>2.2 快照原理</h4><p>RDB是Redis默认采用的持久化方式，配置信息在配置文件redis.conf中。默认会将快照文件存储在Redis当前进程的工作目录中的dump.rdb文件中,可以通过配置dir和dbfilename两个参数分别配置指定快照文件的存储路径和文件名。快照的过程如下。</p><ul><li>redis使用fork函数复制一份当前进程的副本(子进程)；</li><li>父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；</li><li>当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此，一次快照操作完成。</li></ul><p>在执行fork的时候操作系统会使用写时复制（copy-on-write）策略，即fork()函数发生的那一刻父子进程共享同一内存空间，当父进程要更改某一片的数据时（如执行写命令），操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是fork()一刻的内存数据。</p><p>Redis在执行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的RDB文件替换成新的，也就是说任何时候RDB文件都是完整的。这时我们就可以通过备份RDB文件来实现Redis数据库备份。 RDB文件是经过压缩的二进制格式，所以占用的空间小于内存中的数据大小，更加利于传输。可以通过设置redcompression参数以禁用压缩节省CPU占用。 </p><p>在只使用快照持久化来保存数据时，一定要记住：如果系统真的发送崩溃，用户将丢失最近一次生成快照之后更改的所有数据。因此，快照持久化只适用于那些即使丢失一部分数据也不会造成问题的应用程序。</p><p>如果Redis的内存占用量达到数十个GB，并且剩余的空闲内存并不多，或者Redis运行在虚拟机上面，那么执行BGSAVE可能会导致系统长时间地停顿，也可能引发系统大量地使用虚拟内存，从而导致Redis的性能降低至无法使用的程度。</p><h3 id="3-AOF持久化"><a href="#3-AOF持久化" class="headerlink" title="3. AOF持久化"></a>3. AOF持久化</h3><p>简单来说，AOF持久化会将被执行的写命令写到AOF文件的末尾，以此来记录数据发生的变化。因此，Redis只要从头到尾从新执行一次AOF文件包含的所有写命令，就可以回复AOF文件所记录的数据集。AOF持久化可以通过设置<code>appendonly yes</code>选项打开。</p><p>AOF文件的同步频率通过<code>appendfsync</code>选项设置。</p><table><thead><tr><th>选项</th><th>同步频率</th></tr></thead><tbody><tr><td>always</td><td>每个Redis写命令都要同步写入硬盘，这样做会严重降低Redis的速度</td></tr><tr><td>everysec</td><td>秒执行一次同步，显示地将多个写命令同步到硬盘</td></tr><tr><td>no</td><td>让操作系统来决定何时进行同步</td></tr></tbody></table><p>在向硬盘写入文件时，至少会发生3件事。当调用file.write()方法对文件进行写入时，写入的内容首先会被存储到缓冲区，然后操作系统会在将来的某个时候将缓冲区存储的内容写入硬盘，而数据只有在被写入硬盘之后，才算是真正地保存到了硬盘里面。用户可以通过file.flush()方法来请求操作系统尽快地将缓冲区存储的数据写入硬盘里，但具体何时执行写入操作仍然由操作系统决定。</p><p>为了解决AOF文件体积不断增大的问题，用户可以向Redis发送BGREWRITEAOF命令，这个命令会移除AOF文件中冗余命令来重写AOF文件，使AOF文件的体积变得尽可能地小。BGREWRITEAOF的工作原理和BGSAVE创建快照的工作原理非常相似：Redis会创建一个子进程，然后由子进程负责对AOF文件进行重写。</p><p>AOF持久化也可以通过设置<code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code>来自动执行BGREWRITEAOF。</p><h3 id="4-验证快照文件和AOF文件"><a href="#4-验证快照文件和AOF文件" class="headerlink" title="4. 验证快照文件和AOF文件"></a>4. 验证快照文件和AOF文件</h3><p>无论是快照持久化还是AOF持久化，都提供了在需要系统故障时进行数据恢复的工具，Redis提供了两个命令行程序redis-check-aof和redis-check-dump,她们可以在系统故障发生之后检查AOF和快照的状态。并在有需要的时候对文件进行修复在不给定任何参数的情况下运行这两个程序，就可以看见他们的基本使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">redis-check-aof</span></span><br><span class="line">Usage:redis-check-aof [--fix]&lt;file.aof&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash">redis-check-dump</span></span><br><span class="line">Usage:redis-check-dump &lt;dump.rdb&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>如果用户在运行redis-check-aof程序给定了–fix参数那么程序将对AOF文件进行修复。程序修复AOF文件的方法非常简单：他会扫描指定的AOF文件，寻找不正确或者不完整的命令，当发现第一个出错命令的时候，程序会删除出错命令已经出错命令后面的所有命令，只保留出错命令之前的正确命令，在大多数情况下，被删除的都是AOF文件末尾的不完整的写命令。</p><p>遗憾的是目前没有办法修复出错的快照文件。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>《Redis入门指南(第2版)》</li><li>《Redis实战》</li></ul>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis: 复制</title>
      <link href="/2017/03/24/Redis-%E5%A4%8D%E5%88%B6/"/>
      <url>/2017/03/24/Redis-%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="Redis复制的启动过程"><a href="#Redis复制的启动过程" class="headerlink" title="Redis复制的启动过程"></a>Redis复制的启动过程</h3><table><thead><tr><th>步骤</th><th>主服务器操作</th><th>从服务器操作</th></tr></thead><tbody><tr><td>1</td><td>等待命令进入</td><td>连接（或者重连接）主服务器，发送 SYNC 命令</td></tr><tr><td>2</td><td>开始执行 BGSAVE，并使用缓冲区记录 BGSAVE 之后执行的所有写命令</td><td>根据配置选项来决定是继续使用现有的数据（如果有的话）来处理客户端的命令请求，还是向发送请求的客户端返回错误</td></tr><tr><td>3</td><td>BGSAVE 执行完毕，向从服务器发送快照文件并在发送期间继续使用缓冲区记录被执行的写命令</td><td>丢弃所有的旧数据（如果有的话），开始载入主服务器发来的快照文件</td></tr><tr><td>4</td><td>快照文件发送完毕，开始向服务器发送存储在缓冲区里的写命令</td><td>完成对快照文件的解释操作，像往常一样开始接受命令请求</td></tr><tr><td>5</td><td>缓冲区存储的写命令发送完毕；现在开始每执行一个写命令，就向从服务器发送相同的写命令</td><td>执行主服务发来的所有存储在缓冲区里面的写命令；并从现在开始，接收并执行主服务器传来的每一个写命令</td></tr></tbody></table><a id="more"></a><p>如果用户使用的是SLAVEOF配置选项，那么Redis在启动时首先会载入当前可用的任何快照文件或者AOF文件，然后执行上面表中的复制过程，如果如果用户使用的是SLAVEOF命令，那么Redis会立即尝试连接主服务器，并在连接成功之后，开始上表所示的复制过程。</p><p>当多个从服务器连接主服务器的时候，就会出现下表两种情况中的其中一种。</p><table><thead><tr><th>当新的从服务器连接主服务器时</th><th>主服务器的操作</th></tr></thead><tbody><tr><td>上表中的步骤 3 尚未执行</td><td>所有的从服务器都会接收到相同的快照文件或者相同的缓冲区写命令</td></tr><tr><td>上表中的步骤 3 正在执行或者已经执行完毕</td><td>当主服务器与较早的进行的连接的从服务器执行完复制所需的 5 个步骤之后，主服务器会与新连接的从服务器执行一次新的步骤 1 至步骤 5</td></tr></tbody></table><h3 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h3><p>创建多个从服务器可能造成网络不可用——当复制需要通过互联网进行或者需要在不同数据中心之间进行时，尤为如此。因为Redis的主服务器和从服务器并没有什么特别不同的地方，所有从服务器可以拥有自己的从服务器，从而形成主从链(master/slave chaining)。</p><p>从服务器对从服务器进行复制的操作上和从服务器对主服务器进行复制的唯一区别在于，如果从服务器X拥有从服务器Y,那么当从服务器X在执行复制过程中的步骤4的时候,他将断开与从服务器Y的连接，导致从服务器Y需要重新连接并重新同步。</p><p>当读请求的重要性明显高于写请求的重要性，并且当读请求的数量远远超出一台Redis服务器可以处理的范围时，用户就可以添加新的从服务器来处理读请求。随着负载的不断上升，主服务器可能会无法快速的更新所有从服务器，或者因为重新连接或者重新同步从服务器而导致系统超载。为了解决这个问题，用户可以创建一个由Redis主从节点(master/slave node)组成的中间层来分担主服务器的复制工作。</p><p>AOF持久化的同步选项可以控制数据丢失的时间长度：通过将每个写命令同步到硬盘里面，用户几乎可以不损失任何数据(除非系统崩溃或者硬盘驱动器损坏)，但这种做法会对服务器的性能造成影响；另一方面，如果用户将同步的频率设置为每秒一次，那么服务器的性能将会回到正常水平，但故障可能会造成1秒的数据丢失，通过同时使用复制和AOF持久化，我们可以将数据持久化到多台服务器上面。</p><p>为了将数据保存到多台机器上面，用户需要为主服务器设置多个从服务器，然后对每个从服务器设置appendonly yes选项和appendfsync everysecz选项(如果有需要的话，也可以对主服务器进行相同的设置)这样的话，用户就可以让多台服务器以每秒一次的频率将数据同步到硬盘上，但只是第一步：因为用户还必须等待主服务器发送的写命令到达从服务器，并且在执行后续操作之前，检查 数据是否被同步到了硬盘里面。</p><h3 id="更换故障主服务器"><a href="#更换故障主服务器" class="headerlink" title="更换故障主服务器"></a>更换故障主服务器</h3><p>假设A、B两台服务器都运行着Redis,其中A为主服务器，B为从服务器，如果此时机器A因为某个暂时无法修复的故障断开了网络连接，决定使用安装了Redis的机器C作为新的主服务器。</p><p>更换主服务器的计划很简单：</p><ul><li>在机器B上执行SAVE命令，在机器B上生成快照文件；</li><li>将快照文件发送到机器C上，并启动机器C；</li><li>将机器B设置为机器C的从服务器。</li></ul>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>卡特兰数与算法</title>
      <link href="/2017/01/15/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2017/01/15/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>hexo的latex语法比较难搞，可以参见<a href="https://segmentfault.com/a/1190000011267196" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011267196</a></p><h2 id="1-来源：LeetCode-96-Unique-Binary-Search-Trees"><a href="#1-来源：LeetCode-96-Unique-Binary-Search-Trees" class="headerlink" title="1. 来源：LeetCode 96 - Unique Binary Search Trees"></a>1. 来源：LeetCode 96 - Unique Binary Search Trees</h2><blockquote><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1…n?</p><p>For example,<br>Given n = 3, there are a total of 5 unique BST’s.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;    1         3     3      2      1</span><br><span class="line">&gt;     \       /     /      / \      \</span><br><span class="line">&gt;      3     2     1      1   3      2</span><br><span class="line">&gt;     /     /       \                 \</span><br><span class="line">&gt;    2     1         2                 3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><a id="more"></a></blockquote><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h2><p>假设有 $n$ 个 node，排序后的序列为 ($x_1, x_2, \dots, x_n$)。假设其可构造成 $f(n)$ 个不同的 BST。</p><ul><li>若 $n=0$，唯一解为空树，即 $f(0)=1$。</li><li>若 $n&gt;0$，一共有 n 种情况：<ul><li>选 $x_1$ 做 root，使其左子树为空，右子树为剩下 $n-1$ 个 node 的构造 BST，问题转换为 $n-1$ 个 node 的构造 BST 有多少个解，即 $f(1)=f(0) f(n-1)$；</li><li>选 $x_2$ 做 root，使其左子树为 $x_1$，右子树为剩下 $n-2$ 个 node 的构造 BST，问题转换为 $n-1$ 个 node 的构造 BST 有多少个解，即 $f(2)=f(1)f(n-2)$；</li><li>选 $x_k(1\leq k \leq n)$ 做 root，其左子树共有 $f(k-1)$ 种可能，右子树有 $f(n-k)$ 种可能，即 $f(k)=f(k-1)f(n-k)，(k &gt; 0)$。</li></ul></li></ul><p>由此得到</p><p>$$<br>f(n) =<br>\begin{cases}<br>1,  &amp; n=0 \<br>f(0)f(n-1) + \dots + f(n-1)f(0) = \sum_{k=1}^n f(k-1)f(n-k), &amp; n&gt;0<br>\end{cases}<br>\tag{1}<br>$$</p><h2 id="3-递推公式"><a href="#3-递推公式" class="headerlink" title="3. 递推公式"></a>3. 递推公式</h2><p>令生成函数</p><p>$$<br>\begin{equation}<br>\begin{split}<br>g(x)&amp;= \sum_{k=1}^{\infty}f(k-1)x^k\<br>&amp;=f(0)x + f(1)x^2 + f(2)x^3 + \dots + f(n-1)x^n + \dots<br>\end{split}<br>\tag{2}<br>\end{equation}<br>$$</p><p>则</p><p>$$<br>\begin{split}<br>[g(x)]^2 &amp;= f^2(0)x^2 \<br>&amp;+ [f(0)f(1) + f(1)f(0)]x^3 \<br>&amp;+ [f(0)f(2) + f^2(1) + f(2)f(0)]x^4 \<br>&amp;+ \dots \<br>&amp;+ [f(0)f(n-1) + f(1)f(n-2) + … + f(n-1)f(0)]x^n \<br>&amp;+ \dots<br>\end{split}<br>$$</p><p>代入 $f(0) = 1$，$f(1) = 1$ 和 $f(n)$ 的递推公式，得到</p><p>$$<br>\begin{equation}<br>\begin{split}<br>[g(x)]^2 &amp;= x^2 + f_2x^3 + f_3x^4 + … + f_{n-1}x^n \<br>             &amp;= g(x) - x<br>\end{split}<br>\tag{3}<br>\end{equation}<br>$$</p><p>解这个方程，其两个根为</p><p>$$<br>g_1(x)=\frac{1 + \sqrt{1-4x}}{2}, g_2(x)=\frac{1 - \sqrt{1-4x}}{2}<br>$$</p><p>由于 $g(0)=0$，验证得仅 $g_2(x)$ 成立，所以</p><p>$$<br>g(x)=g_2(x)=\frac{1}{2} - \frac{1}{2}(1-4x)^{\frac{1}{2}}<br>\tag{4}<br>$$</p><h2 id="4-牛顿二项式展开"><a href="#4-牛顿二项式展开" class="headerlink" title="4. 牛顿二项式展开"></a>4. 牛顿二项式展开</h2><p>根据牛顿二项式定理</p><p>$$<br>(x+y)^n = \sum_{k=0}^{n}\binom{n}{k}x^{n-k}y^{k}，其中\binom{n}{k}=\frac{n!}{k!(n-k)!}<br>\tag{5}<br>$$</p><p>当 $n$ 不是正整数时，$k$ 无法正好求和到 $n$，因此将一直求和至正无穷，这样形式上就得到了广义二项式定理: </p><p>$$<br>(x+y)^{\alpha} = \sum_{k=0}^{\infty}\binom{\alpha}{k}x^{\alpha-k}y^k<br>\tag{6}<br>$$</p><p>其中</p><p>$$<br>\binom{\alpha}{k}=\frac{\alpha(\alpha-1)\dots(\alpha-k+1)}{k!} \tag{7}<br>$$</p><p>是形式上的组合数。实际上广义二项式定理并非总是成立，因为等式右边不一定收敛。</p><p>其常见形式为</p><p>$$<br>\begin{equation}<br>\begin{split}<br>(1+z)^{\alpha} &amp;= \sum_{k=0}^{\infty}\binom{\alpha}{k}z^{k} \<br>&amp; = 1+ \sum_{k=1}^{\infty}\binom{\alpha}{k}z^{k}, (|z|&lt;1)<br>\end{split}<br>\tag{8}<br>\end{equation}<br>$$</p><p>现考察 $\alpha=\frac{1}{2}$ 的情况，有</p><p>$$<br>\begin{equation}<br>\begin{split}<br>\binom{\alpha}{k}&amp;=\frac{\frac{1}{2}(\frac{1}{2}-1)(\frac{1}{2}-2)\dots(\frac{1}{2}-k+1)}{k!} \<br>&amp; = \frac{(-1)^{k-1}}{2^k}\frac{1 \times 3 \times 5 \times \dots \times (2k-3)}{k!} \<br>&amp; = \frac{(-1)^{k-1}}{2^k}\frac{1 \times 2 \times 3 \times \dots \times(2k-3) \times (2k-2)}{2 \times 4 \times \dots \times (2k-2) \times k! } \<br>&amp; = \frac{(-1)^{k-1}}{2^k}\frac{(2k-2)!}{2^{k-1}(k-1)!k!} \<br>&amp; = \frac{(-1)^{k-1}}{k \times 2^{2k-1}} \frac{(2k-2)!}{[(k-1)!]^2} \<br>&amp; = \frac{(-1)^{k-1}}{k \times 2^{2k-1}} \binom{2k-2}{k-1}, (k &gt; 0)<br>\end{split}<br>\tag{9}<br>\end{equation}<br>$$</p><p>因此，</p><p>$$<br>(1+z)^{\alpha} = 1+\sum_{k=1}^{\infty}\frac{(-1)^{k-1}}{k \times 2^{2k-1}} \binom{2k-2}{k-1}z^{k}, (|z|&lt;1)<br>\tag{10}<br>$$</p><h2 id="5-回到-g-x"><a href="#5-回到-g-x" class="headerlink" title="5. 回到 $g(x)$"></a>5. 回到 $g(x)$</h2><p>令上式中的 $z=-4x$，即得到</p><p>$$<br>\begin{equation}<br>\begin{split}<br>g(x)&amp;=\frac{1}{2} - \frac{1}{2}(1-4x)^{1/2} \<br>&amp;=\frac{1}{2}-\frac{1}{2}[1+\sum_{k=1}^{\infty}\frac{(-1)^{k-1}}{k \times 2^{2k-1}} \binom{2k-2}{k-1}(-4x)^{k}] \<br>&amp;=\sum_{k=1}^{\infty}\frac{1}{k}\binom{2k-2}{k-1}x^k, (|x|&lt;\frac{1}{4})<br>\end{split}<br>\tag{11}<br>\end{equation}<br>$$</p><p>又因为按照定义 $g(x)= \sum_{k=1}^{\infty}f(k-1)x^k$，所以</p><p>$$<br>\begin{equation}<br>\begin{split}<br>f(n-1)&amp;=\frac{1}{n}\binom{2n-2}{n-1}, n&gt;1<br>\end{split}<br>\end{equation}<br>$$</p><p>或写为</p><p>$$<br>\begin{equation}<br>\begin{split}<br>f(n)&amp;=\frac{1}{n+1}\binom{2n}{n}, n&gt;0<br>\end{split}<br>\tag{12}<br>\end{equation}<br>$$</p><p>此即卡特兰数（Catalan Number）的通项公式。递归计算时可采用</p><p>$$<br>f(n+1) = \frac{2(2n+1)}{n+2}f(n)<br>\tag{13}<br>$$</p><h2 id="6-卡特兰数的应用"><a href="#6-卡特兰数的应用" class="headerlink" title="6. 卡特兰数的应用"></a>6. 卡特兰数的应用</h2><ul><li>括号化问题。矩阵链乘： $P=A1×A2×A3×\dots×An$，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？</li><li>将多边行划分为三角形问题。将一个凸多边形区域分成三角形区域（划分线不交叉）的方法数？类似：在圆上选择 2n 个点，将这些点成对连接起来使得所得到的 n 条线段不相交的方法数？</li><li>出栈次序问题。<ul><li>一个栈（无穷大）的进栈序列为 1,2,3,…,n，有多少个不同的出栈序列？</li><li>有 2n 个人排成一行进入剧场。入场费 5 元。其中只有 n 个人有一张 5 元钞票，另外 n 人只有 10 元钞票，剧院无其它钞票，问有多少中方法使得只要有 10 元的人买票，售票处就有 5 元的钞票找零？(将持 5 元者到达视作将 5 元入栈，持 10 元者到达视作使栈中某 5 元出栈)</li><li>一位大城市的律师在他住所以北 n 个街区和以东 n 个街区处工作。每天她走 2n 个街区去上班。如果他从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单链表中的环问题</title>
      <link href="/2017/01/08/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2017/01/08/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%8E%AF%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="1-来源"><a href="#1-来源" class="headerlink" title="1. 来源"></a>1. 来源</h2><ul><li>LeetCode 141 - Linked List Cycle</li></ul><blockquote><p>Given a linked list, determine if it has a cycle in it.</p><p>Follow up:<br>Can you solve it without using extra space?</p></blockquote><ul><li>LeeCode 142 - Linked List Cycle II</li></ul><blockquote><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p><p><strong>Note:</strong> Do not modify the linked list.</p><p><strong>Follow up</strong>:<br>Can you solve it without using extra space?</p></blockquote><a id="more"></a><h2 id="2-判断是否有环"><a href="#2-判断是否有环" class="headerlink" title="2. 判断是否有环"></a>2. 判断是否有环</h2><p>双指针问题，设置两个指针 <code>fast</code> 和 <code>slow</code>，初始均指向 <code>head</code> 节点。<code>fast</code> 指针每次走两步，<code>slow</code> 指针每次走一步。若 <code>fast</code> 指针或 <code>fast.next</code> 指针为 null，则无环；当 <code>fast == slow</code> 则有环。</p><h2 id="3-计算环的位置"><a href="#3-计算环的位置" class="headerlink" title="3. 计算环的位置"></a>3. 计算环的位置</h2><p>假设环的连接点为 <code>joint</code>，<code>head</code> 到 <code>joint</code> 的步长为 $x$，环长为 $L$，  <code>fast</code> 和 <code>slow</code> 指针在交汇时经过了 $t$ 个步骤，交汇点 <code>intersection</code> 沿链表方向距离 <code>joint</code> 的步长为 $y$。则<br>$$<br>t=x+(L-y)\<br>2t=x+(L-y)+nL<br>$$<br>其中 $n$ 为交汇时 <code>fast</code> 指针已经在环上走过的圈数。可得：<br>$$<br>x=(n-1)L+y<br>$$<br>这个式子的含义是，<code>head</code> 到 <code>joint</code> 的距离，等于 <code>intersection</code> 到 <code>joint</code> 的距离加上环长的整数倍。</p><p>那么，让两个指针一个从 <code>head</code> 出发，一个从 <code>intersection</code> 出发，经过相同的步数（即 $x$）之后，他们应当在 <code>joint</code> 相汇。</p><p>LeetCode 142 Solution：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode fast = head, slow = head;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span>(fast == slow) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(head != slow) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-其他问题"><a href="#4-其他问题" class="headerlink" title="4. 其他问题"></a>4. 其他问题</h2><ul><li>怎么求环长？</li></ul><p><code>fast</code> 和 <code>slow</code> 交汇后，让 <code>slow</code> 再走一圈即得到环长。</p><p>或者先得到环的连接点，再从连接点开始走一圈环。</p><ul><li>怎么得到单链表总长？</li></ul><p>在计算环的连接点时，可以计算出 $x$，再加上环长。</p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZooKeeper Java Api</title>
      <link href="/2017/01/01/ZooKeeper%20Java%20Api/"/>
      <url>/2017/01/01/ZooKeeper%20Java%20Api/</url>
      <content type="html"><![CDATA[<h2 id="Api-测试"><a href="#Api-测试" class="headerlink" title="Api 测试"></a>Api 测试</h2><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ZooKeeperApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xyq on 2017/12/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String addr = <span class="string">"localhost:2181"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> timeout = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 ZooKeeper 实例</span></span><br><span class="line">            ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(addr, timeout, <span class="keyword">new</span> MyWatcher());</span><br><span class="line">            <span class="keyword">while</span>(zooKeeper.getState() != ZooKeeper.States.CONNECTED) &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> sessionId = zooKeeper.getSessionId();</span><br><span class="line">            <span class="keyword">byte</span>[] passwd = zooKeeper.getSessionPasswd();</span><br><span class="line">            System.out.println(<span class="string">"ZooKeeper connected, sessionId="</span> + sessionId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 同步创建临时顺序节点</span></span><br><span class="line">            String syncCreateRes = zooKeeper.create(<span class="string">"/sync-ephemeral-sequential-znode-"</span>, <span class="string">"sync_create"</span>.getBytes(),</span><br><span class="line">                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            System.out.println(<span class="string">"sync create znode, path="</span> + syncCreateRes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步检测临时顺序节点是否存在, 并注册 Watcher</span></span><br><span class="line">            zooKeeper.exists(syncCreateRes, <span class="keyword">true</span>, <span class="keyword">new</span> MyStatCallback(), <span class="string">"ctx"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步删除临时顺序节点</span></span><br><span class="line">            zooKeeper.delete(syncCreateRes, -<span class="number">1</span>, <span class="keyword">new</span> MyVoidCallback(), <span class="string">"ctx"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 同步创建持久顺序节点</span></span><br><span class="line">            String persistentNode = zooKeeper.create(<span class="string">"/async-persistent-sequential-znode-"</span>, <span class="string">"async_create"</span>.getBytes(),</span><br><span class="line">                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步获取持久顺序节点数据，并注册 Watcher</span></span><br><span class="line">            zooKeeper.getData(persistentNode, <span class="keyword">true</span>, <span class="keyword">new</span> MyDataCallback(), <span class="string">"ctx"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步更新持久顺序节点数据</span></span><br><span class="line">            zooKeeper.setData(persistentNode, <span class="string">"new_data"</span>.getBytes(), -<span class="number">1</span>, <span class="keyword">new</span> MyStatCallback(), <span class="string">"ctx"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步获取持久顺序节点子节点, 并注册 Watcher</span></span><br><span class="line">            zooKeeper.getChildren(persistentNode, <span class="keyword">true</span>, <span class="keyword">new</span> MyChildren2Callback(), <span class="string">"ctx"</span>);</span><br><span class="line">            <span class="comment">// 异步在持久顺序节点下创建临时子节点</span></span><br><span class="line">            zooKeeper.create(persistentNode + <span class="string">"/child"</span>, <span class="string">"child"</span>.getBytes(),</span><br><span class="line">                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL, <span class="keyword">new</span> MyStringCallback(), <span class="string">"ctx"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"receive an event, keeperState="</span> + watchedEvent.getState() +</span><br><span class="line">                    <span class="string">", type="</span> + watchedEvent.getType());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringCallback</span> <span class="keyword">implements</span> <span class="title">AsyncCallback</span>.<span class="title">StringCallback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> i, String s, Object o, String s1)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"async create znode result, resultCode="</span> + i +</span><br><span class="line">                    <span class="string">", path="</span> + s + <span class="string">", ctx="</span> + o + <span class="string">", realPath="</span> + s1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVoidCallback</span> <span class="keyword">implements</span> <span class="title">AsyncCallback</span>.<span class="title">VoidCallback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> i, String s, Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"async delete znode result, resultCode="</span> + i + <span class="string">", path="</span> + s + <span class="string">", ctx="</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyChildren2Callback</span> <span class="keyword">implements</span> <span class="title">AsyncCallback</span>.<span class="title">Children2Callback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> i, String s, Object o, List&lt;String&gt; list, Stat stat)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"async get znode children result, resultCode="</span> + i + <span class="string">", path="</span> + s +</span><br><span class="line">                    <span class="string">", ctx="</span> + o + <span class="string">", childrenList="</span> + JSON.toJSONString(list) + <span class="string">", stat="</span> + JSON.toJSONString(stat));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStatCallback</span> <span class="keyword">implements</span> <span class="title">AsyncCallback</span>.<span class="title">StatCallback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> i, String s, Object o, Stat stat)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"async judge znode existence result, resultCode="</span> + i + <span class="string">", path="</span> + s +</span><br><span class="line">                    <span class="string">", ctx="</span> + o + <span class="string">", stat="</span> + JSON.toJSONString(stat));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataCallback</span> <span class="keyword">implements</span> <span class="title">AsyncCallback</span>.<span class="title">DataCallback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> i, String s, Object o, <span class="keyword">byte</span>[] bytes, Stat stat)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"async get znode data result, resultCode="</span> + i + <span class="string">", path="</span> + s +</span><br><span class="line">                    <span class="string">", ctx="</span> + o + <span class="string">", stat="</span> + JSON.toJSONString(stat));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper connected, sessionId=99251216681467907</span><br><span class="line">receive an event, keeperState=SyncConnected, type=None</span><br><span class="line">sync create znode, path=/sync-ephemeral-sequential-znode-0000000064</span><br><span class="line">async judge znode existence result, resultCode=0, path=/sync-ephemeral-sequential-znode-0000000064, ctx=ctx, stat=&#123;&quot;aversion&quot;:0,&quot;ctime&quot;:1514453932664,&quot;cversion&quot;:0,&quot;czxid&quot;:1320,&quot;dataLength&quot;:11,&quot;ephemeralOwner&quot;:99251216681467907,&quot;mtime&quot;:1514453932664,&quot;mzxid&quot;:1320,&quot;numChildren&quot;:0,&quot;pzxid&quot;:1320,&quot;version&quot;:0&#125;</span><br><span class="line">receive an event, keeperState=SyncConnected, type=NodeDeleted</span><br><span class="line">async delete znode result, resultCode=0, path=/sync-ephemeral-sequential-znode-0000000064, ctx=ctx</span><br><span class="line">async get znode data result, resultCode=0, path=/async-persistent-sequential-znode-0000000065, ctx=ctx, stat=&#123;&quot;aversion&quot;:0,&quot;ctime&quot;:1514453932674,&quot;cversion&quot;:0,&quot;czxid&quot;:1322,&quot;dataLength&quot;:12,&quot;ephemeralOwner&quot;:0,&quot;mtime&quot;:1514453932674,&quot;mzxid&quot;:1322,&quot;numChildren&quot;:0,&quot;pzxid&quot;:1322,&quot;version&quot;:0&#125;</span><br><span class="line">receive an event, keeperState=SyncConnected, type=NodeDataChanged</span><br><span class="line">async judge znode existence result, resultCode=0, path=/async-persistent-sequential-znode-0000000065, ctx=ctx, stat=&#123;&quot;aversion&quot;:0,&quot;ctime&quot;:1514453932674,&quot;cversion&quot;:0,&quot;czxid&quot;:1322,&quot;dataLength&quot;:8,&quot;ephemeralOwner&quot;:0,&quot;mtime&quot;:1514453932680,&quot;mzxid&quot;:1323,&quot;numChildren&quot;:0,&quot;pzxid&quot;:1322,&quot;version&quot;:1&#125;</span><br><span class="line">async get znode children result, resultCode=0, path=/async-persistent-sequential-znode-0000000065, ctx=ctx, childrenList=[], stat=&#123;&quot;aversion&quot;:0,&quot;ctime&quot;:1514453932674,&quot;cversion&quot;:0,&quot;czxid&quot;:1322,&quot;dataLength&quot;:8,&quot;ephemeralOwner&quot;:0,&quot;mtime&quot;:1514453932680,&quot;mzxid&quot;:1323,&quot;numChildren&quot;:0,&quot;pzxid&quot;:1322,&quot;version&quot;:1&#125;</span><br><span class="line">receive an event, keeperState=SyncConnected, type=NodeChildrenChanged</span><br><span class="line">async create znode result, resultCode=0, path=/async-persistent-sequential-znode-0000000065/child, ctx=ctx, realPath=/async-persistent-sequential-znode-0000000065/child</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><p>ZooKeeper 不支持递归创建，即无法在父节点不存在的情况下创建一个子节点。另外，如果一个节点已经存在了，那么创建同名节点的时候会抛出 <code>NodeExistsException</code> 异常。</p></li><li><p>目前，ZooKeeper 的节点内容只支持字节数组（<code>byte[]</code>）类型。</p></li><li><p>在同步接口调用中，我们需要关注接口抛出异常的可能，但是在异步接口中，所有的异常再回调函数中通过 Result Code 来体现。</p><p><code>org.apache.zookeeper.KeeperException.Code</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Code implements CodeDeprecated &#123;</span><br><span class="line">    <span class="comment">/** Everything is OK */</span></span><br><span class="line">    OK (Ok),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** System and server-side errors.</span></span><br><span class="line"><span class="comment">     * This is never thrown by the server, it shouldn't be used other than</span></span><br><span class="line"><span class="comment">     * to indicate a range. Specifically error codes greater than this</span></span><br><span class="line"><span class="comment">     * value, but lesser than &#123;<span class="doctag">@link</span> #APIERROR&#125;, are system errors.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEMERROR (SystemError),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** A runtime inconsistency was found */</span></span><br><span class="line">    RUNTIMEINCONSISTENCY (RuntimeInconsistency),</span><br><span class="line">    <span class="comment">/** A data inconsistency was found */</span></span><br><span class="line">    DATAINCONSISTENCY (DataInconsistency),</span><br><span class="line">    <span class="comment">/** Connection to the server has been lost */</span></span><br><span class="line">    CONNECTIONLOSS (ConnectionLoss),</span><br><span class="line">    <span class="comment">/** Error while marshalling or unmarshalling data */</span></span><br><span class="line">    MARSHALLINGERROR (MarshallingError),</span><br><span class="line">    <span class="comment">/** Operation is unimplemented */</span></span><br><span class="line">    UNIMPLEMENTED (Unimplemented),</span><br><span class="line">    <span class="comment">/** Operation timeout */</span></span><br><span class="line">    OPERATIONTIMEOUT (OperationTimeout),</span><br><span class="line">    <span class="comment">/** Invalid arguments */</span></span><br><span class="line">    BADARGUMENTS (BadArguments),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** API errors.</span></span><br><span class="line"><span class="comment">     * This is never thrown by the server, it shouldn't be used other than</span></span><br><span class="line"><span class="comment">     * to indicate a range. Specifically error codes greater than this</span></span><br><span class="line"><span class="comment">     * value are API errors (while values less than this indicate a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #SYSTEMERROR&#125;).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    APIERROR (APIError),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Node does not exist */</span></span><br><span class="line">    NONODE (NoNode),</span><br><span class="line">    <span class="comment">/** Not authenticated */</span></span><br><span class="line">    NOAUTH (NoAuth),</span><br><span class="line">    <span class="comment">/** Version conflict */</span></span><br><span class="line">    BADVERSION (BadVersion),</span><br><span class="line">    <span class="comment">/** Ephemeral nodes may not have children */</span></span><br><span class="line">    NOCHILDRENFOREPHEMERALS (NoChildrenForEphemerals),</span><br><span class="line">    <span class="comment">/** The node already exists */</span></span><br><span class="line">    NODEEXISTS (NodeExists),</span><br><span class="line">    <span class="comment">/** The node has children */</span></span><br><span class="line">    NOTEMPTY (NotEmpty),</span><br><span class="line">    <span class="comment">/** The session has been expired by the server */</span></span><br><span class="line">    SESSIONEXPIRED (SessionExpired),</span><br><span class="line">    <span class="comment">/** Invalid callback specified */</span></span><br><span class="line">    INVALIDCALLBACK (InvalidCallback),</span><br><span class="line">    <span class="comment">/** Invalid ACL specified */</span></span><br><span class="line">    INVALIDACL (InvalidACL),</span><br><span class="line">    <span class="comment">/** Client authentication failed */</span></span><br><span class="line">    AUTHFAILED (AuthFailed),</span><br><span class="line">    <span class="comment">/** Session moved to another server, so operation is ignored */</span></span><br><span class="line">    SESSIONMOVED (-<span class="number">118</span>),</span><br><span class="line">    <span class="comment">/** State-changing request is passed to read-only server */</span></span><br><span class="line">    NOTREADONLY (-<span class="number">119</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在更新数据时，<code>version</code> 参数使用 -1 表示针对最新版本进行更新。</p></li><li><p>无论节点是否存在，通过调用 <code>exists</code> 接口都可以注册 Watcher，能够对节点创建、节点删除和节点数据更新事件进行监听，但不监听子节点的各种变化。</p></li></ol>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode</title>
      <link href="/2017/01/01/LeetCode/"/>
      <url>/2017/01/01/LeetCode/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/xyq000/LeetCode.git" target="_blank" rel="noopener">https://github.com/xyq000/LeetCode.git</a></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《计算机网络：自顶向下方法》：Web 页面请求的历程</title>
      <link href="/2016/11/24/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9AWeb-%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8E%86%E7%A8%8B/"/>
      <url>/2016/11/24/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9AWeb-%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8E%86%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1.  场景"></a>1.  场景</h2><p>一名学生 Bob 启动他的计算机，将其用一根网线连接到学校的以太网交换机，然后通过浏览器访问 Google 主页。</p><p>网络环境：</p><ul><li>Bob 的计算机与交换机相连 </li><li>交换机与学校路由器相连 </li><li>路由器与一个 ISP 相连，本例中 ISP 为 comcast.net</li><li>本例中 comcast.net 为学校提供了 DNS 服务，所以 DNS 服务器驻留在 Comcast 网络中而不是学校网络中</li></ul><a id="more"></a><p><img src="https://user-images.githubusercontent.com/12514722/30776356-32dc2a2e-a0d7-11e7-97f8-669328acf5df.png" alt="image"></p><h2 id="2-准备：DHCP、UDP、IP-和以太网"><a href="#2-准备：DHCP、UDP、IP-和以太网" class="headerlink" title="2. 准备：DHCP、UDP、IP 和以太网"></a>2. 准备：DHCP、UDP、IP 和以太网</h2><p>Bob 的计算机目前还没有 IP 地址，如何动态获取 IP 地址？ 运行 DHCP，以从本地的 DHCP 服务器获取一个 IP 地址以及其他信息。</p><ul><li>Bob 计算机上的操作系统生成一个 DHCP 请求报文，并将这个报文放入目的地端口 67（DHCP 服务器）和源端口 68（DHCP 客户）的 UDP 报文段。该 UDP 报文段则被放置在一个具有广播 IP 目的地地址（255.255.255.255）和源 IP 地址 0.0.0.0 的 IP 数据报中，因为此时 Bob 的计算机还不具有一个 IP 地址。</li><li><p>该 IP 数据报则被放置在以太网帧中，目的 MAC 地址 FF:FF:FF:FF:FF:FF，使该帧将广播到与交换机连接的所有设备，源 MAC 地址为 Bob 计算机的网卡 MAC 地址 00:16:D3:23:68:8A。</p><p>| 协议层  | 数据                                       |<br>| —- | —————————————- |<br>| 应用层  | DHCP 请求报文                                |<br>| 传输层  | UDP 源端口 68 目的端口 67                       |<br>| 网络层  | 源 IP 0.0.0.0 目的 IP 255.255.255.255       |<br>| 链路层  | 源 MAC 00:16:D3:23:68:8A 目的 MAC FF:FF:FF:FF:FF:FF |</p></li><li><p>包含 DHCP 请求的广播以太网帧是第一个有 Bob 计算机发送到以太网交换机的帧。该交换机在所有的出端口广播帧，包括连接到路由器的端口。同时交换机会在交换机表（switch table）中新添加一条记录，内容包括 MAC 地址，通往该 MAC 地址的交换机接口，该记录放置在表中的时间。</p><p>| 地址                | 端口   | 时间   |<br>| —————– | —- | —- |<br>| 00-16-D3-23-68-8A | 1    | 9:30 |</p></li><li><p>路由器在它的具有 MAC 地址 00:22:6B:45:1F:1B 接口接收到该广播以太网帧，该帧中包含 DHCP 请求，并且从该以太网帧中抽取出 IP 数据报。该数据报的广播 IP 目的地址指示了这个 IP 数据报应当由在该结点的高层协议处理，因此该数据报的载荷（一个 UDP 报文段）被分解向上到达 UDP，从此 UDP 报文段中抽取出 DHCP 请求报文。</p></li><li><p>我们假设运行在路由器中的 DHCP 服务器能够以 CIDR 块 68.85.2.0/24 分配 IP 地址，然后分配地址 68.85.2.101 给 Bob 计算机。DHCP 服务器生成一个 DHCP ACK 报文，包含内容</p><p>| DHCP ACK 报文    | 值               |<br>| ————– | ————— |<br>| IP 地址          | 68.85.2.101     |<br>| DNS 服务器 IP 地址  | 68.87.71.226    |<br>| 默认网关路由器（第一跳路由） | IP 地址 68.85.2.1 |<br>| 子网块（网络掩码）      | 68.85.2.0/24    |</p><p>该 DHCP 报文被放入一个 UDP 报文段中，UDP 报文段被放入一个 IP 数据报中，IP 数据报再被放入一个以太网帧中。这个以太网帧的源 MAC 地址是路由器连到归属网络时接口的 MAC 地址（00:22:6B:45:1F:1B），目的 MAC 地址是 Bob 计算机的 MAC 地址（00-16-D3-23-68-8A）。</p></li><li>包含 DHCP ACK 报文的以太网帧由路由器发送给交换机。因为交换机是自学习的，并且先前从 Bob 计算机收到（包含 DHCP 请求的）以太网帧，所以该交换机从交换机表中查询到通往 Bob 计算机 MAC 地址 00:22:6B:45:1F:1B 的相应接口。</li><li>Bob 计算机接收到包含 DHCP ACK 的以太网帧，从该以太网帧中抽取 IP 数据报，从 IP 数据报中抽取 UDP 报文段，从 UDP 报文段中抽取 DHCP ACK 报文。Bob的 DHCP 客户则记录下它的 IP 地址和它的 DNS 服务器的 IP 地址。它还在其 IP 转发表中安装默认网关的地址。</li></ul><h2 id="3-仍在准备：DNS-和-ARP"><a href="#3-仍在准备：DNS-和-ARP" class="headerlink" title="3. 仍在准备：DNS 和 ARP"></a>3. 仍在准备：DNS 和 ARP</h2><p>当 Bob 将 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 的 URL 键入其 Web 浏览器时，他开启了一长串事件，这导致 Google 主页最终显示在其 Web 浏览器上。Bob 的 Web 浏览器通过生成一个 TCP 套接字开始了该过程，套接字用于向 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 发送 HTTP 请求。为了生成套接字，Bob 的计算机机需要知道 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 的 IP 地址。这就需要 DNS 协议提供这种域名到 IP 地址的转换服务。</p><p>但如果Bob计算机想向子网 68.85.2.0/24 之外的目的地址发送数据报，则先要经过默认网关。</p><ul><li>Bob 计算机上的操作系统生成一个 DNS 查询报文，将字符串 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 放入 DNS 报文的问题段中。该 DNS 报文则放置在一个具有 53 号（DNS 服务器）目的端口的 UDP 报文段中。该 UDP 报文段则被放入具有 IP 目的地址 68.87.71.226（在 DHCP ACK 返回的 DNS 服务器地址）和源地址 68.85.2.101 的 IP 数据报中。 </li><li>Bob 的计算机则将包含 DNS 请求报文的数据报放入一个以太网帧中。该帧将发送到（在链路层寻址）Bob 学校网络中的网关路由器。目前仅从 DHCP ACK 报文知道学校网关路由器的 IP 地址 65.85.2.1，但不知道网关路由器的 MAC 地址。此时就需要 ARP 协议提供IP地址到 MAC 地址的转换服务。</li><li><p>Bob 的计算机生成一个具有目的 IP 地址 68.85.2.1（默认网关）的 ARP 查询报文，将该 ARP 报文放置在一个具有广播目的地址 FF:FF:FF:FF:FF:FF 的以太网帧中，并向交换机发送该以太网帧，交换机将该帧交付给所有连接的设备，包括网关路由器。封装 ARP 报文的以太网帧：</p><p>| 域          | 值                                  |<br>| ———- | ———————————- |<br>| 硬件类型       | 1 表示以太网                            |<br>| 协议类型       | 发送者所提供/请求的高级协议地址类型，0x0800 代表 IP 协议 |<br>| 发送者 IP 地址  | 68.85.2.101                        |<br>| 发送者 MAC 地址 | 00:16:D3:23:68:8A                  |<br>| 目的 IP 地址   | 68.85.2.1                          |<br>| 目的 MAC 地址  | FF:FF:FF:FF:FF:FF                  |</p></li><li><p>网关路由器在通往学校网络的接口上接收到包含该 ARP 查询报文的帧，发现在 ARP 报文中的目标地址 68.85.2.1 匹配其接口地址。网关路由器因此准备一个 ARP 回答，指示 IP 地址 68.85.2.1 对应的 MAC 地址为 00:22:6B:45:1F:1B。它将 ARP 回答放在一个以太网帧中，其目的地址为 00:16:D3:23:68:8A（Bob 的计算机），并向交换机发送该帧，再由交换机将帧交付给 Bob 的计算机。 </p></li><li><p>Bob 计算机收到包含 ARP 回到报文的帧，并从 ARP 回答报文中抽取网关路由器的 MAC 地址（00:22:6B:45:1F:1B），在本地 ARP 表中创建一条新的记录。</p><p>| IP 地址     | MAC 地址            | TTL (Time to Live) |<br>| ——— | —————– | —————— |<br>| 68.85.2.1 | 00-22-6B-45-1F-1B | 09:30:00           |</p></li></ul><p>现在，Bob 的计算机能够使包含 DNS 查询报文的以太网帧寻址到网关路由器的 MAC 地址了。</p><h2 id="4-仍在准备：域内路由选择到-DNS-服务器"><a href="#4-仍在准备：域内路由选择到-DNS-服务器" class="headerlink" title="4. 仍在准备：域内路由选择到 DNS 服务器"></a>4. 仍在准备：域内路由选择到 DNS 服务器</h2><ul><li>网关路由器接收该帧并抽取包含 DNS 查询的 IP 数据报。路由器查找该数据报的目的地址（68.87.71.226），并根据其转发表决定该数据报应道发送到 Comcast 网络中最左边的路由器。IP 数据报放置在链路层帧中，该链路适合将学校路由器连接到最左边 Comcast 路由器，并且该帧经过这条链路发送。</li><li>Comcast 最左边的路由器接到该帧，抽取 IP 数据报，检查该数据报的目的地址（68.87.71.226），并根据其转发表确定接口，经过该接口朝着 DNS 服务器转发数据报，而转发表已根据 Comcast 的域内协议（如 RIP、OSPF 或 IS-IS）以及因特网的域间协议 BGP 所填写。</li><li>最终包含 DNS 查询的 IP 数据报到达了 DNS 服务器。DNS 服务器抽取出 DNS 查询报文，在它的 DNS 数据库中查找域名 <a href="http://www.google.com，找到包含对应" target="_blank" rel="noopener">www.google.com，找到包含对应</a> <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 的 IP 地址（64.233.169.105）的 DNS 源记录。该 DNS 服务器形成了一个包含这种主机名到 IP 地址映射的 DNS 回答报文，将该 DNS 回答报文放入 UDP 报文段中，该报文段放入寻址到 Bob 计算机的 IP 数据报中。该数据报将通过 Comcast 网络反向转发到学校的路由器，并从这里经过以太网交换机到 Bob 计算机。 </li><li>Bob 计算机从 DNS 报文抽取出服务器 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 的 IP 地址，并添加到浏览器的 DNS 缓存中。</li></ul><p>经过大量的工作后，Bob 的计算机终于可以与 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 服务器通信了。</p><h2 id="5-Web-客户-服务器交互：TCP-和-HTTP"><a href="#5-Web-客户-服务器交互：TCP-和-HTTP" class="headerlink" title="5. Web 客户 - 服务器交互：TCP 和 HTTP"></a>5. Web 客户 - 服务器交互：TCP 和 HTTP</h2><ul><li>Bob 计算机有了 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 的 IP 地址，它就能够生成 TCP 套接字，该套接字将用于向 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 发送 HTTP GET 报文。当 Bob 生成 TCP 套接字时，在 Bob 计算机中的 TCP 必须首先与 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 中的 TCP 执行三次握手。Bob 计算机首先生成一个具有目的端口 80（针对 HTTP）的 TCP SYN 报文段，将该 TCP 报文段放置在具有目的 IP 地址 64.233.169.105（<a href="http://www.google.com）的" target="_blank" rel="noopener">www.google.com）的</a> IP 数据报中，将该数据报放置在 MAC 地址为 00:22:6B:45:1F:1B（网关路由器）的帧中，并向交换机发送该帧。</li><li>在学校网络、Comcast 网络和 Google 网络中的路由器朝着 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 转发包含 TCP SYN 的数据报，使用每台路由器中的转发表。</li><li>最终，包含 TCP SYN 的数据报到达 <a href="http://www.google.com。Google" target="_blank" rel="noopener">www.google.com。Google</a> 服务器从数据报抽取出 TCP SYN 报文并分解到与端口 80 相联系的套接字。对于 Google HTTP 服务器和 Bob 计算机之间的 TCP 连接生成一个连接套接字。产生一个 TCP SYNACK 报文段（SYNACK segment），将其放入一个向 Bob 计算机寻址的数据报中。包含 TCP SYNACK 报文段的数据报经过 Google、Comcast 和学校网络，最终到达 Bob 计算机的以太网卡。 </li><li>Bob 的 Web 浏览器生成 HTTP GET 报文。HTTP GET 报文则写入套接字，其中 GET 报文成为一个 TCP 报文段的载荷，该 TCP 报文段则被放进一个数据报中，并交付到 <a href="http://www.google.com。" target="_blank" rel="noopener">www.google.com。</a> 注意到该 TCP 报文同时也对来自 Google 的 SYNACK 报文段进行 ACK。</li><li>在 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 的 HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将请求的 Web 页面内容放入 HTTP 响应体中，并将报文发送进 TCP 套接字中。包含 HTTP 响应报文的数据报经过 Google、Comcast 和学校网络转发，到达 Bob 计算机。Bob 的 Web 浏览器从套接字读取 HTTP 响应，从 HTTP 响应体中抽取 Web 网页的 HTML，最终渲染出页面效果。 </li></ul>]]></content>
      
      <categories>
          
          <category> Network </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机网络：自顶向下方法》：DNS</title>
      <link href="/2016/09/24/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9ADNS/"/>
      <url>/2016/09/24/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9ADNS/</url>
      <content type="html"><![CDATA[<h2 id="1-DNS-是什么"><a href="#1-DNS-是什么" class="headerlink" title="1. DNS 是什么"></a>1. DNS 是什么</h2><p>DNS（Domain Name System）是</p><ul><li>一个由分层的 DNS 服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据库的应用层协议</li><li>运行在 UDP 上，使用 53 号端口</li></ul><a id="more"></a><h2 id="2-DNS-提供的服务"><a href="#2-DNS-提供的服务" class="headerlink" title="2. DNS 提供的服务"></a>2. DNS 提供的服务</h2><ul><li>域名解析：将主机名（Host）解析为 IP 地址。</li><li>主机别名：有着复杂主机名的主机能够拥有一个或者多个别名，应用程序可以调用 DNS 来获得主机别名对应的规范主机名以及主机的 IP 地址。</li><li>邮件服务器别名：电子邮件应用程序可以调用 DNS，对提供的邮件服务器别名进行解析，以获得该主机的规范主机名机器 IP 地址。</li><li>负载分配：DNS 也用于在冗余的服务器之间进行负载分配。一些繁忙的站点被冗余分布在多台服务器上，每台服务器均运行在不同的端系统上，有着不同的 IP 地址。所以在这种情况下，一个 IP 地址集合与一个规范主机名关联。DNS 数据库存储着这些 IP 地址集合。当客户对该主机名进行 DNS 请求时，服务器用 IP 地址的整个集合进行响应，但在每个回答中循环这些地址次序。因为客户通常总是与 IP 地址排在最前面的服务器建立连接，所以 DNS 就在所有这些冗余服务器之间循环分配了负载。</li></ul><h2 id="3-简要工作流程"><a href="#3-简要工作流程" class="headerlink" title="3. 简要工作流程"></a>3. 简要工作流程</h2><p>用浏览器描述 DNS 工作过程：</p><ol><li>同一台主机运行着 DNS 应用的客户端。</li><li>浏览器从 URL 中抽取出主机名，传给 DNS 应用的客户端。</li><li>DNS 客户机端向 DNS 服务器发送一个包含主机名的 DNS 请求。</li><li>DNS 服务器最终将返回一个（或一个集合）该主机名对应的主机 IP 地址。</li><li>浏览器向位于该 IP 地址 80 端口的 HTTP 服务器进程发起一个 TCP 连接。</li></ol><h2 id="4-DNS-服务器的层次结构"><a href="#4-DNS-服务器的层次结构" class="headerlink" title="4. DNS 服务器的层次结构"></a>4. DNS 服务器的层次结构</h2><p>DNS 使用了大量的 DNS 服务器，它们以层次方式组织，并分布在全世界范围内。大致来说，有 3 种类型的 DNS 服务器：根 DNS 服务器、顶级域（Top-Level Domain，TLD）DNS 服务器和权威 DNS 服务器。它们以下图的层次结构组织：<br><img src="https://user-images.githubusercontent.com/12514722/30777329-bbcb4b04-a0ea-11e7-92e0-6b586f378118.png" alt="image"></p><ul><li>根 DNS 服务器。在因特网上有 13 个根 DNS 服务器（编号为 A 到 M），它们中的大部分位于北美洲。每台“服务器”实际上是一个冗余服务器的网络，以提供安全性和可靠性。根 DNS 服务器用来返回 TLD 服务器的 IP 地址。</li><li>顶级域名服务器（top level domain，简称 TLD)。这些服务器负责顶级域名如 com、org、net、edu 和 gov，以及所有国家的顶级域名如 uk、fr 等。TLD 服务器返回权威服务器的 IP 地址。</li><li>权威 DNS 服务器。每一个在 internet 中的有公共可访问主机的组织或机构，必须提供公共可访问的 DNS 记录，并将之存放在权威 DNS 服务器中。权威 DNS 服务器可以是本组织的服务器也可以租用其他组织的服务器。它用来返回主机的 IP 地址。权威 DNS 存在的理由：每一个机构都有很多的主机，这些主机可能位于不同的地理位置，有不同的 IP 地址，但他们可能有相同的域名，如果这些信息全部由顶级域名服务器进行管理，工作量太大。</li><li>本地 DNS 服务器：根、TLD和权威 DNS 服务器都处在 DNS 服务器的层次结构中，还有一类重要的 DNS，称为本地 DNS 服务器。一个本地 DNS 服务器严格来说不属于该层次结构，但它却是很重要的。每个 ISP 都有一台本地 DNS 服务器。本地 DNS 服务器起着代理的作用，本地主机将 DNS 请求发向本地 DNS 服务器，本地 DNS 服务器将该请求转发到 DNS 服务器层次结构中。</li></ul><h2 id="5-DNS-解析流程"><a href="#5-DNS-解析流程" class="headerlink" title="5. DNS 解析流程"></a>5. DNS 解析流程</h2><h3 id="5-1-浏览器访问域名时的前置步骤"><a href="#5-1-浏览器访问域名时的前置步骤" class="headerlink" title="5.1 浏览器访问域名时的前置步骤"></a>5.1 浏览器访问域名时的前置步骤</h3><p>若用户通过浏览器访问某站点，此时存在两个步骤：</p><ol><li>浏览器检查缓存中是否有该域名对应的解析过的 IP 地址，若命中则解析过程结束；否则进行步骤 2。</li><li>浏览器检查操作系统缓存中是否有该域名对应的 DNS 解析结果，若命中则解析过程结束；否则进行后续步骤。</li></ol><h3 id="5-2-DNS-在服务器之间的解析步骤"><a href="#5-2-DNS-在服务器之间的解析步骤" class="headerlink" title="5.2 DNS 在服务器之间的解析步骤"></a>5.2 DNS 在服务器之间的解析步骤</h3><p>下图例子假设主机 cs.ustc.edu 想知道主机 cs.csu.edu 的 IP 地址，假设 USTC 大学的本地 DNS 服务器为 dns.ustc.edu，同时假设 CSU 大学的权威 DNS 服务器为 dns.csu.edu。</p><ol><li>主机 cs.ustc.edu 首先向它的本地 DNS 服务器 dns.ustc.edu 发送一个 DNS 查询报文。该查询报文含有被转换的主机名 cs.csu.edu。 </li><li>本地 DNS 服务器将该查询报文发送到根 DNS 服务器，根 DNS 服务器注意到 edu 的前缀，所以将负责 edu 的 TLD 的 IP 地址列表返回给本地 DNS 服务器。</li><li>本地 DNS 服务器再次向这些 TLD 服务器之一发送 DNS 查询报文，该 TLD 服务器注意到 csu.edu 的前缀，所以将权威服务器 dns.cs.edu 的 IP 地址返回给本地 DNS 服务器。 </li><li>本地 DNS 服务器向权威服务器 dns.cs.edu 发送查询报文，权威服务器用 cs.csu.edu 的 IP 地址进行响应。</li><li>最后，本地 DNS 服务器将查询得到的 IP 地址返回给主机 cs.ustc.edu。</li></ol><p><img src="https://user-images.githubusercontent.com/12514722/30777348-098fa682-a0eb-11e7-8e16-eb403812d943.png" alt="image"></p><p>DNS 查询也可以一种递归的方式进行：<br><img src="https://user-images.githubusercontent.com/12514722/30777363-55c71e5e-a0eb-11e7-891d-e9c07d55123b.png" alt="image"></p><h3 id="5-3-DNS-缓存"><a href="#5-3-DNS-缓存" class="headerlink" title="5.3 DNS 缓存"></a>5.3 DNS 缓存</h3><p>如果每次 DNS 解析都要走完上面介绍的整个流程，就会带来网络带宽的消耗和时延，这对于用户和 DNS 解析系统都是不友好的。所以当本地 DNS 服务器在完成一次查询后就会将得到的主机名到 IP 地址的映射缓存到本地，从而加快 DNS 的解析速度。实际上，解析大多数都是在本地服务器上完成的。由于主机名和 IP 地址之间的映射不是永久的，DNS 服务器在一段时间后，通常是两天，就会丢弃缓存信息。</p><p>大部分的 DNS 洪泛攻击可以由本地 DNS 缓存缓解。</p><p>在 Linux 下可以通过<code>/etc/init.d/nscd restart</code>来清除缓存。</p><h3 id="5-4-JVM-中的-DNS-缓存"><a href="#5-4-JVM-中的-DNS-缓存" class="headerlink" title="5.4 JVM 中的 DNS 缓存"></a>5.4 JVM 中的 DNS 缓存</h3><p>Java 应用中的 JVM 也会缓存 DNS 的解析结果，这个缓存是在 <code>InetAddress</code> 类中，缓存时间较特殊，两种缓存策略：</p><ul><li>缓存正确结果</li><li>缓存失败的结果</li></ul><p>两个缓存时间由两个配置项来控制，配置项是在 <code>%JAVA_HOME%\lib\security\java.security</code> 文件中配置的。</p><p>两个配置项分别是 <code>networkaddress.cache.ttl</code> 和 <code>networkaddress.cache.negtive.ttl</code> ，其默认值分别是 -1（永不失效）和 10（保留 10 秒钟）。</p><p>修改方式：</p><ul><li>直接修改 <code>java.secury</code> 文件的默认值</li><li>在 JAVA 启动时加启动参数 <code>-Dsun.NET.inetaddress.ttl=XXX</code> 来修改默认值。</li></ul><p>如果要用 <code>InetAddress</code> 类来解析域名时，一定要采用单例模式，否则会有严重的性能问题，每次都要创建新的类，都要进行完整的域名解析过程。</p><h2 id="6-DNS-记录"><a href="#6-DNS-记录" class="headerlink" title="6. DNS 记录"></a>6. DNS 记录</h2><p>共同实现 DNS 分布式数据库的所有 DNS 服务器存储了资源记录（Resource Record，RR），资源记录提供了主机名到 IP 地址的映射。每个 DNS 回答报文包含了一条或多条资源记录。资源记录是一个包含了下列字段的四元组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（Name，Value，Type，TTL）</span><br></pre></td></tr></table></figure><p>TTL 是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间。如果域名解析改动较频繁，比如使用动态 IP 等，就应该把 TTL 尽量设小； 如果域名解析不是经常改动，一般可将 TTL 适当设置得大一点，以加快主机的访问速度。Name 和 Value 的值取决于 Type。</p><ul><li>如果 Type=A，则 Name 是主机名，Value 是该主机对应的 IP 地址。即，一条 A 记录提供了标准的主机名到 IP 地址的映射。</li><li>如果 TYpe=NS，则 Name 是个域，比如 csu.edu，而 Value 是知道如何获得该域中主机 IP 地址的权威 DNS 服务器的主机名，比如 dns.csu.edu。这个记录用于沿着查询链来路由 DNS 查询。</li><li>如果 Type=CNAME，则 Value 是别名为 Name 的主机对应的规范主机名。该记录能够向查询的主机提供一个主机名对应的规范主机名。</li><li>如果 Type=MX，则 Value 是别名为 Name 的邮件服务器的规范主机名。MX 记录允许邮件服务器主机名具有简单的别名。事实上，MX 记录允许一个公司的邮件服务器和 Web 服务器使用相同（别名化）的主机名。为了获得邮件服务器的规范主机名，DNS 客户端应当请求一条 MX 记录；而为了获得其他服务器的规范主机名，DNS 客户应当请求 CNAME 记录。</li></ul><p>如果一台 DNS 服务器是用于某特定主机名的权威 DNS 服务器，那么该 DNS 服务器会有一条包含该主机名的类型 A 记录（即使该 DNS 服务器不是其权威 DNS 服务器，它也可能在缓存中包含有一条类型 A 记录）。如果服务器不是用于某主机名的权威服务器，那么该服务器将包含一条类型 NS 记录，该记录对应于包含主机名的域；它还将包括一条类型 A 记录，该记录提供了在 NS 记录的 Value 字段中的 DNS 服务器的 IP 地址。举例来说，假设一台 edu TLD 服务器不是主机 gaia.cs.umass.edu 的权威 DNS 服务器，则该服务器将包含一条包括主机 cs.umass.edu 的域记录，如（umass.edu，dns.umass.edu，NS）；该 edu TLD 服务器还将包含一条类型 A 记录，如（dns.umass.edu，128.119.40.111，A），该记录将名字 dns.umass.edu 映射为一个 IP 地址。</p><p>注册一个全新的域名最少要向对应的 TLD 注入 A 型与 NS 型两种记录。</p><h2 id="7-DNS-报文"><a href="#7-DNS-报文" class="headerlink" title="7. DNS 报文"></a>7. DNS 报文</h2><p><img src="https://user-images.githubusercontent.com/12514722/30777355-2974e30e-a0eb-11e7-8437-2f4f5d46a5bf.png" alt="image"></p><ul><li>DNS 报文格式前 12 个字节是首部区域，其中有几个字段。第一个字段（标识符）是一个 16 比特的数，用于标识该查询。这个标识符会被复制到对查询的回答报文中，以便让客户用它来匹配发送的请求和接收到的回答。标志字段中含有若干标志。1 比特的“查询/回答”标志位指出报文是查询报文（0）还是回答报文（1）。当某 DNS 服务器是所请求名字的权威 DNS 服务器时，1 比特的“权威的”标志位被置在回答报文中。如果客户（主机或者DNS 服务器）在该 DNS 服务器没有某记录时希望它执行递归查询，将设置 1 比特的“希望递归”标志位。如果该 DNS 服务器支持递归查询，在它的回答报文中会对 1 比特的“递归可用”标志位置位。在该首部中，还有 4 个有关数量的字段，这些字段指出了在首部后的 4 类数据区域出现的数量。</li><li>问题区域包含着正在进行的查询信息。该区域包括：①名字字段，指出正在被查询的主机名字；②类型字段，它指出有关该名字的正被询问的问题类型，例如主机地址是与一个名字相关联（类型 A）还是与某个名字的邮件服务器相关联（类型 MX）。</li><li>在来自 DNS 服务器的回答中，回答区域包含了对最初请求的名字的资源记录。前面讲过每个资源记录中有 Type（如 A、NS、CNAME 和 MX）字段、Value 字段和 TTL 字段。在回答报文的回答区域中可以包含多条 RR，因此一个主机名能够有多个 IP 地址（例如，就像本节前面讨论的冗余 Web 服务器）。</li><li>权威区域包含了其他权威服务器的记录。</li><li>附加区域包含了其他有帮助的记录。例如，对于一个 MX 请求的回答报文的回答区域包含了一条资源记录，该记录提供了邮件服务器的规范主机名。该附加区域包含一个类型 A 记录，该记录提供了用于该邮件服务器的规范主机名的 IP 地址。</li></ul><h2 id="8-DNS-轮询"><a href="#8-DNS-轮询" class="headerlink" title="8. DNS 轮询"></a>8. DNS 轮询</h2><h3 id="8-1-原理"><a href="#8-1-原理" class="headerlink" title="8.1 原理"></a>8.1 原理</h3><p>大多数域名注册商都支持在 DNS 服务器中为同一个域名配置多个 IP 地址（即为一个主机名设置多条A资源记录）。在应答 DNS 查询时，DNS 服务器对每个查询返回所有轮询主机服务器 IP，其顺序取决于 DNS 服务器配置，以此将客户端的访问引导到不同的 IP 上去，从而达到负载均衡的目的。</p><p>DNS 服务器一般基于 BIND（Berkeley Internet Name Domain）实现。BIND 将根据 <code>rrset-order</code> 语句定义的次序把配置中设定的所有A记录都发送给客户端，客户端可以使用自己规定的算法从记录中挑选一条。<code>rrset-order</code> 语句是主配置文件中 <code>options</code> 主语句的一条子语句，可以定义固定、随机和轮询的次序。<code>order_spec</code> 定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ class class_name ][ type type_name ][ name &quot;domain_name&quot;] order ordering</span><br></pre></td></tr></table></figure><p>如果没有设定类，默认值为 <code>ANY</code>。如果没有设定类型，默认值为 <code>ANY</code>。如果没有设定名称，默认值为 “*”。合法的排序参数包括：</p><ul><li><code>fixed</code>：记录以它们在域文件中的顺序</li><li><code>random</code>：记录以随机顺序被返回</li><li><code>cyclic</code>：记录以环顺序被返回</li></ul><h3 id="8-2-实验"><a href="#8-2-实验" class="headerlink" title="8.2 实验"></a>8.2 实验</h3><p><code>dig</code> 三次 note.youdao.com：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig note.youdao.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; note.youdao.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 38905</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;note.youdao.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">note.youdao.com.1069INA59.111.179.138</span><br><span class="line">note.youdao.com.1069INA59.111.179.135</span><br><span class="line">note.youdao.com.1069INA59.111.179.136</span><br><span class="line">note.youdao.com.1069INA59.111.179.137</span><br><span class="line"></span><br><span class="line">;; Query time: 23 msec</span><br><span class="line">;; SERVER: 10.238.14.2#53(10.238.14.2)</span><br><span class="line">;; WHEN: Fri Aug 18 16:17:26 2017</span><br><span class="line">;; MSG SIZE  rcvd: 97</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ dig note.youdao.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; note.youdao.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33819</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;note.youdao.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">note.youdao.com.1023INA59.111.179.135</span><br><span class="line">note.youdao.com.1023INA59.111.179.136</span><br><span class="line">note.youdao.com.1023INA59.111.179.137</span><br><span class="line">note.youdao.com.1023INA59.111.179.138</span><br><span class="line"></span><br><span class="line">;; Query time: 2 msec</span><br><span class="line">;; SERVER: 10.238.14.2#53(10.238.14.2)</span><br><span class="line">;; WHEN: Fri Aug 18 16:18:11 2017</span><br><span class="line">;; MSG SIZE  rcvd: 97</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig note.youdao.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; note.youdao.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 3771</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;note.youdao.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">note.youdao.com.1112INA59.111.179.136</span><br><span class="line">note.youdao.com.1112INA59.111.179.137</span><br><span class="line">note.youdao.com.1112INA59.111.179.138</span><br><span class="line">note.youdao.com.1112INA59.111.179.135</span><br><span class="line"></span><br><span class="line">;; Query time: 2 msec</span><br><span class="line">;; SERVER: 10.238.14.2#53(10.238.14.2)</span><br><span class="line">;; WHEN: Fri Aug 18 16:36:44 2017</span><br><span class="line">;; MSG SIZE  rcvd: 97</span><br></pre></td></tr></table></figure><p>可以看到 <code>ANSWER SECTION</code> 中 IP 的顺序是不同的，并且可以猜测这里使用了 cyclic 的轮询方式。假定客户端（如浏览器）总是选择第一条记录，则每次对 note.youdao.com 的 HTTP 请求会被映射到不同IP上。</p><h3 id="8-3-DNS-轮询的用处"><a href="#8-3-DNS-轮询的用处" class="headerlink" title="8.3 DNS 轮询的用处"></a>8.3 DNS 轮询的用处</h3><ul><li><p>负载均衡。如果采用 DNS 轮询技术，将一个域名解析到多台服务器的各自的 IP 地址上，利用浏览器的随机访问对流量进行分摊，则会降低每台服务器的压力，实现均衡负载。故障时保证访问是它的另一个重要应用。从之前的原理的简述我们可以看出，轮询时 DNS 服务器会将所有的 IP 返回给浏览器，浏览器自身的机制会使其在连接出错时继续连接下一个 IP，直到所有 IP 都无法连接或者连接成功为止。这样，只要两台服务器不同时宕机，那么我们几乎可以让网站在线率达到将近百分之百。类似地，在更换服务器地址时，使用另一台服务器做 DNS 轮询进行过渡是一个很好的方法。</p></li><li><p>CDN 加速。DNS 轮询是 CDN 的基础，通过对于不同访问线路的不同解析，达到最快的访问速度。</p></li><li>内外网的不同访问内容与内容的加速访问。</li></ul><h3 id="8-4-DNS-负载均衡的优点"><a href="#8-4-DNS-负载均衡的优点" class="headerlink" title="8.4 DNS 负载均衡的优点"></a>8.4 DNS 负载均衡的优点</h3><ol><li>将负载均衡的工作交给 DNS，省去了网站管理维护负载均衡服务器的麻烦。</li><li>技术实现比较灵活、方便，简单易行，成本低，使用于大多数 TCP/IP 应用。</li><li>对于部署在服务器上的应用来说不需要进行任何的代码修改即可实现不同机器上的应用访问。</li><li>服务器可以位于互联网的任意位置。</li><li>同时许多 DNS 还支持基于地理位置的域名解析，即会将域名解析成距离用户地理最近的一个服务器地址，这样就可以加速用户访问，改善性能。</li></ol><h3 id="8-5-DNS-负载均衡的缺点"><a href="#8-5-DNS-负载均衡的缺点" class="headerlink" title="8.5 DNS 负载均衡的缺点"></a>8.5 DNS 负载均衡的缺点</h3><ol><li>目前的 DNS 是多级解析的，每一级 DNS 都可能缓存 A 记录，当某台服务器下线之后，即使修改了 A 记录，要使其生效也需要较长的时间，这段时间，DNS 仍然会将域名解析到已下线的服务器上，最终导致用户访问失败。</li><li>不能够按服务器的处理能力来分配负载。DNS 负载均衡采用的是简单的轮询算法，不能区分服务器之间的差异，不能反映服务器当前运行状态，所以其的负载均衡效果并不是太好。</li><li>可能会造成额外的网络问题。为了使本 DNS 服务器和其他 DNS 服务器及时交互，保证 DNS 数据及时更新，使地址能随机分配，一般都要将 DNS 的刷新时间设置的较小，但太小将会使 DNS 流量大增造成额外的网络问题。</li></ol><h2 id="9-为什么只有-13-台根服务器？"><a href="#9-为什么只有-13-台根服务器？" class="headerlink" title="9. 为什么只有 13 台根服务器？"></a>9. 为什么只有 13 台根服务器？</h2><p>准确说是 “There are 12 organisations maintaining root servers and 13 root server IPs being used”。</p><p><a href="https://www.lifewire.com/dns-root-name-servers-3971336" target="_blank" rel="noopener">Why There Are Only 13 DNS Root Name Servers</a></p><blockquote><p>Because DNS operation relies on potentially millions of other internet servers finding the root servers at any time, the addresses for root servers must be distributable over IP as efficiently as possible. Ideally, all of these IP addresses should fit into a single packet (datagram) to avoid the overhead of sending multiple messages between servers. In IPv4 in widespread use today, the DNS data that can fit inside a single packet is as small as 512 bytes after subtracting all the other protocol supporting information contained in packets. Each IPv4 address requires 32 bytes. Accordingly, the designers of DNS chose 13 as the number of root servers for IPv4, taking 416 bytes of a packet and leaving up to 96 bytes for other supporting data and the flexibility to add a few more DNS root servers in the future if needed.​</p></blockquote><h2 id="10-跟踪-DNS-解析过程"><a href="#10-跟踪-DNS-解析过程" class="headerlink" title="10. 跟踪 DNS 解析过程"></a>10. 跟踪 DNS 解析过程</h2><h3 id="10-1-nslookup"><a href="#10-1-nslookup" class="headerlink" title="10.1 nslookup"></a>10.1 nslookup</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nslookup note.youdao.com</span></span><br><span class="line">Server:10.238.14.2</span><br><span class="line">Address:10.238.14.2#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:note.youdao.com</span><br><span class="line">Address: 59.111.179.135</span><br><span class="line">Name:note.youdao.com</span><br><span class="line">Address: 59.111.179.136</span><br><span class="line">Name:note.youdao.com</span><br><span class="line">Address: 59.111.179.137</span><br><span class="line">Name:note.youdao.com</span><br><span class="line">Address: 59.111.179.138</span><br></pre></td></tr></table></figure><h3 id="10-2-dig"><a href="#10-2-dig" class="headerlink" title="10.2 dig"></a>10.2 dig</h3><p>略</p><h3 id="10-3-dig-trace"><a href="#10-3-dig-trace" class="headerlink" title="10.3 dig +trace"></a>10.3 dig +trace</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig note.youdao.com +trace</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; note.youdao.com +trace</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.79850INNSm.root-servers.net.</span><br><span class="line">.79850INNSa.root-servers.net.</span><br><span class="line">.79850INNSg.root-servers.net.</span><br><span class="line">.79850INNSl.root-servers.net.</span><br><span class="line">.79850INNSe.root-servers.net.</span><br><span class="line">.79850INNSc.root-servers.net.</span><br><span class="line">.79850INNSb.root-servers.net.</span><br><span class="line">.79850INNSd.root-servers.net.</span><br><span class="line">.79850INNSh.root-servers.net.</span><br><span class="line">.79850INNSj.root-servers.net.</span><br><span class="line">.79850INNSi.root-servers.net.</span><br><span class="line">.79850INNSk.root-servers.net.</span><br><span class="line">.79850INNSf.root-servers.net.</span><br><span class="line">;; Received 505 bytes from 10.238.14.2#53(10.238.14.2) in 26 ms</span><br><span class="line"></span><br><span class="line">com.172800INNSa.gtld-servers.net.</span><br><span class="line">com.172800INNSb.gtld-servers.net.</span><br><span class="line">com.172800INNSc.gtld-servers.net.</span><br><span class="line">com.172800INNSd.gtld-servers.net.</span><br><span class="line">com.172800INNSe.gtld-servers.net.</span><br><span class="line">com.172800INNSf.gtld-servers.net.</span><br><span class="line">com.172800INNSg.gtld-servers.net.</span><br><span class="line">com.172800INNSh.gtld-servers.net.</span><br><span class="line">com.172800INNSi.gtld-servers.net.</span><br><span class="line">com.172800INNSj.gtld-servers.net.</span><br><span class="line">com.172800INNSk.gtld-servers.net.</span><br><span class="line">com.172800INNSl.gtld-servers.net.</span><br><span class="line">com.172800INNSm.gtld-servers.net.</span><br><span class="line">;; Received 493 bytes from 192.203.230.10#53(192.203.230.10) in 184 ms</span><br><span class="line"></span><br><span class="line">youdao.com.172800INNSns1.yodao.com.</span><br><span class="line">youdao.com.172800INNSns2.yodao.com.</span><br><span class="line">;; Received 107 bytes from 192.43.172.30#53(192.43.172.30) in 367 ms</span><br><span class="line"></span><br><span class="line">note.youdao.com.1200INA59.111.179.137</span><br><span class="line">note.youdao.com.1200INA59.111.179.138</span><br><span class="line">note.youdao.com.1200INA59.111.179.135</span><br><span class="line">note.youdao.com.1200INA59.111.179.136</span><br><span class="line">;; Received 108 bytes from 61.135.216.245#53(61.135.216.245) in 9 ms</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Network，读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《计算机网络：自顶向下方法》：TCP</title>
      <link href="/2016/09/23/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9ATCP/"/>
      <url>/2016/09/23/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9ATCP/</url>
      <content type="html"><![CDATA[<h2 id="1-TCP-连接"><a href="#1-TCP-连接" class="headerlink" title="1. TCP 连接"></a>1. TCP 连接</h2><p>TCP 被称为面向连接的（connection-oriented），这是因为在一个应用程序可以开始向另一个应用程序发送数据之前，这两个进程必须先相互 “握手”，相互发送某些预备报文段，以建立确保数据传输的参数。作为 TCP 连接建立的一部分，连接的双方都将初始化与 TCP 连接相关的许多 TCP 状态变量。<br><a id="more"></a></p><p>这种连接状态完全保留在两个端系统中。由于 TCP 协议只在端系统中运行，而不在中间的网络元素中运行，所以中间的网络元素不会维持 TCP 连接状态。事实上，中间路由器对 TCP 连接完全视而不见，它们看到的是数据报，而不是链接。</p><p>TCP 连接提供的是全双工服务（full－duplex service）：如果一台主机上的进程 A 与另一台主机上的进程 B 存在一条 TCP 连接，那么应用层数据就可以在从进程 B 流向进程 A 的同时，也可以从进程 A 流向进程 B。TCP 连接也总是点到点（point－to－point）的，即在单个发送方与单个接收方之间的连接。</p><p>一旦建立起一条 TCP 连接，两个应用进程之间就可以相互发送数据了。客户进程通过套接字传递数据流。数据一旦到达套接字，它就由客户中运行的 TCP 控制了。TCP 将这些数据引导到该连接的发送缓存（send buffer）里，发送缓存是在三次握手初期设置的缓存之一。接下来 TCP 就会不时从发送缓存里取出一块数据。TCP 可以从缓存中取出并放入报文段中的数据受限于 “最大报文段长度”（Maximum Segment Size，MSS）。MSS 通常根据最初确定的由本地发送主机发送的最大链路层帧长度（即所谓的最大传输单元（Maximum Transmission Unit，MTU））来设置。设置该 MSS 要保证一个 TCP 报文段加上 TCP／IP 首部长度（通常 40 个字节）将适合单个链路层帧。以太网和 PPP 链路层协议都具有 1500 字节的 MTU，因此 MSS 的典型值为 1460 字节。注意到 MSS 是指在报文段里应用层数据的最大长度，而不是指包括 TCP 首部的 TCP 报文段的最大长度。</p><p>TCP 为每块客户数据配上一个 TCP 首部，从而形成多个 TCP 报文段（TCP segment）。这些报文段被下传给网络层，网络层将其分别封装在网络层 IP 数据报中。然后这些 IP 数据报被发送到网络中。当 TCP 在另一端接收到一个报文段后，该报文段的数据就被放入该 TCP 连接的接收缓存中。应用程序从此缓存中读取数据流。TCP 连接的每一端都有各自的发送缓存和接收缓存。</p><p>可以看出，TCP 连接的组成包括：一台主机上的缓存、变量和与进程连接的套接字，以及另一台主机上的另一组缓存、变量和与进程连接的套接字。在这两台主机之间的网络元素（如路由器、交换机和中继器）中，没有为该连接分配任何缓存和变量。</p><h2 id="2-TCP-报文段结构"><a href="#2-TCP-报文段结构" class="headerlink" title="2. TCP 报文段结构"></a>2. TCP 报文段结构</h2><p><img src="https://user-images.githubusercontent.com/12514722/30776380-d27a6b22-a0d7-11e7-9cf3-fa3d83d20725.png" alt="image"></p><p>TCP 把数据看成一个无结构的、有序的字节流。一个报文段的序号（sequence number for a segment）是该报文段首字节的字节流编号。确认号是希望从目标主机收到的下一字节的序号。</p><p>假定主机 A 已收到一个来自主机 B 的包含字节0-535的报文段，以及另一个包含字节900-1000的报文段。由于某种原因，A 还没有收到字节536-899的报文段。在这个例子中，主机 A 为了重新构建主机 B 的数据流，仍在等待字节536（和其后的字节）。因此，A 到 B 的下一个报文段将在确认号字段中包含536。因为 TCP 只确认该流中至第一个丢失字节为止的字节，所以TCP被称为提供累积确认（cumulative acknowledgment）。实践中，主机 A 将保留失序的字节900~1000，并等待缺少的字节以填补该间隔。</p><h3 id="3-可靠数据传输"><a href="#3-可靠数据传输" class="headerlink" title="3. 可靠数据传输"></a>3. 可靠数据传输</h3><p>TCP 在 IP 不可靠的尽力而为服务之上创建了一种可靠数据传输服务（reliable data transfer service）。TCP 的可靠数据传输服务确保一个进程从其接收缓存中读出的数据流是无损坏、无间隔、非冗余和按序的数据流；即该字节流与连接的另一方端系统发送出的字节流是完全相同。</p><p>TCP 发送方有三个与发送和重传有关的事件：</p><ul><li>从上层应用程序接收数据。TCP 从上层应用程序接受数据，将数据封装在一个报文段中，并把该报文段交给 IP。注意到每一个报文段都包含一个序号，这个序号就是该报文段第一个数据字节流编号。还要注意到如果定时器还没有为某些其他报文段而运行，则当报文段被传给 IP 时，TCP 就要启动该定时器。</li><li>定时器超时。TCP 通过重传引起超时的报文段（具有最小序号的还未被确认的报文段）来响应超时事件。然后 TCP 重启定时器。</li><li>收到 ACK。当该事件发生时，TCP 将 ACK 的值 y 与它的变量 SendBase 进行比较。TCP 状态变量 SendBase是最早未被确认的字节的序号。（因此 SendBase - 1 是指接收方已正确接收到的数据的最后一个字节的序号。）TCP 采用累积确认，所以 y 确认了字节编号在 y 之前的所有字节都已经收到。如果 y &gt;  SendBase，则该 ACK 是在确认一个或多个先前未被确认的报文段。因此发送方更新它的 SendBase 变量；如果当前有未被确认的报文段，TCP 还要重新启动定时器。</li></ul><p>发送方伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/* 假设发送方不受 TCP 流量和拥塞控制的限制，来自上层的数据长度小于 MSS，且数据传送只在一个方向进行 */</span><br><span class="line"></span><br><span class="line">NextSeqNum = InitialSeqNumber  </span><br><span class="line">SendBase = InitiSeqNumber  </span><br><span class="line">  </span><br><span class="line">loop(forever)&#123;  </span><br><span class="line">    switch(event)&#123;  </span><br><span class="line">  </span><br><span class="line">        event: 接收来自应用程序产生的数据data放入到发送缓存中  </span><br><span class="line">                if(定时器没有开启)  </span><br><span class="line">                    start_timer  </span><br><span class="line">                将包装后的报文段交付给网络层形成IP数据报  </span><br><span class="line">                NextSeqNum = NextSeqNum + length（data）  </span><br><span class="line">        break;  </span><br><span class="line">  </span><br><span class="line">        event:如果定时器超时  </span><br><span class="line">              发送那个没有确认的序号最小的分组  </span><br><span class="line">              start_timer  </span><br><span class="line">        break;  </span><br><span class="line">  </span><br><span class="line">        event:接收到ACK，将ACK中的确认号赋给y  </span><br><span class="line">              if（y &gt; SendBase）&#123;  </span><br><span class="line">                SendBase = y;  </span><br><span class="line">                if(目前还有尚未确认的部分)&#123;  </span><br><span class="line">                    start_timer  </span><br><span class="line">                &#125;  </span><br><span class="line">              &#125;else &#123;  </span><br><span class="line">                开始对y进行计数  </span><br><span class="line">                if(发送ACK的确认号为y的个数为3个的时候)&#123;  </span><br><span class="line">                    重新发送序号为y的哪一个分组  </span><br><span class="line">                &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">        break；  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超时时间加倍"><a href="#超时时间加倍" class="headerlink" title="超时时间加倍"></a>超时时间加倍</h4><p>我们现在讨论一下在大多数 TCP 实现中所做的一些修改。首先关注的是在定时器时限过期后超时间隔的长度。在这种修改中，每当超时事件发生时，TCP 重传具有最小序号的还未被确认的报文段。只是每次 TCP 重传时都会将下一次的超时间隔设置为先前值的两倍，而不是用从 EstimatedRTT 和 DevRTT 推算出的值。因此，超时间隔在每次重传后会呈指数型增长。然而，每当定时器在另两个事件（即收到上层应用的数据和收到 ACK）中的任意一个启动时，TimeoutInterval 由最近的 EstimatedRTT 值与 DevRTT 值推算得到。</p><p>这种修改提供了一个形式受限的拥塞控制。定时器过期很可能是由网络拥塞引起的，即太多的分组到达源与目的地之间的路径上的一台（或多台）路由器的队列中，造成分组丢失或长时间的排队时延。在拥塞的时候，如果源持续重传分组，会使拥塞更加严重。相反，TCP 采用更文雅的方式，每个发送方的重传都是经过越来越长的时间间隔后进行的。</p><h4 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h4><p>超时触发重传存在的问题之一是超时周期可能相对较长。当一个报文段丢失时，这种长超时周期迫使发送方延迟重传丢失的分组，因而增加了端到端的时延。幸运的是，发送方通常可在超时事件发生之前通过注意所谓冗余 ACK 来较好地检测到丢包情况。冗余 ACK（duplicate ACK）就是再次确认某个报文段的 ACK，而发送方先前已经收到对该报文段的确认。下表总结了 TCP 接收方的 ACK 生成策略 [RFC 5681]。当 TCP 接收方收到一个具有这样序号的报文段时，即其序号大于下一个所期望的、按序的报文段，它检测到了数据流中的一个间隔，这就是说有报文段丢失。这个间隔可能是由于在网络中报文段丢失或重新排序造成的。因为 TCP 不使用否定确认，所以接收方不能向发送方发回一个显式的否定确认。相反，它只是对已经接收到的最后一个按序字节数据进行重复数据（即产生一个冗余 ACK）即可。（注意到表中允许接收方不丢弃失序报文段。）</p><ul><li>产生 TCP ACK 的建议 [RFC 5681]</li></ul><table><thead><tr><th>事件</th><th>TCP 接收方动作</th></tr></thead><tbody><tr><td>具有所期望序号的按序报文段到达。所有在期望序号及以前的数据都已经被确认</td><td>延迟的 ACK。对另一个按序报文段的到达最多等待500ms。如果下一个按序报文段在这个时间间隔内没有到达，则发送一个 ACK</td></tr><tr><td>具有所期望序号的按序报文段到达。另一个按序报文段等待 ACK 传输</td><td>立即发送单个累积 ACK，以确认两个按序报文段</td></tr><tr><td>比期望序号大的失序报文段到达。检测出间隔</td><td>立即发送冗余 ACK，指示下一个期待字节的序号（其为间隔的低端序号）</td></tr><tr><td>能部分或完全填充接受数据间隔的报文段到达</td><td>倘若该报文段起始于间隔的低端，则立即发送 ACK</td></tr></tbody></table><p>因为发送方经常一个接一个地发送大量的报文段，如果一个报文段丢失，就很可能引起许多一个接一个的冗余 ACK。如果 TCP 发送方接收到对相同数据的3个冗余 ACK，它把这当作一种指示，说明跟在这个已被确认过3次的报文段之后的报文段已经丢失。一旦收到3个冗余 ACK，TCP 就执行快速重传（fast retransmit）[RFC 5681]，即在该报文段的定时器过期之前重传丢失的报文段。</p><h4 id="是回退-N-步还是选择重传"><a href="#是回退-N-步还是选择重传" class="headerlink" title="是回退 N 步还是选择重传"></a>是回退 N 步还是选择重传</h4><p>TCP是GBN协议和SR协议的混合体：</p><ul><li>TCP 发送方仅需要维持已发送过但未被确认的最小序号和下一个要发送的字节的序号就可以了，这一点和 GBN 一致。</li><li>GBN 定时器过期之后发送方会重传未被确认的最小序号之后的数据段，这样很可能会造成重发大量分组，导致占用带宽，分组冗余。TCP 和 SR 相似，用的是选择重发，只发未被确认的最小序号的分组。</li></ul><h2 id="4-流量控制"><a href="#4-流量控制" class="headerlink" title="4. 流量控制"></a>4. 流量控制</h2><p>一条 TCP 连接每一侧主机都为该连接设置了接收缓存。当该 TCP 连接收到正确、按序的字节后，它就将数据放入接收缓存。相关联的应用进程会从该缓存中读取数据，但不必是数据刚已到达就立即读取。事实上，接收方应用也许正忙于其他业务，甚至要过很长时间后采取读取数据。如果某应用程序读取数据时相对缓慢，而发送方发送得太多、太快，发送的数据就会很容易地使该连接的接收缓存溢出。</p><p>TCP 为它的应用程序提供了流量控制服务（flow-control service）以消除发送方使接收方缓存溢出的可能性。流量控制因此是一个速度匹配服务，即发送方的发送速率与接收方应用程序的读取速率相匹配。</p><p>TCP 通过让发送方维护一个称为接收窗口（receive window）的变量来提供流量控制。通俗地说，接收窗口用于给发送方一个指示——该接收方还有多少可用的缓存空间。因为 TCP 是全双工通信，在连接两端的发送方都各自维护一个接收窗口。现假设主机 A 通过一条 TCP 连接向主机 B 发送一个大文件。主机 B 为该连接分配了一个接收缓存，并用 RevBuffer 来表示其大小，主机 B 上的应用进程不时地从该缓存中读取数据。定义以下变量：</p><ul><li>LastByteRead：主机 B 上的应用进程从缓存读出的数据流的最后一个字节的编号。</li><li>LastByteRcvd：从网络中到达的并且已放入主机 B 接收缓存中的数据流的最后一个字节的编号。</li></ul><p>由于 TCP 不允许已分配的缓存溢出，下式必须成立</p><p>$$<br>LastByteRcvd - LastByteRead \leq RcvBuffer<br>$$</p><p>接收窗口用 rwnd 表示，根据缓存可用空间的数量来设置：</p><p>$$<br>rwnd = RcvBuffer - [LastByteRcvd - LastByteRead]<br>$$</p><p>由于该空间是随着时间变化的，所以 rwnd 是动态的。主机 B 通过把当前的 rwnd 值放入它发给主机 A 的报文段接口窗口字段中，通知主机 A 它在该连接的缓存中海有多少可用空间。开始时，主机 B 设定 rwnd  = RcvBuffer。注意到为了实现这一点，主机 B 必须跟踪几个与连接有关的变量。</p><p>主机 A 轮流跟踪两个变量，LastByteSent 和 LastByteAcked，这两个变量的意义很明显。注意到这两个变量之间的差 LastByteSent - LastByteAcked，就是主机 A 发送到连接中但未被确认的数据量。通过将未被确认的数据量控制在 rwnd 以内，就可以保证主机 A 不会使主机 B 的接收缓存溢出。因此，主机 A 在该连接的整个生命周期须保证：</p><p>$$<br>LastByteSent - LastByteAcked \leq rwnd<br>$$</p><p>TCP 规范中要求：当主机 B 的接收窗口为 0 时，主机 A 继续发送只有一个字节数据的报文段。这些报文段将会被接收方确认。最终缓存将开始清空，并且确认报文段里将包含一个非 0 的 rwnd 值，以此通知主机 A 接收缓存有新的空间了。</p><p>UDP 并不提供流量控制。进程每次从缓存中读取一个完整的报文段。如果进程从缓存中读取报文段的速度不够快，那么缓存将会溢出，并且将丢失报文段。</p><p><img src="https://user-images.githubusercontent.com/12514722/30777094-fa955636-a0e5-11e7-83cd-5d4fc8827c77.png" alt="image"></p><h2 id="5-TCP-连接管理"><a href="#5-TCP-连接管理" class="headerlink" title="5. TCP 连接管理"></a>5. TCP 连接管理</h2><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p><img src="https://user-images.githubusercontent.com/12514722/30777123-b8625aba-a0e6-11e7-85d7-6c7743323ab6.png" alt="image"></p><p>第一步：客户端的 TCP 首先向服务端的 TCP 发送一个特殊的 TCP 报文段。报文段中不包含应用层数据。但是在报文段的首部中的一个标志位（即 SYN 比特）被值为 1。因此，这个特殊报文段通常被称为 SYN 报文段。另外，客户端会随机地选择一个初始序号（client_isn），并将此编号放置于该起始的 TCP SYN 报文段的序号字段中。该报文段会被封装在一个 IP 数据报中，并发送给服务器。 </p><p>第二步：一旦包含 TCP SYN 报文段的 IP 数据报到达服务器主机，服务器会从该数据报中提取出 TCP SYN 报文段，为该 TCP 连接分配 TCP 缓存和变量，并向客户 TCP 发送允许连接的报文段。这个允许连接的报文段也不包含应用层数据。但是，在报文段的首部却包含 3 个重要的信息。首先，SYN 比特被置为 1。其次，该 TCP 报文段首部的确认号字段被置为 client_isn + 1。最后，服务器选择自己的初始序号（server_isn），并将其放置到 TCP 报文段首部的序号字段中。这个允许连接的报文段实际上表明了：“我收到了你发起建立连接的 SYN 分组，该分组带有初始序号 client_isn，我同意建立该连接。我自己的初始序号是server_isn。”该允许连接的报文段有时被称为 SYNACK 报文段（SYNACK segment）。</p><p>第三步：在接收到 SYNACK 报文段后，客户端也要给该连接分配缓存和变量。客户主机向服务器发送另一个报文段；这最后一个报文段对服务器的允许连接的报文段进行了确认（该客户通过将值 server_isn + 1 放置到 TCP 报文段首部的确认字段中来完成此项工作）。因为连接已经建立了，所以该 SYN 比特被置为0。该三次握手的第三个阶段可以在报文段负载中携带客户到服务器的数据。</p><p>一旦完成这个 3 个步骤，客户和服务器主机就可以相互发送包括数据的报文段了。在以后每一个报文段中，SYN 比特都将被置为 0。</p><h4 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h4><p>参与一条 TCP 连接的两个进程中的任何一个都能终止该连接。当连接结束后，主机中的资源（缓存和变量）都将被释放。</p><p><img src="https://user-images.githubusercontent.com/12514722/30777160-5bc5c4da-a0e7-11e7-9d04-6862333c3af9.png" alt="image"></p><p>第一步：客户应用进程发出一个关闭连接命令。这会引起客户 TCP 向服务器进程发送一个特殊的 TCP 报文段，其首部中的一个标志位即 FIN 比特被置为 1。</p><p>第二步：当服务器接收到该报文段后，就向发送方回送一个确认报文段。</p><p>第三步：服务器发送它自己的终止报文段，其 FIN 比特被置为 1。</p><p>第四步：该客户对这个服务器的终止报文段进行确认。</p><h4 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h4><p>客户 TCP 开始时处于 CLOSED（关闭）状态。客户的应用程序发起一个新的 TCP 连接。这引起客户中的 TCP 向服务器中的 TCP 发送一个 SYN 报文段。在发送 SYN 报文段后，客户TCP进入了 SYN_SENT 状态。 当客户 TCP 处在 SYN_SENT状态时，它等待来自服务器 TCP 的对客户所发报文段进行确认且 SYN 比特被置为1的一个报文段。收到这样一个报文段之后，客户 TCP 进入 ESTABLISHED（已建立）状态。当处在 ESTABLISHED 状态时，TCP 客户就能发送和接收包含有效载荷数据的 TCP 报文段了。</p><p>假设客户应用程序决定要关闭该连接。（注意服务器也能选择关闭该连接。）这引起客户 TCP 发送一个带有 FIN 比特被置为1的 TCP 报文段，并进入 FIN_WAIT_1 状态。当处在 FIN_WAIT_1 状态时，客户TCP等待一个来自服务器的带有确认的 TCP 报文段。当它收该报文段时，客户 TCP 进入 FIN_WAIT_2 状态。当处在 FIN_WAIT_2 状态时，客户等待来自服务器的 FIN 比特被置为1的另一个报文段；当接收到该报文段后，客户 TCP 对服务器的报文段进行确认，并进入 TIME_WAIT 状态。假定 ACK 丢失，TIME_WAIT 状态使 TCP 客户重传最后的确认报文。TIME_WAIT 状态持续 2MSL（Maximum Segment Lifetime） 后，连接就正式关闭，客户端所有资源（包括端口号）将被释放。</p><p>客户 TCP 经历的典型的 TCP 状态序列<br><img src="https://user-images.githubusercontent.com/12514722/30776417-a2125462-a0d8-11e7-9388-41cde2c62dc7.png" alt="image"></p><p>服务器端 TCP 经历的典型的 TCP 状态序列<br><img src="https://user-images.githubusercontent.com/12514722/30776425-b837c8b2-a0d8-11e7-9204-9350df96e299.png" alt="image"></p><p>向运行在本地8888端口的一个应用程序发送 HTTP 请求的 TCP 连接过程：<br><img src="https://user-images.githubusercontent.com/12514722/30770441-bf16303a-a063-11e7-88cb-d5a805d4c434.png" alt="image"></p><h2 id="6-SYN-洪泛攻击"><a href="#6-SYN-洪泛攻击" class="headerlink" title="6. SYN 洪泛攻击"></a>6. SYN 洪泛攻击</h2><p>在 TCP 三次握手中，服务器为了响应一个收到的 SYN，分配并初始化连续变量和缓存。然后服务器发送一个 SYNACK 进行响应，并等待来自客户的 ACK 报文段。如果某客户不发送 ACK 来完成该三次握手的第三步，最终（通常在一分多钟之后）服务器将终止该半连接并回收资源。</p><p>这种 TCP 连接管理协议为经典的 DoS（deny of service）攻击即 SYN 洪泛攻击（SYN flood attack）提供了环境。在这种攻击中，攻击者发送大量的 TCP SYN 报文段，而不完成第三次握手的步骤。随着这种 SYN 报文段纷至踏来，服务器不断为这些半开连接分配资源（但从未使用），导致服务器的连接资源被消耗殆尽。</p><p>现在有一种有效的防御系统，称为 SYN cookie，它们被部署在大多数主流操作系统中。SYN cookie 以下列方式工作：</p><ol><li>当服务器接收到一个 SYN 报文段时，它并不知道该报文段是来自一个合法的用户，还是一个 SYN 洪泛攻击的一部分。因此服务器不会为该报文段生成一个半开连接。相反，服务器生成一个初始 TCP 序列号，该序列号是 SYN 报文段的源和目的 IP 地址与端口号以及仅有该服务器知道的秘密数的一个复杂函数（散列函数）。这种精心制作的初始序列号被称为 “cookie”，服务器则发送具有这种特殊初始序列号的 SYNACK 分组。重要的是，服务器并不记忆该 cookie 或任何对应于 SYN 的其他状态信息。</li><li>如果客户是合法的，则它将返回一个 ACK 报文段。当服务器收到该 ACK，需要验证该 ACK 是与前面发送的某些 SYN 相对应的。服务器将使用在 SYNACK 报文段中的源和目的地 IP 地址与端口号（它们与初始的 SYN 中的相同）以及秘密数运行相同的散列函数。如果该函数的结果加 1 与在客户的 SYNACK 中的确认（cookie）值相同的话，服务器认为该 ACK 对应于较早的 SYN 报文段，因此它是合法的。服务器则生成一个具有套接字的全开的连接。</li><li>如果客户没有返回一个 ACK 报文段，则初始的 SYN 并没有对服务器产生危害，因为服务器没有为它分配任何资源。</li></ol><h2 id="7-TCP-拥塞控制"><a href="#7-TCP-拥塞控制" class="headerlink" title="7. TCP 拥塞控制"></a>7. TCP 拥塞控制</h2><p>TCP 必须使用端到端拥塞控制而不是使用网络辅助的拥塞控制，因为 IP 层不向端系统提供显式的网络拥塞反馈。TCP 采用的方法是让每一个发送方根据所感知到的网络拥塞程度来限制其能向连接发送流量的速率。</p><p>TCP 连接的每一端都是由一个接收缓存、一个发送缓存和几个变量组成。运行在发送方的 TCP 拥塞控制机制跟踪一个额外的变量，即拥塞窗口（congestion window），拥塞窗口表示为 cwnd，它对一个 TCP 发送方能向网络中发送流量的速率进行了限制：在一个发送方中未被确认的数据量不会超过cwnd和rwnd中的最小值。特别是，在一个发送方中未被确认的数据量不会超过 cwnd 与 rwnd 中的最小值，即 </p><p>$$<br>LastByteSent - LastByteAcked &lt;= min{cwnd, rwnd}<br>$$</p><p>通过约束发送方中未被确认的数据量，间接限制了发送方的发送速率。考虑一个丢包和发送时延均可以忽略不计的连接。在每个往返时间 (RTT)的起始点，上面的限制条件允许发送方向该连接发送 cwnd 个字节的数据，在该 RTT 结束时发送方接收对数据的确认报文。因此，该发送方的发送速率大概为 cwnd/RTT 字节/秒。通过 调节 cwnd 的值，发送方因此能调整它向连接发送数据的速率。</p><p>TCP 拥塞控制算法包括 3 个主要部分：（1）慢启动（slow-start）；（2）拥塞避免；（3）快速恢复。慢启动和拥塞避免是 TCP 的强制部分，两者的差异在于对收到的 ACK 做出反应时增加 cwnd 长度的方式。</p><h3 id="7-1-慢启动"><a href="#7-1-慢启动" class="headerlink" title="7.1 慢启动"></a>7.1 慢启动</h3><p>在慢启动状态，cwnd 的值以 1 个 MSS 开始并且每当传输的报文段首次被确认就增加一倍 MSS。这个过程每过一个 RTT，发送速率就翻番。因此，TCP 发送速率起始慢，但在慢启动阶段以指数增长。</p><p>指数增长的结束：首先，如果存在一个由超时指示的丢包事件（即拥塞），TCP 发送方将 cwnd 设置为 1 并重新开始慢启动过程。它还将第二个状态变量的值 ssthread（慢启动阈值）设置为 cwnd/2，即当检测到拥塞时将 ssthread 置为拥塞窗口值的一半。其次，当达到或超过 ssthread 的值时，进入拥塞避免模式。最后，如果检测到 3 个冗余 ACK，执行快速重传并进入快速恢复状态。</p><p><img src="https://user-images.githubusercontent.com/12514722/30777273-9cdb22b0-a0e9-11e7-8657-94f7970f85c1.png" alt="image"></p><h3 id="7-2-拥塞避免"><a href="#7-2-拥塞避免" class="headerlink" title="7.2 拥塞避免"></a>7.2 拥塞避免</h3><p>一旦进入拥塞避免模式，cwnd 的值大约是上次遇到拥塞时的值的一半。此后，每个 RTT 只将 cwnd 的值增加一个 MSS。</p><p><img src="https://user-images.githubusercontent.com/12514722/30777286-de283d84-a0e9-11e7-9804-13ff4c474397.png" alt="image"></p><h3 id="7-3-快速恢复"><a href="#7-3-快速恢复" class="headerlink" title="7.3 快速恢复"></a>7.3 快速恢复</h3><p>对于引起进入快速恢复的每个冗余 ACK，cwnd 增加一个MSS。当最后一个 ACK 到达时，进入拥塞避免。如果出现超时事件，快速恢复在执行如同在慢启动和拥塞避免中相同的动作后，迁移到慢启动状态：当丢包事件发生后，cwnd 被设置为一个MSS，并且 ssthread 的值被设置为 cwnd 的一半。</p><p><img src="https://user-images.githubusercontent.com/12514722/30776450-2abaeda6-a0d9-11e7-8594-ae0cf6f1e2d6.png" alt="image"></p>]]></content>
      
      <categories>
          
          <category> Network </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《计算机网络：自顶向下方法》：网络层</title>
      <link href="/2016/08/23/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2016/08/23/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="1-转发和路由选择"><a href="#1-转发和路由选择" class="headerlink" title="1. 转发和路由选择"></a>1. 转发和路由选择</h2><p>网络层需要有两种功能：</p><ul><li>转发。当一个分组到达路由器的一条输入链路时，路由器必须将该分组移到适当的输出链路。</li><li>路由选择。当分组从发送方流向接收方时，网络层必须决定这些分组所采用的路由或路径。计算这些路径的算法被称为路由选择算法（routing algorithm）。</li></ul><p>每台路由器都有一张转发表（forwarding table）。路由器通过检查到达分组首部字段的值来转发分组，然后使用该值在该路由器的转发表中国索引查询。存储在转发表项中的该首部的值指出了该分组将被转发的路由器的输出链路接口。分组首部中的该值可能是该分组的目的地址或该分组所属连接的指示，这取决于网络层协议。<br><a id="more"></a></p><h2 id="2-路由器结构"><a href="#2-路由器结构" class="headerlink" title="2. 路由器结构"></a>2. 路由器结构</h2><ul><li>输入端口：它要执行将一条输入的物理链路端接到路由器的物理层功能。它也要执行需要与位于入链路远端的数据链路层功能交互的数据链路层功能。还要完成查找与转发功能，以便转发到路由器交换结构部分的分组能出现在适当的输出端口。控制分组从输入端口转发到选路处理器。在路由器中，多个端口经常被集中到路由器中的一块线路卡（line card）上。</li><li>交换结构：交换结构将路由器的输入端口连接到它的输出端口。交换结构完全包容在路由器中。</li><li>输出端口：输出端口存储经过交换结构转发给它的分组，并将这些分组传输到输出链路。因此，输出端口执行与输入端口顺序相反的数据链路层和物理层功能。当一条链路时是双向（承载两个方向的流量）链路时，与链路相连的输出端口通常与输入端口在同一线路卡上成对出现。</li><li>路由选择处理器：路由选择处理器执行路由选择协议，维护路由选择表以及连接的链路状态信息，并执行网络管理功能。</li></ul><p><img src="https://user-images.githubusercontent.com/12514722/30776812-f1ccf3d4-a0df-11e7-8f3e-750653b38289.png" alt="image"></p><h2 id="3-数据报网络"><a href="#3-数据报网络" class="headerlink" title="3. 数据报网络"></a>3. 数据报网络</h2><p>在数据报网络中，每当一个端系统要发送分组，它就为该分组加上目的端系统的地址，然后将分组推进网络中。</p><p>当分组从源到目的地传输，它通过一系列路由器传递。这些路由器中的每台都使用分组的目的地址来转发该分组。特别是，每台路由器有一个将目的地址映射到链路接口的转发表；当分组到达路由器时，路由器使用该分组的目的地址在转发表中查找适当的输出链路接口。然后路由器有意将该分组向该输出链路接口转发。</p><p>路由器的输入端口和输出端口处都能够形成分组队列，当无内存可用于存储到达的分组时将会出现丢包（packet loss）。</p><h2 id="4-数据报格式"><a href="#4-数据报格式" class="headerlink" title="4. 数据报格式"></a>4. 数据报格式</h2><p><img src="https://user-images.githubusercontent.com/12514722/30777036-aeb0f992-a0e4-11e7-8972-cb4200e11957.png" alt="image"></p><ul><li>版本号：这 4 比特规定了数据报的 IP 协议版本。通过查看版本号，路由器可确定如何解释 IP 数据报的剩余部分。不同的 IP 版本使用不同的数据报格式。目前使用的 IP 版本为 IPv4。</li><li>首部长度：因为一个 IPv4 数据报可包含一些可选项（包含在 IPv4 数据报首部中），故需要用这 4 比特来确定 IP 数据报中的数据部分实际从哪里开始。大多数 IP 数据报不包含可选项，所以一般的 IP 数据报都有 20 字节的首部。</li><li>服务类型：服务类型（TOS）比特用来使不同类型的 IP 数据报能相互区别开来。</li><li>数据报长度：这是 IP 数据报的总长度，（首部加上数据），以字节计。因为该字段长为 16 比特，所以 IP 数据报的理论最大长度为 65535 字节。然而，数据报很少有超过 1500 字节的。</li><li>标识、标志、片偏移：该三个字节与所谓 IP 分片有关，（IPv6不允许在路由器上分片）</li><li>TTL：TTL 字段用来确保数据报不会永远在网络中循环。每当数据报经过一台路由器时，该字段的值减1。若 TTL 字段减为 0，则该数据报必须丢弃。</li><li>协议：该字段仅在一个 IP 数据报到达其最终目的时才会用到。该字段值指明了 IP 数据报的数据分部应交给哪个运输层协议。 值为 6 表明数据部分要交给 TCP，而值为 17 表明数据要交给 UDP。</li><li>首部检验和：首部检验和用于帮助路由器检测收到的 IP 数据报中的比特错误。首部检验和是这样计算的：将首部中的每两个字节当作一个数，用反码运算对这些数求和。该和的反码（被称为因特网检验和）存放在检验和字段中。路由器要对每个收到的 IP 数据报计算其首部检验和，并根据数据报首部中携带的检验和与计算得到的检验和是否一致，来检查是否出错。路由器一般会丢弃检测出错误的数据报。注意到在每台路由器上必须重新计算检验和并存放到原处，因为 TTL 字段以及可能的选项字段会改变。注意到在 IP 层只对 IP 首部计算了检验和，而 TCP/UDP 检验和是对整个 TCP/UDP 报文段进行的。其次，TCP/UDP 与 IP 不一定都必须属于同一个协议栈。</li><li>源和目的 IP 地址：当源主机产生一个数据报时，它在源 IP 字段中插入它的 IP 地址，在目的 IP 地址字段中插入其最终目的地的地址。通常源主机通过 DNS 查找来决定目的地址。</li><li>选项：选项字段允许IP首部被扩展。首部选项意味着很少使用，因此决定对每个数据报首部不包括选项字段中的信息，这样能够节约开销。</li><li>数据（有效载荷）：在大多数情况下，IP 数据报中的数据字段包含要交付给目的地的运输层报文段（TCP 或 UDP）。然而，该数据字段也可承载其他类型的数据，如 ICMP 报文。</li></ul><h2 id="5-IP-数据报分片"><a href="#5-IP-数据报分片" class="headerlink" title="5. IP 数据报分片"></a>5. IP 数据报分片</h2><p>一个链路层帧能承载的最大数据量叫做最大传输单元（Maximum Transmission Unit，MTU）。因为每个 IP 数据报封装在链路层帧中从一台路由器传输到下一台路由器，故链路层协议的 MTU 严格地限制着 IP 数据报的长度。对 IP 数据报长度具有严格限制并不是主要问题。问题在于在发送方与目的地路径上的每段链路可能使用不同的链路层协议，且每种协议可能具有不同的 MTU。</p><p>当一台目的主机从相同源收到一系列数据报时，它需要确定这些数据报中的某些是否是一些原来较大的数据报分片。如果某些数据报是片的话，则它必须进一步确定何时收到了最后一片，并且如何将这些接收到的片拼接到一起以形成初始的数据报。为了让目的主机执行这些重新组装任务，IPv4 的设计者将标识、标志和片位移字段放在 IP 数据报首部中。当生成一个数据报时，发送主机在为该数据报设置源和目的地址的同时再贴上标识号。发送主机通常将为它发送给的每个数据报的标识号加 1。当某路由器需要对一个数据报分片时，形成的每个数据报（即片）具有初始数据报的源地址、目的地址与标识号。当目的地从同一发送主机收到一系列数据报时，它能够检查数据报的标识号以确定哪些数据报实际上是同一较大数据报的片。由于 IP 是一种不可靠的服务，一个或多个片可能永远到达不了目的地。因为这种原因，为了让目的主机绝对地相信它已收到了初始数据报的最后一个片，最后一个片的标志比特被设为 0，而所以其他片的标志比特被设为 1。另外，为了让目的主机确定是否丢失了一个片（且能按正确的顺序重新组装片），使用偏移字段指定该片应该放在初始 IP 数据报的哪个位置。</p><p>除了最后一片的所有初始有效载荷数据的数量应当是 8 字节的倍数，并且偏移值应当被规定以 8 字节块为单位。</p><h2 id="6-IPv4编址"><a href="#6-IPv4编址" class="headerlink" title="6. IPv4编址"></a>6. IPv4编址</h2><p>因特网的地址分配策略被称为无类别域间路由选择（Classless Interdomain Routing， CIDR）。CIDR 将子网寻址的概念一般化了。因为对于子网寻址，32 比特的 IP 地址被划分为两部分，并且也具有点分十进制数形式 a.b.c.d/x，其中 x 指示了地址的第一部分中的比特数。形式为 a.b.c.d/x 的地址的 x 最高比特构成了 IP 地址的网络部分，并且经常被称为该地址的前缀。</p><p>在 CIDR 被采用之前，IP 地址的网络部分被限制为长度为8、16 或 24 比特，这是一种称为分类编址的编址方案，这是因为具有 8、16、24 比特子网地址的子网分别被称为 A、B 和 C 类网络。</p><p>当一台主机发出一个目的地址为 255.255.255.255 的数据报时，该报文会交付给同一个网络中的所有主机。</p><h2 id="7-DHCP"><a href="#7-DHCP" class="headerlink" title="7. DHCP"></a>7. DHCP</h2><p>动态主机配置协议（Dynamic Host Configuration）DHCP 允许主机自动获取（被分配）一个 IP 地址。网络管理员能够配置 DHCP，以使某给定主机每次与网络连接时能够得到一个相同的 IP 地址，或者某主机将被分配一个临时的 IP 地址，该地址在每次与网络连接时也许是不同的。除了主机 IP 地址分配外，DHCP 还允许一台主机得知其他信息，例如它的子网掩码、它的第一跳路由器地址（常称为默认网关）与它的本地 DNS 服务器的地址。</p><p>DHCP 协议是一个 4 个步骤的过程：</p><ul><li>DHCP 服务器发现。一台新到的主机的首要任务是发现一个要与其交互的 DHCP 服务器。这可通过一个 DHCP 发现报文来完成，客户在 UDP 分组中向端口 67 发送该发现报文。DHCP 客户生成包含 DHCP 发现报文的 IP 数据报，其中使用广播目的地址 255.255.255.255 并且使用“本主机”源地址0.0.0.0。DHCP客户将该数据报传递给链路层，链路层然后将该帧广播到所有与该子网连接的子网。 </li><li>DHCP 服务器提供。DHCP 服务器收到一个 DHCP 发现报文时，用一个 DHCP 提供报文对客户做出响应，仍然使用 IP 广播地址 255.255.255。每台服务器提供的报文包含有收到的发现报文的事务 ID、向客户推荐的 IP 地址、网络掩码以及 IP 地址租用期，即 IP 地址有效的时间量。</li><li>DHCP 请求。新到达的客户从一个或多个服务器提供中选择一个，并向选中的服务器提供一个 DHCP 请求报文进行响应，回显配置参数。</li><li>DHCP ACK。服务器用 DHCP ACK 报文对 DHCP 请求报文进行响应，证实所要求的参数。</li></ul><p>仅最后两步是必要的。</p><p><img src="https://user-images.githubusercontent.com/12514722/30777045-d77748c2-a0e4-11e7-9d00-f1c5dfb4ab84.png" alt="image"></p><h2 id="8-NAT"><a href="#8-NAT" class="headerlink" title="8. NAT"></a>8. NAT</h2><p>NAT 能使路由器对于外界来说甚至不像一台路由器。NAT 路由器对外界的行为反过来就如同一个具有单一 IP 地址的单一设备。技巧就是使用在 NAT 路由器上的一张 NAT 转换表，并且在表项中包含了端口号及其 IP 地址。</p><p>假设一个用户坐在家庭网络主机 10.0.0.1 旁，请求 IP 地址为128.119.40.186 的某台 Web 服务器（端口 80）上的一个 Web 页面。主机 10.0.0.1 为其指派了（任意）源端口号 3345 并将该数据包发送到 LAN 中。NAT 路由器收到该数据报，为该数据包生成一个新的源端口号 5001，将源 IP 替代为其广域网一侧接口的 IP 地址 138.76.29.7，且将源端口 3345 更换为新端口 5001。当生成一个新的源端口号时，NAT 路由器可选择任意一个当前未在 NAT 转换表中的源端口号。（注意到因为端口号字段为 16 比特长，NAT 协议可支持超过 60000 个并行使用路由器广域网一侧 IP 地址的连接！）路由器中的 NAT 也在它的 NAT 转换表中增加一表项。Web 服务器并不知道刚到达的包含 HTTP 请求的数据报已被 NAT 路由器进行了改装，它会发回一个响应报文，其目的地址是 NAT 路由器的 IP 地址，其目的端口是 5001。当该报文到达 NAT 路由器时，路由器使用目的 IP 地址与目的端口号从 NAT 转换表中检索出家庭浏览器使用的适当 IP 地址（10.0.0.1）和目的端口号（3345）。于是，路由器改写该数据报的目的 IP 地址与目的端口号，并向家庭网络转发该数据报。</p><p><img src="https://user-images.githubusercontent.com/12514722/30777055-1fe876bc-a0e5-11e7-9d00-c2b2b211b6d5.png" alt="image"></p><h2 id="9-ICMP"><a href="#9-ICMP" class="headerlink" title="9. ICMP"></a>9. ICMP</h2><p>ICMP 由 [RFC 792] 定义，被主机和路由器用来彼此沟通网络层的信息。ICMP 最电影的用途是差错报告。例如，当运行一个 Telnet、FTP 或 HTTP 会话时，“目的网络不可达”之类的错误报文就是在 ICMP 中产生的。在某个位置，IP 路由器不能找到一条路径，以通往 Telnet、FTP 或 HTTP 应用所指定的主机。该路由器就会向源主机创建和发出一个类型为 3 的 ICMP 报文以指示该错误。</p><p>ICMP 通常被认为是 IP 的一部分，但从体系结构上讲它是位于 IP 之上的，因为 ICMP 报文是承载在 IP 分组中的。</p><p>ping 程序发送一个 ICMP 类型 8 编码 0 的报文到指定主机。看到该回显（echo）请求，目的主机发回一个类型 0 编码 0 的 ICMP 回显回答。</p><p>为了判断源和目的地之间所有路由器的名字和地址，源主机中的 Traceroute 向目的主机发送一系列普通的 IP 数据报。这些数据报携带了具有一个不可达 UDP 端口号的 UDP 报文段。第一个数据报的 TTL 为 1，第二个的 TTL 为 2，以此类推。该源主机也为每个数据报启动定时器。当第 n 个数据报到达第 n 台路由器时，第 n 台路由器观察到这个数据报的 TTL 正好过期。根据 IP 协议规则，路由器丢弃该数据报并发送一个 ICMP 告警报文给源主机（类型 11 编码 0）。该告警报文包含了路由器的名字与它的 IP 地址。当该 ICMP 报文返回源主机时，源主机从定时器得到往返时延，从 ICMP 报文中得到第 n 台路由器的名字与 IP 地址。这些数据报之一将最终沿着这条路到达目的主机。因为该数据报包含了一个具有不可达端口号的 UDP 报文段，该目的主机将向源主机发送一个端口不可达的 ICMP 报文。当源主机收到这个特别的 ICMP 报文时，知道它不需要再发送另外的探测分组。（标准的 Traceroute 程序实际上使用相同的 TTL 发送 3 个一组的分组；因此 Traceroute 输出对每个 TTL 提供了 3 个结果。）</p>]]></content>
      
      <categories>
          
          <category> Network </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机网络：自顶向下方法》：数据链路层</title>
      <link href="/2016/08/15/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2016/08/15/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="1-ARP-工作原理"><a href="#1-ARP-工作原理" class="headerlink" title="1. ARP 工作原理"></a>1. ARP 工作原理</h2><p>每台主机或路由器在其内存中具有一个 ARP 表，这张表包含 IP 地址到 MAC 地址的映射关系。该 ARP 表也包含一个 TTL 值，它指示了从表中删除每个映射的时间。这张表不必为该子网上的每台主机和路由器都包含一个表项；某些可能从来没有进入到该表中，某些可能已经过期。<br><a id="more"></a></p><p>假设同一个子网下的 222.222.222.220 要向 222.222.222.222 发送数据报。在这种情况下，发送方用 ARP 协议来解析这个地址。首先，发送方构造一个称为 ARP 分组的特殊分组。一个 ARP 分组有几个字段，包括发送和接收 IP 地址以及 MAC 地址。ARP 查询和响应分组都具有相同的格式。ARP 查询分组的目的是询问子网上其他所有主机和路由器，以确定对应于要解析的 IP 地址的那个 MAC 地址。</p><p>222.222.222.220 向它的适配器传递一个 ARP 查询分组，并且指示适配器应该用 MAC 广播地址（即 FF:FF:FF:FF:FF:FF）来发送这个分组。适配器在链路层帧中封装这个 ARP 分组，用广播地址作为帧的目的地址，并将该帧传输进子网中。包含该 ARP 查询的帧能被子网上的所有其他适配器收到（交换器转发到所有非来源端口），并且（由于广播地址）每个适配器都把在该帧中的 ARP 分组向上传输到 ARP 模块。这些 ARP 模块中的每个都检查它的 IP 地址是否与 ARP 分组中的目的 IP 地址相匹配。与之匹配的一个给查询主机发送回一个带有所希望映射的响应 ARP 分组。然后查询主机222.222.222.220能够更新它的 ARP 表，并发送它的 IP 数据报，该数据报封装在一个链路层帧中，并且该帧的目的 MAC 就是对先前 ARP 请求进行响应的主机或路由器的 MAC 地址。</p><p>关于 ARP 协议有两件事情需要注意。首先，查询 ARP 报文是在广播帧中发送的，而响应 ARP 报文是在一个标准帧中发送。其次，ARP 是即插即用的，这就是说，一个 ARP 表是自动建立的。并且如果某主机与子网断开连接，它的表项最终会从留在子网中的结点的表中删除掉。</p><p>最好把 ARP 看成是跨越链路层和网络层边界两边的协议。</p><p>链路层帧在路由器之间转发时，源路由器会用自己的 MAC 地址替换帧的 源 MAC 地址，用下一跳路由器的 MAC 地址替换帧的目的 MAC 地址。</p><h2 id="2-交换机转发和过滤"><a href="#2-交换机转发和过滤" class="headerlink" title="2. 交换机转发和过滤"></a>2. 交换机转发和过滤</h2><p>过滤（filtering）是决定一个帧应该转发到某个接口还是应当将其丢弃的交换机功能，转发（forwarding）是决定一个帧应该被导向哪个接口，并把该帧接口移动到那些接口的交换机功能。交换机的过滤和转发借助于交换机表完成。交换机表中的一个表项包含：</p><ol><li>一个MAC地址；</li><li>通向该地址的交换机接口；</li><li>表项放置在表中的时间；</li></ol><p>为了理解交换机过滤和转发的工作过程，假定目的地址为 DD-DD-DD-DD-DD-DD 的帧从交换机接口 x 口到达，交换机用 MAC 地址 DD-DD-DD-DD-DD-DD 索引它的表。有 3 种可能的情况：</p><ul><li>表中没有对于 DD-DD-DD-DD-DD-DD 的表项。在这种情况下，交换机向除接口 x 外的所有接口前面的输出缓存转发该帧的副本。换言之，如果没有对于目的地址的表项，交换机广播该帧。</li><li>表中有一个表项将 DD-DD-DD-DD-DD-DD 与接口 x 联系起来。在这种情况下，该帧从包括适配器 DD-DD-DD-DD-DD-DD 的局域网网段到来。无需将该帧转发到任何其他接口，交换机通过丢弃该帧执行过滤功能即可。</li><li>表中有一个表项将 DD-DD-DD-DD-DD-DD 与接口 $ y \neq x$ 联系起来。在这种情况下，该帧需要被转发到与接口 y 相连的局域网网段。交换机通过将该帧放到接口 y 前面的输出缓存完成转发功能。</li></ul><h2 id="3-RARP"><a href="#3-RARP" class="headerlink" title="3. RARP"></a>3. RARP</h2><p>反向地址转换协议（RARP）允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。网络管理员在局域网网关路由器里创建一个表以映射物理地址（MAC）和与其对应的 IP 地址。当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用。RARP 可以使用于以太网、光纤分布式数据接口及令牌环 LAN。</p><h2 id="4-DHCP-和-RARP-的区别"><a href="#4-DHCP-和-RARP-的区别" class="headerlink" title="4.  DHCP 和 RARP 的区别"></a>4.  DHCP 和 RARP 的区别</h2><p>RARP 在功能上有点类似于 DHCP 协议，确切的说 DHCP 是 BOOTP 协议的升级，而 BOOTP 在某种意义上又是 RARP 协议的升级。BOOTP 和 RARP 的区别在于 RARP 是在数据链路层实现的，而 BOOTP 是在应用层实现的，作为 BOOTP 的升级版 DHCP 也是在应用层实现的。这种实现层面的差别也从 RARP 和 BOOTP/DHCP 的报文封装格式的差别上体现出来了，RARP 直接封装在以太网帧中，协议类型置为0x0800以标识这个报文是 ARP/RARP 报文，BOOTP/DHCP 报文是直接封装在 UDP 报文中，作为 UDP 的数据段出现的。</p><p>从功能上说，RARP 只能实现简单的从 MAC 地址到 IP 地址的查询工作，RARP server 上的 MAC 地址和 IP 地址是必须事先静态配置好的。但 DHCP 却可以实现除静态分配外的动态IP地址分配以及IP地址租期管理等等相对复杂的功能。</p><p>RARP 是早期提供的通过硬件地址获取 IP 的解决方案，但它有自己的局限性，比如 RARP 客户与 RARP 服务器不在同一网段，中间有路由器等设备连接，这时候利用 RARP 就显得无能为力，因为 RARP 请求报文不能通过路由器，BOOTP/DHCP 提供了很好的解决方法。</p><p>RARP、BOOT 和 DHCP 都是动态学习 IP 地址的协议。起初，客户端主机要发送一个广播以启动发现进程，有一台专门的服务器负责监听这些请求并提供 IP 地址给客户端主机。 </p><p>RARP 使用的是和 ARP 相同的消息，只不过它的消息中列出的目标 MAC 地址是其自己的 MAC 地址，而目标 IP 地址是 0.0.0.0。预先配置好的 RARP 服务器（必须处于客户端同一子网中）接收请求并进行查询。如果目标 MAC 地址匹配到，RARP 服务器就发送 ARP 响应（包含配置的 IP 地址在其源 IP 地址字段中）。</p>]]></content>
      
      <categories>
          
          <category> Network </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机网络：自顶向下方法》：流水线可靠数据传输</title>
      <link href="/2016/08/11/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
      <url>/2016/08/11/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</url>
      <content type="html"><![CDATA[<h2 id="1-流水线技术"><a href="#1-流水线技术" class="headerlink" title="1. 流水线技术"></a>1. 流水线技术</h2><p>流水线可靠数据传输协议允许发送方发送多个分组而无需等待确认。流水线技术对可靠数据传输协议带来如下影响：</p><ul><li>必须增加序号范围，因为每个输送中的分组（不计算重传的）必须有一个唯一的序号，而且也许有多个在输送中未确认的报文。</li><li>协议的发送方和接受端也许必须缓存多个分组。发送方最低限度应当能缓存那些已发送但没有确认的分组。接收方也需要缓存那些已正确接受的分组。</li><li>所需序号范围和对缓存的要求取决于数据传输协议如何处理丢失、损坏及延时过大的分组。解决流水线差错恢复有两种基本方法是：回退N步（Go－Back－N，GBN）和选择重传（Selective Repeat，SR）。<a id="more"></a></li></ul><h2 id="2-回退N步"><a href="#2-回退N步" class="headerlink" title="2. 回退N步"></a>2. 回退N步</h2><p>在回退 N 步协议中，允许发送方发送多个数组（当有多个分组可用时）而不需要等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。</p><p><img src="https://user-images.githubusercontent.com/12514722/30776470-9825f3b8-a0d9-11e7-9df9-6477053f13f2.png" alt="image"></p><p>上图显示了发送方看到的 GBN 协议的序号范围。如果我们将基序号（base）定义为最早的未确认分组的序号，将下一个序号（nextseqnum）定义为最小的未使用序号（即下一个待发分组的序号），则可将序号范围分割成 4 段。在 [0, base-1] 段内的序号对应于已经发送并确认的分组。[base, nextseqnum-1] 段对应已经发送但未被确认的分组。[nextseqnum, base+N-1] 段内的序号能用于那些要立即发送的分组，如果有数据来自于上层的话。最后，大于或等于 base+N 的序号是不能使用的，直到当前流水线中未确认的分组（特别是序号为 base 的分组）已得到确认为止。</p><p>在上图中，我们可以把 [base, base + N-1] 看做一个长度为 N 的窗口。随着协议的运行，该窗口在序号空间向前滑动。因此，N 常被称为窗口长度（window size），GBN 协议也常被称为滑动窗口协议（sliding-window protocol）。至于为什么需要限制 N 的范围，是因为这是流量控制的方法之一。</p><p>在实践中，一个分组的序号承载在分组首部的一个固定长度的字段中。如果分组序号字段的比特数是 k，则该序号范围是 [0, 2^k - 1]。在一个有限的序号范围内，所有涉及序号的运算必须使用模 2^k 运算。</p><p>下图是GBN 协议发送方扩展 FSM 描述：<br><img src="https://user-images.githubusercontent.com/12514722/30776473-b3b915d8-a0d9-11e7-9949-62fd5f43dd70.png" alt="image"></p><p>如上描述，GBN 协议发送方必须响应三种类型的事件：</p><ul><li>上层的调用。当上层调用 rdt_send() 时，发送方首先检查发送窗口是否已满，即是否有 N 个已发送但未被确认的分组。如果窗口未满，则产生一个分组并将其发送，并相应地更新变量。如果窗口已满，发送方只需将数据返回给上层，隐式地指示上层该窗口已满。然后上层可能会过一会儿再试。在实际实现中，发送方更可能缓存这些数据，或者使用同步机制（如一个信号量或标志）允许上层在仅当窗口不满时才调用 rdt_send()。</li><li>收到一个ACK。在 GBN 协议中，对序号为 n 的分组的确认采取累积确认（cumulative acknowledgment）的方式，表明接收方已正确接收到序号为 n 的以前且包括 n 在内的所有分组。</li><li>超时事件。协议的名字“回退 N 步”来源于出现丢失和时延过长分组时发送方的行为。就像在停等协议中那样，定时器将再次用于恢复数据或确认分组的丢失。如果出现超时，发送方重传所有已发送但未被确认过的分组。上图中发送方仅使用一个定时器，如果收到了一个 ACK，但仍有已发送但未被确认的分组，则定时器被重新启动。如果没有已发送但未被确认的分组，该定时器被终止。</li></ul><p>下图是 GBN 协议接收方扩展 FSM 描述：</p><p><img src="https://user-images.githubusercontent.com/12514722/30776482-cbf98736-a0d9-11e7-8d67-4f0f5a504a8f.png" alt="image"></p><p>在 GBN 中，接收方的动作也很简单。如果一个序号为 n 的分组被正确接收到，并且按序（即上次交付给上层的数据是序号为 n - 1 的分组），则接收方为分组 n 发送一个 ACK，并将该分组中的数据部分交付到上层。在所有其他情况下，接收方将丢弃该分组，并为最近按序接收的分组重新发送 ACK。注意到因为一次交付给上层一个分组，如果分组 k 为已接受并交付，则所有序号比 k 小的分组也已经交付。因此，使用累积确认是 GBN 的一个自然的选择。</p><p>尽管丢弃一个正确接收（但失序）的分组。但这样做是有道理的。因为接收方必须将数据按序交付给上层，假设现在期望接收分组 n，而分组 n + 1 却到了，因为数据必须按序交付，所以接收方可能缓存分组 n + 1，然后，在它收到并交付分组 n 后，再将该分组交付到上层。但是，如果分组 n 丢失，则该分组及分组 n + 1 最终将在发送方根据 GBN 重传规则而被重传，所以，接收方只需要直接丢弃分组 n + 1 即可。这种方法的优点是接受缓存简单，即接收方不需要缓存任何失序分组。因此，虽然发送方必须维护窗口的上下边界及 nextseqnum 在该窗口中的位置，但是接收方需要维护的唯一信息就是下一个按序接收的分组的序号。该值保存在 expectedseqnum 变量中。当然，丢弃一个正确接收的分组的缺点是随后对该分组的重传也许会丢失或出错，因此甚至需要更多的重传。</p><p>一个示例如下：</p><p><img src="https://user-images.githubusercontent.com/12514722/30776581-77b2d89c-a0db-11e7-8253-52464e8dac04.png" alt="image"></p><h2 id="3-选择重传"><a href="#3-选择重传" class="headerlink" title="3. 选择重传"></a>3. 选择重传</h2><p>顾名思义，选择重传（SR）协议通过让发送方仅重传那些它怀疑在接收方出错（即丢失或受损）的分组而避免了不必要的重传。这种个别的、按需的重传要求接收方逐个地确认正确接收的分组。再次用窗口长度 N 来限制流水线中未完成、未被确认的分组数。然而，与 GBN 不同的是，发送方已经收到了对窗口中某些分组的 ACK。</p><p>下图描述了发送方与接收方的序号空间：</p><p><img src="https://user-images.githubusercontent.com/12514722/30776501-17705d84-a0da-11e7-8efb-86b4439c4959.png" alt="image"></p><p>SR 发送方的事件与动作：</p><ul><li>从上层收到数据。当从上层接收到数据后，SR 发送方检查下一个可用于该分组的序号。如果序号位于发送方的窗口内，则将数据打包并发送；否则就像在 GBN 中一样，要么将数据缓存，要么将其返回给上层以便以后传输。</li><li>超时。定时器再次被用来防止丢失分组。然而，现在每个分组必须拥有其自己的逻辑定时器，因为超时发生后只能发送一个分组。可以使用单个硬件定时器模拟多个逻辑定时器的操作。</li><li>收到ACK。如果收到 ACK，倘若该分组序号在窗口内，则 SR 发送方将那个被确认的分组标记为已接收。如果该分组的序号等于 send_base，则窗口基序号向前移动到具有最小序号的未确认分组处。如果窗口移动了并且有序号落在窗口内的未发送分组，则发送这些分组。</li></ul><p>SR 接收方将确认一个正确接收的分组而不管其是否按序。失序的分组将被缓存直到所有丢失分组（即序号更小的分组）皆被收到为止，这时才可以将一批分组按序交付给上层。</p><p>SR 接收方的事件与动作：</p><ul><li>序号在 [rcv_base, rcv_base+N-1] 内的分组被正确接收。在此情况下，收到的分组落在接收方的窗口内，一个选择 ACK 被回送给发送方。如果该分组以前没收到过，则缓存该分组。如果该分组的序号等于接收端的基序号（rcv_base），则该分组以及以前缓存的序号连续的（起始于 rcv_base 的）分组交付给上层。然后，接收窗口按向前移动分组的编号向上交付这些分组。</li><li>序号在 [rcv_base-N, rcv_base-1] 内的分组被正确收到。在此情况下，必须产生一个 ACK，即使该分组是接收方以前确认过的分组。</li><li>其他情况。忽略该分组。</li></ul><p>注意上面的第二步，接收方需要重新确认（而不是忽略）已收到过的那些序号小于当前窗口基序号的分组。如果分组 send_base 的 ACK 没有从接收方传播回发送方，则发送方最终将重传分组 send_base，即使显然接收方已经收了该分组。如果接收方不确认该分组，则发送方窗口将永远不能向前滑动！</p><p>上面的例子说明了对于 SR 协议（和很多其他协议一样） 对于哪些分组已经被正确接收，哪些没有，发送方和接收方并不总能看到相同的结果。对 SR 协议而言，这就意味着发送方和接收方的窗口并不总是一致。</p><p>一个示例如下：</p><p><img src="https://user-images.githubusercontent.com/12514722/30776668-1ae8b40e-a0dd-11e7-8e79-43f878c939e6.png" alt="image"></p><p>当我们面对有限序号范围的现实时，发送方和接收方窗口间缺乏同步会产生严重的后果。考虑下面的例子：</p><p><img src="https://user-images.githubusercontent.com/12514722/30776763-ef0edd02-a0de-11e7-9d77-ba94a522800a.png" alt="image"></p><p>在这个例子中，有四个分组序号 0、1、2、3 且窗口长度为 3。假定发送了分组 0 至 2，并且接收方被正确接收且确认了。此时，接收方窗口落在 4、5、6 个分组上，其序号分别为 3、0、1.现在考虑两种情况。</p><p>在第一种情况下，如上图中的 a 图所示，对前 3 个分组的 ACK 丢失，因此发送方重传这些分组。因此，接收方下一步要接收序号为 0 的分组，即第一个发送分组的副本。</p><p>在第二种情况下，如上图中的 b 图所示，对前 3 个分组的 ACK 都被正确交付。因此发送方向前移动窗口并发送第 4、5、6 个分组，其序号分别为 3、0、1.序号为 3 的分组丢失，但序号为 0 的分组到达（一个包含新数据的分组）。</p><p>显然，接收方并不知道发送方那边出现了什么问题，对于接收方自己来说，上面两种情况是等价的。没有办法区分是第一个分组的重传还是第 5 个分组的初次传输。所以，窗口长度比序号空间小 1 时协议无法正常工作。但窗口应该有多小呢？</p><p>答案是：窗口长度必须小于或等于序号空间大小的一半。</p><h2 id="4-可靠数据传输过程中的分组重新排序问题"><a href="#4-可靠数据传输过程中的分组重新排序问题" class="headerlink" title="4. 可靠数据传输过程中的分组重新排序问题"></a>4. 可靠数据传输过程中的分组重新排序问题</h2><p>在前面的所有假设中，我们都是假定分组在发送方与接收方之间的信道中不能被重新排序。但是当连接两端的信道是一个网络时，分组重新排序是可能会发生的。</p><p>分组重新排序的一个表现就是一个具有序号或确认号 x 的分组的旧副本可能会出现，即使发送方或接收方的窗口中都包含 x。</p><p>对于分组重新排序，信道可被看成基本上是在缓存分组，并在将来任意时刻自然地释放出这些分组。由于序号可以被重新使用，那么必须小心，以免出现这样的冗余分组。</p><p>实际应用中采用的方法是：确保一个序号不被重新使用，直到发送方“确信”任何先前发送的序号为 x 的分组都不再在网络中为止。通过假定一个分组在网络中的“存活”时间不会超过某个固定最大时间量来做到这一点。在高速网络的 TCP 扩展中，最长的分组寿命被假定为大约 3 分钟 [RFC 1323]。</p><h2 id="5-可靠数据传输机制及其用途总结"><a href="#5-可靠数据传输机制及其用途总结" class="headerlink" title="5. 可靠数据传输机制及其用途总结"></a>5. 可靠数据传输机制及其用途总结</h2><table><thead><tr><th>机制</th><th>用途和说明</th></tr></thead><tbody><tr><td>检验和</td><td>用于监测在一个传输分组中的比特错误</td></tr><tr><td>定时器</td><td>用于超时/重传一个分组，可能因为该分组（或其ACK）在信道中丢失了。由于当一个分组延时但未丢失，或当一个分组已被接收方接收但从接收方到发送方的 ACK 丢失时，可能产生超时事件，所以接收方可能会收到一个分组的多个冗余副本</td></tr><tr><td>序号</td><td>用于为从发送方流向接收方的数据分组按序号编号。所接受分组的序号的空隙可使接收方检测出丢失的分组。具有相同序号的分组可使接收方检测出一个分组的冗余副本</td></tr><tr><td>确认</td><td>接收方用于告诉发送方一个分组或一组分组已经被正确地接收到了。确认报文通常携带着被确认的分组或多个分组的序号。确认可以是逐个的或积累的，这取决于协议</td></tr><tr><td>否定确认</td><td>接收方用于告诉发送方某个分组未被正确的接收。否定确定报文通常携带着未被正确接收的分组的序号</td></tr><tr><td>窗口、流水线</td><td>发送方也许被限制仅发送那些序号落在一个指定范围内的分组。通过允许一次发送多个分组但未被确认，发送方的利用率可以在停等操作模式上得到增加。窗口长度可根据接收方接收和缓存报文的能力、网络中的拥塞程度或两者的情况来进行设置</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Network </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《HTTP权威指南》: HTTPS</title>
      <link href="/2016/07/28/%E3%80%8AHTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9AHTTPS/"/>
      <url>/2016/07/28/%E3%80%8AHTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9AHTTPS/</url>
      <content type="html"><![CDATA[<h3 id="1-X-509证书"><a href="#1-X-509证书" class="headerlink" title="1. X.509证书"></a>1. X.509证书</h3><h4 id="1-1-证书格式："><a href="#1-1-证书格式：" class="headerlink" title="1.1 证书格式："></a>1.1 证书格式：</h4><ol><li><p>证书版本号(Version)<br>版本号指明 X.509 证书的格式版本，现在的值可以为:</p><ol><li>v1</li><li>v2</li><li>v3</li></ol></li><li><p>证书序列号(Serial Number)<br>序列号指定由CA分配给证书的唯一的”数字型标识符”。当证书被取消时，实际上是将此证书的序列号放入由CA签发的CRL中，这也是序列号唯一的原因。</p><a id="more"></a></li><li><p>签名算法标识符(Signature Algorithm)<br>签名算法标识用来指定由CA签发证书时所使用的”签名算法”。算法标识符用来指定CA签发证书时所使用的:</p><ul><li>公开密钥算法<ul><li>hash算法<br>example: sha256WithRSAEncryption<br>须向国际知名标准组织(如ISO)注册</li></ul></li></ul></li><li><p>签发机构名(Issuer)<br>此域用来标识签发证书的CA的X.500 DN(DN-Distinguished Name)名字。包括:</p><ol><li>国家(C)</li><li>省市(ST)</li><li>地区(L)</li><li>组织机构(O)</li><li>单位部门(OU)</li><li>通用名(CN)</li><li>邮箱地址</li></ol></li><li><p>有效期(Validity)<br>指定证书的有效期，包括:</p><ul><li>证书开始生效的日期时间</li><li>证书失效的日期和时间<br>每次使用证书时，需要检查证书是否在有效期内。</li></ul></li><li><p>证书用户名(Subject)<br>指定证书持有者的X.500唯一名字。包括:</p><ol><li>国家(C)</li><li>省市(ST)</li><li>地区(L)</li><li>组织机构(O)</li><li>单位部门(OU)</li><li>通用名(CN)</li><li>邮箱地址</li></ol></li><li><p>证书持有者公开密钥信息(Subject Public Key Info)<br>证书持有者公开密钥信息域包含两个重要信息:</p><ul><li>证书持有者的公开密钥的值</li><li>公开密钥使用的算法标识符。此标识符包含公开密钥算法和hash算法。</li></ul></li><li><p>扩展项(extension)<br>X.509 V3证书是在v2的基础上一标准形式或普通形式增加了扩展项，以使证书能够附带额外信息。标准扩展是指<br>由X.509 V3版本定义的对V2版本增加的具有广泛应用前景的扩展项，任何人都可以向一些权威机构，如ISO，来<br>注册一些其他扩展，如果这些扩展项应用广泛，也许以后会成为标准扩展项。</p></li><li><p>签发者唯一标识符(Issuer Unique Identifier)<br>签发者唯一标识符在第2版加入证书定义中。此域用在当同一个X.500名字用于多个认证机构时，用一比特字符串来唯一标识签发者的X.500名字。可选。</p></li><li><p>证书持有者唯一标识符(Subject Unique Identifier)<br>持有证书者唯一标识符在第2版的标准中加入X.509证书定义。此域用在当同一个X.500名字用于多个证书持有者时，用一比特字符串来唯一标识证书持有者的X.500名字。可选。</p></li><li><p>签名算法(Signature Algorithm)<br>证书签发机构对证书上述内容的签名算法。<br>example:sha256WithRSAEncryption</p></li><li><p>签名值(Issuer’s Signature)<br>证书签发机构对证书上述内容的签名值</p></li></ol><h4 id="1-2-证书样例"><a href="#1-2-证书样例" class="headerlink" title="1.2 证书样例"></a>1.2 证书样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Data:</span><br><span class="line">  Version:  v3</span><br><span class="line">  Serial Number: 0x1</span><br><span class="line">  Signature Algorithm: SHA1withRSA - 1.2.840.113549.1.1.5</span><br><span class="line">  Issuer: CN=Certificate Manager,OU=netscape,O=ExampleCorp,L=MV,ST=CA,C=US</span><br><span class="line">  Validity: </span><br><span class="line">    Not Before: Friday, February 21, 2005 12:00:00 AM PST America/Los_Angeles</span><br><span class="line">    Not  After: Monday, February 21, 2007 12:00:00 AM PST America/Los_Angeles</span><br><span class="line">  Subject: CN=Certificate Manager,OU=netscape,O=ExampleCorp,L=MV,ST=CA,C=US</span><br><span class="line">  Subject Public Key Info: </span><br><span class="line">    Algorithm: RSA - 1.2.840.113549.1.1.1</span><br><span class="line">    Public Key: </span><br><span class="line">      Exponent: 65537</span><br><span class="line">      Public Key Modulus: (2048 bits) :</span><br><span class="line">        E4:71:2A:CE:E4:24:DC:C4:AB:DF:A3:2E:80:42:0B:D9:</span><br><span class="line">        CF:90:BE:88:4A:5C:C5:B3:73:BF:49:4D:77:31:8A:88:</span><br><span class="line">        15:A7:56:5F:E4:93:68:83:00:BB:4F:C0:47:03:67:F1:</span><br><span class="line">        30:79:43:08:1C:28:A8:97:70:40:CA:64:FA:9E:42:DF:</span><br><span class="line">        35:3D:0E:75:C6:B9:F2:47:0B:D5:CE:24:DD:0A:F7:84:</span><br><span class="line">        4E:FA:16:29:3B:91:D3:EE:24:E9:AF:F6:A1:49:E1:96:</span><br><span class="line">        70:DE:6F:B2:BE:3A:07:1A:0B:FD:FE:2F:75:FD:F9:FC:</span><br><span class="line">        63:69:36:B6:5B:09:C6:84:92:17:9C:3E:64:C3:C4:C9</span><br><span class="line">  Extensions: </span><br><span class="line">    Identifier: Netscape Certificate Type - 2.16.840.1.113730.1.1</span><br><span class="line">      Critical: no </span><br><span class="line">      Certificate Usage: </span><br><span class="line">        SSL CA </span><br><span class="line">        Secure Email CA </span><br><span class="line">        ObjectSigning CA </span><br><span class="line">    Identifier: Basic Constraints - 2.5.29.19</span><br><span class="line">      Critical: yes </span><br><span class="line">      Is CA: yes </span><br><span class="line">      Path Length Constraint: UNLIMITED</span><br><span class="line">    Identifier: Subject Key Identifier - 2.5.29.14</span><br><span class="line">      Critical: no </span><br><span class="line">      Key Identifier: </span><br><span class="line">        3B:46:83:85:27:BC:F5:9D:8E:63:E3:BE:79:EF:AF:79:</span><br><span class="line">        9C:37:85:84</span><br><span class="line">    Identifier: Authority Key Identifier - 2.5.29.35</span><br><span class="line">      Critical: no </span><br><span class="line">      Key Identifier: </span><br><span class="line">        3B:46:83:85:27:BC:F5:9D:8E:63:E3:BE:79:EF:AF:79:</span><br><span class="line">        9C:37:85:84</span><br><span class="line">    Identifier: Key Usage: - 2.5.29.15</span><br><span class="line">      Critical: yes </span><br><span class="line">      Key Usage: </span><br><span class="line">        Digital Signature </span><br><span class="line">        Key CertSign </span><br><span class="line">        Crl Sign </span><br><span class="line">  Signature: </span><br><span class="line">    Algorithm: SHA1withRSA - 1.2.840.113549.1.1.5</span><br><span class="line">    Signature: </span><br><span class="line">      AA:96:65:3D:10:FA:C7:0B:74:38:2D:93:54:32:C0:5B:</span><br><span class="line">      2F:18:93:E9:7C:32:E6:A4:4F:4E:38:93:61:83:3A:6A:</span><br><span class="line">      A2:11:91:C2:D2:A3:48:07:6C:07:54:A8:B8:42:0E:B4:</span><br><span class="line">      E4:AE:42:B4:B5:36:24:46:4F:83:61:64:13:69:03:DF:</span><br><span class="line">      41:88:0B:CB:39:57:8C:6B:9F:52:7E:26:F9:24:5E:E7:</span><br><span class="line">      BC:FB:FD:93:13:AF:24:3A:8F:DB:E3:DC:C9:F9:1F:67:</span><br><span class="line">      A8:BD:0B:95:84:9D:EB:FC:02:95:A0:49:2C:05:D4:B0:</span><br><span class="line">      35:EA:A6:80:30:20:FF:B1:85:C8:4B:74:D9:DC:BB:50</span><br></pre></td></tr></table></figure><p>浏览器收到证书时会对签名颁发机构进行检查。若该机构是权威的公共签名机构，浏览器可能已经知道其公开密钥（浏览器会预装很多签名颁发机构的证书），这样就可以验证签名了。</p><p>如果对签名颁发机构一无所知，浏览器就无法确定是否应该信任它，这时通常会向用户显示一个对话框，看看他是否相信这个签名发布者（可能是本地的IT部门或软件厂商）。</p><h2 id="2-HTTPS-连接的建立"><a href="#2-HTTPS-连接的建立" class="headerlink" title="2. HTTPS 连接的建立"></a>2. HTTPS 连接的建立</h2><p>在未加密 HTTP 中，客户端会打开一条到 Web 服务器端口 80 的 TCP 连接，发送一条请求报文，接收一条响应报文，关闭连接。</p><p>由于 SSL 安全层的存在，HTTPS 中这个过程会略微复杂一些。在 HTTPS 中，客户端首先打开一条到 Web 服务器端口 443（安全 HTTP 的默认端口）的连接。一旦建立了 TCP 连接，客户端和服务器就会初始化 SSL 层，对加密参数进行沟通，并交换密钥。握手完成之后，SSL 初始化就完成了，客户端就可以将请求报文发送给安全层了。在将这些报文发送给 TCP 之前，要先对其进行加密。</p><p>在发送已加密的 HTTP 报文之前,客户端和服务器要进行一次 SSL 握手，在这个握手过程中，它们要完成以下工作：</p><ul><li>交换协议版本号;</li><li>选择一个两端都了解的密码;</li><li>对两端的身份进行认证;</li><li>生成临时的会话密钥，以便加密信道。 </li></ul>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《HTTP权威指南》: 连接管理</title>
      <link href="/2016/07/22/%E3%80%8AHTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9A%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/"/>
      <url>/2016/07/22/%E3%80%8AHTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9A%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="1-HTTP-事务的时延"><a href="#1-HTTP-事务的时延" class="headerlink" title="1. HTTP 事务的时延"></a>1. HTTP 事务的时延</h3><p>HTTP位于TCP上层，所以HTTP事务的性能在很大程度上取决于底层TCP通道的性能。TCP时延取决于硬件速度、网络和服务器负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。HTTP事务的时延有以下几种主要原因：</p><ul><li>客户端首先需要根据URI确定Web服务器的IP地址和端口号。如果最近没有对URI中的主机名进行访问，通过DNS解析系统将URI中的主机名转换成一个IP地址需要花费数十秒时间。</li><li>接下来，客户端会向服务器发送一条TCP连接请求，并等待服务器回送一个请求接受应答。每条新的TCP连接都会有连接建立时延。这个值通常最多只有一两秒种，但如果有数百个HTTP事务的话，这个值会快速地叠加上去。</li><li>一旦连接建立起来了，客户端就会通过新建立的TCP管道来发送HTTP请求。数据到达时，Web服务器会从TCP连接中读取请求报文，并对请求进行处理。因特网传输请求报文，以及服务器处理请求报文都需要时间。</li><li>然后，Web服务器会回送HTTP响应，这也需要花费时间。<a id="more"></a></li></ul><h3 id="2-HTTP性能"><a href="#2-HTTP性能" class="headerlink" title="2. HTTP性能"></a>2. HTTP性能</h3><p>TCP相关时延包括：</p><ul><li>TCP连接建立握手</li><li>TCP慢启动拥塞控制</li><li>数据聚集的Nagle算法</li><li>用于捎带确认的TCP延迟确认算法</li><li>TIME_WAIT时延和端口耗尽。</li></ul><h4 id="2-1-TCP连接的握手时延"><a href="#2-1-TCP连接的握手时延" class="headerlink" title="2.1 TCP连接的握手时延"></a>2.1 TCP连接的握手时延</h4><p>TCP连接握手需要经过以下几个步骤：</p><ul><li>请求新的TCP连接时，客户端要向服务器发送一个小的TCP分组（通常是40~60个字节）。这个分组中设置了一个特殊的SYN标记，说明这是一个连接请求。</li><li>如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个TCP分组，这个分组中SYN和ACK标记都被置位，说明连接请求已被接受。</li><li>最后，客户端向服务器回送一条确认信息，通知它连接已成功建立。现代的TCP栈都允许客户端在这个确认分组中发送数据。</li></ul><h4 id="2-2-延迟确认"><a href="#2-2-延迟确认" class="headerlink" title="2.2 延迟确认"></a>2.2 延迟确认</h4><p>由于因特网自身无法确保可靠分组传输（因特网路由器超负荷的话，可以随意丢弃分组），所以TCP实现了自己的确认机制来确保数据的成功传输。</p><p>每个TCP段都有一个序列号和数据完整性校验和。每个段的接受着收到完好的段时，都会想发送者回答小的确认分组。如果发送者没有在指定的窗口时间内收到确认信息，发送者就认为分组已被破坏或损毁，并重发数据。</p><p>由于确认报文很小，所以TCP允许发往相同方向的输出数据分组中对其进行捎带。TCP将返回的去人信息于输出的数据分组结合在一起，可以更有效地利用网络。为了增加确认报文找到 同向传输数据分组的可能性，很多TCP栈都实现了一种“延迟确认”算法。延迟确认算法会在一个特定的窗口时间（通常是100ms到200ms）内将输出确认存在缓冲区中，以寻找能够捎带它的输出数据分组。如果在哪个时间段内没有输出数据分组，就将确认信息放在单独的分组中传送。</p><p>但是，HTTP具有双峰特征的请求-应答行为降低了捎带信息的可能。当希望有相反方向回传分组的时候,偏偏没有那么多。通常，延迟确认算法会引入相当大的时延。根据所使用操作系统的不同，可以调整或禁止延迟确认算法。</p><h4 id="2-3-TCP慢启动"><a href="#2-3-TCP慢启动" class="headerlink" title="2.3 TCP慢启动"></a>2.3 TCP慢启动</h4><p>TCP数据传输的性能还取决于TCP连接的使用期（age）。TCP连接会随着时间进行自我“调谐”，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐被称为TCP慢启动（slow start），用于防止因特网的突然过载和拥塞。</p><p>TCP慢启动限制了一个TCP端点在任意时刻可以传输的分组数。简单来说，每成功接收一个分组，发送端就有了发送另外两个分组的权限。如果某个HTTP事务有大量数据要发送，是不能一次将所有分组都发送出去的。必须发送一个分组，等待确认；然后可以发送两个分组，每个分组都必须被确认，这样就可以发送四个分组了，以此类推。这种方式被称为“打开拥塞窗口”。</p><p>由于存在这种拥塞控制特性，所以新连接的传输速度会比已经交换过一定量数据的、“已调谐”连接慢一些。</p><h4 id="2-4-Nagle算法与TCP-NODELAY"><a href="#2-4-Nagle算法与TCP-NODELAY" class="headerlink" title="2.4 Nagle算法与TCP_NODELAY"></a>2.4 Nagle算法与TCP_NODELAY</h4><p>TCP有一个数据流接口，应用程序可以通过它将任意尺寸的数据放入TCP栈中——即使一次只放一个字节也可以！但是，每个TCP段中都至少装载了40个字节的标记和首部，所以如果TCP发送了大量包含少量数据的分组，网络的性能就会严重下降。 </p><p>Nagle算法（根据其发明者John Nagle命名）试图在发送一个分组之前，将大量TCP数据绑定在一起，以提高网络效率。 </p><p>Nagle算法鼓励发送全尺寸（LAN上最大尺寸的分组大约是1500字节，在因特网上是几百字节）的段。只有当所有其他分组都被确认之后，Nagle算法才允许发送非全尺寸的分组。如果其他分组仍然在传输过程中，就将那部分数据缓存起来。只有当挂起分组被确认，或者缓存中积累了足够发送一个全尺寸分组的数据时，才会将缓存的数据发送出去。</p><p>Nagle算法会引发几种HTTP性能问题。首先，小的HTTP报文可能无法填满一个分组，可能会因为等待那些永远不会到来的额外数据而产生时延。其次，Nagle算法与延迟确认之间的交互存在问题——Nagle算法会阻止数据的发送，直到有确认分组抵达为止，但确认分组自身会被延迟确认算法延迟100~200毫秒。 </p><p>HTTP应用程序常常会在自己的栈中设置参数TCP_NODELAY，禁用Nagle算法，提高性能。如果要这么做的话，一定要确保会向TCP写入大块的数据，这样就不会产生一堆小分组了。</p><h4 id="2-5-TIME-WAIT累积与端口耗尽"><a href="#2-5-TIME-WAIT累积与端口耗尽" class="headerlink" title="2.5 TIME_WAIT累积与端口耗尽"></a>2.5 TIME_WAIT累积与端口耗尽</h4><p>当某个TCP端点关闭TCP连接时，会在内存中维护一个小的控制块，用来记录最近所关闭连接的IP地址和端口号。这类信息只会维持一小段时间，通常是所估计的最大分段试用期的两倍（称为2MSL，通常为2分钟）左右，以确保在这段时间内不会创建具有相同地址和端口号的新连接。实际上，这个算法可以防止在2分钟内创建、关闭并重新创建2个相同IP地址和端口号的连接。</p><p>现在高速路由器的使用，使得重复分组几乎不可能在连接关闭的几分钟之后，出现在服务器上。有些操作系统会将2MSL设置为一个较小的值，但修改此值时要特别小心。分组确实会被复制，如果来自之前连接的复制分组插入具有相同连接值的新TCP流，会破坏TCP数据。</p><p>2MSL的连接关闭延迟通常不是什么问题，但在性能基准环境下就可能会成为一个问题。进行性能基准测试时，通常只有一台或几台用来产生流量的计算机连接到某系统中去，这样就限制了连接到服务器的客户端IP地址数。而且，服务器通常会在HTTP默认端口80上进行监听。用TIME_WAIT防止端口号重用时，这些情况也限制了可用的连接值组合。</p><p>在只有一个客户端和一台Web服务器的异常情况下，构建一条TCP连接的4个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;source-IP-address，source-port，destination-IP-address，destination-port&gt;</span><br></pre></td></tr></table></figure><p>其中的3个都是固定的——只有源端口号可以随意改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;client-IP, source-port, server-IP,80&gt;</span><br></pre></td></tr></table></figure><p>客户端每次连接到服务器上去时，都会获得一个新的源端口，以实现连接的唯一性。但由于可用源端口的数量有限（比如60000个），而且在2MSL（比如，120s）内连接是无法重用的，连接率就被限制在了60000/120 = 500次/s。如果再不断进行优化，并且服务器的连接率不超过500次/s, 就可以确保不会遇到TIME_WAIT端口耗尽的问题。要修正这个问题，可以增加客户端负载生成器的数量，或者确保客户端和服务器在循环使用几个虚拟IP地址以增加更多的连接组合。</p><h3 id="3-HTTP连接的处理"><a href="#3-HTTP连接的处理" class="headerlink" title="3. HTTP连接的处理"></a>3. HTTP连接的处理</h3><h4 id="3-1-常被误解的Connection首部"><a href="#3-1-常被误解的Connection首部" class="headerlink" title="3.1 常被误解的Connection首部"></a>3.1 常被误解的Connection首部</h4><p>HTTP允许客户端和最终的源服务器之间存在一串HTTP中间实体（代理，高速缓存等）。可以从客户端开始，逐跳地将HTTP报文经过这些中间设备，转发到源端服务器上（或者进行反向传输）。</p><p>某些情况下，两个相邻的HTTP应用会为它们共享的连接应用一组选项。HTTP的Connection首部字段中有一个有逗号分隔的连接标签列表，这些标签为此连接必定了一些不会传播到其它连接中去的选项。</p><p>Connection首部可以承载三种不同类型的标签：</p><ul><li>HTTP首部字段名，列出了只与此连接有关的首部；</li><li>任意标签值，用于描述此连接的非标准选项；</li><li>值close，说明操作完成之后需关闭这条持久连接。</li></ul><p>如果连接标签中包含了一个HTTP首部字段的名称，那么这个首部字段就包含了一些与连接有关的信息，不能将其转发出去。在将报文转发之前，必须删除Connection首部列出的所有首部字段。</p><p>HTTP应用程序收到一条带有Connection首部的报文肘，接收端会解析发送端请求的所有选项，并将其应用。然后会在将此报文转发给下一跳地址之前，删除Connection首部以及Connection中列出的所有首部。而且，可能还会有少量没有作为Connection首部值列出，但一定不能被代理转发的逐跳首部。其中包括Prxoy-Authenticate、Proxy-Connection、Transfer-Encoding和Upgrade.</p><h3 id="4-持久连接"><a href="#4-持久连接" class="headerlink" title="4. 持久连接"></a>4. 持久连接</h3><p>Web客户端经常会打开到同一个站点的连接。这种性质被称为站点局部性（site locality）。</p><p>因此，HTTP/1.1（以及 HTTP/1.0的各种增强版本）允许HTTP设备在事务处理结束之后将TCP连接保持在打开状态，以便为未来的HTTP请求重用现存的连接。在事务处理结束之后仍然保持在打开状态的TCP连接被称为持久连接。非持久连接会在每个事务结束之后关闭。持久连接会在不同事务之间保持打开状态，直到客户端或服务器决定将其关闭为止。 </p><p>重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段。而且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便更快速地进行数据的传输。</p><h4 id="4-1-持久以及并行连接"><a href="#4-1-持久以及并行连接" class="headerlink" title="4.1 持久以及并行连接"></a>4.1 持久以及并行连接</h4><p>并行连接的缺点：</p><ul><li>每个事务都会打开/关闭一条新的连接，会耗费时间和带宽。</li><li>由于tcp慢启动特性的存在，每个新连接的性能都会下降。</li><li>可打开的并行连接数量实际上有限。</li></ul><p>持久连接有一些比并行连接更好的地方。持久连接降低了时延和连接建立的开销，将连接保持在已协调状态，而且减少了打开连接的潜在数量。但是，管理持久连接一定要特别小心，不然就会出现积累大量的空闲连接。</p><h4 id="4-2-HTTP-1-0-keep-alive连接"><a href="#4-2-HTTP-1-0-keep-alive连接" class="headerlink" title="4.2 HTTP/1.0+keep-alive连接"></a>4.2 HTTP/1.0+keep-alive连接</h4><p>很多HTTP/1.0的浏览器和服务器都进行了扩展，以支持keep-alive型持久连接。</p><h4 id="4-3-Keep-Alive操作"><a href="#4-3-Keep-Alive操作" class="headerlink" title="4.3 Keep-Alive操作"></a>4.3 Keep-Alive操作</h4><p>实现HTTP/1.0 keep-alive的客户端可以通过包含Connection: Keep-Alive首部请求将一条连接保持在打开状态。</p><p>如果服务器允许，就在响应中包含同样的头部。如果响应中没有Connection: Keep-Alive首部，客户端就认为服务器不支持keep-alive，会在发回响应报文之后关闭连接。</p><h4 id="4-4-Keep-Alive选项"><a href="#4-4-Keep-Alive选项" class="headerlink" title="4.4 Keep-Alive选项"></a>4.4 Keep-Alive选项</h4><p>可以用Keep-Alive通用首部中指定的、由逗号分隔的选项来调节keep-alive的行为。</p><ul><li>参数timeout是在Keep-Alive响应首部发送的。它估计了服务器希望将连接保持在活跃状态的时间。这并不是一个承诺值。</li><li>参数max是在Keep-Alive响应首部发送的，它估计了服务器还希望为多少个事务保持此连接的活跃状态。这并不是一个承诺值。</li><li>Keep-Alive还可支持任意未经处理的属性，这些属性主要用于诊断和调试。语法为name [=value]。</li></ul><p>Keep-Alive首部完全是可选的，但只有在提供Connection: Keep-Alive时才能使用它。这里有个Keep-Alive响应首部的例子，这个例子说明服务器最多还会为另外5个事务保持连接的打开状态，或者将打开状态保持到连接空闲了2分钟之后。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection: Keep-AliveKeep-Alive: max=5, timeout=120</span><br></pre></td></tr></table></figure><h4 id="4-5-Keep-Alive连接的限制和规则"><a href="#4-5-Keep-Alive连接的限制和规则" class="headerlink" title="4.5 Keep-Alive连接的限制和规则"></a>4.5 Keep-Alive连接的限制和规则</h4><p>使用keep-alive连接时有一些限制和一些需要澄清的地方。</p><ul><li>在HTTP/1.0中，keep-alive并不是默认使用的。客户端必须发送一个Connection: Keep-Alive请求首部来激活keep-alive连接。</li><li>Connection: Keep-Alive首部必须随所有希望保持持久连接的报文一起发送。如果客户端没有发送Connection: Keep-Alive首部，服务器就会在那条请求之后关闭连接。</li><li>通过检测响应中是否包含Connection: Keep-Alive响应首部，客户端可以判断服务器是否会在发出响应之后关闭连接。</li><li>只有在无需检测到连接的关闭即可确定报文实体主体部分长度的情况下，才能将连接保持在打开状态——也就是说实体的主体部分必须有正确的Content-Length，有多部件媒体类型，或者用分块传输编码的方式进行了编码。在一条keep-alive信道中回送错误的Content-Length是很糟糕的事，这样的话，事务处理的另一端就无法精确地检测出一条报文的结束和另一条报文的开始了。</li><li>代理和网关必须执行Connection首部的规则。代理或网关必须在将报文转发出去或将其高速缓存之前，删除在Connection首部中命名的所有首部字段以及Connection首部自身。</li><li>严格来说，不应该与无法确认是否支持Connection首部的代理服务器建立keep-alive连接，以防出现哑代理问题。在实际中不是总能做到这一点。</li><li>从技术上来讲，应该忽略所有来自HTTP/1.0设备的Connection首部字段(包括Connection: Keep-Alive)，因为它们可能是由比较老的代理服务器误转发的。但实际上，尽管可能会有在老代理上挂起的危险，有些客户端和服务器还是会违反这条规则。</li><li>除非重复发送请求会发生其他一些副作用，否则如果在客户端收到完整的响应之前连接就关闭了，客户端就一定要做好重试请求的准备。</li></ul><h4 id="4-6-Keep-Alive和哑代理"><a href="#4-6-Keep-Alive和哑代理" class="headerlink" title="4.6 Keep-Alive和哑代理"></a>4.6 Keep-Alive和哑代理</h4><p>Web客户端的Connection: Keep-Alive首部应该只会对这条离开客户端的TCP链路产生影响，这就是将其称作“连接”首部的原因。如果客户端正在与一台Web服务器对话，客户端可以发送一个Connection: Keep-Alive首部来告知服务器它希望保持连接的活跃状态。如果服务器支持keep-alive，就回送一个Connection: Keep-Alive首部，否则就不回送。</p><p>问题出在代理上——尤其是那些不理解Connection首部，而且不知道在沿着转发链路将其发送出去之前，应该将该首部删除的代理。很多老的或简单的代理都是盲中继(blind relay)，它们只是将字节从一个连接转发到另一个连接中去，不对Connection首部进行特殊的处理。</p><p>假设有一个Web客户端正通过一个作为盲中继使用的哑代理与Web服务器进行对话，下图显示的就是这种情形。</p><p><img src="https://user-images.githubusercontent.com/12514722/30251878-327641e6-969b-11e7-83fb-89efc920e248.png" alt="Markdown"></p><ol><li>Web客户端向代理发送了一条报文，其中包含了Connection: Keep-Alive首部，如果可能的话请求建立一条keep-alive连接。客户端等待响应，以确定对方是否认可它对keep-alive信道的请求。</li><li>哑代理收到了这条HTTP请求，但它并不理解connection首部（只是将其作为一个扩展首部对待）。代理不知道keep-alive是什么意思，因此只是沿着转发链路将报文一字不漏地发送给服务器。但Connection首部是个逐跳首部，只适用于单条传输链路，不应该沿着传输链路向下传输。接下来，就要发生一些很糟糕的事情了。</li><li>经过中继的HTTP请求抵达了Web服务器。当Web服务器收到经过代理转发的Connection: Keep-Alive首部时，会误以为代理（对服务器来说，这个代理看起来就和所有其他客户端一样）希望进行keep-alive对话。Web服务器同意进行keep-alive对话，并回送了一个Connection: Keep-Alive响应首部。所以，此时Web服务器认为它在与代理进行keep-alive对话，会遵循keep-alive的规则。但代理却对keep-alive一无所知。</li><li>哑代理将Web服务器的响应报文回送给客户端，并将来自Web服务器的Connection: Keep-Alive首部一起传送过去。客户端看到这个首部，就会认为代理同意进行keep-alive对话。所以，此时客户端和服务器都认为它们在进行keep-alive对话，但与它们进行对话的代理却对keep-alive一无所知。</li><li>由于代理对keep-alive一无所知，所以会将收到的所有数据都回送给客户端，然后等待源端服务器关闭连接。但源端服务器会认为代理已经显式地请求它将连接保持在打开状态了，所以不会去关闭连接。这样，代理就会挂在那里等待连接的关闭。</li><li>客户端收到了回送的响应报文时，会立即转向下一条请求，在keep-alive连接上向代理发送另一条请求。而代理并不认为同一条连接上会有其他请求到来，请求被忽略，浏览器就在这里转圈，不会有任何进展了。</li><li>这种错误的通信方式会使浏览器一直处于挂起状态，直到客户端或服务器将连接超时，并将其关闭为止。</li></ol><p>为避免此类代理通信问题的发生，现代的代理都绝不能转发Connection首部和所有名字出现在Connection值中的首部。因此,如果一个代理收到了一个Connection: Keep-Alive首部，是不应该转发Connection首部，或所有名为Keep-Alive的首部的。 </p><h4 id="4-7-插入Proxy-Connection"><a href="#4-7-插入Proxy-Connection" class="headerlink" title="4.7 插入Proxy-Connection"></a>4.7 插入Proxy-Connection</h4><p>在网景的变通做法是，浏览器会向代理发送非标准的Proxy-Connection扩展首部，而不是官方支持的著名的Connection首部。如果代理是盲中继，它会将无意义的Proxy-Connection首部转发给Web服务器，服务器会忽略此首部，不会带来任何问题。但如果代理是个聪明的代理（能够理解持久连接的握手动作），就用一个Connection首部取代无意义的Proxy-Connection首部，然后将其发送给服务器，以收到预期的效果。 </p><p>在客户端和服务器之间只有一个代理时可以用这种方案来解决问题。但如果在哑代理的任意一侧还有一个聪明的代理，这个问题就会再次露头了。</p><h4 id="4-8-HTTP-1-1持久连接"><a href="#4-8-HTTP-1-1持久连接" class="headerlink" title="4.8 HTTP/1.1持久连接"></a>4.8 HTTP/1.1持久连接</h4><p>HTTP/1.1逐渐停止了对keep-alive连接的支持，用一种名为持久连接（persistent connection）的改进型设计取代了它。持久连接的目的与keep-alive连接的目的相同，但工作机制更优一些。</p><p>与HTTP/1.0+的keep-alive连接不同，HTTP/1.1持久连接在默认情况下是激活的。除非特别指明，否则HTTP/1.1假定所有连接都是持久的。要在事务处理结束之后将连接关闭，HTTP/1.1应用程序必须向报文中显式地添加一个Connection: close首部。这是与以前的HTTP协议版本很重要的区别，在以前的版本中，keep-alive连接要么是可选的，要么根本就不支持。</p><p>HTTP/1.1客户端假定在收到响应后，除非响应中包含了Connection: close首部，不然HTTP/1.1连接就仍维持在打开状态。但是，客户端和服务器仍然可以随时关闭空闲的连接。不发送Connection: close并不意味着服务器承诺永远将连接保持在打开状态。 </p><p>只有当连接上所有的报文都有正确的、自定义报文长度时——也就是说,实体主体部分的长度都和相应的Content-Length一致,或者是用分块传输编码方式编码的——连接才能持久保持。 (因为是持久连接，无法通过连接的关闭来判断报文发送结束)</p><h4 id="4-9-持久连接的限制和规则"><a href="#4-9-持久连接的限制和规则" class="headerlink" title="4.9 持久连接的限制和规则"></a>4.9 持久连接的限制和规则</h4><p>在持久连接的使用中有以下限制和需要澄清的问题：</p><ul><li>发送了Connection: close请求首部之后，客户端就无法在那条连接上发送更多的请求了。</li><li>如果客户端不想在连接上发送其他请求了，就应该在最后一条请求中发送一个Connection: close请求首部。</li><li>只有当连接上所有的报文都有正确的、自定义报文长度时——也就是说，实体主体部分的长度都和相应的Content—Length一致，或者是用分块传输编码方式编码的——连接才能持久保持。</li><li>HTTP/1.1的代理必须能够分别管理与客户端和服务器的持久连接——每个持久连接都只适用于一跳传输。</li><li>由于较老的代理会转发Connection首部，所以HTTP/1.1的代理服务器不应该与HTTP/1.0客户端建立持久连接，除非它们了解客户端的处理能力。实际上，这一点是很难做到的，很多厂商都违背了这一原则。</li><li>尽管服务器不应该试图在传输报文的过程中关闭连接，而且在关闭连接之前至少应该响应一条请求，但不管Connection首部取了什么值，HTTP/1.1设备都可以在任意时刻关闭连接。</li><li>HTTP/1.1应用程序必须能够从异步的关闭中恢复出来。只要不存在可能会累积起来的副作用，客户端都应该重试这条请求。</li><li>除非重复发起请求会产生副作用，否则如果在客户端收到整条响应之前连接关闭了，客户端就必须要重新发起请求。</li><li>一个用户客户端对任何服务器或代理最多只能维护两条持久连接，以防服务器过载。代理可能需要更多到服务器的连接来支持并发用户的通信，所以，如果有N个用户试图访问服务器的话，代理最多要维持2N条到任意服务器或父代理的连接。</li></ul><h3 id="5-管道化连接"><a href="#5-管道化连接" class="headerlink" title="5. 管道化连接"></a>5. 管道化连接</h3><p>HTTP/1.1允许在持久连接上可选地使用请求管道。这是在keep-alive连接上的进一步性能优化。在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向服务器时，第二条和第三条请求也可以开始发送了。在髙时延网络条件下，这样做可以降低网络的环回时间，提高性能。</p><p>对管道化连接有如下几条限制：</p><ul><li>如果HTTP客户端无法确认连接是持久的，就不应该使用管道。</li><li>必须按照与请求相同的顺序回送HTTP响应。HTTP报文中没有序列号标签，因此如果收到的响应失序了，就没办法将其与请求匹配起来了。</li><li>HTTP客户端必须做好连接会在任意时刻关闭的准备，还要准备好重发所有未完成的管道化清求。如果客户端打开了一条持久连接，并立即发出了10条请求，服务器可能在只处理了5条请求之后关闭连接。剩下的5条请求会失败，客户端必须能够应对这些过早关闭连接的情况，重新发出这些请求。</li><li>HTTP客户端不应该用管道化的方式发送会产生副作用的请求（比如POST）。总之，出错的时候，管道化方式会阻碍客户端了解服务器执行的是一系列管道化请求中的哪一些。由于无法安全地重试POST这样的非幂等请求（幂等是指多个请求返回相同的结果），所以出错时，就存在某些方法永远不会被执行的风险。</li></ul>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《HTTP权威指南》: 缓存</title>
      <link href="/2016/07/12/%E3%80%8AHTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9A%E7%BC%93%E5%AD%98/"/>
      <url>/2016/07/12/%E3%80%8AHTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9A%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h3 id="1-缓存的处理步骤"><a href="#1-缓存的处理步骤" class="headerlink" title="1. 缓存的处理步骤"></a>1. 缓存的处理步骤</h3><p>现代的商业化代理缓存相当地复杂。这些缓存构建得非常高效，可以支持HTTP和其他一些技术的各种高级特性。但除了一些微妙的细节之外，Web缓存的基本工作原理大多很简单。对一条HTTP GET报文的基本缓存处理过程包括7个步骤：</p><ul><li>接收—缓存从网络中读取抵达的请求报文；</li><li>解析—缓存对报文进行解析，提取出URL和各种首部；</li><li>查询—缓存查看是否有本地副本可用，如果没有，就获取一份副本(并将其保存在本地)；</li><li>新鲜度检测—缓存查看已缓存副本是否足够新鲜，如果不是，就询问服务器是否有任何更新；</li><li>创建响应—缓存会用新的首部和已缓存的主体来构建一条响应报文；</li><li>发送—缓存通过网络将响应发回给客户端；</li><li>日志—缓存可选地创建一个日志文件条目来描述这个事务。<a id="more"></a></li></ul><h4 id="1-1-接收"><a href="#1-1-接收" class="headerlink" title="1.1 接收"></a>1.1 接收</h4><p>在第一步中，缓存检测到一条网络连接上的活动，读取输入数据。高性能的缓存会同时从多条输入连接上读取数据，在整条报文抵达之前开始对事务进行处理。</p><h4 id="1-2-解析"><a href="#1-2-解析" class="headerlink" title="1.2 解析"></a>1.2 解析</h4><p>接下来，缓存将请求报文解析为片断，将首部的各个部分放入易于操作的数据结构中。这样，缓存软件就更容易处理首部字段并修改它们了。</p><h4 id="1-3-查询"><a href="#1-3-查询" class="headerlink" title="1.3 查询"></a>1.3 查询</h4><p>在第三步中，缓存获取了URL，查找本地副本。本地副本可能存储在内存、本地磁盘，甚至附近的另一台计算机中。专业级的缓存会使用快速算法来确定本地缓存中是否有某个对象。如果本地没有这个文档，它可以根据情形和配置，到原始服务器或父代理中去取，或者返回一条错误信息。已缓存对象中包含了服务器响应主体和原始服务器响应首部，这样就会在缓存命中时返回正确的服务器首部。已缓存对象中还包含了一些元数据（metadata），用来记录对象在缓存中停留了多长时间，以及它被用过多少次等。</p><h4 id="1-4-新鲜度检测"><a href="#1-4-新鲜度检测" class="headerlink" title="1.4 新鲜度检测"></a>1.4 新鲜度检测</h4><p>HTTP通过缓存将服务器文档的副本保留一段时间。在这段时间里，都认为文档是”新鲜的”，缓存可以在不联系服务器的情况下，直接提供该文档。但一旦已缓存副本停留的时间太长，超过了文档的新鲜度限值（freshness limit），就认为对象“过时”了，在提供该文档之前，缓存要再次与服务器进行确认，以查看文档是否发生了变化。客户端发送给缓存的所有请求首部自身都可以强制缓存进行再验证，或者完全避免验证，这使得事情变得更加复杂了。HTTP有一组非常复杂的新鲜度检测规则，缓存产品支持的大量配置选项，以及与非HTTP新鲜度标准进行互通的需要则使问题变得更加严重了。本章其余的大部分篇幅都用于解释新鲜度的计算问题。</p><h4 id="1-5-创建响应"><a href="#1-5-创建响应" class="headerlink" title="1.5 创建响应"></a>1.5 创建响应</h4><p>我们希望缓存的响应看起来就像来自原始服务器的一样，缓存将已缓存的服务器响应首部作为响应首部的起点。然后缓存对这些基础首部进行了修改和扩充。缓存负责对这些首部进行改造，以便与客户端的要求相匹配。比如，服务器返回的可能是一条HTTP/1.0响应（甚至是HTTP/0.9响应），而客户端期待的是一条HTTP/1.1响应，在这种情况下，缓存必须对首部进行相应的转换。缓存还会向其中插入新鲜度信息（Cache-Control、Age以及Expires首部），而且通常会包含一个Via首部来说明请求是由一个代理缓存提供的。注意，缓存不应该调整Date首部。Date首部表示的是原始服务器最初产生这个对象的日期。</p><h4 id="1-6-发送"><a href="#1-6-发送" class="headerlink" title="1.6 发送"></a>1.6 发送</h4><p>一旦响应首部准备好了，缓存就将响应回送给客户端。和所有代理服务器一样，代理缓存要管理与客户端之间的连接。高性能的缓存会尽力高效地发送数据，通常可以避免在本地缓存和网络I/O缓冲区之间进行文档内容的复制。</p><h4 id="1-7-日志"><a href="#1-7-日志" class="headerlink" title="1.7 日志"></a>1.7 日志</h4><p>大多数缓存都会保存日志文件以及与缓存的使用有关的一些统计数据。每个缓存事务结束之后，缓存都会更新缓存命中和未命中数目的统计数据（以及其他相关的度量值），并将条目插入一个用来显示请求类型、URL和所发生事件的日志文件。</p><h3 id="2-保持副本的新鲜"><a href="#2-保持副本的新鲜" class="headerlink" title="2. 保持副本的新鲜"></a>2. 保持副本的新鲜</h3><p>可能不是所有的已缓存副本都与服务器上的文档一致。毕竟，这些文档会随着时间发生变化。报告可能每个月都会变化。在线报纸每天都会发生变化。财经数据可能每过几秒钟就会发生变化。如果缓存提供的总是老的数据，就会变得毫无用处。已缓存数据要与服务器数据保持一致。HTTP有一些简单的机制可以在不要求服务器记住有哪些缓存拥有其文档副本的情况下，保持已缓存数据与服务器数据之间充分一致。HTTP将这些简单的机制称为文档过期（document expiration）和服务器再验证（server revalidation）。</p><h4 id="2-1-文档过期"><a href="#2-1-文档过期" class="headerlink" title="2.1 文档过期"></a>2.1 文档过期</h4><p>通过特殊的HTTP Cache-Control首部和Expires首部，HTTP让原始服务器向每个文档附加了一个“过期日期”。这些首部说明了在多长时间内可以将这些内容视为新鲜的。在缓存文档过期之前，缓存可以以任意频率使用这些副本，而无需与服务器联系——当然，除非客户端请求中包含有阻止提供已缓存或未验证资源的首部。但一旦已缓存文档过期，缓存就必须与服务器进行核对，询问文档是否被修改过，如果被修改过，就要获取一份新鲜（带有新的过期日期）的副本。</p><h4 id="2-2-过期日期和使用期"><a href="#2-2-过期日期和使用期" class="headerlink" title="2.2 过期日期和使用期"></a>2.2 过期日期和使用期</h4><p>服务器用HTTP/1.0+的Expires首部或HTTP/1.1的Cache-Control: max-age响应首部来指定过期日期，同时还会带有响应主体。Expires首部和Cache-Control: max-age首部所做的事情本质上是一样的，但由于Cache-Control首部使用的是相对时间而不是绝对日期，所以我们更倾向于使用比较新的Cache-Control首部。绝对日期依赖于计算机时钟的正确设置。</p><table><thead><tr><th>首部</th><th>描述</th></tr></thead><tbody><tr><td>Cache-Control: max-age</td><td>max-age值定义了文档的最大使用期——从第一次生成文档到文档不再新鲜、无法使用为止，最大的合法生存时间(以秒为单位)</td></tr><tr><td>Expires</td><td>指定一个绝对的过期日期。如果过期日期已经过了，就说明文档不再新鲜了</td></tr></tbody></table><h4 id="2-3-服务器再验证"><a href="#2-3-服务器再验证" class="headerlink" title="2.3 服务器再验证"></a>2.3 服务器再验证</h4><p>仅仅是已缓存文档过期了并不意味着它和原始服务器上目前处于活跃状态的文档有实际的区别；这只是意味着到了要进行核对的时间了。这种情况被称为“服务器再验证”，说明缓存需要询问原始服务器文档是否发生了变化。缓存并不一定要为每条请求验证文档的有效性——只有在文档过期时它才需要与服务器进行再验证。这样不会提供陈旧的内容，还可以节省服务器的流量，并拥有更好的用户响应时间。</p><ul><li>如果再验证显示内容发生了变化，缓存会获取一份新的文档副本，并将其存储在旧文档的位置上，然后将文档发送给客户端。</li><li>如果再验证显示内容没有发生变化，缓存只需要获取新的首部，包括一个新的过期日期，并对缓存中的首部进行更新就行了。</li></ul><p>HTTP协议要求行为正确的缓存返回下列内容之一：</p><ul><li>“足够新鲜”的已缓存副本；</li><li>与服务器进行过再验证，确认其仍然新鲜的已缓存副本；</li><li>如果需要与之进行再验证的原始服务器出故障了，就返回一条错误报文 ；</li><li>附有警告信息说明内容可能不正确的已缓存副本。</li></ul><h4 id="2-4-用条件方法进行再验证"><a href="#2-4-用条件方法进行再验证" class="headerlink" title="2.4 用条件方法进行再验证"></a>2.4 用条件方法进行再验证</h4><p>HTTP的条件方法可以高效地实现再验证。HTTP允许缓存向原始服务器发送一个“条件GET”，请求服务器只有在文档与缓存中现有的副本不同时，才回送对象主体。通过这种方式，将新鲜度检测和对象获取结合成了单个条件GET。向GET请求报文中添加一些特殊的条件首部，就可以发起条件GET。只有条件为真时，Web服务器才会返回对象。HTTP定义了5个条件请求首部。对缓存再验证来说最有用的2个首部是If-Modified-Since和If-None-Match。所有的条件首部都以前缀“If-”开头。</p><table><thead><tr><th>首部</th><th>描述</th></tr></thead><tbody><tr><td>If-Modified-Since:<date></date></td><td>如果从指定日期之后文档被修改过了，就执行请求的方法。可以与Last-Modified服务器响应首部配合使用，只有在内容被修改后与已缓存版本有所不同的时候才去获取内容</td></tr><tr><td>If-None-Match:<tags></tags></td><td>服务器可以为文档提供特殊的标签，而不是将其与最近修改日期相匹配，这些标签就像序列号一样。如果已缓存标签与服务器文档中的标签有所不同，If-None-Match首部就会执行所请求的方法</td></tr></tbody></table><h4 id="2-5-If-Modified-Since-Date再验证"><a href="#2-5-If-Modified-Since-Date再验证" class="headerlink" title="2.5 If-Modified-Since:Date再验证"></a>2.5 If-Modified-Since:Date再验证</h4><p>最常见的缓存再验证首部是If-Modified-Since。If-Modified-Since再验证请求通常被称为IMS请求。只有自某个日期之后资源发生了变化的时候，IMS请求才会指示服务器执行请求：</p><ul><li>如果自指定日期后，文档被修改了，If-Modified-Since条件就为真，通常GET就会成功执行。携带新首部的新文档会被返回给缓存，新首部除了其他信息之外，还包含了一个新的过期日期。</li><li>如果自指定日期后，文档没被修改过，条件就为假，会向客户端返回一个小的304 Not Modified响应报文，为了提高有效性，不会返回文档的主体。这 些首部是放在响应中返回的，但只会返回那些需要在源端更新的首部。比如，Content-Type首部通常不会被修改，所以通常不需要发送。一般会发送一个新的过期日期。</li></ul><p>If-Modified-Since首部可以与Last-Modified服务器响应首部配合工作。原始服务器会将最后的修改日期附加到所提供的文档上去。当缓存要对已缓存文档进行再验证时，就会包含一个If-Modified-Since首部，其中携带有最后修改已缓存副本的日期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-Modified-Since: &lt;cached last-modified date&gt;</span><br></pre></td></tr></table></figure><p>如果在此期间内容被修改了，最后的修改日期就会有所不同，原始服务器就会回送新的文档。否则，服务器会注意到缓存的最后修改日期与服务器文档当前的最后修改日期相符，会返回一个304 Not Modified响应。</p><p>注意，有些Web服务器并没有将If-Modified-Since作为真正的日期来进行比对。相反，它们在IMS日期和最后修改日期之间进行了字符串匹配。这样得到的语义就是“如果最后的修改不是在这个确定的日期进行的”，而不是“如果在这个日期之后没有被修改过”。将最后修改日期作为某种序列号使用时，这种替代语义能够很好地识别出缓存是否过期，但这会妨碍客户端将If-Modified-Since首部用于真正基于时间的一些目的。</p><h4 id="2-6-If-None-Match：实体标签再验证"><a href="#2-6-If-None-Match：实体标签再验证" class="headerlink" title="2.6 If-None-Match：实体标签再验证"></a>2.6 If-None-Match：实体标签再验证</h4><p>有些情况下仅使用最后修改日期进行再验证是不够的。</p><ul><li>有些文档可能会被周期性地重写（比如，从一个后台进程中写入），但实际包含的数据常常是一样的。尽管内容没有变化，但修改日期会发生变化。</li><li>有些文档可能被修改了，但所做修改并不重要，不需要让世界范围内的缓存都重装数据(比如对拼写或注释的修改)。</li><li>有些服务器无法准确地判定其页面的最后修改日期。</li><li>有些服务器提供的文档会在亚秒间隙发生变化(比如，实时监视器)，对这些服务器来说，以一秒为粒度的修改日期可能就不够用了。</li></ul><p>为了解决这些问题，HTTP允许用户对被称为实体标签（ETag）的“版本标识符”进行比较。实体标签是附加到文档上的任意标签（引用字符串）。它们可能包含了文档的序列号或版本名，或者是文档内容的校验和及其他指纹信息。</p><p>当发布者对文档进行修改时，可以修改文档的实体标签来说明这个新的版本。这样，如果实体标签被修改了，缓存就可以用If-None-Match条件首部来GET文档的新副本了。</p><h4 id="2-7-强弱验证器"><a href="#2-7-强弱验证器" class="headerlink" title="2.7 强弱验证器"></a>2.7 强弱验证器</h4><p>缓存可以用实体标签来判断，与服务器相比，已缓存版本是不是最新的(与使用最近修改日期的方式很像)。从这个角度来看，实体标签和最近修改日期都是缓存验证器（cache validator）。</p><p>HTTP把验证码分为两类：弱验证码（weak validators）和强验证码（strong validators）。弱验证码不一定能唯一标识资源的一个实例，而强验证码必须如此。弱验证码的一个例子是对象的大小字节数。有可能资源的内容改变了，而大小还保持不变，因此假想的字节计数验证码与改变是弱相关的。而资源内容的加密校验和（比如MD5）就是强验证码，当文档改变时它总是会改变</p><p>最后修改时间被当作弱验证码，因为尽管它说明了资源最后被修改的时间，但它的描述精度最大就是1秒。因为资源在1秒内可以改变很多次，而且服务器每秒可以处理数千个请求，最后修改日期时间并不总能反应变化情况。ETag首部被当作强验证码，因为每当资源内容改变时，服务器都可以在ETag首部放置不同的值。版本号和摘要校验和也是很好的ETag首部候选，但它们不能带有任意的文本。ETag首部很灵活，它可以带上任意的文本值（以标记的形式），这样就可以用来设计出各种各样的客户端和服务器验证策略。</p><p>有时候，客户端和服务器可能需要采用不那么精确的实体标记验证方法。例如，某服务器可能想对一个很大、被广泛缓存的文档进行一些美化修饰，但不想在缓存服务器再验证时产生很大的传输流量。在这种情况下，该服务器可以在标记前面加上“W/”前缀来广播一个“弱”实体标记。对于弱实体标记来说，只有当关联的实体在语义上发生了重大改变时，标记才会变化。而强实体标记则不管关联的实体发生了什么性质的变化，标记都一定会改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ETag: W/&quot;v2.6&quot;</span><br><span class="line">If-None-Match: W/&quot;v2.6&quot;</span><br></pre></td></tr></table></figure><p>不管相关的实体值以何种方式发生了变化，强实体标签都要发生变化。而相关实体在语义上发生了比较重要的变化时，弱实体标签也应该发生变化。</p><p>注意，原始服务器一定不能为两个不同的实体重用一个特定的强实体标签值，或者为两个语义不同的实体重用一个特定的弱实体标签值。缓存条目可能会留存任意长的时间，与其过期时间无关，有人可能希望当缓存验证条目时，绝对不会再次使用在过去某一时刻获得的验证器，这种愿望可能不太现实。</p><h4 id="2-8-实体标签和最近修改日期"><a href="#2-8-实体标签和最近修改日期" class="headerlink" title="2.8 实体标签和最近修改日期"></a>2.8 实体标签和最近修改日期</h4><p>如果服务器回送了一个实体标签，HTTP/1.1客户端就必须使用实体标签验证器。如果服务器只回送了一个Last-Modified值，客户端就可以使用If-Modified-Since验证。如果实体标签和最后修改日期都提供了，客户端就应该使用这两种再验证方案，这样HTTP/1.0和HTTP/1.1缓存就都可以正确响应了。</p><p>除非HTTP/1.1原始服务器无法生成实体标签验证器，否则就应该发送一个出去，如果使用弱实体标签有优势的话，发送的可能就是个弱实体标签，而不是强实体标签。而且，最好同时发送一个最近修改值。如果HTTP/1.1缓存或服务器收到的请求既带有If-Modified-Since，又带有实体标签条件首部，那么只有这两个条件都满足时，才能返回304 Not Modified响应。</p><h3 id="3-控制缓存的能力"><a href="#3-控制缓存的能力" class="headerlink" title="3. 控制缓存的能力"></a>3. 控制缓存的能力</h3><p>服务器可以通过HTTP定义的几种方式来指定在文档过期之前可以将其缓存多长时间。按照优先级递减的顺序，服务器可以：</p><ul><li>附加一个”Cache-Control: no-store”首部到响应中去；</li><li>附加一个”Cache-Control: no-cache”首部到响应中去；</li><li>附加一个”Cache-Control: must-revalidate”首部到响应中去；</li><li>附加一个”Cache-Control: max-age”首部到响应中去；</li><li>附加一个”Expires”日期首部到响应中去；</li><li>不附加过期信息，让缓存确定自己的过期日期。</li></ul><h4 id="3-1-no-Store-与-no-Cache-响应首部"><a href="#3-1-no-Store-与-no-Cache-响应首部" class="headerlink" title="3.1 no-Store 与 no-Cache 响应首部"></a>3.1 no-Store 与 no-Cache 响应首部</h4><p>HTTP/1.1提供了几种限制对象缓存，或限制提供已缓存对象的方式，以维持对象的新鲜度。no-store首部和no-cache首部可以防止缓存提供未经证实的已缓存对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-store</span><br><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><p>标识为no-store的响应会禁止缓存对响应进行复制。缓存通常会像非缓存代理服务器一样，向客户端转发一条no-store响应，然后删除对象。</p><p>标识为no-cache的响应实际上是可以存储在本地缓存区中的。只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。这个首部使用do-not-serve-from-cache-without-revalidation这个名字会更恰当一些。</p><p>HTTP/1.1中提供Pragma: no-cache首部是为了兼容于HTTP/1.0+。除了与只理解Pragma: no-cache”的HTTP/1.0应用程序进行交互时，HTTP 1.1应用程序都应该使用Cache-Control: no-cache。</p><h4 id="3-2-max-age响应首部"><a href="#3-2-max-age响应首部" class="headerlink" title="3.2 max-age响应首部"></a>3.2 max-age响应首部</h4><p>Cache-Control: max-age首部表示的是从服务器将文档传来之时起，可以认为此文档处于新鲜状态的秒数（Cache-Control: max-age=3600）。还有一个s-maxage首部（注意maxage的中间没有连字符），其行为与max-age类似，但仅适用于共享（公有）缓存（Cache-Control: s-maxage=3600）。服务器可以请求缓存不要缓存文档，或者将最大使用期设置为零，从而在每次访问的时候都进行刷新（Cache-Control: max-age=0）。</p><h4 id="3-3-Expires响应首部"><a href="#3-3-Expires响应首部" class="headerlink" title="3.3 Expires响应首部"></a>3.3 Expires响应首部</h4><p>不推荐使用Expires首部，它指定的是实际的过期日期而不是秒数。HTTP设计者后来认为，由于很多服务器的时钟都不同步，或者不正确，所以最好还是用剩余秒数，而不是绝对时间来表示过期时间。可以通过计算过期值和日期值之间的秒数差来计算类似的新鲜生存期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Fri, 05 Jul 2002, 05:00:00 GMT</span><br></pre></td></tr></table></figure><p>有些服务器还会回送一个Expires:0响应首部，试图将文档置于永远过期的状态，但这种语法是非法的，可能给某些软件带来问题。应该试着支持这种结构的输入，但不应该产生这种结构的输出。</p><h4 id="3-4-must-revalidate-响应首部"><a href="#3-4-must-revalidate-响应首部" class="headerlink" title="3.4 must-revalidate 响应首部"></a>3.4 must-revalidate 响应首部</h4><p>可以配置缓存，使其提供一些陈旧(过期)的对象，以提高性能。如果原始服务器希望缓存严格遵守过期信息，可以在原始响应中附加一个Cache-Control: must-revalidate首部。</p><p>Cache-Control: must-revalidate响应首部告诉缓存，在事先没有跟原始服务器进行再验证的情况下，不能提供这个对象的陈旧副本。缓存仍然可以随意提供新鲜的副本。如果在缓存进行must-revalidate新鲜度检查时，原始服务器不可用，缓存就必须返回一条504 Gateway Timeout错误。</p><h4 id="3-5试探性过期"><a href="#3-5试探性过期" class="headerlink" title="3.5试探性过期"></a>3.5试探性过期</h4><p>如果响应中没有Cache-Control: max-age首部，也没有Expires首部，缓存可以计算出一个试探性最大使用期。可以使用任意算法，但如果得到的最大使用期大于24小时，就应该向响应首部添加一个Heuristic Expiration Warning（试探性过期警告，警告13）首部。</p><h4 id="3-6-客户端的新鲜度限制"><a href="#3-6-客户端的新鲜度限制" class="headerlink" title="3.6 客户端的新鲜度限制"></a>3.6 客户端的新鲜度限制</h4><p>Web 浏览器都有刷新（Refresh）或 重载（Reload）按钮，可以强制对浏览器或代理缓存中可能过期的内容进行刷新。刷新按钮会发布一个附加了Cache-Control请求首部的GET请求，这个请求会强制进行再验证，或者无条件地从服务器获取文档。刷新的确切行为取决于特定的浏览器、文档以及拦截缓存的配置。</p><p>客户端可以用Cache-Control请求首部来强化或放松对过期时间的限制。有些应用程序对文档的新鲜度要求很高（比如人工刷新按钮），对这些应用程序来说，客户端可以用Cache-Control首部使过期时间更严格。另一方面，作为提高性能、可靠性或开支的一种折衷方式，客户端可能会放松新鲜度要求。</p><p>Cache-Control请求指令：</p><table><thead><tr><th>指令</th><th>目的</th></tr></thead><tbody><tr><td>Cache-Control: max-stale</td><td>缓存可以随意提供过期的文件。如果指定了参数(s)，在这段时间内，文档就不能过期。这条指令放松了缓存的规则</td></tr><tr><td>Cache-Control: min-fresh=(s)</td><td>至少在未来(s)秒内文档要保持新鲜。这就使缓存规则更加严格了</td></tr><tr><td>Cache-Control: max-age = (s)</td><td>缓存无法返回缓存时间长于(s)秒的文档。这条指令会使缓存规则更加严格，除非同时还发送max-stale指令，在这种情况下，使用期可能会超过其过期时间</td></tr><tr><td>Cache-Control: no-cache</td><td>除非资源进行了再验证，否则这个客户端不会接受已缓存的资源</td></tr><tr><td>Cache-Control: no-store</td><td>缓存应该尽快从存储器中删除文档的所有痕迹，因为其中可能会包含敏感信息</td></tr><tr><td>Cache-Control: only-if-cached</td><td>只有当缓存中有副本存在时，客户端才会获取一份副本</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《HTTP 权威指南》: 实体和编码</title>
      <link href="/2016/07/01/%E3%80%8AHTTP%20%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9A%E5%AE%9E%E4%BD%93%E5%92%8C%E7%BC%96%E7%A0%81/"/>
      <url>/2016/07/01/%E3%80%8AHTTP%20%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%EF%BC%9A%E5%AE%9E%E4%BD%93%E5%92%8C%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="1-报文是箱子，实体是货物"><a href="#1-报文是箱子，实体是货物" class="headerlink" title="1. 报文是箱子，实体是货物"></a>1. 报文是箱子，实体是货物</h2><p>HTTP 实体首部描述了 HTTP 报文的内容，HTTP/1.1 版定义了以下 10 个基本字体首部字段：</p><ul><li>Content-Type：实体中所承载的对象类型；</li><li>Content-Length：所传送实体主体的长度或大小；</li><li>Content-Language：与所传送对象最相配的人类语言；</li><li>Content-Encoding：对象数据所做的任意变换；</li><li>Content-Location：一个备用位置，请求时可通过它获得对象；</li><li>Content-Range：如果这是部分实体，这个首部说明它是整体的哪个部分；</li><li>Content-MD5：实体主体内容的校验和；</li><li>Content-Modified：所传输内容在服务器上创建或最后修改的日期时间；</li><li>Expires：实体数据将要失效的日期时间；</li><li>Allow：该资源所允许的各种请求方法；</li><li>ETag：这份文档特定实例的唯一验证码；</li><li>Cache-Control：指出应该如何缓存该文档。<a id="more"></a></li></ul><h2 id="2-Content-Length：实体的大小"><a href="#2-Content-Length：实体的大小" class="headerlink" title="2. Content-Length：实体的大小"></a>2. Content-Length：实体的大小</h2><p>Content-Length 首部指示出报文中实体主体的字节大小。这个大小是包含了所有内容编码的。比如，对文本文件进行了 gzip 压缩的话，Content-Length 首部就是压缩后的大小，而不是原始大小。</p><p>除非使用了分块编码，否则 Content-Length 首部就是带有实体主体的报文必须使用的。使用 Content-Length 首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。</p><p>HTTP 的早期版本采用关闭连接的办法来划定报文的结束。但是，没有 Content-Length 的话，客户端无法区分到底是报文结束时正常的连接关闭，还是报文传输中由于服务器崩溃而导致的连接关闭。客户端需要通过 Content-Length 来检测报文截尾。</p><p>Content-Length 首部对于持久连接是必不可少的。如果响应通过持久连接传送，就可能有另一条HTTP响应紧随其后。客户端通过 Content-Length 首部就可以知道报文在何处结束，下一条报文从何处开始。因为连接是持久的，客户端无法依赖连接关闭来判别报文的结束。如果没有 Content-Length 首部，HTTP 应用程序就不知道某个实体主体在哪里结束，下一条报文从哪里开始。</p><p>HTTP 允许对实体主体的内容进行编码，比如可以使之更安全或进行压缩以节省空间。如果主体进行了内容编码，Content-Length 首部说明的就是编码后（encoded）的主体的字节长度，而不是未编码的原始主体的长度。</p><p>下面列出的规则说明了在若干不同的情况下如何正确计算主体的长度和结束位置。这些规则应当按顺序应用，谁先匹配就用谁。</p><ul><li>如果特定的 HTTP 报文类型中不允许带有主体，就忽略 Content-Length 首部，它是对没有实际发送出来的主体进行计算的。这种情况下，Content-Length 首部是提示性的，并不说明实际的主体长度。</li><li>如果报文中含有描述传输编码的 Transfer-Encoding 首部（不采用默认的 HTTP “恒等” 编码），那实体就应由一个称为 “零字节块”（zero-byte chunk）的特殊模式结束，除非报文已经因连接关闭而结束。</li><li>如果报文中含有 Content-Length 首部（并且报文类型允许有实体主体），而且没有非恒等的 Transfer-Encoding 首部字段，那么 Content-Length 的值就是主体的长度。如果收到的报文中既有 Content-Length 首部字段又有非恒等的 Transfer-Encoding 首部字段，那就必须忽略 Content-Length，因为传输编码会改变实体主体的表示和传输方式（因此可能就会改变传输的字节数）。</li><li>如果报文使用了 multipart/byteranges（多部分/字节范围）媒体类型，并且没有用 Content-Length 首部指出实体主体的长度，那么多部分报文中的每个部分都要说明它自己的大小。这种多部分类型是唯一的一种自定界的实体主体类型，因此除非发送方知道接收方可以解析它，否则就不能发送这种媒体类型。</li><li>如果上面的规则都不匹配，实体就在连接关闭的时候结束。实际上，只有服务器可以使用连接关闭来指示报文的结束。客户端不能用关闭连接来指示客户端报文的结束，因为这样会使服务器无法发回响应。</li></ul><h2 id="3-内容编码"><a href="#3-内容编码" class="headerlink" title="3. 内容编码"></a>3. 内容编码</h2><p>内容编码的过程如下所述</p><ol><li>网站服务器生成原始响应报文，其中有原始的 Content-Type 和 Content- Length 首部。</li><li>内容编码服务器（也可能就是原始的服务器或下行的代理）创建编码后的报文。编码后的报文有同样的 Content-Type 但 Content-Length 可能不同（比如主体被压缩了）。内容编码服务器在编码后的报文中增加 Content-Encoding 首部，这样接收的应用程序就可以进行解码了。</li><li>接收程序得到编码后的报文，进行解码，获得原始报文。</li></ol><p>为了避免服务器使用客户端不支持的编码方式，客户端就把自己支持的内容编码方式列表放在请求的 Accept-Encoding 首部里发出去。如果 HTTP 请求中没有包含 Accept-Encoding 首部，服务器就可以假设客户端能够接受任何编码方式（等价于发送 Accept-Encoding:*）。</p><h2 id="4-传输编码和分块编码"><a href="#4-传输编码和分块编码" class="headerlink" title="4. 传输编码和分块编码"></a>4. 传输编码和分块编码</h2><h3 id="4-1-Transfer-Encoding-首部"><a href="#4-1-Transfer-Encoding-首部" class="headerlink" title="4.1 Transfer-Encoding 首部"></a>4.1 Transfer-Encoding 首部</h3><p>HTTP 协议中只定义了下面两个首部来描述和控制传输编码</p><ul><li>Transfer-Encoding：告知接收方为了可靠地传输报文，已经对其进行了何种编码。</li><li>TE：用在请求首部中，告知服务器可以使用哪些传输编码扩展。</li></ul><h3 id="4-2-分块编码"><a href="#4-2-分块编码" class="headerlink" title="4.2 分块编码"></a>4.2 分块编码</h3><p>分块编码把报文分割为若干个大小已知的块。块之间是紧挨着发送的，这样就不需要在发送之前知道整个报文的大小了。要注意的是，分块编码是一种传输编码，因此是报文的属性，而不是主体的属性。</p><p>若客户端和服务器之间不是持久连接，客户端就不需要知道它正在读取的主体的长度，而只需要读到服务器关闭主体连接为止。当使用持久连接时，在服务器写主体之前，必须知道它的大小并在 Content-Length 首部中发送。如果服务器动态创建内容，就可能在发送之前无法知道主体的长度。</p><p>分块编码为这种困难提供了解决方案，只要允许服务器把主体逐块发送，说明每块的大小就可以了。因为主体是动态创建的，服务器可以缓冲它的一部分，发送其大小和相应的块，然后在主体发送完之前重复这个过程。服务器可以用大小为 0 的块作为主体结束的信号，这样就可以继续保持连接，为下一个响应做准备。</p><p>分块编码是相当简单的。它由起始的 HTTP 响应首部块开始，随后就是一系列分块。每个分块包含一个长度值和该分块的数据。长度值是十六进制形式并将 CRLF 与数据分隔开。分块中数据的大小以字节计算，不包括长度值与数据之间的 CRLF 序列以及分块结尾的 CRLF 序列。最后一个块有点特别，它的长度值为 0，表示 “主体结束”。</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术文章 Backup</title>
      <link href="/2016/05/29/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%20Backup/"/>
      <url>/2016/05/29/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%20Backup/</url>
      <content type="html"><![CDATA[<h3 id="分布式一致性"><a href="#分布式一致性" class="headerlink" title="分布式一致性"></a>分布式一致性</h3><h4 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h4><ul><li><a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">http://thesecretlivesofdata.com/raft/</a></li><li><a href="https://raft.github.io/" target="_blank" rel="noopener">https://raft.github.io/</a></li><li><a href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener">https://raft.github.io/raft.pdf</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术文档 Backup</title>
      <link href="/2016/05/29/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%20Backup/"/>
      <url>/2016/05/29/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%20Backup/</url>
      <content type="html"><![CDATA[<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><ul><li>Mysql 5.7 官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/</a></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>Redis 中文网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></li><li>Redis 命令参考：<a href="http://doc.redisfans.com/index.html" target="_blank" rel="noopener">http://doc.redisfans.com/index.html</a></li><li>《Redis 设计与实现》：<a href="http://redisbook.com/" target="_blank" rel="noopener">http://redisbook.com/</a></li></ul><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><ul><li>官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/</a></li></ul><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul><li>Spring Cloud Config: <a href="http://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html</a></li><li>Spring Cloud Netflix: <a href="https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html</a></li><li>Spring Boot Admin: <a href="http://codecentric.github.io/spring-boot-admin/1.5.3/" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/1.5.3/</a></li><li>Spring Cloud Sleuth: <a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.2.4.RELEASE/" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.2.4.RELEASE/</a></li><li>Spring Cloud Stream: <a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/</a></li><li>Spring Cloud Stream Kafka Binder: <a href="https://docs.spring.io/autorepo/docs/spring-cloud-stream-binder-kafka-docs/1.1.0.M1/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/autorepo/docs/spring-cloud-stream-binder-kafka-docs/1.1.0.M1/reference/htmlsingle/</a></li><li>Spring Cloud Bus: <a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-bus/1.3.1.RELEASE/" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/spring-cloud-bus/1.3.1.RELEASE/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文档 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis原理</title>
      <link href="/2016/04/01/Mybatis%E5%8E%9F%E7%90%86/"/>
      <url>/2016/04/01/Mybatis%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="0-官方文档"><a href="#0-官方文档" class="headerlink" title="0. 官方文档"></a>0. 官方文档</h3><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">mybatis</a></p><a id="more"></a><h3 id="1-完整配置文件示例"><a href="#1-完整配置文件示例" class="headerlink" title="1. 完整配置文件示例"></a>1. 完整配置文件示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义属性字段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"resource.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propKey"</span> <span class="attr">value</span>=<span class="string">"propValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 参数设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"settingKey"</span> <span class="attr">value</span>=<span class="string">"settingValue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"type"</span> <span class="attr">alias</span>=<span class="string">"alias"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"typeAliaPackage"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义类型处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">handler</span>=<span class="string">"MyStringTypeHandler"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描整个包下的自定义类型处理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"typeHandlerPackage"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义对象工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">"MyObjectFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectFactoryPropKey"</span> <span class="attr">value</span>=<span class="string">"objectFactoryPropValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.xhm.util.PageInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommit"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库厂商标识 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"DB2"</span> <span class="attr">value</span>=<span class="string">"db2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过项目文件路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/MyMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过类路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"mapper/MyMapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过文件url路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"classpath:///mapper/MyMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过包扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"mapperPackage"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-构建SqlSessionFactory"><a href="#2-构建SqlSessionFactory" class="headerlink" title="2. 构建SqlSessionFactory"></a>2. 构建SqlSessionFactory</h3><h4 id="2-1-Mybatis的核心组件"><a href="#2-1-Mybatis的核心组件" class="headerlink" title="2.1 Mybatis的核心组件"></a>2.1 Mybatis的核心组件</h4><table><thead><tr><th>类</th><th>功能</th><th>生命周期</th></tr></thead><tbody><tr><td>SqlSessionFactoryBuilder</td><td>根据配置生成SqlSessionFactory</td><td>方法内</td></tr><tr><td>SqlSessionFactory</td><td>生成SqlSession</td><td>Mybatis应用整个生命周期</td></tr><tr><td>SqlSession</td><td>获取Mapper接口，执行SQL语句</td><td>一个事务</td></tr><tr><td>SQL Mapper</td><td>配置SQL语句和对象映射规则</td><td>方法内</td></tr></tbody></table><h4 id="2-2-时序图"><a href="#2-2-时序图" class="headerlink" title="2.2 时序图"></a>2.2 时序图</h4><p><img src="http://i1.piimg.com/567571/9d1d1f3424a400b8.png" alt=""></p><h4 id="2-3-核心代码"><a href="#2-3-核心代码" class="headerlink" title="2.3 核心代码"></a>2.3 核心代码</h4><ul><li>SqlSessionFactoryBuilder</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">    <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;    </span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      inputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="comment">// Intentionally ignore. Prefer previous error.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultSqlSessionFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSessionFactory</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//通过Confuguration对象去获取Mybatis相关配置信息, Environment对象包含了数据源和事务的配置</span></span><br><span class="line">      <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">      <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error opening session.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>XMLConfigBuilder</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Configuration <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parsed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Each XMLConfigBuilder can only be used once."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  parsed = <span class="keyword">true</span>;</span><br><span class="line">  parseConfiguration(parser.evalNode(<span class="string">"/configuration"</span>));</span><br><span class="line">  <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConfiguration</span><span class="params">(XNode root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//和配置文件里的顺序一致</span></span><br><span class="line">    propertiesElement(root.evalNode(<span class="string">"properties"</span>));</span><br><span class="line">    Properties settings = settingsAsProperties(root.evalNode(<span class="string">"settings"</span>));</span><br><span class="line">    loadCustomVfs(settings);</span><br><span class="line">    typeAliasesElement(root.evalNode(<span class="string">"typeAliases"</span>));</span><br><span class="line">    pluginElement(root.evalNode(<span class="string">"plugins"</span>));</span><br><span class="line">    objectFactoryElement(root.evalNode(<span class="string">"objectFactory"</span>));</span><br><span class="line">    objectWrapperFactoryElement(root.evalNode(<span class="string">"objectWrapperFactory"</span>));</span><br><span class="line">    reflectionFactoryElement(root.evalNode(<span class="string">"reflectionFactory"</span>));</span><br><span class="line">    settingsElement(settings);</span><br><span class="line">    environmentsElement(root.evalNode(<span class="string">"environments"</span>));</span><br><span class="line">    databaseIdProviderElement(root.evalNode(<span class="string">"databaseIdProvider"</span>));</span><br><span class="line">    typeHandlerElement(root.evalNode(<span class="string">"typeHandlers"</span>));</span><br><span class="line">    mapperElement(root.evalNode(<span class="string">"mappers"</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error parsing SQL Mapper Configuration. Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-映射器的内部组成"><a href="#3-映射器的内部组成" class="headerlink" title="3. 映射器的内部组成"></a>3. 映射器的内部组成</h3><h4 id="3-1-映射器的三个组成部分"><a href="#3-1-映射器的三个组成部分" class="headerlink" title="3.1 映射器的三个组成部分"></a>3.1 映射器的三个组成部分</h4><ul><li><p>MappedStatement：保存映射器的一个节点</p></li><li><p>SqlSource：提供BoundSql，它是MappedStatement的一个属性</p></li><li><p>BoundSql：建立SQL和参数</p></li></ul><p><img src="http://i1.piimg.com/567571/d23532258156e64e.png" alt=""></p><h4 id="3-2-BoundSql"><a href="#3-2-BoundSql" class="headerlink" title="3.2 BoundSql"></a>3.2 BoundSql</h4><p>BoundSql提供三个主要的属性：parameterMappings，parameterObject和sql</p><ul><li><p>parameterObject为参数本身</p></li><li><p>如果传递的是POJO或Map，那么这个parameterObject就是传入的POJO或Map</p></li><li><p>如果传递多个参数且没有使用@Param注解，那么Mybatis就会把parameterObject变为一个Map&lt;String, Object&gt;对象，其键值关系按顺序规划，形如：{“1”: param1, “2”: param2}</p></li><li><p>如果使用了@Param注解，Mybatis会按注解参数建立Map&lt;String, Object&gt;对象</p></li><li><p>parameterMappings是一个List，每一个元素都是ParameterMapping的对象，用于描述参数</p></li><li><p>sql属性保存映射器SQL</p></li></ul><h3 id="4-Mapper代理"><a href="#4-Mapper代理" class="headerlink" title="4. Mapper代理"></a>4. Mapper代理</h3><h4 id="4-1-时序图"><a href="#4-1-时序图" class="headerlink" title="4.1 时序图"></a>4.1 时序图</h4><p><img src="http://i1.piimg.com/567571/7b9eac4f8d80abd3.png" alt=""></p><h4 id="4-2-核心代码"><a href="#4-2-核心代码" class="headerlink" title="4.2 核心代码"></a>4.2 核心代码</h4><ul><li>MapperRegistry</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">  <span class="keyword">if</span> (mapperProxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is not known to the MapperRegistry."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Error getting mapper instance. Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MapperProxyFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">  <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-SQL执行"><a href="#5-SQL执行" class="headerlink" title="5. SQL执行"></a>5. SQL执行</h3><h4 id="5-1-SqlSession下的四大对象"><a href="#5-1-SqlSession下的四大对象" class="headerlink" title="5.1 SqlSession下的四大对象"></a>5.1 SqlSession下的四大对象</h4><ul><li>Executor：由它来调度StatementHandler，ParameterHandler和ResultHandler来执行对应的SQL</li><li>StatementHandler：使数据库的Statement执行操作，在四大对象中处于核心地位，起到承上启下的作用</li><li>ParameterHandler：处理SQL参数</li><li>ResultHandler：进行最后数据集（ResultSet）的封装</li></ul><h4 id="5-2-Executor"><a href="#5-2-Executor" class="headerlink" title="5.2 Executor"></a>5.2 Executor</h4><ul><li><p>Mybatis中有三种Executor，由setting元素的defaultExecutorType设置</p><ul><li>SIMPLE：默认</li><li>REUSE：执行器重用预处理语句</li><li>BATCH：重用语句和批量更新</li></ul></li><li><p>org.apache.ibatis.session.Configuration#newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">  Executor executor;</span><br><span class="line">  <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">  &#125;</span><br><span class="line">  executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">  <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptorChain.pluginAll(executor)通过配置的插件生成Executor的代理，改变Executor的行为。</p><h4 id="5-3-StatementHandler"><a href="#5-3-StatementHandler" class="headerlink" title="5.3 StatementHandler"></a>5.3 StatementHandler</h4><p>StatementHandler处理数据库会话</p><ul><li>org.apache.ibatis.session.Configuration#newStatementHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StatementHandler <span class="title">newStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">  StatementHandler statementHandler = <span class="keyword">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class="line">  statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class="line">  <span class="keyword">return</span> statementHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RoutingStatementHandler通过适配模式找到对应的StatementHandler</p><ul><li>org.apache.ibatis.executor.statement.RoutingStatementHandler#RoutingStatementHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATEMENT:</span><br><span class="line">      delegate = <span class="keyword">new</span> SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PREPARED:</span><br><span class="line">      delegate = <span class="keyword">new</span> PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CALLABLE:</span><br><span class="line">      delegate = <span class="keyword">new</span> CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Unknown statement type: "</span> + ms.getStatementType());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-时序图（以一次多记录查询为例）"><a href="#5-4-时序图（以一次多记录查询为例）" class="headerlink" title="5.4 时序图（以一次多记录查询为例）"></a>5.4 时序图（以一次多记录查询为例）</h4><p><img src="http://i2.muimg.com/567571/57841d840afc93e1.png" alt=""></p><h4 id="5-5-核心代码"><a href="#5-5-核心代码" class="headerlink" title="5.5 核心代码"></a>5.5 核心代码</h4><ul><li>MapperProxy</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">  <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> MapperMethod <span class="title">cachedMapperMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">  MapperMethod mapperMethod = methodCache.get(method);</span><br><span class="line">  <span class="keyword">if</span> (mapperMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mapperMethod = <span class="keyword">new</span> MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">    methodCache.put(method, mapperMethod);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mapperMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MapperMethod</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">  Object result;</span><br><span class="line">  <span class="keyword">if</span> (SqlCommandType.INSERT == command.getType()) &#123;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.UPDATE == command.getType()) &#123;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.DELETE == command.getType()) &#123;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.SELECT == command.getType()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">      executeWithResultHandler(sqlSession, args);</span><br><span class="line">      result = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">      result = executeForMany(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">      result = executeForMap(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.FLUSH == command.getType()) &#123;</span><br><span class="line">      result = sqlSession.flushStatements();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Unknown execution method for: "</span> + command.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Mapper method '"</span> + command.getName() </span><br><span class="line">        + <span class="string">" attempted to return null from a method with a primitive return type ("</span> + method.getReturnType() + <span class="string">")."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">Object <span class="title">executeForMany</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;E&gt; result;</span><br><span class="line">  Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">  <span class="keyword">if</span> (method.hasRowBounds()) &#123;</span><br><span class="line">    RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class="line">    result = sqlSession.&lt;E&gt;selectList(command.getName(), param, rowBounds);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// issue #510 Collections &amp; arrays support</span></span><br><span class="line">  <span class="keyword">if</span> (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getReturnType().isArray()) &#123;</span><br><span class="line">      <span class="keyword">return</span> convertToArray(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> convertToDeclaredCollection(sqlSession.getConfiguration(), result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultSqlSession</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">    <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BaseExecutor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">   CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">   <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</span><br><span class="line">   <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">     clearLocalCache();</span><br><span class="line">   &#125;</span><br><span class="line">   List&lt;E&gt; list;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     queryStack++;</span><br><span class="line">     list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">       handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     queryStack--;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">       deferredLoad.load();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// issue #601</span></span><br><span class="line">     deferredLoads.clear();</span><br><span class="line">     <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">       <span class="comment">// issue #482</span></span><br><span class="line">       clearLocalCache();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   List&lt;E&gt; list;</span><br><span class="line">   localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     localCache.removeObject(key);</span><br><span class="line">   &#125;</span><br><span class="line">   localCache.putObject(key, list);</span><br><span class="line">   <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">     localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">protected</span> Connection <span class="title">getConnection</span><span class="params">(Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   Connection connection = transaction.getConnection();</span><br><span class="line">   <span class="keyword">if</span> (statementLog.isDebugEnabled()) &#123;</span><br><span class="line">     <span class="keyword">return</span> ConnectionLogger.newInstance(connection, statementLog, queryStack);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> connection;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>SimpleExecutor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Configuration configuration = ms.getConfiguration();</span><br><span class="line">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">    <span class="keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  Connection connection = getConnection(statementLog);</span><br><span class="line">  stmt = handler.prepare(connection);</span><br><span class="line">  handler.parameterize(stmt);</span><br><span class="line">  <span class="keyword">return</span> stmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BaseStatementHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Statement <span class="title">prepare</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  ErrorContext.instance().sql(boundSql.getSql());</span><br><span class="line">  Statement statement = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    statement = instantiateStatement(connection);</span><br><span class="line">    setStatementTimeout(statement);</span><br><span class="line">    setFetchSize(statement);</span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    closeStatement(statement);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    closeStatement(statement);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Error preparing statement.  Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PreparedStatementHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  PreparedStatement ps = (PreparedStatement) statement;</span><br><span class="line">  ps.execute();</span><br><span class="line">  <span class="keyword">return</span> resultSetHandler.&lt;E&gt; handleResultSets(ps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Statement <span class="title">instantiateStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  String sql = boundSql.getSql();</span><br><span class="line">  <span class="keyword">if</span> (mappedStatement.getKeyGenerator() <span class="keyword">instanceof</span> Jdbc3KeyGenerator) &#123;</span><br><span class="line">    String[] keyColumnNames = mappedStatement.getKeyColumns();</span><br><span class="line">    <span class="keyword">if</span> (keyColumnNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> connection.prepareStatement(sql, keyColumnNames);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappedStatement.getResultSetType() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> connection.prepareStatement(sql);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  parameterHandler.setParameters((PreparedStatement) statement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultParameterHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameters</span><span class="params">(PreparedStatement ps)</span> </span>&#123;</span><br><span class="line">  ErrorContext.instance().activity(<span class="string">"setting parameters"</span>).object(mappedStatement.getParameterMap().getId());</span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  <span class="keyword">if</span> (parameterMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class="line">      ParameterMapping parameterMapping = parameterMappings.get(i);</span><br><span class="line">      <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        String propertyName = parameterMapping.getProperty();</span><br><span class="line">        <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123; <span class="comment">// issue #448 ask first for additional params</span></span><br><span class="line">          value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">          value = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">          value = parameterObject;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">          value = metaObject.getValue(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        TypeHandler typeHandler = parameterMapping.getTypeHandler();</span><br><span class="line">        JdbcType jdbcType = parameterMapping.getJdbcType();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; jdbcType == <span class="keyword">null</span>) &#123;</span><br><span class="line">          jdbcType = configuration.getJdbcTypeForNull();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          typeHandler.setParameter(ps, i + <span class="number">1</span>, value, jdbcType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TypeException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> TypeException(<span class="string">"Could not set parameters for mapping: "</span> + parameterMapping + <span class="string">". Cause: "</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> TypeException(<span class="string">"Could not set parameters for mapping: "</span> + parameterMapping + <span class="string">". Cause: "</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultResultSetHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  ErrorContext.instance().activity(<span class="string">"handling results"</span>).object(mappedStatement.getId());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> List&lt;Object&gt; multipleResults = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> resultSetCount = <span class="number">0</span>;</span><br><span class="line">  ResultSetWrapper rsw = getFirstResultSet(stmt);</span><br><span class="line"></span><br><span class="line">  List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();</span><br><span class="line">  <span class="keyword">int</span> resultMapCount = resultMaps.size();</span><br><span class="line">  validateResultMapsCount(rsw, resultMapCount);</span><br><span class="line">  <span class="keyword">while</span> (rsw != <span class="keyword">null</span> &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class="line">    ResultMap resultMap = resultMaps.get(resultSetCount);</span><br><span class="line">    handleResultSet(rsw, resultMap, multipleResults, <span class="keyword">null</span>);</span><br><span class="line">    rsw = getNextResultSet(stmt);</span><br><span class="line">    cleanUpAfterHandlingResultSet();</span><br><span class="line">    resultSetCount++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String[] resultSets = mappedStatement.getResulSets();</span><br><span class="line">  <span class="keyword">if</span> (resultSets != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (rsw != <span class="keyword">null</span> &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class="line">      ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class="line">      <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class="line">        ResultMap resultMap = configuration.getResultMap(nestedResultMapId);</span><br><span class="line">        handleResultSet(rsw, resultMap, <span class="keyword">null</span>, parentMapping);</span><br><span class="line">      &#125;</span><br><span class="line">      rsw = getNextResultSet(stmt);</span><br><span class="line">      cleanUpAfterHandlingResultSet();</span><br><span class="line">      resultSetCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> collapseSingleResultList(multipleResults);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-示例代码"><a href="#6-示例代码" class="headerlink" title="6. 示例代码"></a>6. 示例代码</h3><ul><li><a href="https://github.com/xyq000/LearnMybatis" target="_blank" rel="noopener">github - LearnMybatis</a></li><li>目录结构</li></ul><p><img src="http://i4.buimg.com/567571/7955f63181ff29b3.jpg" alt=""></p><ul><li>TestMybatis</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> data.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xyq on 17/3/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> <span class="keyword">extends</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = initSqlSessionFactory(resource);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserId(<span class="string">"id"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"name"</span>);</span><br><span class="line">        assertEquals(userMapper.insertUser(user), <span class="number">1</span>);</span><br><span class="line">        User res = userMapper.getUser(<span class="string">"id"</span>);</span><br><span class="line">        assertEquals(res.getUserId(), <span class="string">"id"</span>);</span><br><span class="line">        assertEquals(res.getUserName(), <span class="string">"name"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"NAME"</span>);</span><br><span class="line">        assertEquals(userMapper.updateUser(user), <span class="number">1</span>);</span><br><span class="line">        assertEquals(userMapper.deleteUser(<span class="string">"id"</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">initSqlSessionFactory</span><span class="params">(String resource)</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"can not load resource "</span> + resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xyq on 17/3/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> data.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xyq on 17/3/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> String userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userType"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"user_name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"columns"</span>&gt;</span></span><br><span class="line">        user_id, user_name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">resultMap</span>=<span class="string">"userType"</span>&gt;</span></span><br><span class="line">        SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"columns"</span> /&gt;</span> from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        INSERT INTO t_user (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"columns"</span> /&gt;</span>)</span><br><span class="line">        VALUES (#&#123;userId&#125;, #&#123;userName&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        update t_user set user_name = #&#123;userName&#125; where user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></span><br><span class="line">        delete from t_user where user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"data.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommit"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/sampledb"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Mybatis </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring 3.x 企业应用开发实战》：MVC</title>
      <link href="/2016/03/26/%E3%80%8ASpring%203.x%20%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9AMVC/"/>
      <url>/2016/03/26/%E3%80%8ASpring%203.x%20%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9AMVC/</url>
      <content type="html"><![CDATA[<h3 id="1-处理流程"><a href="#1-处理流程" class="headerlink" title="1. 处理流程"></a>1. 处理流程</h3><ul><li>请求提交给 <code>DispatchServlet</code></li><li>查找 <code>HandlerMapping</code></li><li>调用由 <code>HandlerAdapter</code> 封装后的 <code>Handler</code></li><li>返回 <code>ModelAndView</code> 到 <code>DispatcherServlet</code></li><li>借由 <code>ViewResolver</code> 完成逻辑视图到真实视图的转换</li><li>返回响应</li></ul><a id="more"></a><h3 id="2-配置-DispatcherServlet"><a href="#2-配置-DispatcherServlet" class="headerlink" title="2. 配置 DispatcherServlet"></a>2. 配置 DispatcherServlet</h3><ul><li><code>web.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父容器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">            /WEB-INF/applicationServlet.xml,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子容器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logLevel<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>FINE<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- url映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/api/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子容器可以访问父容器的 bean，父容器不能访问子容器的 bean</li><li>默认采用 <code>org.springframework.web.context.ContextLoaderListener</code></li><li>默认使用 <code>/WEB-INF/{servlet-name}-*.xml</code> 加载子容器</li></ul><h3 id="3-DispatcherServlet-的初始化"><a href="#3-DispatcherServlet-的初始化" class="headerlink" title="3. DispatcherServlet 的初始化"></a>3. DispatcherServlet 的初始化</h3><ul><li><code>DispatcherServlet</code> 初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    initMultipartResolver(context);</span><br><span class="line">    initLocaleResolver(context);</span><br><span class="line">    initThemeResolver(context);</span><br><span class="line">    initHandlerMappings(context);</span><br><span class="line">    initHandlerAdapters(context);</span><br><span class="line">    initHandlerExceptionResolvers(context);</span><br><span class="line">    initRequestToViewNameTranslator(context);</span><br><span class="line">    initViewResolvers(context);</span><br><span class="line">    initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认配置： <code>DispatcherServlet.properties</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Default implementation classes for DispatcherServlet's strategy interfaces.</span><br><span class="line"># Used as fallback when no matching beans are found in the DispatcherServlet context.</span><br><span class="line"># Not meant to be customized by application developers.</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span><br><span class="line">org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span><br><span class="line">org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span><br><span class="line">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\</span><br><span class="line">org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</span><br><span class="line">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</span><br></pre></td></tr></table></figure><h3 id="4-Controller-注解"><a href="#4-Controller-注解" class="headerlink" title="4. Controller 注解"></a>4. Controller 注解</h3><h4 id="4-1-类注解"><a href="#4-1-类注解" class="headerlink" title="4.1 类注解"></a>4.1 类注解</h4><ul><li><code>@Controller</code> （由 Spring 识别 <code>Handler</code> 实例）</li><li><code>@RequestMapping(value=, method=, params=)</code></li></ul><h4 id="4-2-方法注解"><a href="#4-2-方法注解" class="headerlink" title="4.2 方法注解"></a>4.2 方法注解</h4><ul><li><code>@RequestMapping(value=, method=, params=)</code></li><li><code>@PathVariable</code>，配合占位符 <code>{parameter}</code></li><li><code>@RequestParam(value=, required=, defaultValue=)</code></li><li><code>@CookieValue(value=, required=, defaultValue=)</code></li><li><code>@RequestHeader(value=, required=, defaultValue=)</code></li></ul><h3 id="5-封装入参"><a href="#5-封装入参" class="headerlink" title="5. 封装入参"></a>5. 封装入参</h3><ul><li><code>HttpServletRequest</code>，<code>WebRequest</code>，<code>ServletRequest</code> 的 <code>InputStream</code> / <code>Reader</code></li><li><code>HttpServeltResponse</code>，<code>ServletResponse的OutputStream</code> / <code>Writer</code></li></ul><h3 id="6-请求信息和对象的转换"><a href="#6-请求信息和对象的转换" class="headerlink" title="6. 请求信息和对象的转换"></a>6. 请求信息和对象的转换</h3><h4 id="6-1-基本"><a href="#6-1-基本" class="headerlink" title="6.1 基本"></a>6.1 基本</h4><ul><li><code>HttpMessageConverter&lt;T&gt;</code></li><li>使用 <code>@RequestBody</code> / <code>@ResponseBody</code>；使用 <code>HttpEntity&lt;T&gt;</code> / <code>ResponseEntity&lt;T&gt;</code></li><li>Spring 根据 HTTP 报文头部的 <code>Accept</code> 指定的 MIME 类型，查找匹配的 <code>HttpMessageConverter</code></li><li>Spring MVC 默认装配 <code>AnnotationMethodHandlerAdapter</code>，调用 <code>HttpMessageConverter</code></li><li>MVC 命名空间的 <code>&lt;mvc:annotation-driven/&gt;</code> 标签会创建并注册一个默认的 <code>DefaultAnnotationHandlerMapping</code> 和一个 <code>AnnotationMethodHandlerAdapter</code> 实例，如果上下文中存在自定义的对应组件 bean，则覆盖默认配置</li></ul><h4 id="6-2-样例"><a href="#6-2-样例" class="headerlink" title="6.2 样例"></a>6.2 样例</h4><ul><li><code>app-servlet.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alwaysUseFullPath"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptors"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"monitorInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"commonOutLogInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"serverTraceInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerAdapter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.ByteArrayHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"writeAcceptCharset"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.xml.SourceHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.MediaType"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"json"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">map</span>&gt;</span>  </span><br><span class="line">                                    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"charset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span>  </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-处理模型数据"><a href="#7-处理模型数据" class="headerlink" title="7. 处理模型数据"></a>7. 处理模型数据</h3><ul><li>Spring MVC 在调用方法前会创建一个隐含的模型对象</li><li><code>ModelAndView</code>：返回值类型为 <code>ModelAndView</code> 时，方法体通过该对象添加模型数据</li><li><code>@ModelAttribute</code>：入参对象添加到数据模型中</li><li>Map 和 Model：入参为 <code>org.springframework.ui.Model</code>、<code>org.springframework.ui.ModelMap</code>或 <code>java.util.Map</code> 时，处理方法返回时，Map 中的数据会自动添加到模型中</li><li><code>@SessionAttributes</code>：将模型中的某个属性暂存到 <code>HttpSession</code> 中，以便多个请求共享</li></ul><h3 id="8-数据绑定"><a href="#8-数据绑定" class="headerlink" title="8. 数据绑定"></a>8. 数据绑定</h3><h4 id="8-1-基本"><a href="#8-1-基本" class="headerlink" title="8.1 基本"></a>8.1 基本</h4><ul><li>Spring MVC 将 <code>ServletRequest</code> 对象及处理方法的入参实例传递给 <code>DataBinder</code>；</li><li><code>DataBinder</code>调用 <code>ConversionService</code> 组件进行数据类型转换、数据格式化等工作，将 <code>ServletRequest</code> 中的消息填充到入参对象中；</li><li>然后再调用 <code>Validator</code> 组件对已经绑定了请求消息数据的入参对象进行数据合法性校验，并最终生成绑定结果 <code>BindingResult</code> 对象，其中还包含相应的校验错误对象</li><li>抽取 <code>BindingResult</code> 中的入参对象及校验错误对象，赋给处理方法的相应入参</li></ul><h4 id="8-2-数据转换"><a href="#8-2-数据转换" class="headerlink" title="8.2 数据转换"></a>8.2 数据转换</h4><ul><li>例如：将请求信息中A类型参数转换并绑定到 Controller 对应的处理方法的 B 类型入参中</li><li>基于 <code>ConversionService</code> 接口，Spring 将自动识别其实现类，用于入参类型转换，类似于 C++ 中的自定义类型转换。例如，将 HTTP 请求信息中的字符串格式参数转换为 Controller 对应方法中的类类型入参</li><li>可通过 <code>ConversionServiceFactoryBean</code> 的 <code>converters</code> 属性注册自定义转换器。可接受 <code>Converter</code>，<code>ConverterFacotory</code>，<code>GenericConverter</code>或 <code>ConditionalConverterFactory</code> 的实现类，并统一封装到一个 <code>ConversionService</code> 的实例（即 <code>GenericConversionService</code>）中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"MyConverters"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;mvc:annotation-driven/&gt;</code>标签还会注册一个默认的 <code>ConversionService</code>，即 <code>FormattingConversionServiceFactoryBean</code></li></ul><h4 id="8-3-数据格式化"><a href="#8-3-数据格式化" class="headerlink" title="8.3 数据格式化"></a>8.3 数据格式化</h4><ul><li>例如：将请求信息中字符串类型参数转换并绑定到 Controller 对应的处理方法入参中的 Date 类型属性中</li><li>格式化框架定义了 <code>Formatter&lt;T&gt;</code> 接口，扩展于 <code>Printer&lt;T&gt;</code> 和 <code>Parser&lt;T&gt;</code> 接口</li><li>Srping 提供 <code>AnnotationFormatterFactory&lt;A extends Annotation&gt;</code> 接口及两个实现类：<code>NumberFormatAnnotationFormatterFactory</code>和 <code>JodaDateTimeFormatAnnotationFormatterFactory</code></li><li>在入参类属性上使用注解：<code>@DateTimeFormat</code>，<code>@NumberFormat</code></li><li>Spring 通过 <code>&lt;mvc:annotation-driven/&gt;</code> 标签创建 <code>FormattingConversionServiceFactoryBean</code> 作为 <code>FormattingConversionService</code> 的实例，自动装配 <code>NumberFormatAnnotationFormatterFactory</code> 和 <code>JodaDateTimeFormatAnnotationFormatterFactory</code></li></ul><h4 id="8-4-数据验证"><a href="#8-4-数据验证" class="headerlink" title="8.4 数据验证"></a>8.4 数据验证</h4><ul><li><code>&lt;mvc:annotation-driven/&gt;</code>标签会默认装配 <code>LocalValidatorFactoryBean</code>，实现了 Spring 的<code>Validator</code> 接口，通过在入参上标注 <code>@Valid</code> 注解即可让 Spring 在完成数据绑定后执行数据校验</li><li><code>@Valid</code>注解标注的入参和其后的 <code>BindingResult</code> 或 <code>Errors</code> 入参成对出现，后者保存前者的校验结果</li><li>校验结果也保存在 MVC 的隐含模型中</li><li>样例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class User &#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp=<span class="string">"w&#123;4,30&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Length</span>(min=<span class="number">2</span>, max=<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Past</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DecimalMin</span>(value = <span class="string">"1000.00"</span>)</span><br><span class="line">    <span class="meta">@DecimalMax</span>(value = <span class="string">"10000.00"</span>)</span><br><span class="line">    <span class="meta">@NumberFormat</span>(pattern = <span class="string">"#,###.##"</span>)</span><br><span class="line">    pirvate Long salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@Valid User uer, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-视图解析"><a href="#9-视图解析" class="headerlink" title="9. 视图解析"></a>9. 视图解析</h3><h4 id="9-1-基本"><a href="#9-1-基本" class="headerlink" title="9.1 基本"></a>9.1 基本</h4><ul><li>视图对象是一个 bean，由视图解析器负责实例化。</li><li>不同的视图实现技术对应于不同的 <code>View</code> 实现类</li><li>所有的视图解析器都实现了 <code>ViewResolver</code> 接口</li></ul><h4 id="9-2-样例"><a href="#9-2-样例" class="headerlink" title="9.2 样例"></a>9.2 样例</h4><ul><li><code>app-servlet.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- For multipart encoding support --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"209715200"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanNameResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.BeanNameViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--VM 模板文件解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.velocity.VelocityViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".vm"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html; charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"toolboxConfigLocation"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/toolbox.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"velocityConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.velocity.VelocityConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resourceLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/vm/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"velocityPropertiesMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"input.encoding"</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"output.encoding"</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"velocimacro.library"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"velocimacro.library.autoreload"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"directive.foreach.counter.name"</span>&gt;</span>loopCursor<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"directive.foreach.counter.initial.value"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-静态资源处理"><a href="#10-静态资源处理" class="headerlink" title="10. 静态资源处理"></a>10. 静态资源处理</h3><ul><li>需要对项目中的图片、html 静态资源等单独处理</li><li>配置 <code>&lt;mvc:default-servlet-handler&gt;</code> 后，会装配一个 <code>DefaultServletHttpRequestHandler</code>，对静态资源做检查</li><li>配置 <code>&lt;mvc:resources/&gt;</code>，允许对静态资源文件路径作映射，并提供文件在浏览器端的缓存控制，例如</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/,classpath:/META-INF/publicResources"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-拦截器"><a href="#11-拦截器" class="headerlink" title="11. 拦截器"></a>11. 拦截器</h3><h4 id="11-1-基本"><a href="#11-1-基本" class="headerlink" title="11.1 基本"></a>11.1 基本</h4><ul><li><code>DispatcherServlet</code>将请求交给处理器映射（<code>HandlerMapping</code>），找到对应的 <code>HandlerExecutionChain</code></li><li>找到对应的 <code>HandlerExecutionChain</code> 包含若干 <code>HandlerInterceptor</code>，和一个 <code>Handler</code></li><li><code>HandlerInterceptor</code> 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-2-样例"><a href="#11-2-样例" class="headerlink" title="11.2 样例"></a>11.2 样例</h4><ul><li><code>app-servlet.xml</code>:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/**"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"outfox.ynote.webserver.web.HttpsInterceptor"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12. 异常处理"></a>12. 异常处理</h3><h4 id="12-1-基本"><a href="#12-1-基本" class="headerlink" title="12.1 基本"></a>12.1 基本</h4><ul><li>Spring MVC 通过 <code>HandlerExceptionResolver</code> 处理异常</li><li><code>HandlerExceptionResolver</code> 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">  <span class="function">ModelAndView <span class="title">resolveException</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring MVC 默认装配了 <code>DefaultHandlerExceptionResolver</code></li><li>Spring MVC 默认注册了 <code>AnnotationMethodHandlerExceptionResolver</code>，允许通过 <code>@ExceptionHandler</code> 指定处理特定异常</li></ul><h4 id="12-2-样例"><a href="#12-2-样例" class="headerlink" title="12.2 样例"></a>12.2 样例</h4><ul><li><code>web.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对各种异常和错误，交由 ErrorController 处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>403<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring 3.x 企业应用开发实战》：DAO</title>
      <link href="/2016/03/17/%E3%80%8ASpring%203.x%20%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ADAO/"/>
      <url>/2016/03/17/%E3%80%8ASpring%203.x%20%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%9ADAO/</url>
      <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ol><li>Spring 的 DAO 异常体系建立在运行期异常的基础上，封装了源异常</li><li>JDBC 数据访问流程：<ul><li>准备资源</li><li>启动事务</li><li>在事务中执行具体数据访问操作</li><li>提交/回滚事务</li><li>关闭资源，处理异常</li></ul></li></ol><a id="more"></a><ol start="3"><li>Spring 将相同的数据访问流程固化到模板类中，把数据访问中固定和变化的部分分开，同时保证模板类是线程安全的。Spring 为不同的持久化技术都提供了简化操作的模板和回调。</li><li>数据库事务：原子性，一致性，隔离性和持久性（ACID）</li><li>5 类数据库并发问题：<ul><li>脏读：A 事务读取到 B 事务尚未提交的数据</li><li>不可重复读：A 事务中读取到 B 事务已经提交的更新数据，即连续两次读取结果不同</li><li>幻读：A 事务读取 B 事务的==新增==数据</li><li>第一类更新丢失：A 事务撤销时覆盖了 B 事务的提交</li><li>第二类更新丢失：A 事务覆盖 B 事务已经提交的数据</li></ul></li><li>JDBC 默认情况下自动提交，即每条执行的 SQL 语句都对应一个事务，<code>AutoCommit = TRUE</code></li><li>Spring基于 <code>ThreadLocal</code> 解决有状态的 <code>Connetion</code> 的并发问题，事务同步管理器 <code>org.springframework.transaction.support.TransactionSynchronizationManager</code> 使用 <code>ThreadLocal</code> 为不同事务线程提供独立的资源副本</li><li>Spring 事务管理基于 3 个接口：<code>TransactionDefinition</code>，<code>TransactionStatus</code> 和 <code>PlatformTransactionManager</code></li><li>Spring 为不同持久化技术提供了从 <code>TransactionSynchronizationManager</code> 获取对应线程绑定资源的工具类，如 <code>DataSourceUtils.getConnection(DataSource dataSource)</code>。模板类在内部通过工具类访问 <code>TransactionSynchronizationManager</code>中的线程绑定资源</li><li>Spring 通过事务传播行为控制当前的事务如何传播到被嵌套调用的目标服务接口方法中</li><li>使用 <code>&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;&gt;</code> 对标注 <code>@Transactional</code> 注解的 bean 进行加工处理，织入事务管理切面</li><li><code>@Transactional</code> 注解的属性<ul><li>事务传播行为：<code>propagation</code>，默认 <code>PROPAGATION_REQUIRED</code>，即如果当前没有事务，就新建一个事务；否则加入到当前事务</li><li>事务隔离级别：<code>isolation</code>，默认 <code>ISOLATION_DEFAULT</code></li><li>读写事务属性：<code>readOnly</code></li><li>超时时间：<code>timeout</code></li><li>回滚设置：<code>rollbackFor</code>，<code>rollbackForClassName</code>，<code>noRollbackFor</code>，<code>noRollbackForClassName</code></li></ul></li><li>在相同线程中进行相互嵌套调用的事务方法工作于相同的事务中；如果在不同线程中，则工作在独立的事务中</li><li>特殊方法：<ul><li>注解不能被继承，所以业务接口中的 <code>@Transactional</code> 注解不会被业务实现类继承；方法处的注解会覆盖类定义处的注解</li><li>对于基于接口动态代理的 AOP 事务，由于接口方法都是 <code>public</code> 的，实现类的实现方法必须是 <code>public</code>的，同时不能使用 <code>static</code> 修饰符。因此，可以通过接口动态代理实施 AOP 增强、实现 Spring 事务的方法只能是 <code>public</code> 或 <code>public final</code> 的</li><li>基于 CGLib 动态代理实施 AOP 的时候，由于使用 <code>final</code>、<code>static</code>、<code>private</code> 的方法不能被子类覆盖，相应的，这些方法不能实施 AOP 增强，实现事务</li><li>不能被 Spring 进行 AOP 事务增强的方法不能启动事务，但是外层方法的事务上下文仍然可以传播到这些方法中</li></ul></li></ol><h2 id="2-Spring-中使用-JDBC-编程示例"><a href="#2-Spring-中使用-JDBC-编程示例" class="headerlink" title="2. Spring 中使用 JDBC 编程示例"></a>2. Spring 中使用 JDBC 编程示例</h2><ul><li>本地 mysql 建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><ul><li><code>springDAO.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dao"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:url</span>=<span class="string">"jdbc:mysql://localhost:3306/sampledb"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:password</span>=<span class="string">"123123"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>User</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>BaseDAO</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>UserDAO</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.data.User;</span><br><span class="line"><span class="keyword">import</span> com.mapper.UserRowMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAO</span> <span class="keyword">extends</span> <span class="title">BaseDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_GET_USER = <span class="string">"select * from t_user where "</span> + <span class="string">"user_id = ?;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_INSERT_USER = <span class="string">"insert into t_user values(?, ?);"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CLEAN_USER = <span class="string">"delete from t_user where 1=1;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(SQL_GET_USER, <span class="keyword">new</span> Object[]&#123;userId&#125;, <span class="keyword">new</span> UserRowMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(SQL_INSERT_USER, user.getUserId(), user.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cleanUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(SQL_CLEAN_USER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>UserRowMapper</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.data.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNumber)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserId(rs.getString(<span class="string">"user_id"</span>));</span><br><span class="line">        user.setUserName(rs.getString(<span class="string">"user_name"</span>));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>BaseTestCase</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"/springDAO.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTestCase</span> <span class="keyword">extends</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TestUserDAO</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.BaseTestCase;</span><br><span class="line"><span class="keyword">import</span> com.data.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserDAO</span> <span class="keyword">extends</span> <span class="title">BaseTestCase</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.cleanUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        String id = <span class="string">"id"</span>;</span><br><span class="line">        String name = <span class="string">"name"</span>;</span><br><span class="line">        user.setUserId(id);</span><br><span class="line">        user.setUserName(name);</span><br><span class="line">        assertEquals(dao.insertUser(user), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        user = dao.getUserById(id);</span><br><span class="line">        assertEquals(user.getUserId(), id);</span><br><span class="line">        assertEquals(user.getUserName(), name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle实战-2</title>
      <link href="/2016/02/18/Gradle%E5%AE%9E%E6%88%98-2/"/>
      <url>/2016/02/18/Gradle%E5%AE%9E%E6%88%98-2/</url>
      <content type="html"><![CDATA[<h4 id="1-Java和eclipse插件"><a href="#1-Java和eclipse插件" class="headerlink" title="1. Java和eclipse插件"></a>1. Java和eclipse插件</h4><ul><li>初始化时创建java项目目录结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gradle init --<span class="built_in">type</span> java-library</span><br><span class="line">:wrapper</span><br><span class="line">:init</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.666 secs</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>默认的<code>build.gradle</code>的内容，默认已添加java插件。Java插件可以引入源代码约定，默认情况下到<code>src/main/java</code>下查找代码；并提供<code>build</code>，<code>compileJava</code>等task</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This build file was generated by the Gradle 'init' task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This generated file contains a sample Java project to get you started.</span></span><br><span class="line"><span class="comment"> * For more details take a look at the Java Quickstart chapter in the Gradle</span></span><br><span class="line"><span class="comment"> * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply the java plugin to add support for Java</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line"><span class="comment">// In this section you declare where to find the dependencies of your project</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">// Use jcenter for resolving your dependencies.</span></span><br><span class="line">    <span class="comment">// You can declare any Maven/Ivy/file repository here.</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// The production code uses Guava</span></span><br><span class="line">    compile <span class="string">'com.google.guava:guava:20.0'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use JUnit test framework</span></span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看当前<code>.classpath</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">classpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">path</span>=<span class="string">"bin"</span> <span class="attr">kind</span>=<span class="string">"output"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"src"</span> <span class="attr">path</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"src"</span> <span class="attr">path</span>=<span class="string">"src/test/java"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"con"</span> <span class="attr">path</span>=<span class="string">"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">sourcepath</span>=<span class="string">"/Users/xyq/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/20.0/9c8493c7991464839b612d7547d6c263adf08f75/guava-20.0-sources.jar"</span> <span class="attr">kind</span>=<span class="string">"lib"</span> <span class="attr">path</span>=<span class="string">"/Users/xyq/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/20.0/89507701249388e1ed5ddcf8c41f4ce1be7831ef/guava-20.0.jar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">sourcepath</span>=<span class="string">"/Users/xyq/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/a6c32b40bf3d76eca54e3c601e5d1470c86fcdfa/junit-4.12-sources.jar"</span> <span class="attr">kind</span>=<span class="string">"lib"</span> <span class="attr">path</span>=<span class="string">"/Users/xyq/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-4.12.jar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">sourcepath</span>=<span class="string">"/Users/xyq/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/1dc37250fbc78e23a65a67fbbaf71d2e9cbc3c0b/hamcrest-core-1.3-sources.jar"</span> <span class="attr">kind</span>=<span class="string">"lib"</span> <span class="attr">path</span>=<span class="string">"/Users/xyq/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">classpath</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加eclipse插件</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'eclipse'</span></span><br></pre></td></tr></table></figure><ul><li>执行IDE支持，如关联Referenced Libraries等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gradle eclipse</span><br><span class="line">:eclipseClasspath</span><br><span class="line">:eclipseJdt</span><br><span class="line">:eclipseProject</span><br><span class="line">:eclipse</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.664 secs</span><br></pre></td></tr></table></figure><h4 id="2-构建项目"><a href="#2-构建项目" class="headerlink" title="2. 构建项目"></a>2. 构建项目</h4><ul><li>新建入口类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello gradle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>项目根目录下运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ gradle build</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:jar UP-TO-DATE</span><br><span class="line">:assemble UP-TO-DATE</span><br><span class="line">:compileTestJava UP-TO-DATE</span><br><span class="line">:processTestResources UP-TO-DATE</span><br><span class="line">:testClasses UP-TO-DATE</span><br><span class="line">:<span class="built_in">test</span> UP-TO-DATE</span><br><span class="line">:check UP-TO-DATE</span><br><span class="line">:build UP-TO-DATE</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.692 secs</span><br></pre></td></tr></table></figure><p><code>UP-TO-DATE</code>标记了被跳过的任务。Gradle的增量式构建支持自动鉴别不需要被执行的任务，如<code>compileTestJava</code>，因为当前项目里没有添加单元测试类。构建生成的class、jar包、单测结果等文件在<code>build/</code>目录下。</p><h4 id="3-运行项目"><a href="#3-运行项目" class="headerlink" title="3. 运行项目"></a>3. 运行项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp build/classes/main/ com.Main</span><br><span class="line">hello gradle</span><br></pre></td></tr></table></figure><h4 id="4-修改项目和插件属性"><a href="#4-修改项目和插件属性" class="headerlink" title="4. 修改项目和插件属性"></a>4. 修改项目和插件属性</h4><p><code>build.gradle</code>中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义项目版本，</span></span><br><span class="line">version = <span class="number">0.1</span></span><br><span class="line"><span class="comment">//定义java兼容版本</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"><span class="comment">//Jar包main方法位置</span></span><br><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">'Main-class'</span>: <span class="string">'com.Main'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>gradle build</code>后，<code>build/lib/</code>下生成<code>LearnGradle-0.1.jar</code>，接着</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar build/libs/LearnGradle-0.1.jar</span><br><span class="line">hello gradle</span><br></pre></td></tr></table></figure><h4 id="5-可自定义源代码目录结构"><a href="#5-可自定义源代码目录结构" class="headerlink" title="5. 可自定义源代码目录结构"></a>5. 可自定义源代码目录结构</h4><ul><li>示例</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">main &#123;</span><br><span class="line">java &#123;</span><br><span class="line">srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">java &#123;</span><br><span class="line">srcDirs = [<span class="string">'test'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buildDir = <span class="string">'out'</span></span><br></pre></td></tr></table></figure><h4 id="6-定义中央仓库"><a href="#6-定义中央仓库" class="headerlink" title="6. 定义中央仓库"></a>6. 定义中央仓库</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-引入外部依赖"><a href="#7-引入外部依赖" class="headerlink" title="7. 引入外部依赖"></a>7. 引入外部依赖</h4><p>gradle中，依赖由<code>configuration</code>分组</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.apache.commons'</span>, <span class="string">name:</span> <span class="string">'common3-lang3'</span>, <span class="string">version:</span> <span class="string">'3.5'</span></span><br><span class="line">compile <span class="string">'com.google.guava:guava:20.0'</span></span><br><span class="line">testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认依赖的jar包在用户目录的<code>.gradle/cache/</code>下。可以通过如下的task将项目依赖的jar包复制到项目目录中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task downloadLib(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    delete fileTree(<span class="string">dir:</span> <span class="string">'lib'</span>)</span><br><span class="line">    from configurations.compile</span><br><span class="line">    from configurations.testCompile</span><br><span class="line">    into <span class="string">"lib"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-构建简单的Java-Web项目"><a href="#8-构建简单的Java-Web项目" class="headerlink" title="8. 构建简单的Java Web项目"></a>8. 构建简单的Java Web项目</h4><ul><li><code>build.gradle</code>添加<code>gretty</code>插件</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></span><br><span class="line">apply <span class="string">from:</span> <span class="string">'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//grtty config</span></span><br><span class="line">gretty &#123;</span><br><span class="line">  httpPort = <span class="number">8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构建web项目目录结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p src/main/webapp/WEB-INF</span><br></pre></td></tr></table></figure><ul><li>web页面</li></ul><p>在<code>webapp/</code>创建一个静态HTML页面<code>index.html</code>，这个页面是之后访问的目标页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Gradle Java Web Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Gradle Java Web!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编译</li></ul><p>运行<code>gradle build</code>，<code>build/libs/</code>目录下生成了<code>LearnGradle-0.1.war</code>文件，查看该war包内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ jar -tf build/libs/LearnGradle-0.1.war</span><br><span class="line">META-INF/</span><br><span class="line">META-INF/MANIFEST.MF</span><br><span class="line">WEB-INF/</span><br><span class="line">WEB-INF/classes/</span><br><span class="line">WEB-INF/classes/com/</span><br><span class="line">WEB-INF/classes/com/Main.class</span><br><span class="line">WEB-INF/lib/</span><br><span class="line">WEB-INF/lib/commons-lang3-3.5.jar</span><br><span class="line">WEB-INF/lib/guava-20.0.jar</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ gradle jettyStart</span><br><span class="line">:prepareInplaceWebAppFolder UP-TO-DATE</span><br><span class="line">:createInplaceWebAppFolder UP-TO-DATE</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:prepareInplaceWebAppClasses UP-TO-DATE</span><br><span class="line">:prepareInplaceWebApp UP-TO-DATE</span><br><span class="line">:jettyStart</span><br><span class="line">00:35:12 INFO  Jetty 9.2.15.v20160210 started and listening on port 8080</span><br><span class="line">00:35:12 INFO  LearnGradle runs at:</span><br><span class="line">00:35:12 INFO    http://localhost:8080/LearnGradle</span><br><span class="line">Run <span class="string">'gradle appStop'</span> to stop the server.</span><br></pre></td></tr></table></figure><p>在浏览器中打开<code>http://localhost:8080/LearnGradle/index.html</code>即可看到<code>Hello Gradle Java Web!</code></p><ul><li><p>Gretty相关链接</p><ul><li><a href="">https://github.com/akhikhl/gretty</a></li><li><a href="">http://akhikhl.github.io/gretty-doc/Getting-started.html</a></li><li><a href="">http://akhikhl.github.io/gretty-doc/Gretty-tasks</a></li><li><a href="">http://akhikhl.github.io/gretty-doc/Gretty-configuration.html</a></li></ul></li></ul><h4 id="9-包装器wrapper和跨平台"><a href="#9-包装器wrapper和跨平台" class="headerlink" title="9. 包装器wrapper和跨平台"></a>9. 包装器wrapper和跨平台</h4><ul><li>自动创建</li></ul><p>通过<code>gradle init --type java-library</code>初始化的项目已包含以下文件：<code>gradlew</code>，<code>gradlew.bat</code>，<code>gradle/wrapper/gradle-wrapper.jar</code>，<code>gradle/wrapper/gradle-wrapper.properties</code>。Linix / Windows平台可以在下载代码后通过<code>gradlew</code> / <code>gradlew.bat</code>在命令行操作项目</p><ul><li>手动创建</li></ul><p>在<code>build.gradle</code>添加任务</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task wrapper (<span class="string">type:</span> Wrapper) &#123;</span><br><span class="line">gradleVersion = <span class="string">'3.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gradle wrapper</span><br><span class="line">:wrapper</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.66 secs</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle实战-1</title>
      <link href="/2016/02/16/Gradle%E5%AE%9E%E6%88%98-1/"/>
      <url>/2016/02/16/Gradle%E5%AE%9E%E6%88%98-1/</url>
      <content type="html"><![CDATA[<h4 id="1-使用Gradle创建Java项目目录结构"><a href="#1-使用Gradle创建Java项目目录结构" class="headerlink" title="1. 使用Gradle创建Java项目目录结构"></a>1. 使用Gradle创建Java项目目录结构</h4><p>创建目录<code>LearnGradle</code>，并执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gradle init</span><br><span class="line">:wrapper</span><br><span class="line">:init</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.707 secs</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="2-Gradle中的task"><a href="#2-Gradle中的task" class="headerlink" title="2. Gradle中的task"></a>2. Gradle中的task</h4><p>在<code>build.gradle</code>中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*hellow gradle*/</span><br><span class="line">task helloGradle &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println <span class="string">'Hello Gradle'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gradle helloGradle</span><br><span class="line">:helloGradle</span><br><span class="line">Hello Gradle</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.667 secs</span><br></pre></td></tr></table></figure><h4 id="3-高级特性示例"><a href="#3-高级特性示例" class="headerlink" title="3. 高级特性示例"></a>3. 高级特性示例</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*task chain sample*/</span></span><br><span class="line">task startChain &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        chainMessage()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐含对Ant任务的使用</span></span><br><span class="line"><span class="keyword">def</span> chainMessage() &#123;</span><br><span class="line">    ant.echo(<span class="string">message:</span> <span class="string">'Repeat from here...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环定义任务，使用隐式变量it</span></span><br><span class="line"><span class="number">3.</span>times &#123;</span><br><span class="line">    task <span class="string">"repeatTasks$it"</span> &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">"do repeatTask$it"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义任务依赖</span></span><br><span class="line">repeatTasks0.dependsOn startChain</span><br><span class="line">repeatTasks1.dependsOn repeatTasks0</span><br><span class="line">repeatTasks2.dependsOn repeatTasks1</span><br><span class="line"></span><br><span class="line">task taskChainSample (<span class="string">dependsOn:</span> repeatTasks2)</span><br></pre></td></tr></table></figure><p>在项目根目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ gradle taskChainSample</span><br><span class="line">:startChain</span><br><span class="line">[ant:<span class="built_in">echo</span>] Repeat from here...</span><br><span class="line">:repeatTasks0</span><br><span class="line"><span class="keyword">do</span> repeatTasktask <span class="string">':repeatTasks0'</span></span><br><span class="line">:repeatTasks1</span><br><span class="line"><span class="keyword">do</span> repeatTasktask <span class="string">':repeatTasks1'</span></span><br><span class="line">:repeatTasks2</span><br><span class="line"><span class="keyword">do</span> repeatTasktask <span class="string">':repeatTasks2'</span></span><br><span class="line">:taskChainSample</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.752 secs</span><br></pre></td></tr></table></figure><h4 id="4-Gradle-Help"><a href="#4-Gradle-Help" class="headerlink" title="4. Gradle Help"></a>4. Gradle Help</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ gradle --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">USAGE: gradle [option...] [task...]</span><br><span class="line"></span><br><span class="line">-?, -h, --<span class="built_in">help</span>          Shows this <span class="built_in">help</span> message.</span><br><span class="line">-a, --no-rebuild        Do not rebuild project dependencies.</span><br><span class="line">-b, --build-file        Specifies the build file.</span><br><span class="line">-c, --settings-file     Specifies the settings file.</span><br><span class="line">--configure-on-demand   Only relevant projects are configured <span class="keyword">in</span> this build run. This means faster build <span class="keyword">for</span> large multi-project builds. [incubating]</span><br><span class="line">--console               Specifies <span class="built_in">which</span> <span class="built_in">type</span> of console output to generate. Values are <span class="string">'plain'</span>, <span class="string">'auto'</span> (default) or <span class="string">'rich'</span>.</span><br><span class="line">--<span class="built_in">continue</span>              Continues task execution after a task failure.</span><br><span class="line">-D, --system-prop       Set system property of the JVM (e.g. -Dmyprop=myvalue).</span><br><span class="line">-d, --debug             Log <span class="keyword">in</span> debug mode (includes normal stacktrace).</span><br><span class="line">--daemon                Uses the Gradle Daemon to run the build. Starts the Daemon <span class="keyword">if</span> not running.</span><br><span class="line">--foreground            Starts the Gradle Daemon <span class="keyword">in</span> the foreground. [incubating]</span><br><span class="line">-g, --gradle-user-home  Specifies the gradle user home directory.</span><br><span class="line">--gui                   Launches the Gradle GUI.</span><br><span class="line">-I, --init-script       Specifies an initialization script.</span><br><span class="line">-i, --info              Set <span class="built_in">log</span> level to info.</span><br><span class="line">--include-build         Includes the specified build <span class="keyword">in</span> the composite. [incubating]</span><br><span class="line">-m, --dry-run           Runs the builds with all task actions disabled.</span><br><span class="line">--max-workers           Configure the number of concurrent workers Gradle is allowed to use. [incubating]</span><br><span class="line">--no-daemon             Do not use the Gradle Daemon to run the build.</span><br><span class="line">--offline               The build should operate without accessing network resources.</span><br><span class="line">-P, --project-prop      Set project property <span class="keyword">for</span> the build script (e.g. -Pmyprop=myvalue).</span><br><span class="line">-p, --project-dir       Specifies the start directory <span class="keyword">for</span> Gradle. Defaults to current directory.</span><br><span class="line">--parallel              Build projects <span class="keyword">in</span> parallel. Gradle will attempt to determine the optimal number of executor threads to use. [incubating]</span><br><span class="line">--profile               Profiles build execution time and generates a report <span class="keyword">in</span> the &lt;build_dir&gt;/reports/profile directory.</span><br><span class="line">--project-cache-dir     Specifies the project-specific cache directory. Defaults to .gradle <span class="keyword">in</span> the root project directory.</span><br><span class="line">-q, --quiet             Log errors only.</span><br><span class="line">--recompile-scripts     Force build script recompiling.</span><br><span class="line">--refresh-dependencies  Refresh the state of dependencies.</span><br><span class="line">--rerun-tasks           Ignore previously cached task results.</span><br><span class="line">-S, --full-stacktrace   Print out the full (very verbose) stacktrace <span class="keyword">for</span> all exceptions.</span><br><span class="line">-s, --stacktrace        Print out the stacktrace <span class="keyword">for</span> all exceptions.</span><br><span class="line">--status                Shows status of running and recently stopped Gradle Daemon(s).</span><br><span class="line">--stop                  Stops the Gradle Daemon <span class="keyword">if</span> it is running.</span><br><span class="line">-t, --continuous        Enables continuous build. Gradle does not <span class="built_in">exit</span> and will re-execute tasks when task file inputs change. [incubating]</span><br><span class="line">-u, --no-search-upward  Don<span class="string">'t search in parent folders for a settings.gradle file.</span></span><br><span class="line"><span class="string">-v, --version           Print version info.</span></span><br><span class="line"><span class="string">-x, --exclude-task      Specify a task to be excluded from execution.</span></span><br></pre></td></tr></table></figure><h4 id="5-列出项目所有tasks"><a href="#5-列出项目所有tasks" class="headerlink" title="5. 列出项目所有tasks"></a>5. 列出项目所有tasks</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ gradle -q tasks --all</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">All tasks runnable from root project</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build tasks</span><br><span class="line">-----------</span><br><span class="line">assemble - Assembles the outputs of this project.</span><br><span class="line">build - Assembles and tests this project.</span><br><span class="line">buildDependents - Assembles and tests this project and all projects that depend on it.</span><br><span class="line">buildNeeded - Assembles and tests this project and all projects it depends on.</span><br><span class="line">classes - Assembles main classes.</span><br><span class="line">clean - Deletes the build directory.</span><br><span class="line">jar - Assembles a jar archive containing the main classes.</span><br><span class="line">testClasses - Assembles <span class="built_in">test</span> classes.</span><br><span class="line"></span><br><span class="line">Build Setup tasks</span><br><span class="line">-----------------</span><br><span class="line">init - Initializes a new Gradle build. [incubating]</span><br><span class="line">wrapper - Generates Gradle wrapper files. [incubating]</span><br><span class="line"></span><br><span class="line">Documentation tasks</span><br><span class="line">-------------------</span><br><span class="line">javadoc - Generates Javadoc API documentation <span class="keyword">for</span> the main <span class="built_in">source</span> code.</span><br><span class="line"></span><br><span class="line">Help tasks</span><br><span class="line">----------</span><br><span class="line">buildEnvironment - Displays all buildscript dependencies declared <span class="keyword">in</span> root project <span class="string">'LearnGradle'</span>.</span><br><span class="line">components - Displays the components produced by root project <span class="string">'LearnGradle'</span>. [incubating]</span><br><span class="line">dependencies - Displays all dependencies declared <span class="keyword">in</span> root project <span class="string">'LearnGradle'</span>.</span><br><span class="line">dependencyInsight - Displays the insight into a specific dependency <span class="keyword">in</span> root project <span class="string">'LearnGradle'</span>.</span><br><span class="line">dependentComponents - Displays the dependent components of components <span class="keyword">in</span> root project <span class="string">'LearnGradle'</span>. [incubating]</span><br><span class="line"><span class="built_in">help</span> - Displays a <span class="built_in">help</span> message.</span><br><span class="line">model - Displays the configuration model of root project <span class="string">'LearnGradle'</span>. [incubating]</span><br><span class="line">projects - Displays the sub-projects of root project <span class="string">'LearnGradle'</span>.</span><br><span class="line">properties - Displays the properties of root project <span class="string">'LearnGradle'</span>.</span><br><span class="line">tasks - Displays the tasks runnable from root project <span class="string">'LearnGradle'</span>.</span><br><span class="line"></span><br><span class="line">IDE tasks</span><br><span class="line">---------</span><br><span class="line">cleanEclipse - Cleans all Eclipse files.</span><br><span class="line">eclipse - Generates all Eclipse files.</span><br><span class="line"></span><br><span class="line">Verification tasks</span><br><span class="line">------------------</span><br><span class="line">check - Runs all checks.</span><br><span class="line"><span class="built_in">test</span> - Runs the unit tests.</span><br><span class="line"></span><br><span class="line">Other tasks</span><br><span class="line">-----------</span><br><span class="line">cleanEclipseClasspath</span><br><span class="line">cleanEclipseJdt</span><br><span class="line">cleanEclipseProject</span><br><span class="line">compileJava - Compiles main Java <span class="built_in">source</span>.</span><br><span class="line">compileTestJava - Compiles <span class="built_in">test</span> Java <span class="built_in">source</span>.</span><br><span class="line">eclipseClasspath - Generates the Eclipse classpath file.</span><br><span class="line">eclipseJdt - Generates the Eclipse JDT settings file.</span><br><span class="line">eclipseProject - Generates the Eclipse project file.</span><br><span class="line">helloGradle</span><br><span class="line">processResources - Processes main resources.</span><br><span class="line">processTestResources - Processes <span class="built_in">test</span> resources.</span><br><span class="line">repeatTasks0</span><br><span class="line">repeatTasks1</span><br><span class="line">repeatTasks2</span><br><span class="line">startChain</span><br><span class="line">taskChainSample</span><br><span class="line"></span><br><span class="line">Rules</span><br><span class="line">-----</span><br><span class="line">Pattern: clean&lt;TaskName&gt;: Cleans the output files of a task.</span><br><span class="line">Pattern: build&lt;ConfigurationName&gt;: Assembles the artifacts of a configuration.</span><br><span class="line">Pattern: upload&lt;ConfigurationName&gt;: Assembles and uploads the artifacts belonging to a configuration.</span><br></pre></td></tr></table></figure><h4 id="6-查看某个task的详细信息"><a href="#6-查看某个task的详细信息" class="headerlink" title="6. 查看某个task的详细信息"></a>6. 查看某个task的详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ gradle -q <span class="built_in">help</span> --task build</span><br><span class="line">Detailed task information <span class="keyword">for</span> build</span><br><span class="line"></span><br><span class="line">Path</span><br><span class="line">     :build</span><br><span class="line"></span><br><span class="line">Type</span><br><span class="line">     Task (org.gradle.api.Task)</span><br><span class="line"></span><br><span class="line">Description</span><br><span class="line">     Assembles and tests this project.</span><br><span class="line"></span><br><span class="line">Group</span><br><span class="line">     build</span><br></pre></td></tr></table></figure><h4 id="7-列出项目所有properties"><a href="#7-列出项目所有properties" class="headerlink" title="7. 列出项目所有properties"></a>7. 列出项目所有properties</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">$ gradle -q properties</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Root project</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">allprojects: [root project <span class="string">'LearnGradle'</span>]</span><br><span class="line">ant: org.gradle.api.internal.project.DefaultAntBuilder@1f8f3840</span><br><span class="line">antBuilderFactory: org.gradle.api.internal.project.DefaultAntBuilderFactory@1fbffe05</span><br><span class="line">archivesBaseName: LearnGradle</span><br><span class="line">artifacts: org.gradle.api.internal.artifacts.dsl.DefaultArtifactHandler_Decorated@4c645666</span><br><span class="line">asDynamicObject: DynamicObject <span class="keyword">for</span> root project <span class="string">'LearnGradle'</span></span><br><span class="line">assemble: task <span class="string">':assemble'</span></span><br><span class="line">attributesSchema: org.gradle.api.internal.attributes.DefaultAttributesSchema_Decorated@2170586e</span><br><span class="line">baseClassLoaderScope: org.gradle.api.internal.initialization.DefaultClassLoaderScope@475b3938</span><br><span class="line">buildDependents: task <span class="string">':buildDependents'</span></span><br><span class="line">buildDir: /Users/xyq/workspace/LearnGradle/build</span><br><span class="line">buildFile: /Users/xyq/workspace/LearnGradle/build.gradle</span><br><span class="line">buildNeeded: task <span class="string">':buildNeeded'</span></span><br><span class="line">buildScriptSource: org.gradle.groovy.scripts.UriScriptSource@2774b800</span><br><span class="line">buildscript: org.gradle.api.internal.initialization.DefaultScriptHandler@494d1dee</span><br><span class="line">check: task <span class="string">':check'</span></span><br><span class="line">childProjects: &#123;&#125;</span><br><span class="line">class: class org.gradle.api.internal.project.DefaultProject_Decorated</span><br><span class="line">classLoaderScope: org.gradle.api.internal.initialization.DefaultClassLoaderScope@6add8f81</span><br><span class="line">classes: task <span class="string">':classes'</span></span><br><span class="line">cleanEclipse: task <span class="string">':cleanEclipse'</span></span><br><span class="line">cleanEclipseClasspath: task <span class="string">':cleanEclipseClasspath'</span></span><br><span class="line">cleanEclipseJdt: task <span class="string">':cleanEclipseJdt'</span></span><br><span class="line">cleanEclipseProject: task <span class="string">':cleanEclipseProject'</span></span><br><span class="line">compileJava: task <span class="string">':compileJava'</span></span><br><span class="line">compileTestJava: task <span class="string">':compileTestJava'</span></span><br><span class="line">components: [org.gradle.api.internal.java.JavaLibrary@7451e91b]</span><br><span class="line">configurationActions: org.gradle.configuration.project.DefaultProjectConfigurationActionContainer@76e7eb29</span><br><span class="line">configurations: [configuration <span class="string">':archives'</span>, configuration <span class="string">':compile'</span>, configuration <span class="string">':compileClasspath'</span>, configuration <span class="string">':compileOnly'</span>, configuration <span class="string">':default'</span>, configuration <span class="string">':runtime'</span>, configuration <span class="string">':testCompile'</span>, configuration <span class="string">':testCompileClasspath'</span>, configuration <span class="string">':testCompileOnly'</span>, configuration <span class="string">':testRuntime'</span>]</span><br><span class="line">convention: org.gradle.api.internal.plugins.DefaultConvention@57642a76</span><br><span class="line">defaultArtifacts: org.gradle.api.internal.plugins.DefaultArtifactPublicationSet_Decorated@5143069c</span><br><span class="line">defaultTasks: []</span><br><span class="line">deferredProjectConfiguration: org.gradle.api.internal.project.DeferredProjectConfiguration@2aa1349e</span><br><span class="line">dependencies: org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler_Decorated@63562c40</span><br><span class="line">dependencyCacheDir: /Users/xyq/workspace/LearnGradle/build/dependency-cache</span><br><span class="line">dependencyCacheDirName: dependency-cache</span><br><span class="line">depth: 0</span><br><span class="line">description: null</span><br><span class="line">displayName: root project <span class="string">'LearnGradle'</span></span><br><span class="line">distsDir: /Users/xyq/workspace/LearnGradle/build/distributions</span><br><span class="line">distsDirName: distributions</span><br><span class="line">docsDir: /Users/xyq/workspace/LearnGradle/build/docs</span><br><span class="line">docsDirName: docs</span><br><span class="line">eclipse: org.gradle.plugins.ide.eclipse.model.EclipseModel_Decorated@15178dc6</span><br><span class="line">eclipseClasspath: task <span class="string">':eclipseClasspath'</span></span><br><span class="line">eclipseJdt: task <span class="string">':eclipseJdt'</span></span><br><span class="line">eclipseProject: task <span class="string">':eclipseProject'</span></span><br><span class="line">ext: org.gradle.api.internal.plugins.DefaultExtraPropertiesExtension@5ca91e1e</span><br><span class="line">extensions: org.gradle.api.internal.plugins.DefaultConvention@57642a76</span><br><span class="line">fileOperations: org.gradle.api.internal.file.DefaultFileOperations@7f8fc4d1</span><br><span class="line">fileResolver: org.gradle.api.internal.file.BaseDirFileResolver@2d69c34c</span><br><span class="line">gradle: build <span class="string">'LearnGradle'</span></span><br><span class="line">group:</span><br><span class="line">helloGradle: task <span class="string">':helloGradle'</span></span><br><span class="line">identityPath: :</span><br><span class="line">inheritedScope: org.gradle.api.internal.ExtensibleDynamicObject<span class="variable">$InheritedDynamicObject</span>@4b9029a</span><br><span class="line">jar: task <span class="string">':jar'</span></span><br><span class="line">javadoc: task <span class="string">':javadoc'</span></span><br><span class="line">libsDir: /Users/xyq/workspace/LearnGradle/build/libs</span><br><span class="line">libsDirName: libs</span><br><span class="line">logger: org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger@5dd205df</span><br><span class="line">logging: org.gradle.internal.logging.services.DefaultLoggingManager@1074a5fd</span><br><span class="line">modelRegistry: org.gradle.model.internal.registry.DefaultModelRegistry@115c426e</span><br><span class="line">modelSchemaStore: org.gradle.model.internal.manage.schema.extract.DefaultModelSchemaStore@2dfbc134</span><br><span class="line">module: org.gradle.api.internal.artifacts.ProjectBackedModule@44f77247</span><br><span class="line">name: LearnGradle</span><br><span class="line">org.gradle.eclipse.postprocess.applied: <span class="literal">true</span></span><br><span class="line">parent: null</span><br><span class="line">parentIdentifier: null</span><br><span class="line">path: :</span><br><span class="line">pluginManager: org.gradle.api.internal.plugins.DefaultPluginManager_Decorated@724c80aa</span><br><span class="line">plugins: [org.gradle.api.plugins.HelpTasksPlugin@42a20621, org.gradle.language.base.plugins.LifecycleBasePlugin@482e65be, org.gradle.api.plugins.BasePlugin@4590f8ff, org.gradle.api.plugins.ReportingBasePlugin@33edb140, org.gradle.platform.base.plugins.ComponentBasePlugin@2d705ad3, org.gradle.language.base.plugins.LanguageBasePlugin@73c9898c, org.gradle.platform.base.plugins.BinaryBasePlugin@338c4dea, org.gradle.api.plugins.JavaBasePlugin@3a1924a5, org.gradle.api.plugins.JavaPlugin@759dc13f, org.gradle.plugins.ide.eclipse.EclipsePlugin@7673da29]</span><br><span class="line">processOperations: org.gradle.api.internal.file.DefaultFileOperations@7f8fc4d1</span><br><span class="line">processResources: task <span class="string">':processResources'</span></span><br><span class="line">processTestResources: task <span class="string">':processTestResources'</span></span><br><span class="line">project: root project <span class="string">'LearnGradle'</span></span><br><span class="line">projectDir: /Users/xyq/workspace/LearnGradle</span><br><span class="line">projectEvaluationBroadcaster: ProjectEvaluationListener broadcast</span><br><span class="line">projectEvaluator: org.gradle.configuration.project.LifecycleProjectEvaluator@3eade1ab</span><br><span class="line">projectPath: :</span><br><span class="line">projectRegistry: org.gradle.api.internal.project.DefaultProjectRegistry@b43e0ce</span><br><span class="line">properties: &#123;...&#125;</span><br><span class="line">repeatTasks0: task <span class="string">':repeatTasks0'</span></span><br><span class="line">repeatTasks1: task <span class="string">':repeatTasks1'</span></span><br><span class="line">repeatTasks2: task <span class="string">':repeatTasks2'</span></span><br><span class="line">reporting: org.gradle.api.reporting.ReportingExtension_Decorated@787f9cfa</span><br><span class="line">reportsDir: /Users/xyq/workspace/LearnGradle/build/reports</span><br><span class="line">repositories: [org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository_Decorated@6ea00a8f]</span><br><span class="line">resources: org.gradle.api.internal.resources.DefaultResourceHandler@3fd10e49</span><br><span class="line">rootDir: /Users/xyq/workspace/LearnGradle</span><br><span class="line">rootProject: root project <span class="string">'LearnGradle'</span></span><br><span class="line">scriptHandlerFactory: org.gradle.api.internal.initialization.DefaultScriptHandlerFactory@2b80dced</span><br><span class="line">scriptPluginFactory: org.gradle.configuration.ScriptPluginFactorySelector@2f9c0d2b</span><br><span class="line">serviceRegistryFactory: org.gradle.internal.service.scopes.ProjectScopeServices<span class="variable">$4</span>@41869e25</span><br><span class="line">services: ProjectScopeServices</span><br><span class="line">sourceCompatibility: 1.8</span><br><span class="line">sourceSets: [<span class="built_in">source</span> <span class="built_in">set</span> <span class="string">'main'</span>, <span class="built_in">source</span> <span class="built_in">set</span> <span class="string">'test'</span>]</span><br><span class="line">standardOutputCapture: org.gradle.internal.logging.services.DefaultLoggingManager@1074a5fd</span><br><span class="line">startChain: task <span class="string">':startChain'</span></span><br><span class="line">state: project state <span class="string">'EXECUTED'</span></span><br><span class="line">status: integration</span><br><span class="line">subprojects: []</span><br><span class="line">targetCompatibility: 1.8</span><br><span class="line">taskChainSample: task <span class="string">':taskChainSample'</span></span><br><span class="line">tasks: [task <span class="string">':assemble'</span>, task <span class="string">':buildDependents'</span>, task <span class="string">':buildNeeded'</span>, task <span class="string">':check'</span>, task <span class="string">':classes'</span>, task <span class="string">':cleanEclipse'</span>, task <span class="string">':cleanEclipseClasspath'</span>, task <span class="string">':cleanEclipseJdt'</span>, task <span class="string">':cleanEclipseProject'</span>, task <span class="string">':compileJava'</span>, task <span class="string">':compileTestJava'</span>, task <span class="string">':eclipse'</span>, task <span class="string">':eclipseClasspath'</span>, task <span class="string">':eclipseJdt'</span>, task <span class="string">':eclipseProject'</span>, task <span class="string">':helloGradle'</span>, task <span class="string">':jar'</span>, task <span class="string">':javadoc'</span>, task <span class="string">':processResources'</span>, task <span class="string">':processTestResources'</span>, task <span class="string">':properties'</span>, task <span class="string">':repeatTasks0'</span>, task <span class="string">':repeatTasks1'</span>, task <span class="string">':repeatTasks2'</span>, task <span class="string">':startChain'</span>, task <span class="string">':taskChainSample'</span>, task <span class="string">':test'</span>, task <span class="string">':testClasses'</span>]</span><br><span class="line"><span class="built_in">test</span>: task <span class="string">':test'</span></span><br><span class="line">testClasses: task <span class="string">':testClasses'</span></span><br><span class="line">testReportDir: /Users/xyq/workspace/LearnGradle/build/reports/tests</span><br><span class="line">testReportDirName: tests</span><br><span class="line">testResultsDir: /Users/xyq/workspace/LearnGradle/build/<span class="built_in">test</span>-results</span><br><span class="line">testResultsDirName: <span class="built_in">test</span>-results</span><br><span class="line">version: unspecified</span><br></pre></td></tr></table></figure><h4 id="8-Gradle守护进程"><a href="#8-Gradle守护进程" class="headerlink" title="8. Gradle守护进程"></a>8. Gradle守护进程</h4><ul><li>开启守护进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ gradle taskChainSample --daemon</span><br><span class="line">:startChain</span><br><span class="line">[ant:<span class="built_in">echo</span>] Repeat from here...</span><br><span class="line">:repeatTasks0</span><br><span class="line"><span class="keyword">do</span> repeatTasktask <span class="string">':repeatTasks0'</span></span><br><span class="line">:repeatTasks1</span><br><span class="line"><span class="keyword">do</span> repeatTasktask <span class="string">':repeatTasks1'</span></span><br><span class="line">:repeatTasks2</span><br><span class="line"><span class="keyword">do</span> repeatTasktask <span class="string">':repeatTasks2'</span></span><br><span class="line">:taskChainSample</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.735 secs</span><br></pre></td></tr></table></figure><p>后续触发的<code>gradle &lt;task&gt; --daemon</code>会重用gradle守护进程<br>使用<code>gradle &lt;task&gt; --no-daemon</code>选择不重用守护进程</p><ul><li>查看守护进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps | grep gradle</span><br><span class="line">69403 ttys002    0:00.00 grep gradle</span><br></pre></td></tr></table></figure><ul><li>关闭守护进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gradle --stop</span><br><span class="line">Stopping Daemon(s)</span><br><span class="line">1 Daemon stopped</span><br></pre></td></tr></table></figure><p>守护进程会在3小时候自动过期</p>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring AOP</title>
      <link href="/2016/02/13/Spring%20AOP/"/>
      <url>/2016/02/13/Spring%20AOP/</url>
      <content type="html"><![CDATA[<h3 id="1-术语"><a href="#1-术语" class="headerlink" title="1. 术语"></a>1. 术语</h3><ul><li>连接点（JointPoint）：代码中具有边界性质特定点；Spring仅支持方法的连接点，包含方法和方位两方面信息</li><li>切点（Pointcut）：定位到某个方法</li><li>增强（Advice）：织入到目标连接点上的代码</li><li>目标对象（Target）：增强逻辑的目标织入类</li><li>引介（Introduction）：特殊的增强，为类添加一些属性和方法</li><li>织入（Weaving）：将增强添加到目标连接点上的过程：编译期织入、类装载期织入、动态代理织入（Spring的方案）</li><li>代理（Proxy）：被AOP织入增强后的结果类</li><li>切面（Aspect）：切点+增强</li></ul><a id="more"></a><h3 id="2-动态代理的两种实现：JDK和CGLib"><a href="#2-动态代理的两种实现：JDK和CGLib" class="headerlink" title="2. 动态代理的两种实现：JDK和CGLib"></a>2. 动态代理的两种实现：JDK和CGLib</h3><ul><li>JDK动态代理动态创建一个符合某一接口的实力，生成目标类的代理对象，缺点是需要提供接口；方法必须是<code>public</code>或<code>public final</code>的</li><li>CGLib采用底层的字节码技术，在子类中对父类的方法进行拦截，织入横切逻辑；不能为<code>final</code>和<code>private</code>方法代理</li><li>样例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServiceImpl jdkTarget = <span class="keyword">new</span> ServiceImpl();</span><br><span class="line">        ProxyHandler handler = <span class="keyword">new</span> ProxyHandler(jdkTarget);</span><br><span class="line">        Service jdkProxy = (Service)Proxy.newProxyInstance(</span><br><span class="line">            jdkTarget.getClass().getClassLoader(),</span><br><span class="line">            jdkTarget.getClass().getInterfaces(),</span><br><span class="line">            handler);</span><br><span class="line">        jdkProxy.process(<span class="string">"jdk proxy"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">        ServiceImpl cglibTarget = (ServiceImpl)cglibProxy.getProxy(ServiceImpl.class);</span><br><span class="line">        cglibTarget.process(<span class="string">"cglib proxy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String arg)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"do something with "</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jdk proxy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object target;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.target = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"before process jdk proxy"</span>);</span><br><span class="line">            Object obj = method.invoke(target, args);</span><br><span class="line">            System.out.println(<span class="string">"after process jdk proxy"</span>);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cglib proxy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">            enhancer.setSuperclass(clazz);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"before process cglib proxy"</span>);</span><br><span class="line">            Object result = proxy.invokeSuper(obj, args);</span><br><span class="line">            System.out.println(<span class="string">"after process cglib proxy"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before process jdk proxy</span><br><span class="line">do something with jdk proxy</span><br><span class="line">after process jdk proxy</span><br><span class="line"></span><br><span class="line">before process cglib proxy</span><br><span class="line">do something with cglib proxy</span><br><span class="line">after process cglib proxy</span><br></pre></td></tr></table></figure><ul><li>性能：CGLib所创建的动态代理对象性能比JDK方式高（约10倍），但CGLib在创建代理对象时所花费的时间比JDK方式多（约8倍）；CGLib适合Spring里singleton模式的bean管理</li></ul><h3 id="3-ProxyFactory"><a href="#3-ProxyFactory" class="headerlink" title="3. ProxyFactory"></a>3. ProxyFactory</h3><ul><li>Spring定义了<code>org.springframework.aop.framework.AopProxy</code>接口及<code>Cglib2AopProxy</code>和<code>JdkDynamicAopProxy</code>两个<code>final</code>实现类</li><li>如果通过<code>ProxyFactory</code>的<code>setInterfaces(Class[] interfaces)</code>指定针对接口代理，则使用<code>JdkDynamicAopProxy</code>；如果使用<code>setOptimize(true)</code>，使用<code>Cglib2AopProxy</code></li><li><code>ProxyFacotry</code>通过<code>addAdvice(Advice)</code>形成增强链</li></ul><h3 id="4-增强类型"><a href="#4-增强类型" class="headerlink" title="4. 增强类型"></a>4. 增强类型</h3><h4 id="4-1-前置增强"><a href="#4-1-前置增强" class="headerlink" title="4.1 前置增强"></a>4.1 前置增强</h4><ul><li>接口：<code>org.springframework.aop.BeforeAdvice</code></li><li>样例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method arg0, Object[] arg1, Object arg2)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String arg = (String)arg1[<span class="number">0</span>];</span><br><span class="line">        System.out.println(<span class="string">"before advice "</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-后置增强"><a href="#4-2-后置增强" class="headerlink" title="4.2  后置增强"></a>4.2  后置增强</h4><ul><li>接口：<code>org.springframework.aop.AfterReturninigAdvice</code></li><li>样例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String arg = (String)args[<span class="number">0</span>];</span><br><span class="line">        System.out.println(<span class="string">"after advice "</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-环绕增强"><a href="#4-3-环绕增强" class="headerlink" title="4.3 环绕增强"></a>4.3 环绕增强</h4><ul><li>接口：<code>org.aopalliance.intercept.MethodInterceptor</code></li><li>样例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object[] args = invocation.getArguments();</span><br><span class="line">        String arg = (String)args[<span class="number">0</span>];</span><br><span class="line">        System.out.println(<span class="string">"around advice: before "</span> + arg);</span><br><span class="line">        Object obj = invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">"around advice: after "</span> + arg);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-异常抛出增强"><a href="#4-4-异常抛出增强" class="headerlink" title="4.4 异常抛出增强"></a>4.4 异常抛出增强</h4><ul><li>接口：<code>org.springframework.aop.ThrowsAdvice</code></li><li>样例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionAdvice</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Method method, Object[] args, Object target, Exception ex)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"throws exception, method="</span> + method.getName());</span><br><span class="line">        System.out.println(<span class="string">"throws exception, message="</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h4><h5 id="4-5-1-基于代码的测试"><a href="#4-5-1-基于代码的测试" class="headerlink" title="4.5.1 基于代码的测试"></a>4.5.1 基于代码的测试</h5><ul><li><code>TestAopAdvice</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.ProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAopAdvice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AopExample example = <span class="keyword">new</span> AopExample();</span><br><span class="line">        BeforeAdvice beforeAdvice = <span class="keyword">new</span> BeforeAdvice();</span><br><span class="line">        AfterAdvice afterAdvice = <span class="keyword">new</span> AfterAdvice();</span><br><span class="line">        AroundAdvice aroundAdvice = <span class="keyword">new</span> AroundAdvice();</span><br><span class="line">        ThrowsAdvice throwsAdvice = <span class="keyword">new</span> ExceptionAdvice();</span><br><span class="line"></span><br><span class="line">        ProxyFactory pf = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        pf.setTarget(example);</span><br><span class="line">        pf.addAdvice(beforeAdvice);</span><br><span class="line">        pf.addAdvice(afterAdvice);</span><br><span class="line">        pf.addAdvice(aroundAdvice);</span><br><span class="line">        pf.addAdvice(throwsAdvice);</span><br><span class="line">        AopExample proxy = (AopExample)pf.getProxy();</span><br><span class="line"></span><br><span class="line">        proxy.handle(<span class="string">"blabla"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            proxy.throwExp(<span class="string">"blabla"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">before advice blabla</span><br><span class="line">around advice: before blabla</span><br><span class="line">aop example blabla</span><br><span class="line">around advice: after blabla</span><br><span class="line">after advice blabla</span><br><span class="line"></span><br><span class="line">before advice blabla</span><br><span class="line">around advice: before blabla</span><br><span class="line">----after throwing----</span><br><span class="line">throws exception, method=throwExp</span><br><span class="line">throws exception, message=try throws advice</span><br></pre></td></tr></table></figure><h5 id="4-5-2-基于Spring配置的测试"><a href="#4-5-2-基于Spring配置的测试" class="headerlink" title="4.5.2 基于Spring配置的测试"></a>4.5.2 基于Spring配置的测试</h5><ul><li><code>springAop.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aopExample"</span> <span class="attr">class</span>=<span class="string">"com.aop.AopExample"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beforeAdvice"</span> <span class="attr">class</span>=<span class="string">"com.aop.BeforeAdvice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterAdvice"</span> <span class="attr">class</span>=<span class="string">"com.aop.AfterAdvice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aroundAdvice"</span> <span class="attr">class</span>=<span class="string">"com.aop.AroundAdvice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionAdvice"</span> <span class="attr">class</span>=<span class="string">"com.aop.ExceptionAdvice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aopTest"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:proxyTargetClass</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:interceptorNames</span>=<span class="string">"beforeAdvice,afterAdvice,aroundAdvice,exceptionAdvice"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:target-ref</span>=<span class="string">"aopExample"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>TestAopAdvice2</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAopAdvice2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/springAop.xml"</span>);</span><br><span class="line">        AopExample aopExample = (AopExample)ctx.getBean(<span class="string">"aopTest"</span>);</span><br><span class="line">        aopExample.handle(<span class="string">"blabla"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            aopExample.throwExp(<span class="string">"blabla"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">二月 09, 2017 9:54:11 下午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 21:54:11 CST 2017]; root of context hierarchy</span><br><span class="line">二月 09, 2017 9:54:11 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [springAop.xml]</span><br><span class="line">before advice blabla</span><br><span class="line">around advice: before blabla</span><br><span class="line">aop example blabla</span><br><span class="line">around advice: after blabla</span><br><span class="line">after advice blabla</span><br><span class="line"></span><br><span class="line">before advice blabla</span><br><span class="line">around advice: before blabla</span><br><span class="line">----after throwing----</span><br><span class="line">throws exception, method=throwExp</span><br><span class="line">throws exception, message=try throws advice</span><br><span class="line">二月 09, 2017 9:54:11 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 21:54:11 CST 2017]; root of context hierarchy</span><br></pre></td></tr></table></figure><h4 id="4-6-引介增强"><a href="#4-6-引介增强" class="headerlink" title="4.6 引介增强"></a>4.6 引介增强</h4><ul><li>接口：<code>org.springframework.aop.IntroductionInterceptor</code></li></ul><h5 id="4-6-1-基于Spring配置的测试代码"><a href="#4-6-1-基于Spring配置的测试代码" class="headerlink" title="4.6.1 基于Spring配置的测试代码"></a>4.6.1 基于Spring配置的测试代码</h5><ul><li><code>IntroductionAdvice</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntroductionAdvice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntroductionActive</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ConfigurableIntroduction</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DelegatingIntroductionInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurableIntroduction</span> <span class="keyword">extends</span> <span class="title">DelegatingIntroductionInterceptor</span> <span class="keyword">implements</span> <span class="title">IntroductionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Boolean&gt; map = <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntroductionActive</span><span class="params">(<span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">        map.set(active);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(map.get() != <span class="keyword">null</span> &amp;&amp; map.get()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"before monitor operation"</span>);</span><br><span class="line">            obj = <span class="keyword">super</span>.invoke(invocation);</span><br><span class="line">            System.out.println(<span class="string">"after monitor operation"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj = <span class="keyword">super</span>.invoke(invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TestIntroductionAdvice</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aop;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIntroductionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/springAop.xml"</span>);</span><br><span class="line">        AopExample introductionAop = (AopExample)ctx.getBean(<span class="string">"introductionAop"</span>);</span><br><span class="line">        introductionAop.handle(<span class="string">"introduction advice"</span>);</span><br><span class="line">        IntroductionAdvice ci = (IntroductionAdvice)introductionAop;</span><br><span class="line">        ci.setIntroductionActive(<span class="keyword">true</span>);</span><br><span class="line">        introductionAop.handle(<span class="string">"introduction advice"</span>);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>springAop.xml</code>添加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"configurableIntroduction"</span> <span class="attr">class</span>=<span class="string">"com.aop.ConfigurableIntroduction"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"introductionAop"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:interfaces</span>=<span class="string">"com.aop.IntroductionAdvice"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:target-ref</span>=<span class="string">"aopExample"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:interceptorNames</span>=<span class="string">"configurableIntroduction"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:proxyTargetClass</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">二月 09, 2017 9:56:10 下午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 21:56:10 CST 2017]; root of context hierarchy</span><br><span class="line">二月 09, 2017 9:56:10 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [springAop.xml]</span><br><span class="line">aop example introduction advice</span><br><span class="line">----</span><br><span class="line">before monitor operation</span><br><span class="line">aop example introduction advice</span><br><span class="line">after monitor operation</span><br><span class="line">二月 09, 2017 9:56:11 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 21:56:10 CST 2017]; root of context hierarchy</span><br></pre></td></tr></table></figure><h5 id="4-6-2-与其他增强在配置上的区别"><a href="#4-6-2-与其他增强在配置上的区别" class="headerlink" title="4.6.2 与其他增强在配置上的区别"></a>4.6.2 与其他增强在配置上的区别</h5><ul><li>须指定引介增强所实现的接口</li><li>只能通过为目标类创建子类的方式生成引介增强的代理，因此<code>proxyTargeClass</code>必须为<code>true</code></li></ul><h3 id="5-Spring中的配置"><a href="#5-Spring中的配置" class="headerlink" title="5. Spring中的配置"></a>5. Spring中的配置</h3><p>参数说明</p><ul><li><code>target</code>：代理的对象</li><li><code>proxyInterfaces</code>：代理所要实现的接口</li><li><code>interceptorNames</code>：需要织入目标对象的bean列表，这些bean必须是实现了<code>org.aopalliance.intercept.MethodInterceptor</code>或<code>org.springframework.aop.Advisor</code>的bean，配置中的顺序对应调用的顺序</li><li><code>singleton</code>：返回的代理是否为单例，默认为<code>true</code></li><li><code>optimize</code>：为<code>true</code>时使用CGLib代理</li><li><code>proxyTargetClass</code>：为<code>true</code>时使用CGLib代理，并覆盖<code>proxyInterfaces</code>设置</li></ul><h3 id="6-Java注解"><a href="#6-Java注解" class="headerlink" title="6. Java注解"></a>6. Java注解</h3><ul><li>一个例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//声明可以使用该注解的目标类型</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//声明注解的保留期限</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Authority &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;<span class="comment">//声明注解成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成员以无入参无抛出异常的方式声明</li><li>可以通过<code>default</code>为成员指定一个默认值</li><li>在方法上使用注解：<code>@Authority(value=true)</code></li><li>如果注解只有一个成员，需命名为<code>value()</code>，使用时可以忽略成员名和赋值号(=)，如<code>@Authority(true)</code></li><li>注解类拥有多个成员时，如果仅对<code>value</code>成员赋值，可以不适用赋值号；如果同时对多个成员赋值，则必须使用赋值号</li><li>注解类可以没有成员，称为标识注解</li><li>所有注解类隐式继承于<code>java.lang.annotation.Annotation</code>，注解不允许显式继承于其他接口</li><li>如果成员是数组类型，可以通过{}赋值</li></ul><h3 id="7-基于AspectJ的AOP"><a href="#7-基于AspectJ的AOP" class="headerlink" title="7. 基于AspectJ的AOP"></a>7. 基于AspectJ的AOP</h3><h4 id="7-1-一个例子"><a href="#7-1-一个例子" class="headerlink" title="7.1 一个例子"></a>7.1 一个例子</h4><ul><li>定义切面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(*handle(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"aspect: before processing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.AspectJProxyFactory;</span><br><span class="line"><span class="keyword">import</span> com.aop.AopExample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AspectJProxyFactory factory = <span class="keyword">new</span> AspectJProxyFactory();</span><br><span class="line">        AopExample example = <span class="keyword">new</span> AopExample();</span><br><span class="line">        factory.setTarget(example);</span><br><span class="line">        factory.addAspect(PreAspect.class);</span><br><span class="line">        AopExample proxy = factory.getProxy();</span><br><span class="line">        proxy.handle(<span class="string">"pre aspect"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aspect: before processing</span><br><span class="line">aop example pre aspect</span><br></pre></td></tr></table></figure><h4 id="7-2-通过配置使用切面"><a href="#7-2-通过配置使用切面" class="headerlink" title="7.2 通过配置使用切面"></a>7.2 通过配置使用切面</h4><h5 id="7-2-1-典型配置"><a href="#7-2-1-典型配置" class="headerlink" title="7.2.1 典型配置"></a>7.2.1 典型配置</h5><ul><li><code>springAspectj.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aopExample"</span> <span class="attr">class</span>=<span class="string">"com.aop.AopExample"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"preAspect"</span> <span class="attr">class</span>=<span class="string">"com.aspectj.PreAspect"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-2-2-基于Schema的配置"><a href="#7-2-2-基于Schema的配置" class="headerlink" title="7.2.2 基于Schema的配置"></a>7.2.2 基于Schema的配置</h5><ul><li><code>springAspectj.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aopExample"</span> <span class="attr">class</span>=<span class="string">"com.aop.AopExample"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"preAspect"</span> <span class="attr">class</span>=<span class="string">"com.aspectj.PreAspect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>AspectJTest2</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aop.AopExample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/springAspectj.xml"</span>);</span><br><span class="line">        AopExample aopExample = (AopExample)ctx.getBean(<span class="string">"aopExample"</span>);</span><br><span class="line">        aopExample.handle(<span class="string">"blabla"</span>);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二月 09, 2017 10:13:56 下午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 22:13:56 CST 2017]; root of context hierarchy</span><br><span class="line">二月 09, 2017 10:13:56 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [springAspectj.xml]</span><br><span class="line">aspect: before processing</span><br><span class="line">aop example blabla</span><br><span class="line">二月 09, 2017 10:13:57 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 22:13:56 CST 2017]; root of context hierarchy</span><br></pre></td></tr></table></figure><ul><li>通过<code>&lt;aop:aspectj-autoproxy /&gt;</code>引入<code>aop</code>命名空间，自动为Spring容器中匹配<code>@AspectJ</code>切面的bean创建代理，完成切面织入，其内部实现仍为<code>AnnotationAwareAspectJAutoProxyCreator</code></li><li><code>&lt;aop:aspectj-autoproxy /&gt;</code>的<code>proxy-target-class</code>属性为<code>false</code>时，采用JDK动态代理；为<code>true</code>时使用CGLib</li></ul><h3 id="8-AspectJ语法"><a href="#8-AspectJ语法" class="headerlink" title="8. AspectJ语法"></a>8. AspectJ语法</h3><h4 id="8-1-切点表达式函数"><a href="#8-1-切点表达式函数" class="headerlink" title="8.1 切点表达式函数"></a>8.1 切点表达式函数</h4><ul><li>分类</li></ul><table><thead><tr><th>类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>方法切点函数</td><td>通过描述目标类方法信息定义连接点</td><td><code>execution()</code>，<code>@annotation()</code></td></tr><tr><td>方法入参切点函数</td><td>通过描述目标类方法入参的信息定义连接点</td><td><code>args()</code>，<code>@args()</code></td></tr><tr><td>目标类切点函数</td><td>通过描述目标类类型信息定义连接点</td><td><code>within()</code>，<code>target()</code>，<code>@within()</code>，<code>@target()</code></td></tr><tr><td>代理类切点函数</td><td>通过描述目标类的代理类的信息定义连接点</td><td><code>this()</code></td></tr></tbody></table><ul><li>函数说明</li></ul><table><thead><tr><th>函数</th><th>入参</th><th>说明</th></tr></thead><tbody><tr><td><code>execution()</code></td><td>方法匹配模式串</td><td>表示满足某一匹配模式的所有目标类方法连接点，如<code>execution(* handle(..))</code>表示所有目标类中的<code>handle()</code>方法</td></tr><tr><td><code>@annotation()</code></td><td>方法注解类名</td><td>表示标注了特定注解的目标方法连接点，如<code>@annotation(com.aspectj.Authority)</code>表示任何标注了<code>@Authority</code>注解的目标类方法</td></tr><tr><td><code>args()</code></td><td>类名</td><td>通过判别目标类方法运行时入参对象的类型定义指定连接点，如<code>args(com.data.Car)</code>表示所有有且仅有一个按类型匹配于<code>Car</code>（含子类）入参的方法</td></tr><tr><td><code>@args()</code></td><td>类型注解类名</td><td>通过判别目标方法运行时入参对象的类是否标注特定注解来制定连接点，如<code>@args(com.aspectj.Authority)</code>表示任何这样的一个目标方法：它有一个入参且入参对象的类标注<code>@Authority</code>注解。要使<code>@args()</code>生效，类继承树中，标注注解的类类型需要不高于入参类类型</td></tr><tr><td><code>within</code></td><td>类名匹配串</td><td>表示特定域下的所有连接点，如<code>within(com.service.*)</code>，<code>within(com.service.*Service)</code>和<code>within(com.service..*)</code></td></tr><tr><td><code>target()</code></td><td>类名</td><td>假如目标按类型匹配于指定类，则目标类的所有连接点匹配这个切点。如通过<code>target(com.data.Car)</code>定义的切点，<code>Car</code>及<code>Car</code>的子类中的所有连接点都匹配该切点，包括子类中扩展的方法</td></tr><tr><td><code>@within()</code></td><td>类型注解类名</td><td>假如目标类按类型匹配于某个类<code>A</code>，且类<code>A</code>标注了特定注解，则目标类的所有连接点都匹配于这个切点。如<code>@within(com.aspectj.Authority)</code>定义的切点，假如<code>Car</code>类标注了<code>@Authority</code>注解，则<code>Car</code>以及<code>Car</code>的子类的所有连接点都匹配。<code>@within</code>标注接口类无效</td></tr><tr><td><code>@target()</code></td><td>类型注解类名</td><td>目标类标注了特定注解，则目标类（不包括子类）所有连接点都匹配该切点。如通过<code>@target(com.aspectj.Authority)</code>定义的切点，若<code>BMWCar</code>标注了<code>@Authority</code>，则<code>BMWCar</code>所有连接点匹配该切点</td></tr><tr><td><code>this()</code></td><td>类名</td><td>代理类按类型匹配于指定类，则被代理的目标类所有连接点匹配切点</td></tr></tbody></table><h4 id="8-2-通配符"><a href="#8-2-通配符" class="headerlink" title="8.2 通配符"></a>8.2 通配符</h4><h5 id="8-2-1-通配符类型"><a href="#8-2-1-通配符类型" class="headerlink" title="8.2.1 通配符类型"></a>8.2.1 通配符类型</h5><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配任意字符，但只能匹配上下文中的一个元素</td></tr><tr><td><code>..</code></td><td>匹配任意字符，可以匹配上下文中的多个元素。表示类时，和<code>*</code>联合使用；表示入参时单独使用</td></tr><tr><td><code>+</code></td><td>按类型匹配指定类的所有类（包括实现类和继承类），必须跟在类名后面</td></tr></tbody></table><h5 id="8-2-1-函数按通配符支持分类"><a href="#8-2-1-函数按通配符支持分类" class="headerlink" title="8.2.1 函数按通配符支持分类"></a>8.2.1 函数按通配符支持分类</h5><ul><li>支持所有通配符：<code>execution()</code>，<code>within()</code></li><li>仅支持<code>+</code>通配符：<code>args()</code>，<code>this()</code>，<code>target()</code></li><li>不支持通配符：<code>@args</code>，<code>@within</code>，<code>@target</code>，<code>@annotation</code></li></ul><h4 id="8-3-增强类型"><a href="#8-3-增强类型" class="headerlink" title="8.3 增强类型"></a>8.3 增强类型</h4><ul><li><code>@Before</code>：前置增强，相当于<code>BeforeAdvice</code></li><li><code>@AfterReturning</code>：后置增强，相当于<code>AfterReturningAdvice</code></li><li><code>@Around</code>：环绕增强，相当于<code>MethodInterceptor</code></li><li><code>@AfterThrowing</code>：相当于<code>ThrowsAdvice</code></li><li><code>@After</code>：Final增强，抛出异常或正常退出都会执行的增强</li><li><code>@DeclareParents</code>：引介增强，相当于<code>IntroductionInterceptor</code></li></ul><h4 id="8-4-Execution"><a href="#8-4-Execution" class="headerlink" title="8.4 Execution()"></a>8.4 Execution()</h4><ul><li>语法：<code>execution(&lt;修饰符模式&gt;? &lt;返回类型模式&gt; &lt;方法名模式&gt; (&lt;参数模式&gt;) &lt;异常模式&gt;?)</code></li></ul><h5 id="8-4-1-通过方法签名定义切点"><a href="#8-4-1-通过方法签名定义切点" class="headerlink" title="8.4.1 通过方法签名定义切点"></a>8.4.1 通过方法签名定义切点</h5><ul><li><code>execution(pulic * *(..))</code>：匹配目标类的<code>public</code>方法，第一个<code>*</code>代表返回类型，第二个<code>*</code>代表方法名，<code>..</code>代表任意入参</li><li><code>execution(* *To(..))</code>：匹配目标类所有以<code>To</code>结尾的方法，第一个<code>*</code>代表返回类型，<code>*To</code>代表任意以<code>To</code>结尾的方法</li></ul><h5 id="8-4-2-通过类定义切点"><a href="#8-4-2-通过类定义切点" class="headerlink" title="8.4.2 通过类定义切点"></a>8.4.2 通过类定义切点</h5><ul><li><code>execution(* com.data.User.*(..))</code>：匹配<code>User</code>接口的所有方法</li><li><code>execution(* com.data.User+.*(..))</code>：匹配<code>User</code>接口的所有方法，包括其实现类中不在<code>User</code>接口中定义的方法</li></ul><h5 id="8-4-3-通过类包定义切点"><a href="#8-4-3-通过类包定义切点" class="headerlink" title="8.4.3 通过类包定义切点"></a>8.4.3 通过类包定义切点</h5><ul><li><code>execution(* com.data.*(..))</code>：匹配<code>data</code>包下所有类的所有方法</li><li><code>execution(* com.data.User..*(..))</code>：匹配<code>data</code>包及其子孙包中的所有类的所有方法</li><li><code>execution(* com..*Manager.get*(..))</code>：匹配<code>com</code>包及其子孙包中后缀为<code>Manager</code>的类里以<code>get</code>开头的方法</li></ul><h5 id="8-4-4-通过方法入参定义切点"><a href="#8-4-4-通过方法入参定义切点" class="headerlink" title="8.4.4 通过方法入参定义切点"></a>8.4.4 通过方法入参定义切点</h5><ul><li><code>execution(* get(String, int))</code>：匹配<code>get(String, int)</code>方法</li><li><code>execution(* get(String, *))</code>：匹配名为get且第一个入参类型为<code>String</code>、第二个入参类型任意的方法</li><li><code>execution(* get(String, ..))</code>：匹配名为<code>get</code>且第一个入参为<code>String</code>类型的方法</li><li><code>execution(* get(Object+))</code>：匹配名为<code>get</code>且唯一入参是<code>Object</code>或其子类的方法</li></ul><h4 id="8-5-进阶"><a href="#8-5-进阶" class="headerlink" title="8.5 进阶"></a>8.5 进阶</h4><h5 id="8-5-1-逻辑运算符"><a href="#8-5-1-逻辑运算符" class="headerlink" title="8.5.1 逻辑运算符"></a>8.5.1 逻辑运算符</h5><ul><li>与<code>&amp;&amp;</code>，或<code>||</code>，非<code>!</code></li></ul><h5 id="8-5-2-切点复合运算"><a href="#8-5-2-切点复合运算" class="headerlink" title="8.5.2 切点复合运算"></a>8.5.2 切点复合运算</h5><ul><li>例如：<code>@After(&quot;within(com.data.*) &amp;&amp; execution(* handle(..))&quot;)</code></li></ul><h5 id="8-5-3-命名切点"><a href="#8-5-3-命名切点" class="headerlink" title="8.5.3 命名切点"></a>8.5.3 命名切点</h5><ul><li>使用<code>@Pointcut</code>命名切点</li><li>使用方法名作为切点的名称，方法的访问控制符控制切点的可用性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.data.*)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inPackage</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//别名为inPackage</span></span><br></pre></td></tr></table></figure><h5 id="8-5-4-增强织入的顺序"><a href="#8-5-4-增强织入的顺序" class="headerlink" title="8.5.4 增强织入的顺序"></a>8.5.4 增强织入的顺序</h5><ul><li>如果增强在同一个切面类中声明，则依照增强在切面类中定义的顺序织入</li><li>如果增强位于不同的增强类中，且都实现了<code>org.springframework.core.Ordered</code>接口，则由接口方法的顺序号决定（顺序号小的先织入）</li><li>如果增强位于不同的增强类中，且没有实现<code>org.springframework.core.Ordered</code>接口，织入顺序不确定</li></ul><h5 id="8-5-5-访问连接点信息"><a href="#8-5-5-访问连接点信息" class="headerlink" title="8.5.5 访问连接点信息"></a>8.5.5 访问连接点信息</h5><ul><li>AspectJ使用<code>org.aspectj.lang.JointPoint</code>接口表示目标类连接点对象。如果是环绕增强时，使用<code>org.aspectj.lang.ProceedingJointPoint</code>表示连接点对象，该类是<code>JointPoint</code>接口的子接口。任何一个增强方法都可以通过将第一个入参声明为<code>JointPoint</code>访问到连接点上下文的信息</li></ul><h5 id="8-5-6-绑定连接点方法入参"><a href="#8-5-6-绑定连接点方法入参" class="headerlink" title="8.5.6 绑定连接点方法入参"></a>8.5.6 绑定连接点方法入参</h5><ul><li><code>args()</code>用于绑定连接点方法的入参，<code>@annotation()</code>用于绑定连接点方法的注解对象，<code>@args()</code>用于绑定连接点方法的入参注解。下例表示方法入参为<code>(String, int, ..)</code>的方法匹配该切点，并将<code>name</code>和<code>age</code>两个参数绑定到切面方法的入参中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"args(name, age, ..)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindJointPointValues</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-5-7-绑定代理对象"><a href="#8-5-7-绑定代理对象" class="headerlink" title="8.5.7 绑定代理对象"></a>8.5.7 绑定代理对象</h5><ul><li>使用<code>this()</code>或<code>target()</code>可以绑定被代理对象的实例。下例表示代理对象为<code>User</code>类的所有方法匹配该切点，且代理对象绑定到<code>user</code>入参中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"this(user)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindProxy</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-5-8-绑定类注解对象"><a href="#8-5-8-绑定类注解对象" class="headerlink" title="8.5.8 绑定类注解对象"></a>8.5.8 绑定类注解对象</h5><ul><li><code>@within()</code>和<code>@target()</code>函数可以将目标类的注解对象绑定到增强方法中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"@within(a)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindAnnotation</span><span class="params">(Authority a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-5-9-绑定返回值"><a href="#8-5-9-绑定返回值" class="headerlink" title="8.5.9 绑定返回值"></a>8.5.9 绑定返回值</h5><ul><li>通过<code>returning</code>绑定连接点方法的返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(value=<span class="string">"target(com.data.Car)"</span>, returning=<span class="string">"rvl"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindReturningValue</span><span class="params">(<span class="keyword">int</span> rvl)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>rvl</code>的类型必须和连接点方法的返回值类型匹配</li></ul><h5 id="8-5-10-绑定抛出的异常"><a href="#8-5-10-绑定抛出的异常" class="headerlink" title="8.5.10 绑定抛出的异常"></a>8.5.10 绑定抛出的异常</h5><ul><li>使用<code>AfterThrowing</code>注解的<code>throwing</code>成员绑定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(value=<span class="string">"target(com.data.Car)"</span>, throwing=<span class="string">"iae"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindException</span><span class="params">(IllegalArgumentException iae)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring IoC</title>
      <link href="/2016/02/10/Spring%20IOC/"/>
      <url>/2016/02/10/Spring%20IOC/</url>
      <content type="html"><![CDATA[<h3 id="1-Spring的资源抽象接口"><a href="#1-Spring的资源抽象接口" class="headerlink" title="1. Spring的资源抽象接口"></a>1. Spring的资源抽象接口</h3><p>假如有一个文件位于Web应用的类路径下，用户可以通过以下方式对这个文件资源进行访问：</p><ul><li>通过<code>FileSystemResource</code>以文件系统绝对路径的方式进行访问；</li><li>通过<code>ClassPathResource</code>以类路径的方式进行访问；</li><li>通过<code>ServletContextResource</code>以相对于Web应用根目录的方式进行访问。</li></ul><a id="more"></a><h3 id="2-BeanFactory的类体系结构"><a href="#2-BeanFactory的类体系结构" class="headerlink" title="2. BeanFactory的类体系结构"></a>2. BeanFactory的类体系结构</h3><p><img src="http://dl.iteye.com/upload/picture/pic/78494/d13e3946-c5d2-352b-89d0-0ae1507b78f3.jpg" alt="image"></p><ul><li><code>BeanFactory</code>：位于类结构树的顶端，最主要的方法是<code>getBean(String beanName)</code>，从容器中返回特定类型的bean</li><li><code>ListableBeanFactory</code>：该接口定义了访问容器中Bean基本信息的若干方法</li><li><code>HierarchicalBeanFactory</code>：父子级联IoC容器的接口，子容器可以通过接口方法访问父容器</li><li><code>ConfigurableBeanFactory</code>：增强了IoC容器的可定制性</li><li><code>AutowireCapableBeanFactory</code>：定义了将容器中的bean按照某种规则进行自动装配的方法</li><li><code>SingletonBeanRegistry</code>：定义了允许在运行期向容器注册单实例bean的方法</li><li><code>BeanDefinitionRegistry</code>：每一个bean在容器中通过<code>BeanDefinition</code>对象表示，<code>BeanDefinitionRegistry</code>定义了向容器手工注册bean的方法</li><li>Spring在<code>DefaultSingletonBeanRegistry</code>类中提供了一个用于缓存单实例bean的缓存器，以<code>HashMap</code>实现，单实例的bean以<code>beanName</code>为key保存在这个<code>HashMap</code>中</li></ul><h3 id="3-ApplicationContext的类体系结构"><a href="#3-ApplicationContext的类体系结构" class="headerlink" title="3. ApplicationContext的类体系结构"></a>3. ApplicationContext的类体系结构</h3><p><img src="http://dl.iteye.com/upload/attachment/0071/0968/f885078e-bc34-385e-9d8d-0ee61eb15c11.jpg" alt="image"></p><ul><li><code>ApplicationEventPublisher</code>：让容器拥有发布应用上下文事件的功能，包括容器启动事件、关闭事件等。实现了<code>ApplicationListener</code>事件监听接口的Bean 可以接收到容器事件，并对事件进行响应处理。在<code>ApplicationContext</code>抽象实现类<code>AbstractApplicationContext</code>中，我们可以发现存在一个<code>ApplicationEventMulticaster</code>，它负责保存所有监听器，以便在容器产生上下文事件时通知这些事件监听者。</li><li><code>MessageSource</code>：为应用提供i18n国际化消息访问的功能；</li><li><code>ResourcePatternResolver</code>：所有<code>ApplicationContext</code>实现类都实现了类似于<code>PathMatchingResourcePatternResolver</code>的功能，可以通过带前缀的Ant风格的资源文件路径装载Spring的配置文件。</li><li><code>LifeCycle</code>：该接口是Spring 2.0加入的，该接口提供了<code>start()</code>和<code>stop()</code>两个方法，主要用于控制异步处理过程。在具体使用时，该接口同时被<code>ApplicationContext</code>实现及具体Bean实现，<code>ApplicationContext</code>会将<code>start/stop</code>的信息传递给容器中所有实现了该接口的Bean，以达到管理和控制JMX、任务调度等目的。</li><li><code>ConfigurableApplicationContext</code>扩展于<code>ApplicationContext</code>，它新增加了两个主要的方法：<code>refresh()</code>和<code>close()</code>，让<code>ApplicationContext</code>具有启动、刷新和关闭应用上下文的能力。在应用上下文关闭的情况下调用<code>refresh()</code>即可启动应用上下文，在已经启动的状态下，调用<code>refresh()</code>则清除缓存并重新装载配置信息，而调用<code>close()</code>则可关闭应用上下文。</li></ul><h3 id="4-WebApplicantContext体系结构"><a href="#4-WebApplicantContext体系结构" class="headerlink" title="4. WebApplicantContext体系结构"></a>4. WebApplicantContext体系结构</h3><ul><li>它允许从相对于Web根目录的路径中加载配置文件完成初始化工作。从<code>WebApplicationContext</code>中可以获取<code>ServletContext</code>引用，整个Web应用上下文对象将作为属性放置在<code>ServletContext</code>中，以便Web应用环境可以访问spring上下文。</li><li><code>WebApplicationContext</code>扩展了<code>ApplicationContext</code>，<code>WebApplicationContext</code>定义了一个常量<code>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</code>，在上下文启动时，我们可以直接通过下面的语句从web容器中获取<code>WebApplicationContext</code>:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext wac=(WebApplicationContext)servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</span><br></pre></td></tr></table></figure><h3 id="5-BeanFactory中Bean的生命周期"><a href="#5-BeanFactory中Bean的生命周期" class="headerlink" title="5. BeanFactory中Bean的生命周期"></a>5. BeanFactory中Bean的生命周期</h3><h4 id="5-1-Bean生命周期"><a href="#5-1-Bean生命周期" class="headerlink" title="5.1 Bean生命周期"></a>5.1 Bean生命周期</h4><ol><li>如果容器注册<code>InstantiationAwareBeanPostProcessor</code>接口，调用<code>postProcessBeforeInstantiation</code>方法</li><li>Bean的实例化(调用默认构造器)</li><li>如果容器注册<code>InstantiationAwareBeanPostProcessor</code>接口，调用<code>postProcessAfterInstantiation</code>方法</li><li>如果容器注册<code>InstantiationAwareBeanPostProcessor</code>接口，调用<code>postProcessPropertyValues</code>方法</li><li>根据配置设置属性值</li><li>如果Bean实现了<code>BeanNameAware</code>接口，调用<code>BeanNameAware</code>接口的<code>setBeanName</code>方法</li><li>如果Bean实现了<code>BeanFactoryAware</code>接口，调用<code>BeanFactoryAware</code>接口的<code>setBeanFactory</code>方法</li><li>如果容器注册了<code>BeanPostProcessor</code>接口，调用<code>BeanPostProcessor</code>接口的<code>postProcessBeforeInitialization</code>方法</li><li>如果Bean实现了<code>InitializingBean</code>接口，调用<code>InitializingBean</code>接口的<code>afterPropertiesSet</code>方法</li><li>通过<code>init-method</code>属性配置的初始方法</li><li>如果容器注册了<code>BeanPostProcessor</code>接口，调用<code>BeanPostProcessor</code>接口的<code>postProcessAfterInitialization</code>方法</li><li>如果是单例模式，将Bean放入缓存池中；容器销毁时，调用<code>DisposableBean的destroy</code>方法；最后调用<code>destroy-method</code>方法</li><li>如果是多例模式，将Bean交给调用者。</li></ol><h4 id="5-2-初始化过程中的方法分类"><a href="#5-2-初始化过程中的方法分类" class="headerlink" title="5.2 初始化过程中的方法分类"></a>5.2 初始化过程中的方法分类</h4><ul><li>bean自身的方法：如调用bean构造函数实例化bean，调用<code>Setter</code>设置bean的属性值，以及通过<code>&lt;bean&gt;</code>的<code>init-method</code>和<code>destory-method</code>所指定的方法；</li><li>bean级生命周期接口方法：如<code>BeanNameAware</code>、<code>BeanFactoryAware</code>、<code>InitializingBean</code>和<code>DisposableBean</code>，这些接口方法由bean类直接实现；</li><li>容器级生命周期接口方法：如<code>InstantiationAwareBeanPostProcessor</code>和 <code>BeanPostProcessor</code>这两个接口实现，一般称它们的实现类为“后处理器”。</li></ul><h4 id="5-3-说明"><a href="#5-3-说明" class="headerlink" title="5.3 说明"></a>5.3 说明</h4><ul><li>Spring的AOP等功能即通过<code>BeanPostProcessor</code>实现</li><li>如果<code>&lt;bean&gt;</code>通过<code>init-method</code>属性定义了初始化方法，将执行这个方法</li><li>如果bean的作用范围为<code>scope=&quot;prototype&quot;</code>，将bean返回给调用者之后，调用者负责bean的后续生命的管理，Spring不再管理这个bean的生命周期；如果<code>scope=&quot;singleton&quot;</code>，则将bean放入到Spring IoC容器的缓存池中，并将bean的引用返回给调用者，Spring继续管理这些bean的后续生命周期</li><li>对于单例的bean，当容器关闭时，将触发Spring对bean的后续生命周期的管理工作。如果bean实现了<code>DisposableBean</code>接口，则将调用接口的<code>destroy()</code>方法</li><li>对于单例的bean，如果通过<code>destroy-method</code>指定了bean的销毁方法，Spring将执行这个方法</li><li>后处理器的实际调用顺序和注册顺序无关，在具有多个后处理器的情况下，必须通过实现<code>org.springframework.core.Ordered</code>接口确定调用顺序</li></ul><h4 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4 测试"></a>5.4 测试</h4><ul><li><code>applicationContext.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.data.Car"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:color</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">"init"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"destroy2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Car</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">BeanFactoryAware</span>,</span></span><br><span class="line"><span class="class">    <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"construct car"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        System.out.println(<span class="string">"set color="</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after properties set method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"my destroy method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set bean factory"</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set bean name"</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeanName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MyBeanPostProcessor</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.beanfactory;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"construct MyBeanPostProcessor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post process before instantiation"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post process after instantiation"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post process property values"</span>);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post process before initialization"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post process after initialization"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TestBeanFactory</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanfactory.MyBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> com.data.Car;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resource res = <span class="keyword">new</span> ClassPathResource(</span><br><span class="line">                <span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">        XmlBeanFactory bf = <span class="keyword">new</span> XmlBeanFactory(res);</span><br><span class="line">        bf.addBeanPostProcessor(<span class="keyword">new</span> MyBeanPostProcessor());</span><br><span class="line">        System.out.println(<span class="string">"bean factory initialization done"</span>);</span><br><span class="line">        Car car1 = bf.getBean(<span class="string">"car"</span>, Car.class);</span><br><span class="line">        Car car2 = bf.getBean(<span class="string">"car"</span>, Car.class);</span><br><span class="line">        System.out.println(<span class="string">"(car1 == car2) = "</span> + (car1 == car2));</span><br><span class="line">        System.out.println(<span class="string">"get color="</span> + car1.getColor());</span><br><span class="line">        bf.destroySingletons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">二月 09, 2017 10:58:59 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [applicationContext.xml]</span><br><span class="line">construct MyBeanPostProcessor</span><br><span class="line">bean factory initialization done</span><br><span class="line">post process before instantiation</span><br><span class="line">construct car</span><br><span class="line">post process after instantiation</span><br><span class="line">post process property values</span><br><span class="line">set color=color</span><br><span class="line">set bean name</span><br><span class="line">set bean factory</span><br><span class="line">post process before initialization</span><br><span class="line">after properties set method</span><br><span class="line">init method</span><br><span class="line">post process after initialization</span><br><span class="line">(car1 == car2) = true</span><br><span class="line">get color=color</span><br><span class="line">destroy method</span><br><span class="line">my destroy method</span><br></pre></td></tr></table></figure><h3 id="6-ApplicationContext中的Bean生命周期"><a href="#6-ApplicationContext中的Bean生命周期" class="headerlink" title="6. ApplicationContext中的Bean生命周期"></a>6. ApplicationContext中的Bean生命周期</h3><h4 id="6-1-流程图"><a href="#6-1-流程图" class="headerlink" title="6.1 流程图"></a>6.1 流程图</h4><p><img src="http://img.blog.csdn.net/20140420140946843" alt="image"></p><h4 id="6-2-说明"><a href="#6-2-说明" class="headerlink" title="6.2 说明"></a>6.2 说明</h4><ul><li>如果bean实现了<code>org.springframework.context.ApplicationContextAware</code>接口，会增加一个调用该接口方法<code>setApplicationContext()</code>的步骤</li><li>如果配置文件中声明了工厂后处理器接口<code>BeanFactoryPostProcessor</code>的实现类，则应用上下文在加载配置文件之后、初始化bean实例之前将调用这些<code>BeanFactoryPostProcessor</code>对配置信息进行加工处理</li><li><code>ApplicationContext</code>和<code>BeanFactory</code>的不同之处在于：前者会利用Java反射机制自动识别出配置文件中定义的<code>BeanPostProcessor</code>、<code>InstantiationAwareBeanPostProcessor</code>和<code>BeanFactoryPostProcessor</code>，并自动将它们注册到应用上下文中；而后者需要在代码中通过手工调用<code>addBeanPostProcessor()</code>方法进行注册</li><li>对bean的初始化，<code>BeanFactory</code>发生在第一次调用bean时，而<code>ApplicationContext</code>发生在初始化容器时</li></ul><h4 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3 测试"></a>6.3 测试</h4><ul><li><code>MyBeanPostProcessor</code>同上</li><li><code>Car</code>增加对<code>ApplicationContextAware</code>接口的实现，并添加<code>@PostConstruct</code>和<code>@PreDestroy</code>的注解方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">BeanFactoryAware</span>,</span></span><br><span class="line"><span class="class">    <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"construct car"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after properties set method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"my destroy method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set bean factory"</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set bean name"</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeanName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post construct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pre destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set application context"</span>);</span><br><span class="line">        <span class="keyword">this</span>.ctx = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MyBeanFactoryPostProcessor</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.beanfactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBeanFactoryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"construct MyBeanFactoryPostProcessor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post process bean factory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于Java类的Spring配置：<code>AnnotationBeans</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.beanfactory.MyBeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> com.beanfactory.MyBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> com.data.Car;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationBeans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"car"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"destroy2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.setColor(<span class="string">"color"</span>);</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBeanPostProcessor <span class="title">getMyBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myBeanFactoryPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBeanFactoryPostProcessor <span class="title">getMyBeanFactoryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBeanFactoryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TestApplicationContext</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.data.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*对于以xml形式初始化的ctx，也可以用ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="comment">        或者FileSystemXmlApplicationContext*/</span></span><br><span class="line">        AnnotationConfigApplicationContext ctx =</span><br><span class="line">                <span class="keyword">new</span> AnnotationConfigApplicationContext(</span><br><span class="line">                        AnnotationBeans.class);</span><br><span class="line">        System.out.println(<span class="string">"application context done"</span>);</span><br><span class="line">        Car car = ctx.getBean(<span class="string">"car"</span>, Car.class);</span><br><span class="line">        System.out.println(<span class="string">"get color="</span> + car.getColor());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">二月 09, 2017 11:55:25 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@306a30c7: startup date [Thu Feb 09 23:55:25 CST 2017]; root of context hierarchy</span><br><span class="line">二月 09, 2017 11:55:25 下午 org.springframework.context.annotation.ConfigurationClassEnhancer intercept</span><br><span class="line">警告: @Bean method AnnotationBeans.getMyBeanFactoryPostProcessor is non-static and returns an object assignable to Spring&apos;s BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as @Autowired, @Resource and @PostConstruct within the method&apos;s declaring @Configuration class. Add the &apos;static&apos; modifier to this method to avoid these container lifecycle issues; see @Bean javadoc for complete details.</span><br><span class="line">construct MyBeanFactoryPostProcessor</span><br><span class="line">post process bean factory</span><br><span class="line">construct MyBeanPostProcessor</span><br><span class="line">post process before instantiation</span><br><span class="line">post process after instantiation</span><br><span class="line">post process property values</span><br><span class="line">post process before initialization</span><br><span class="line">post process after initialization</span><br><span class="line">post process before instantiation</span><br><span class="line">post process after instantiation</span><br><span class="line">post process property values</span><br><span class="line">post process before initialization</span><br><span class="line">post process after initialization</span><br><span class="line">post process before instantiation</span><br><span class="line">construct car</span><br><span class="line">post process after instantiation</span><br><span class="line">post process property values</span><br><span class="line">set bean name</span><br><span class="line">set bean factory</span><br><span class="line">set application context</span><br><span class="line">post process before initialization</span><br><span class="line">post construct</span><br><span class="line">after properties set method</span><br><span class="line">init method</span><br><span class="line">post process after initialization</span><br><span class="line">application context done</span><br><span class="line">get color=color</span><br><span class="line">二月 09, 2017 11:55:25 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@306a30c7: startup date [Thu Feb 09 23:55:25 CST 2017]; root of context hierarchy</span><br><span class="line">pre destroy</span><br><span class="line">destroy method</span><br><span class="line">my destroy method</span><br></pre></td></tr></table></figure><h3 id="7-容器内部工作机制"><a href="#7-容器内部工作机制" class="headerlink" title="7. 容器内部工作机制"></a>7. 容器内部工作机制</h3><h4 id="7-1-启动源码"><a href="#7-1-启动源码" class="headerlink" title="7.1 启动源码"></a>7.1 启动源码</h4><p>Spring的<code>AbstractApplicationContext的refresh()</code>方法定义了Spring容器在加载配置文件后的各项处理工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">            <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">        <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-容器启动流程"><a href="#7-2-容器启动流程" class="headerlink" title="7.2 容器启动流程"></a>7.2 容器启动流程</h4><p><code>ContextLoaderListener</code>通过调用继承自<code>ContextLoader</code>的<code>initWebApplicationContext</code>方法实例化SpringIoC容器。在实例化Spring IoC容器的过程中，最主要的两个方法是<code>createWebApplicationContext</code>和<code>configureAndRefreshWebApplicationContext方</code>法。<code>createWebApplicationContext</code>方法用于返回<code>XmlWebApplicationContext</code>实例，即Web环境下的SpringIoC容器。<code>configureAndRefreshWebApplicationContext</code>用于配<code>XmlWebApplicationContext</code>，读取<code>web.xml</code>中通过<code>contextConfigLocation</code>标签指定的XML文件，通过调用<code>refresh</code>来调用<code>AbstractApplicationContext</code>中的<code>refresh</code>初始化。</p><ol><li><code>BeanFactory</code>实例化XML文件中配置的bean，Spring将配置文件的bean的信息解析成为一个个的<code>BeanDefinition</code>对象并装入到容器的Bean定义注册表，但此时Bean还未初始化；<code>obtainFreshBeanFactory()</code>会调用自身的<code>refreshBeanFactory()</code>，而<code>refreshBeanFactory()</code>方法由子类<code>AbstractRefreshableApplicationContext</code>实现，该方法返回了一个创建的<code>DefaultListableBeanFactory</code>对象，这个对象就是由<code>ApplicationContext</code>管理的<code>BeanFactory</code>容器对象；</li><li>调用工厂后处理器：根据反射机制从<code>BeanDefinitionRegistry</code>中找出所有<code>BeanFactoryPostProcessor</code>类型的Bean，并调用其<code>postProcessBeanFactory()</code>接口方法。经过第一步加载配置文件，已经把配置文件中定义的所有bean装载到<code>BeanDefinitionRegistry</code>这个<code>Beanfactory</code>中，对于<code>ApplicationContext</code>应用来说这个<code>BeanDefinitionRegistry</code>类型的<code>BeanFactory</code>就是Spring默认的<code>DefaultListableBeanFactory</code></li><li>注册Bean后处理器：根据反射机制从<code>BeanDefinitionRegistry</code>中找出所有<code>BeanPostProcessor</code>类型的Bean，并将它们注册到容器Bean后处理器的注册表中；</li><li>初始化消息源：初始化容器的国际化信息资源；</li><li>初始化应用上下文事件广播器；</li><li>初始化其他特殊的Bean；</li><li>注册事件监听器；</li><li>初始化singleton的Bean：实例化所有singleton的Bean，并将它们放入Spring容器的缓存中；</li><li>发布上下文刷新事件：在此处时容器已经启动完成，发布容器<code>refresh</code>事件创建上下文刷新事件，事件广播器负责将些事件广播到每个注册的事件监听器中。</li></ol><h4 id="7-3-Bean加载流程"><a href="#7-3-Bean加载流程" class="headerlink" title="7.3 Bean加载流程"></a>7.3 Bean加载流程</h4><ol><li><code>ResourceLoader</code>从存储介质中加载Spring配置文件，并使用<code>Resource</code>表示这个配置文件的资源；  </li><li><code>BeanDefinitionReader</code>读取<code>Resource</code>所指向的配置文件资源，然后解析配置文件。配置文件中每一个<code>&lt;bean&gt;</code>解析成一个<code>BeanDefinition</code>对象，并保存到<code>BeanDefinitionRegistry</code>中；  </li><li>容器扫描<code>BeanDefinitionRegistry</code>中的<code>BeanDefinition</code>，使用Java的反射机制自动识别出Bean工厂后处理器（实现<code>BeanFactoryPostProcessor</code>接口）的Bean，然后调用这些Bean工厂后处理器对<code>BeanDefinitionRegistry</code>中的<code>BeanDefinition</code>进行加工处理。主要完成以下两项工作：  <ul><li>对使用到占位符的<code>&lt;bean&gt;</code>元素标签进行解析，得到最终的配置值，这意味对一些半成品式的<code>BeanDefinition</code>对象进行加工处理并得到成品的<code>BeanDefinition</code>对象；  </li><li>对<code>BeanDefinitionRegistry</code>中的<code>BeanDefinition</code>进行扫描，通过Java反射机制找出所有属性编辑器的Bean（实现<code>java.beans.PropertyEditor</code>接口的Bean），并自动将它们注册到Spring容器的属性编辑器注册表中（<code>PropertyEditorRegistry</code>）；  </li></ul></li><li>Spring容器从<code>BeanDefinitionRegistry</code>中取出加工后的<code>BeanDefinition</code>，并调用<code>InstantiationStrategy</code>着手进行Bean实例化的工作；  </li><li>在实例化Bean时，Spring容器使用<code>BeanWrapper</code>对Bean进行封装，<code>BeanWrapper</code>提供了很多以Java反射机制操作Bean的方法，它将结合该Bean的<code>BeanDefinition</code>以及容器中属性编辑器，完成Bean属性的设置工作；  </li><li>利用容器中注册的Bean后处理器（实现<code>BeanPostProcessor</code>接口的Bean）对已经完成属性设置工作的Bean进行后续加工，直接装配出一个准备就绪的Bean。</li></ol><h3 id="8-Spring事件"><a href="#8-Spring事件" class="headerlink" title="8. Spring事件"></a>8. Spring事件</h3><p>Spring事件体系包括三个组件：事件，事件监听器，事件广播器。<br><img src="http://my.csdn.net/uploads/201204/14/1334392012_7683.JPG" alt="image"></p><ul><li>事件：<code>ApplicationEvent</code></li><li>事件监听器：<code>ApplicationListener</code>，对监听到的事件进行处理。</li><li>事件广播器：<code>ApplicationEventMulticaster</code>，将Spring publish的事件广播给所有的监听器。Spring在<code>ApplicationContext</code>接口的抽象实现类<code>AbstractApplicationContext</code>中完成了事件体系的搭建。</li><li><code>AbstractApplicationContext</code>拥有一个<code>applicationEventMulticaster</code>成员变量，<code>applicationEventMulticaster</code>提供了容器监听器的注册表。</li></ul><h4 id="8-1-事件广播器的初始化"><a href="#8-1-事件广播器的初始化" class="headerlink" title="8.1 事件广播器的初始化"></a>8.1 事件广播器的初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initApplicationEventMulticaster</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME )) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.applicationEventMulticaster = (ApplicationEventMulticaster)  </span><br><span class="line">            getBean( APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class );  </span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">"Using ApplicationEventMulticaster ["</span> + <span class="keyword">this</span>. applicationEventMulticaster + <span class="string">"]"</span> );</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();  </span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">"Unable to locate ApplicationEventMulticaster with name '"</span>+  APPLICATION_EVENT_MULTICASTER_BEAN_NAME +  </span><br><span class="line">                        <span class="string">"': using default ["</span> + <span class="keyword">this</span> .applicationEventMulticaster + <span class="string">"]"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>用户可以在配置文件中为容器定义一个自定义的事件广播器，只要实现<code>ApplicationEventMulticaster</code>就可以了，Spring会通过反射的机制将其注册成容器的事件广播器，如果没有找到配置的外部事件广播器，Spring自动使用 <code>SimpleApplicationEventMulticaster</code>作为事件广播器。</p><h4 id="8-2-注册事件监听器"><a href="#8-2-注册事件监听器" class="headerlink" title="8.2 注册事件监听器"></a>8.2 注册事件监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerListeners</span> <span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let post-processors apply to them!</span></span><br><span class="line">    Collection listeners = getBeansOfType(ApplicationListener.class,<span class="keyword">true</span>,<span class="keyword">false</span>).values();</span><br><span class="line">    <span class="keyword">for</span> (Iterator it = listeners.iterator(); it.hasNext();) &#123;</span><br><span class="line">        addListener((ApplicationListener) it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(ApplicationListener listener)</span> </span>&#123;</span><br><span class="line">    getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring根据反射机制，使用<code>ListableBeanFactory</code>的<code>getBeansOfType</code>方法，从<code>BeanDefinitionRegistry</code>中找出所有实现 <code>org.springframework.context.ApplicationListener</code>的Bean，将它们注册为容器的事件监听器，实际的操作就是将其添加到事件广播器所提供的监听器注册表中。</p><h4 id="8-3-发布事件"><a href="#8-3-发布事件" class="headerlink" title="8.3 发布事件"></a>8.3 发布事件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(event, <span class="string">"Event must not be null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Publishing event in context ["</span></span><br><span class="line">                      + getDisplayName() + <span class="string">"]: "</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">    getApplicationEventMulticaster().multicastEvent(event);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>AbstractApplicationContext</code>的<code>publishEvent</code>方法中， Spring委托<code>ApplicationEventMulticaster</code>将事件通知给所有的事件监听器</p><h4 id="8-4-Spring默认的事件广播器SimpleApplicationEventMulticaster"><a href="#8-4-Spring默认的事件广播器SimpleApplicationEventMulticaster" class="headerlink" title="8.4 Spring默认的事件广播器SimpleApplicationEventMulticaster"></a>8.4 Spring默认的事件广播器SimpleApplicationEventMulticaster</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">( <span class="keyword">final</span> ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Iterator it = getApplicationListeners().iterator(); it.hasNext();) &#123;</span><br><span class="line">        <span class="keyword">final</span> ApplicationListener listener = (ApplicationListener) it.next();</span><br><span class="line">        getTaskExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                listener.onApplicationEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>遍历注册的每个监听器，并启动来调用每个监听器的<code>onApplicationEvent</code>方法。<br>由于<code>SimpleApplicationEventMulticaster</code>的<code>taskExecutor</code>的实现类是<code>SyncTaskExecutor</code>，因此，事件监听器对事件的处理，是同步进行的。</p><h4 id="8-5-举例"><a href="#8-5-举例" class="headerlink" title="8.5 举例"></a>8.5 举例</h4><ul><li><code>springEvent.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.event"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>MockEvent</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ApplicationContextEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MockEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MockEventListener</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MockEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MockEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mock event received"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MockEventPublisher</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockEventPublisher</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ctx = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"publish event"</span>);</span><br><span class="line">        MockEvent event = <span class="keyword">new</span> MockEvent(<span class="keyword">this</span>.ctx);</span><br><span class="line">        ctx.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MockEventTest</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockEventTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="string">"/springEvent.xml"</span>);</span><br><span class="line">        MockEventPublisher publisher = ctx.getBean(MockEventPublisher.class);</span><br><span class="line">        publisher.publishEvent();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二月 09, 2017 9:57:43 下午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 21:57:43 CST 2017]; root of context hierarchy</span><br><span class="line">二月 09, 2017 9:57:43 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [springEvent.xml]</span><br><span class="line">publish event</span><br><span class="line">mock event received</span><br><span class="line">二月 09, 2017 9:57:44 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@69d0a921: startup date [Thu Feb 09 21:57:43 CST 2017]; root of context hierarchy</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
